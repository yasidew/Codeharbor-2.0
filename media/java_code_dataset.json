[
    {
        "file_name": "EmployeeServiceImp1.java",
        "java_code": "package com.ishan.spa_techgig.service;\r\nimport java.util.*;\r\n\r\nimport com.ishan.spa_techgig.model.Employee;\r\nimport com.ishan.spa_techgig.repository.EmployeeRepository;\r\nimport org.springframework.beans.factory.annotation.*;\r\nimport org.springframework.data.domain.*;\r\nimport org.springframework.stereotype.*;\r\n\r\n//Service to fetch data and display including sorting function\r\n@Service\r\npublic class EmployeeServiceImp1 implements EmployeeService {\r\n    @Autowired\r\n    private EmployeeRepository employeeRepository;\r\n    @Override\r\n    public List<Employee> getAllEmployees() {\r\n        // TODO Auto-generated method stub\r\n        return employeeRepository.findAll();\r\n    }\r\n\r\n    @Override\r\n    public void saveEmployee(Employee employee) {\r\n        // TODO Auto-generated method stub\r\n        this.employeeRepository.save(employee);\r\n\r\n    }\r\n\r\n    @Override\r\n    public Employee getEmployeeById(Long id) {\r\n        // TODO Auto-generated method stub\r\n        Optional<Employee> optional = employeeRepository.findById(id);\r\n        Employee employee = null;\r\n        if (optional.isPresent()) {\r\n            employee = optional.get();\r\n        } else {\r\n            throw new RuntimeException(\"Employee not found by id: \" + id);\r\n        }\r\n        return employee;\r\n    }\r\n\r\n    @Override\r\n    public void deleteEmployeeById(Long id) {\r\n        // TODO Auto-generated method stub\r\n        this.employeeRepository.deleteById(id);\r\n    }\r\n\r\n    @Override\r\n    public Page<Employee> findPaginated(int pageNo, int pageSize, String sortField, String sortDirection) {\r\n        // TODO Auto-generated method stub\r\n        Sort sort = sortDirection.equalsIgnoreCase(Sort.Direction.ASC.name()) ? Sort.by(sortField).ascending()\r\n                : Sort.by(sortField).descending();\r\n        Pageable pageable = PageRequest.of(pageNo - 1, pageSize, sort);\r\n        return this.employeeRepository.findAll(pageable);\r\n    }\r\n\r\n}"
    },
    {
        "file_name": "10.ExceptionExamples.java",
        "java_code": "/*Question-\nCreate a program to take input from user as 1 /2 /3, if\nuser enters 1, display info about Arithmetic Exception, 2\nand 3 for Null pointer exception and Array index out of\nbound exception, respectively. Use, Try, Catch block for\neach exception individually.*/\n\n//Code-\nimport java.util.Scanner;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc=new Scanner(System.in);\n    String s=null;\n    int i=0;\n    while(i<3) {\n      System.out.println(\"Enter Value 1/2/3: \");\n      int n = sc.nextInt();\n      switch (n) {\n          //Arithmetic Exception\n        case 1:\n          try {\n            int data = 5 / 0;\n          }\n          catch (ArithmeticException e) {\n            System.out.println(e);\n          }\n          System.out.println(\"rest of the code\");\n          break;\n        case 2:\n          //Nullpointer Exception\n          try {\n            int m = s.length();\n          } \n          catch (NullPointerException f) {\n            System.out.println(f);\n          }\n          System.out.println(\"rest of code\");\n          break;\n        case 3:\n          try {\n            int arr[] = {1, 3, 5, 7};\n            System.out.println(arr[10]);\n          } catch (ArrayIndexOutOfBoundsException g) {\n            System.out.println(g);\n          }\n          System.out.println(\"rest of the code\");\n      }\n      i++;\n    }\n  }\n}\n"
    },
    {
        "file_name": "10.ExceptionExamples.java",
        "java_code": "/*Question-\nCreate a program to take input from user as 1 /2 /3, if\nuser enters 1, display info about Arithmetic Exception, 2\nand 3 for Null pointer exception and Array index out of\nbound exception, respectively. Use, Try, Catch block for\neach exception individually.*/\n\n//Code-\nimport java.util.Scanner;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc=new Scanner(System.in);\n    String s=null;\n    int i=0;\n    while(i<3) {\n      System.out.println(\"Enter Value 1/2/3: \");\n      int n = sc.nextInt();\n      switch (n) {\n          //Arithmetic Exception\n        case 1:\n          try {\n            int data = 5 / 0;\n          } catch (ArithmeticException e) {\n            System.out.println(e);\n          }\n          System.out.println(\"rest of the code\");\n          break;\n        case 2:\n          //Nullpointer Exception\n          try {\n            int m = s.length();\n          } catch (NullPointerException f) {\n            System.out.println(f);\n          }\n          System.out.println(\"rest of code\");\n          break;\n        case 3:\n          try {\n            int arr[] = {1, 3, 5, 7};\n            System.out.println(arr[10]);\n          } catch (ArrayIndexOutOfBoundsException g) {\n            System.out.println(g);\n          }\n          System.out.println(\"rest of the code\");\n      }\n      i++;\n    }\n  }\n}\n"
    },
    {
        "file_name": "10.ExceptionExamples.java",
        "java_code": "/*Question-\nCreate a program to take input from user as 1 /2 /3, if\nuser enters 1, display info about Arithmetic Exception, 2\nand 3 for Null pointer exception and Array index out of\nbound exception, respectively. Use, Try, Catch block for\neach exception individually.*/\n\n//Code-\nimport java.util.Scanner;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc=new Scanner(System.in);\n    String s=null;\n    int i=0;\n    while(i<3) {\n      System.out.println(\"Enter Value 1/2/3: \");\n      int n = sc.nextInt();\n      switch (n) {\n          //Arithmetic Exception\n        case 1:\n          try {\n            int data = 5 / 0;\n          } \n          catch (ArithmeticException e) {\n            System.out.println(e);\n          }\n          System.out.println(\"rest of the code\");\n          break;\n        case 2:\n          //Nullpointer Exception\n          try {\n            int m = s.length();\n          } \n          catch (NullPointerException f) {\n            System.out.println(f);\n          }\n          System.out.println(\"rest of code\");\n          break;\n        case 3:\n          try {\n            int arr[] = {1, 3, 5, 7};\n            System.out.println(arr[10]);\n          } \n          catch (ArrayIndexOutOfBoundsException g) {\n            System.out.println(g);\n          }\n          System.out.println(\"rest of the code\");\n      }\n      i++;\n    }\n  }\n}\n"
    },
    {
        "file_name": "10.ExceptionExamples.java",
        "java_code": "\nimport java.util.Scanner;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc=new Scanner(System.in);\n    String s=null;\n    int i=0;\n    while(i<3) {\n      System.out.println(\"Enter Value 1/2/3: \");\n      int n = sc.nextInt();\n      switch (n) {\n          //Arithmetic Exception\n        case 1:\n          try {\n            int data = 5 / 0;\n          } \n          catch (ArithmeticException e) {\n            System.out.println(e);\n          }\n          System.out.println(\"rest of the code\");\n          break;\n        case 2:\n          //Nullpointer Exception\n          try {\n            int m = s.length();\n          } \n          catch (NullPointerException f) {\n            System.out.println(f);\n          }\n          System.out.println(\"rest of code\");\n          break;\n        case 3:\n          try {\n            int arr[] = {1, 3, 5, 7};\n            System.out.println(arr[10]);\n          } \n          catch (ArrayIndexOutOfBoundsException g) {\n            System.out.println(g);\n          }\n          System.out.println(\"rest of the code\");\n      }\n      i++;\n    }\n  }\n}\n"
    },
    {
        "file_name": "2.BMIcalculator.java",
        "java_code": "//Question - BMI calculator using Java \n\n//Code - \n// Calculate BMI using Math function in Java\n// Find BMI of a person by getting weight and\n//height in kg and cm respectively from user. [Formula BMI = kg/m2]\n\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        \n        // Scanner function \n        Scanner test=new Scanner(System.in);\n        System.out.println(\"Enter your weight in kg:\");\n        \n        float weight=test.nextFloat(); // Input weight\n        System.out.println(\"Enter your height in cm:\");\n        \n        float height=test.nextFloat(); // Input height\n        System.out.println(\"Your weight is \"+weight+\" kg\");\n        \n        float height_m=height/100; // Convert height in meter\n        System.out.println(\"Your height is in meter is : \"+height_m+\" m\");\n       \n        double m=Math.pow(height_m,height_m); // Applying formula\n        double BMI=weight/m;\n        \n        //Output BMI \n        System.out.println(\"Your BMI is \"+BMI);\n    }\n}\n"
    },
    {
        "file_name": "3.Vowelgram.java",
        "java_code": "//Question - Vowelgram program using Java\n\n//Code -\nimport java.util.Scanner;\n\npublic class vowelgram {\n\n    public static void main(String[] args) {\n        vowelgram.check();\n    }\n    static void check(){\n        int a = 0,e=0,i=0,o=0,u=0;\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter string:\");\n        String sen = sc.nextLine();\n        sen = sen.toLowerCase();\n        char ch = 0;\n        for (int j = 0; j < sen.length(); ++j) {\n            ch = sen.charAt(j);\n\n            switch (ch) {\n                case 'a':\n                    a = a + 1;\n                    break;\n                case 'e':\n                    e = e + 1;\n                    break;\n                case 'i':\n                    i = i + 1;\n                    break;\n                case 'o':\n                    o = o + 1;\n                    break;\n                case 'u':\n                    u = u + 1;\n                    break;\n            }\n        }\n            if(a>=1 && e>=1 && i>=1 && o>=1 && u>=1){\n                System.out.println(\"Sentence is Vowelgram\");\n            }\n            else{\n                System.out.println(\"Sentence is Not vowelgram\");\n            }\n        }\n    }\n"
    },
    {
        "file_name": "4.Hostel_registration.java",
        "java_code": "package Reg;\n\n//Hostel Class\nclass Hostel implements Serializable {\n    String BlockName;\n    room r[] = new room[2];\n    static int booking;\n\n    Hostel(String BlockName, int n) {\n        this.BlockName = BlockName;\n        for (int i = 0; i < n; i++) {\n            r[i] = new room();\n        }\n        r[0] = new room(101, 2);\n        r[1] = new room(102, 2);\n    }\n\n    synchronized int Book(student[] sortedCGPA) throws InterruptedException {\n        for (student sortedCGPA1 : sortedCGPA) {\n            if (sortedCGPA1.allocatedroom == 0) {\n                for (room r1 : r) {\n                    if ((sortedCGPA1.prefroom == r1.roomno) && (r1.allotedno < r1.Size)) {\n                        sortedCGPA1.allocatedroom = sortedCGPA1.prefroom;\n                        r1.allotedno = r1.allotedno + 1;\n                        booking=booking+1;\n                        if(booking==1){\n                            wait(); }}\n                        if(booking>1&&booking<sortedCGPA.length-2){\n                            notifyAll();\n                            wait(); }}\n                        for (student o1:sortedCGPA){\n                            System.out.println(\"Details: \"+\" \"+o1.Regno+\" \"+o1.Name+\" \"+o1.CGPA+\" \"+o1.prefroom);\n                        }\n                    }\n                }\n                if(booking==sortedCGPA.length-1){\n                    return 1;\n                }\n                return 0;\n            }\n        }\n"
    },
    {
        "file_name": "11.Throwexample.java",
        "java_code": "\nimport java.util.Scanner;\n\npublic class throwexample {\n  public static void main(String[] args){\n    Scanner sc = new Scanner(System.in);\n    System.out.println(\"Enter a number :\");\n    try\n    {\n      int num = sc.nextInt();\n      try\n      {\n        if(num < 0)\n        {\n          throw new UserDefinedException(\"Number is negative\");\n        }\n        else if(num >= 0 && num <= 25)\n        {\n          throw new UserDefinedException(\"Number is in the range of 0-25\");\n        }\n      }\n      catch (UserDefinedException e){System.out.println(e);}\n      finally\n      {\n        System.out.println(\"The number entered by the user is: \" + num); //this code is always executed\n      }\n    }\n    catch (Exception e)\n    {\n      System.out.println(e);\n    }\n  }\n}\n"
    },
    {
        "file_name": "13.Rotiproblem.java",
        "java_code": "\n//MOM Class\npackage pack1;\nimport pack1.stackvessel;\npublic class MOM implements Runnable {\n  private final stackvessel<Integer> SizedStack;\n  public MOM(stackvessel<Integer> mySizedStack) {\n    this.SizedStack = mySizedStack;\n  }\n  @Override\n  public void run() {\n    try {\n      for(int i = 1 ; i < 11 ; i++) {\n        insertAnElement(i);\n      }\n    } catch (InterruptedException ex) {System.out.println(ex);}\n  }\n  public void insertAnElement(int number) throws InterruptedException\n  {\n    while(SizedStack.size() == 5) {\n      synchronized (SizedStack) {\n        System.out.println(\"Vessel is full. MOM is waiting...\");\n        SizedStack.wait();\n      }\n    }\n    synchronized (SizedStack) {\n      SizedStack.push(number);\n      SizedStack.notifyAll();\n      System.out.println(\"MOM put Roti in vessel: \" + number + \" to queue.\");\n    }\n  }\n}\n"
    },
    {
        "file_name": "15.Count_word_in_file.java",
        "java_code": "/*Question - Traverse a file and count the words \u201cCSE1007\u201d and \u201cJAVA\u201d, print the counts in the console.*/\n//Ans:\nimport java.io.*;\nimport java.util.regex.*;\npublic class Traverse_File_19BCE2250 {\n    public static void main(String[] args) {\n        String w = \"\";\n        try {\n            FileReader fileR = new FileReader(\"File_Location\");\n            int num;\n            while ((num = fileR.read()) != -1) {\n                w = w + (char) num;\n            }\n        } catch (Exception e) {\n            System.out.print(\"error in reading the file\");\n        }\n        Pattern C1 = Pattern.compile(\"CSE1007\");\n        Matcher M1 = C1.matcher(w);\n        int CSE1007_count = 0;\n        while (M1.find()){\n            CSE1007_count++;\n        }\n        Pattern C2 = Pattern.compile(\"JAVA\");\n        Matcher M2 = C2.matcher(w);\n        int JAVA_count = 0;\n        while (M2.find()){\n            JAVA_count++;\n        }\n        System.out.println(w);\n        System.out.println(\"the total number of words CSE1007 is \" + CSE1007_count);\n        System.out.println(\"the total number of words JAVA is \" + JAVA_count);\n    }\n}\n"
    },
    {
        "file_name": "24.smallest_largest_digit.java",
        "java_code": "import java.util.Scanner;\n/*\nDeveloped By Ishan\nFind smallest and largest digit in number using Math package\n */\npublic class smallest_largest_digit {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter number:\");\n        int n = sc.nextInt();\n        int smallest = 9;\n        int largest = 0;\n        while(n != 0)\n        {\n            int r = n % 10;\n            largest = Math.max(r,largest);\n            smallest = Math.min(r, smallest);\n            n = n / 10;\n        }\n        System.out.println(\"Smallest no:\"+smallest);\n        System.out.println(\"Largest no:\"+largest);\n    }\n}\n"
    },
    {
        "file_name": "25.sort_hashmap.java",
        "java_code": "//Sort Hashmap based on key values using Treemap\nimport java.util.*;\npublic class sort_hashmap {\n    public static void main(String[] args) {\n        HashMap<Integer,String> hash_map  = new HashMap<>();\n        int n;\n        String map_value;\n        int map_key;\n        Scanner sc = new Scanner(System.in);\n        System.out.println(\"Enter size of Hash map: \");\n        n = sc.nextInt();\n        //User-input and put function to insert into hashmap\n        for(int i=0;i<n;i++){\n            System.out.println(\"Enter key in hash-map at \"+(i+1));\n            map_key = sc.nextInt();\n            System.out.println(\"Enter value in hash-map at \"+(i+1));\n            map_value = sc.next();\n            hash_map.put(map_key,map_value);\n        }\n        System.out.println(\"Sorting Hash map based on key \");\n        TreeMap<Integer, String> tree_map = new TreeMap<>(hash_map);\n        for (Integer integer : tree_map.keySet()) {\n            int key = integer;\n            System.out.println(key + \": \" + hash_map.get(key));\n        }\n    }\n}\n"
    },
    {
        "file_name": "registration.java",
        "java_code": "public class registration  {\r\n    public static void main(String[] args) throws FileNotFoundException,IOException,ClassNotFoundException {\r\n       \r\n        //ArrayList\r\n        List<student> stuList=new ArrayList<student>();\r\n        stuList.add(new student(\"19BCE2010\",\"Rahul\",8.62f,101));\r\n        stuList.add(new student(\"19BCE0210\",\"Ram\",9.62f,102));  //Inserting Data\r\n        stuList.add(new student(\"19BCE1200\",\"Arjun\",7.62f,102));\r\n\r\n\r\n\r\n        // Input in file\r\n        FileOutputStream fout=new FileOutputStream(\"C:\\\\Users\\\\Dell\\\\Desktop\\\\Reg.txt\");\r\n        ObjectOutputStream ob1=new ObjectOutputStream(fout);\r\n        ob1.writeObject(stuList);\r\n        ob1.close();\r\n        System.out.println(\"Done Writing\");\r\n\r\n        //Output of file\r\n        FileInputStream fin=new FileInputStream(\"C:\\\\Users\\\\Dell\\\\Desktop\\\\Reg.txt\");\r\n        ObjectInputStream i1=new ObjectInputStream(fin);\r\n        ArrayList<student> Nlist =new ArrayList<student>();\r\n\r\n        //Traversing through List\r\n        while (fin.available()!=0){\r\n            Nlist=(ArrayList<student>)i1.readObject();\r\n        }\r\n        Nlist.sort((o1,o2)->{\r\n            return (int)(o1.CGPA-o2.CGPA);});\r\n            \r\n        Collections.reverse(Nlist);\r\n        Nlist.forEach(o->System.out.println(\"Details: \"+\" \"+o.Regno+\" \"+o.Name+\" \"+o.CGPA+\" \"+o.prefroom));\r\n        i1.close();\r\n        student[] sortedCGPA=Nlist.toArray(new student[Nlist.size()] );\r\n        //System.out.println(student[0].R);\r\n        Hostel B1=new Hostel (\"Block\",2);\r\n        warden w1=new warden(B1,sortedCGPA);\r\n        warden w2=new warden(B1,sortedCGPA);\r\n        w1.start();\r\n        w2.start();\r\n        System.out.println(\"\\n\");\r\n        System.out.println(\"Proceeding for result >>.... \");\r\n    }\r\n}\r\n"
    },
    {
        "file_name": "registration.java",
        "java_code": "public class registration  {\r\n    public static void main(String[] args) {\r\n       \r\n        //ArrayList\r\n        List<student> stuList=new ArrayList<student>();\r\n        stuList.add(new student(\"19BCE2010\",\"Rahul\",8.62f,101));\r\n        stuList.add(new student(\"19BCE0210\",\"Ram\",9.62f,102));  //Inserting Data\r\n        stuList.add(new student(\"19BCE1200\",\"Arjun\",7.62f,102));\r\n\r\n\r\n\r\n        // Input in file\r\n        FileOutputStream fout=new FileOutputStream(\"C:\\\\Users\\\\Dell\\\\Desktop\\\\Reg.txt\");\r\n        ObjectOutputStream ob1=new ObjectOutputStream(fout);\r\n        ob1.writeObject(stuList);\r\n        ob1.close();\r\n        System.out.println(\"Done Writing\");\r\n\r\n        //Output of file\r\n        FileInputStream fin=new FileInputStream(\"C:\\\\Users\\\\Dell\\\\Desktop\\\\Reg.txt\");\r\n        ObjectInputStream i1=new ObjectInputStream(fin);\r\n        ArrayList<student> Nlist =new ArrayList<student>();\r\n\r\n        //Traversing through List\r\n        while (fin.available()!=0){\r\n            Nlist=(ArrayList<student>)i1.readObject();\r\n        }\r\n        Nlist.sort((o1,o2)->{\r\n            return (int)(o1.CGPA-o2.CGPA);});\r\n            \r\n        Collections.reverse(Nlist);\r\n        Nlist.forEach(o->System.out.println(\"Details: \"+\" \"+o.Regno+\" \"+o.Name+\" \"+o.CGPA+\" \"+o.prefroom));\r\n        i1.close();\r\n        student[] sortedCGPA=Nlist.toArray(new student[Nlist.size()] );\r\n        //System.out.println(student[0].R);\r\n        Hostel B1=new Hostel (\"Block\",2);\r\n        warden w1=new warden(B1,sortedCGPA);\r\n        warden w2=new warden(B1,sortedCGPA);\r\n        w1.start();\r\n        w2.start();\r\n        System.out.println(\"\\n\");\r\n        System.out.println(\"Proceeding for result >>.... \");\r\n    }\r\n}\r\n"
    },
    {
        "file_name": "FirstDerivedClass.java",
        "java_code": "public class FirstDerivedClass extends BaseClass {\r\n    public void firstDerivedMethod() {\r\n        System.out.println(\"FirstDerivedClass method.\");\r\n    }\r\n    public void checkConditions(int x, int y) {\r\n        if (x > 0 && y > 0) {\r\n            System.out.println(\"Both x and y are positive.\");\r\n        }else if (x > 0 || y > 0) {\r\n            System.out.println(\"Either x or y is positive.\");\r\n        }else {\r\n            System.out.println(\"Neither x nor y is positive.\");\r\n        }\r\n    }\r\n    public void ttttt(int[] arr) {\r\n        try {\r\n            System.out.println(arr[5]);\r\n        } catch (ArrayIndexOutOfBoundsException e) {\r\n            System.out.println(\"Caught ArrayIndexOutOfBoundsException: \" + e.getMessage());\r\n        } finally {\r\n            System.out.println(\"Finally block executed.\");\r\n        }\r\n    }\r\n    public class yyy{\r\n        public void nestedMethod() {\r\n            System.out.println(\"Nested class method in FirstDerivedClass.\");\r\n        }\r\n    }\r\n}"
    },
    {
        "file_name": "SecondDerivedClass.java",
        "java_code": "public class SecondDerivedClass extends FirstDerivedClass {\r\n    // Second derived class content\r\n    public void secondDerivedMethod() {\r\n        System.out.println(\"SecondDerivedClass method.\");\r\n    }\r\n\r\n    // Example of a loop\r\n    public void loopExample() {\r\n        for (int i = 0; i < 5; i++) {\r\n            System.out.println(\"Loop iteration: \" + i);\r\n        }\r\n    }\r\n\r\n    // Creating a thread using Runnable\r\n    public void threadExample() {\r\n        Thread thread = new Thread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                System.out.println(\"Thread is running...\");\r\n                for (int i = 1; i <= 5; i++) {\r\n                    System.out.println(\"Thread loop count: \" + i);\r\n                }\r\n            }\r\n        });\r\n        thread.start();\r\n    }\r\n\r\n    // Nested method calls\r\n    public void nestedMethodCalls() {\r\n        baseMethod();              // Call method from BaseClass\r\n        firstDerivedMethod();       // Call method from FirstDerivedClass\r\n        secondDerivedMethod();      // Call method from SecondDerivedClass\r\n    }\r\n\r\n    // Compound condition inside a loop\r\n    public void compoundConditionLoop() {\r\n        for (int i = 0; i < 10; i++) {\r\n            if (i % 2 == 0 && i > 5) {\r\n                System.out.println(\"Even number greater than 5: \" + i);\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        SecondDerivedClass obj = new SecondDerivedClass();\r\n\r\n        // Method calls\r\n        obj.loopExample();\r\n        obj.threadExample();\r\n        obj.nestedMethodCalls();\r\n        obj.checkConditions(5, -1);\r\n        obj.tryCatchExample(new int[] {1, 2, 3});\r\n        obj.compoundConditionLoop();\r\n\r\n        // Using nested class\r\n        FirstDerivedClass.NestedClass nestedObj = obj.new NestedClass();\r\n        nestedObj.nestedMethod();\r\n    }\r\n}"
    },
    {
        "file_name": "Engine.java",
        "java_code": "class Engine {\r\n    void start() {\r\n        System.out.println(\"Engine starts\");\r\n    }\r\n}\r\n\r\nclass Car {\r\n    Engine engine;                         // Aggregation: declared but not initialized\r\n    Engine engine2 = new Engine();         // Composition: initialized with `new`\r\n\r\n    Car() {\r\n        engine = new Engine();             // Composition: initialized in the constructor\r\n    }\r\n\r\n    void startCar() {\r\n        Engine engine1 = new Engine();     // Composition: local variable instantiated\r\n    }\r\n}"
    },
    {
        "file_name": "Example1.java",
        "java_code": "public class Example {\r\n    private Service service;\r\n    private Repository repository;\r\n\r\n    \r\n    public Example(Service service, Repository repository) {\r\n        this.service = service;\r\n        this.repository = repository;\r\n    }\r\n    public void performAction() {\r\n        service.performService();\r\n        repository.save();\r\n    }\r\n\r\n    public void setDepartment(Service service) {\r\n        this.service = service; // Dependency Injection\r\n    }\r\n\r\n    public void createDepartment() {\r\n        Department dept = new Department(); // Direct Object Instantiation\r\n        Database.connect();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"
    },
    {
        "file_name": "HighCBOExample.java",
        "java_code": "public class HighCBOExample implements DataService, Logger, ReportGenerator {\r\n\r\n    private DatabaseConnection dbConnection;\r\n    private FileLogger fileLogger;\r\n    private ReportService reportService;\r\n\r\n    // Constructor injection (increases CBO)\r\n    public HighCBOExample(DatabaseConnection dbConnection, FileLogger fileLogger, ReportService reportService) {\r\n        this.dbConnection = dbConnection;\r\n        this.fileLogger = fileLogger;\r\n        this.reportService = reportService;\r\n    }\r\n\r\n    // Setter injection (increases CBO)\r\n    public void setDbConnection(DatabaseConnection dbConnection) {\r\n        this.dbConnection = dbConnection;\r\n    }\r\n\r\n    public void setFileLogger(FileLogger fileLogger) {\r\n        this.fileLogger = fileLogger;\r\n    }\r\n\r\n    public void setReportService(ReportService reportService) {\r\n        this.reportService = reportService;\r\n    }\r\n\r\n    @Override\r\n    public void fetchData() {\r\n        dbConnection.connect();\r\n        List<String> data = dbConnection.getData();\r\n        System.out.println(\"Data fetched: \" + data);\r\n    }\r\n\r\n    @Override\r\n    public void log(String message) {\r\n        fileLogger.writeLog(message);\r\n    }\r\n\r\n    @Override\r\n    public void generateReport() {\r\n        List<String> data = dbConnection.getData();\r\n        String report = reportService.createReport(data);\r\n        System.out.println(\"Generated Report: \" + report);\r\n    }\r\n\r\n    // Static method calls (increases CBO)\r\n    public void performStaticOperations() {\r\n        UtilityClass.printMessage(\"Performing static operations...\");\r\n        int result = MathHelper.add(5, 10);\r\n        System.out.println(\"Math result: \" + result);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        DatabaseConnection db = new DatabaseConnection();\r\n        FileLogger logger = new FileLogger();\r\n        ReportService reportService = new ReportService();\r\n\r\n        HighCBOExample example = new HighCBOExample(db, logger, reportService);\r\n        example.fetchData();\r\n        example.log(\"Sample log message.\");\r\n        example.generateReport();\r\n        example.performStaticOperations();\r\n    }\r\n}"
    },
    {
        "file_name": "HighCouplingExample.java",
        "java_code": "class HighCouplingExample {\r\n    private static int counter; // Static variable\r\n    private List<String> items;\r\n    private Map<String, Integer> dataMap;\r\n    private DatabaseService dbService;\r\n    private Logger logger;\r\n\r\n    public void processData() {\r\n        Logger.log(\"Processing data...\"); // Static method call\r\n        dbService.connect(); // Directly calling external class method\r\n        dbService.executeQuery(\"SELECT * FROM users\");\r\n        System.out.println(\"Data processed.\");\r\n    }\r\n\r\n    public void addItem(String item) {\r\n        items.add(item);\r\n    }\r\n\r\n    public void setDbService(DatabaseService dbService) {\r\n        this.dbService = dbService;\r\n    }\r\n\r\n    public void setLogger(Logger logger) { \r\n        this.logger = logger;\r\n    }\r\n\r\n    public void incrementCounter() { \r\n        counter++;\r\n    }\r\n}"
    },
    {
        "file_name": "MyApplication.java",
        "java_code": "package com.journaldev.java.legacy;\r\n\r\npublic class MyApplication {\r\n\r\n\tprivate EmailService email = null;\r\n\t\r\n\tpublic MyApplication(EmailService svc){\r\n\t\tthis.email=svc;\r\n\t}\r\n\t\r\n\tpublic void processMessages(String msg, String rec){\r\n\t\t//do some msg validation, manipulation logic etc\r\n\t\tthis.email.sendEmail(msg, rec);\r\n\t}\r\n}"
    },
    {
        "file_name": "BaseClass.java",
        "java_code": "public class BaseClass {\r\n   public void baseMethod() {\r\n        System.out.println(\"BaseClass method.\");\r\n    }\r\n}"
    },
    {
        "file_name": "HighCouplingExample.java",
        "java_code": "class HighCouplingExample {\r\n    private static int counter; // Static variable\r\n    private List<String> items;\r\n    private Map<String, Integer> dataMap;\r\n    private DatabaseService dbService;\r\n    private Logger logger;\r\n\r\n    public void processData() {\r\n        logger.log(\"Processing data...\"); // Static method call\r\n        dbService.connect(); // Directly calling external class method\r\n        dbService.executeQuery(\"SELECT * FROM users\");\r\n        System.out.println(\"Data processed.\");\r\n    }\r\n\r\n    public void addItem(String item) {\r\n        items.add(item);\r\n    }\r\n\r\n    public void setDbService(DatabaseService dbService) {\r\n        this.dbService = dbService;\r\n    }\r\n\r\n    public void setLogger(Logger logger) { \r\n        this.logger = logger;\r\n    }\r\n\r\n    public void incrementCounter() { \r\n        counter++;\r\n    }\r\n}"
    },
    {
        "file_name": "Order.java",
        "java_code": "class Order {\r\n    private DatabaseConnection dbConnection; // Constructor Injection\r\n    private PaymentGateway paymentGateway;\r\n    private EmailService emailService;\r\n    private List<String> items;\r\n\r\n    public Order(DatabaseConnection dbConnection, PaymentGateway paymentGateway, EmailService emailService) {\r\n        this.dbConnection = dbConnection;\r\n        this.paymentGateway = paymentGateway;\r\n        this.emailService = emailService;\r\n        this.items = new ArrayList<>();\r\n    }\r\n\r\n    public void addItem(String item) {\r\n        items.add(item);\r\n        Logger.log(\"Added item: \" + item);\r\n    }\r\n\r\n    public void checkout(double totalAmount, String email) {\r\n        dbConnection.connect(); // Direct Instance Call\r\n        paymentGateway.processPayment(totalAmount); // Calling another class method\r\n        emailService.sendEmail(email, \"Order Confirmation\", \"Your order has been placed.\");\r\n    }\r\n}\r\n"
    },
    {
        "file_name": "TestDeadlockExample1.java",
        "java_code": "public class TestDeadlockExample1 {  \r\n  public static void main(String[] args) {  \r\n    final String resource1 = \"ratan jaiswal\";  \r\n    final String resource2 = \"vimal jaiswal\";  \r\n\r\n    Thread t1 = new Thread() {  \r\n      public void run() {  \r\n          synchronized (resource1) {  \r\n           System.out.println(\"Thread 1: locked resource 1\");  \r\n  \r\n           synchronized (resource2) {  \r\n            System.out.println(\"Thread 1: locked resource 2\");  \r\n           }  \r\n         }  \r\n      }  \r\n    };  \r\n   \r\n    Thread t2 = new Thread() {  \r\n      public void run() {  \r\n        synchronized (resource2) {  \r\n          System.out.println(\"Thread 2: locked resource 2\");  \r\n  \r\n          try { \r\n            Thread.sleep(100);\r\n            } catch (Exception e) {}  \r\n  \r\n          synchronized (resource1) {  \r\n            System.out.println(\"Thread 2: locked resource 1\");  \r\n          }  \r\n        }  \r\n      }  \r\n    };  \r\n  \r\n      \r\n    t1.start();  \r\n    t2.start();  \r\n  }  \r\n}     "
    },
    {
        "file_name": "TransactionProcessor.java",
        "java_code": "public class TransactionProcessor {\r\n    private static final int MAX_ATTEMPTS = 3;\r\n    private final ExternalService externalService;\r\n    private final PaymentGateway paymentGateway;\r\n    public TransactionProcessor(ExternalService externalService, PaymentGateway paymentGateway) {\r\n        this.externalService = externalService;\r\n        this.paymentGateway = paymentGateway;\r\n    }\r\n    public void processTransaction(Transaction tx) {\r\n        if (tx == null) {\r\n            throw new IllegalArgumentException(\"Transaction cannot be null\");\r\n        }\r\n        int attempts = 0;\r\n        boolean success = false;\r\n        while (attempts < MAX_ATTEMPTS && !success) {\r\n            attempts++;\r\n            try {\r\n                if (!paymentGateway.charge(tx.getCardInfo(), tx.getAmount())) {\r\n                    System.out.println(\"Payment failed. Attempt #\" + attempts);\r\n                    continue;  \r\n                }\r\n            } catch (InsufficientFundsException e) {\r\n                System.err.println(\"Insufficient funds: \" + e.getMessage());\r\n                break;\r\n            } catch (ServiceUnavailableException e) {\r\n                System.err.println(\"Service unavailable, retrying... \" + e.getMessage());\r\n            } catch (Exception e) {\r\n                System.err.println(\"Unexpected error: \" + e.getMessage());\r\n            }\r\n        }\r\n    }\r\n}"
    },
    {
        "file_name": "VariedExample6.java",
        "java_code": "public class VariedExample6 {\r\n    public void execute() {\r\n        for (int i = 0; i < 5; i++) { \r\n            for (int j = 0; j < 5; j++) { \r\n                try { \r\n                    if (i + j > 3) { \r\n                        System.out.println(\"High complexity logic\"); \r\n                    } \r\n                } catch (Exception e) { \r\n                    e.printStackTrace(); \r\n                } \r\n            } \r\n        }\r\n    }\r\n}\r\n"
    },
    {
        "file_name": "BankingSystem.java",
        "java_code": "class User implements TransactionObserver {\r\n    private String name;\r\n\r\n    public User(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    @Override\r\n    public void update(String message) {\r\n        System.out.println(name + \" received notification: \" + message);\r\n    }\r\n}\r\n\r\npublic class BankingSystem {\r\n    private final List<TransactionObserver> observers = new ArrayList<>();\r\n    \r\n    public static void main(String[] args) {\r\n        BankingSystem bankingSystem = new BankingSystem();\r\n        User user1 = new User(\"Alice\");\r\n        User user2 = new User(\"Bob\");\r\n\r\n        bankingSystem.addObserver(user1);\r\n        bankingSystem.addObserver(user2);\r\n\r\n        CheckingAccount account = new CheckingAccount(500);\r\n        Transaction transaction = new Transaction(account);\r\n\r\n        ExecutorService executor = Executors.newFixedThreadPool(2);\r\n\r\n        executor.submit(() -> {\r\n            transaction.performTransaction(200, true);\r\n            bankingSystem.notifyObservers(\"Alice deposited $200.\");\r\n        });\r\n\r\n        executor.submit(() -> {\r\n            transaction.performTransaction(300, false);\r\n            bankingSystem.notifyObservers(\"Alice withdrew $300.\");\r\n        });\r\n\r\n        executor.shutdown();\r\n    }\r\n}\r\n"
    },
    {
        "file_name": "Service.java",
        "java_code": "\r\nclass Consumer {\r\n    private Service service;\r\n\r\n    Consumer(Service service) { // Dependency Injection\r\n        this.service = service;\r\n    }\r\n\r\n    void setService(Service service) { // Setter Injection\r\n        this.service = service;\r\n    }\r\n\r\n    void useService() {\r\n        service.performService();\r\n    }\r\n}\r\n"
    },
    {
        "file_name": "MyClass.java",
        "java_code": "public class MyClass extends SuperClass {\r\n\r\n    public MyClass(AnotherClass param) {\r\n        \r\n    }\r\n\r\n    public void processList(List<MyClass> list) {\r\n    }\r\n\r\n    public void createObject() {\r\n        MyClass obj = new MyClass(new AnotherClass());\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        MyClass myClass = new MyClass(new AnotherClass());\r\n        myClass.createObject();\r\n    }\r\n}"
    },
    {
        "file_name": "registration.java",
        "java_code": "import java.util.*;\r\nimport java.io.*;\r\n\r\n// Note: The following classes (student, Hostel, warden) are assumed to be defined elsewhere.\r\n// They are used here to illustrate high coupling.\r\n\r\npublic class registration {\r\n    public static void main(String[] args) throws Exception {\r\n        // Directly instantiating and tightly coupling with a concrete implementation of student.\r\n        List<student> stuList = new ArrayList<student>();\r\n        stuList.add(new student(\"19BCE2010\", \"Rahul\", 8.62f, 101));\r\n        stuList.add(new student(\"19BCE0210\", \"Ram\", 9.62f, 102));  // Inserting Data\r\n        stuList.add(new student(\"19BCE1200\", \"Arjun\", 7.62f, 102));\r\n        \r\n        // Writing the student list to a file (direct dependency on file system classes)\r\n        FileOutputStream fout = new FileOutputStream(\"C:\\\\Users\\\\Dell\\\\Desktop\\\\Reg.txt\");\r\n        ObjectOutputStream ob1 = new ObjectOutputStream(fout);\r\n        ob1.writeObject(stuList);\r\n        ob1.close();\r\n        System.out.println(\"Done Writing\");\r\n\r\n        // Reading the list back from the file\r\n        FileInputStream fin = new FileInputStream(\"C:\\\\Users\\\\Dell\\\\Desktop\\\\Reg.txt\");\r\n        ObjectInputStream i1 = new ObjectInputStream(fin);\r\n        ArrayList<student> Nlist = new ArrayList<student>();\r\n\r\n        // Traversing through List\r\n        while (fin.available() != 0) {\r\n            Nlist = (ArrayList<student>) i1.readObject();\r\n        }\r\n        \r\n        // Sorting based on CGPA and then reversing the order (tight coupling to the student class attributes)\r\n        Nlist.sort((o1, o2) -> Float.compare(o1.CGPA, o2.CGPA));\r\n        Collections.reverse(Nlist);\r\n        Nlist.forEach(o -> System.out.println(\"Details: \" + o.Regno + \" \" + o.Name + \" \" + o.CGPA + \" \" + o.prefroom));\r\n        i1.close();\r\n        \r\n        // Converting the sorted list to an array\r\n        student[] sortedCGPA = Nlist.toArray(new student[Nlist.size()]);\r\n        \r\n        // Direct dependency: the registration class is tightly coupled to the Hostel and warden classes.\r\n        Hostel B1 = new Hostel(\"Block\", 2);\r\n        warden w1 = new warden(B1, sortedCGPA);\r\n        warden w2 = new warden(B1, sortedCGPA);\r\n        \r\n        // Starting threads directly in the main method increases coupling.\r\n        w1.start();\r\n        w2.start();\r\n        \r\n        System.out.println(\"\\nProceeding for result >>.... \");\r\n    }\r\n}"
    },
    {
        "file_name": "AddonGroupServiceImpl.java",
        "java_code": "public class AddonGroupServiceImpl implements AddonGroupService {\r\n    private final AddonGroupRepository addonGroupRepository;\r\n    private final AddonRepository addonRepository;\r\n    private final ModelMapper mapper;\r\n\r\n    public AddonGroupServiceImpl(AddonGroupRepository addonGroupRepository, AddonRepository addonRepository, ModelMapper mapper) {\r\n        this.addonGroupRepository = addonGroupRepository;\r\n        this.addonRepository = addonRepository;\r\n        this.mapper = mapper;\r\n    }\r\n\r\n    public AddonGroupResponseDTO createOrUpdateAddonGroup(AddonGroupRequestDTO addonGroupRequestDTO, Long addonGroupId)throws DuplicateRecordException, RecordNotFoundException {\r\n\r\n        log.info(\"AddonGroupServiceImpl::createOrUpdateAddonGroup\");\r\n        AddonGroup addonGroup;\r\n\r\n        boolean isExistsAddonGroup = addonGroupRepository.existsByNameIgnoreCase(addonGroupRequestDTO.getName());\r\n        if (addonGroupId != null) {\r\n            // Check if the Addon Group exists\r\n            addonGroup = addonGroupRepository.findById(addonGroupId)\r\n                    .orElseThrow(() -> new RecordNotFoundException(\"Addon Group with ID \" + addonGroupId + \" not found\"));\r\n\r\n            // Check if the new addon group name already exists(excluding the current addon group)\r\n            if (isExistsAddonGroup && !addonGroup.getName().equalsIgnoreCase(addonGroupRequestDTO.getName())) {\r\n                throw new DuplicateRecordException(\"Addon group name already exists\");\r\n            }\r\n\r\n            mapper.map(addonGroupRequestDTO, addonGroup);\r\n        } else {\r\n            if (isExistsAddonGroup) {\r\n                throw new DuplicateRecordException(\"Addon group name already exists\");\r\n            }\r\n\r\n            addonGroup = mapper.map(addonGroupRequestDTO, AddonGroup.class);\r\n        }\r\n\r\n        // Process list of addons\r\n        List<AddonAddonGroupRelationRequestDTO> addonAddonGroupRelationRequestDTOList = addonGroupRequestDTO.getListOfAddons();\r\n\r\n        // Utility method - Check for duplicate ids in listOfAddons request\r\n        ValidationUtils.checkForDuplicates(addonAddonGroupRelationRequestDTOList, \"Duplicate addons found in the request\");\r\n\r\n        // Get Addon-AddonGroup relations and save\r\n        List<AddonAddonGroupRelation> addonAddonGroupRelationsToSave = getAddonAddonGroupRelationEntityList(\r\n                addonAddonGroupRelationRequestDTOList,\r\n                addonGroup\r\n        );\r\n        // Remove existing relations and add new AddonAddonGroupRelations\r\n        addonGroup.getAddons().clear();\r\n        addonGroup.getAddons().addAll(addonAddonGroupRelationsToSave);\r\n\r\n        StopWatch watch = new StopWatch();\r\n        watch.start();\r\n        AddonGroup savedAddonGroup = addonGroupRepository.save(addonGroup);\r\n        watch.stop();\r\n        log.info(\"AddonGroupServiceImpl::createOrUpdateAddonGroup -> Addon Group associations saved with ID: {}, Query execution time: {}\",\r\n                savedAddonGroup.getAddonGroupId(),\r\n                watch.getTotalTimeSeconds()\r\n        );\r\n        return mapper.map(savedAddonGroup, AddonGroupResponseDTO.class);\r\n    }\r\n\r\n    @Override\r\n    @Transactional(rollbackOn = {DuplicateRecordException.class, RecordNotFoundException.class, BadRequestException.class})\r\n    public AddOrRemoveAddonsForAddonGroupResponseDTO addAddonsForAddonGroup(Long addonGroupId, AddAddonsForAddonGroupRequestDTO addAddonsForAddonGroupRequestDTO)\r\n            throws RecordNotFoundException, DuplicateRecordException {\r\n\r\n        log.info(\"AddonGroupServiceImpl::addAddonsForAddonGroup\");\r\n\r\n        // Check if the AddonGroup exists\r\n        AddonGroup addonGroup = addonGroupRepository.findById(addonGroupId)\r\n                .orElseThrow(() -> new RecordNotFoundException(\"AddonGroup with ID \" + addonGroupId + \" not found\"));\r\n\r\n        List<AddonAddonGroupRelationRequestDTO> addonAddonGroupRelationRequestDTOList = addAddonsForAddonGroupRequestDTO.getAddons();\r\n\r\n        // Obtain the all the addon ids\r\n        List<Long> requestAddonIdsList = addonAddonGroupRelationRequestDTOList.stream()\r\n                .map(AddonAddonGroupRelationRequestDTO::getAddonId)\r\n                .toList();\r\n\r\n        // Utility method - Check for duplicate ids in listOfAddons request\r\n        ValidationUtils.checkForDuplicates(requestAddonIdsList, \"Duplicate addons found in the request\");\r\n\r\n        // Extract existing addon IDs from the addonGroup\r\n        List<Long> existingAddonIdsList = addonGroup.getAddons().stream()\r\n                .map(relation -> relation.getAddon().getAddonId())\r\n                .toList();\r\n\r\n        // Verify if any existing addons are being re-added.\r\n        boolean hasCommonValues = requestAddonIdsList.stream()\r\n                .anyMatch(existingAddonIdsList::contains);\r\n\r\n        if (hasCommonValues) {\r\n            throw new DuplicateRecordException(\"Associations already exist for some of the requested addons\");\r\n        }\r\n\r\n        // Method -  Addon-AddonGroup relations and save\r\n        List<AddonAddonGroupRelation> addonAddonGroupRelationEntityList = getAddonAddonGroupRelationEntityList(\r\n                addonAddonGroupRelationRequestDTOList,\r\n                addonGroup\r\n        );\r\n\r\n        addonGroup.getAddons().addAll(addonAddonGroupRelationEntityList);\r\n\r\n        StopWatch watch = new StopWatch();\r\n        watch.start();\r\n        AddonGroup savedAddonGroup = addonGroupRepository.save(addonGroup);\r\n        watch.stop();\r\n        log.info(\"AddonGroupServiceImpl::addAddonsForAddonGroup -> Addon Group associations created with ID: {}, Query execution time: {}\",\r\n                savedAddonGroup.getAddonGroupId(),\r\n                watch.getTotalTimeSeconds()\r\n        );\r\n\r\n        // Prepare the response\r\n        List<Long> savedAddonIdsList = savedAddonGroup.getAddons().stream()\r\n                .map(relation -> relation.getAddon().getAddonId())\r\n                .toList();\r\n\r\n        AddOrRemoveAddonsForAddonGroupResponseDTO response = new AddOrRemoveAddonsForAddonGroupResponseDTO();\r\n        response.setId(savedAddonGroup.getAddonGroupId());\r\n        response.setName(savedAddonGroup.getName());\r\n        response.setListOfAddons(savedAddonIdsList);\r\n\r\n        return response;\r\n    }\r\n\r\n    @Override\r\n    @Transactional(rollbackOn = {RecordNotFoundException.class, BadRequestException.class})\r\n    public AddOrRemoveAddonsForAddonGroupResponseDTO removeAddonsFromAddonGroup(Long addonGroupId, RemoveAddonListRequestDTO removeAddonListRequestDTO)\r\n            throws RecordNotFoundException, BadRequestException, DuplicateRecordException {\r\n\r\n        log.info(\"AddonGroupServiceImpl::removeAddonsFromAddonGroup\");\r\n\r\n        // Check if the AddonGroup exists\r\n        AddonGroup addonGroup = addonGroupRepository.findById(addonGroupId)\r\n                .orElseThrow(() -> new RecordNotFoundException(\"AddonGroup with ID \" + addonGroupId + \" not found\"));\r\n\r\n        // Retrieve existing associations for the Addon group\r\n        Set<AddonAddonGroupRelation> existingAddonAssociationsList = addonGroup.getAddons();\r\n\r\n        // Extract the list of addon IDs to remove from the Request DTO - RemoveAddonListRequestDTO\r\n        List<Long> addonsIdList = removeAddonListRequestDTO.getAddons();\r\n        // Check for Duplicate Ids in the request\r\n        ValidationUtils.checkForDuplicates(addonsIdList, \"Duplicate addon ids in the request\");\r\n\r\n        // Obtain existing addon ids\r\n        Set<Long> existingAddonIds = existingAddonAssociationsList.stream()\r\n                .map(association -> association.getAddon().getAddonId())\r\n                .collect(Collectors.toSet());\r\n\r\n        // Check whether all the removing addon ids are existing in addons\r\n        boolean hasNonExistentAddonId = addonsIdList.stream()\r\n                .anyMatch(id -> !existingAddonIds.contains(id));\r\n\r\n        if (hasNonExistentAddonId) {\r\n            throw new BadRequestException(\"At least one addon ID in the request does not have an association with the addon group.\");\r\n        }\r\n\r\n        // Remove Associations form the addon group\r\n        existingAddonAssociationsList.removeIf(association -> addonsIdList.contains(association.getAddon().getAddonId()));\r\n\r\n        // Save the updated AddonGroup to persist the changes\r\n        StopWatch watch = new StopWatch();\r\n        watch.start();\r\n        AddonGroup savedAddonGroup = addonGroupRepository.save(addonGroup);\r\n        watch.stop();\r\n        log.info(\"AddonGroupServiceImpl::removeAddonsFromAddonGroup -> Addon Group associations removed with ID: {}, Query execution time: {}\",\r\n                savedAddonGroup.getAddonGroupId(),\r\n                watch.getTotalTimeSeconds()\r\n        );\r\n\r\n        // Prepare the response\r\n        List<Long> savedAddonIdsList = savedAddonGroup.getAddons().stream()\r\n                .map(relation -> relation.getAddon().getAddonId())\r\n                .toList();\r\n\r\n        AddOrRemoveAddonsForAddonGroupResponseDTO response = new AddOrRemoveAddonsForAddonGroupResponseDTO();\r\n        response.setId(savedAddonGroup.getAddonGroupId());\r\n        response.setName(savedAddonGroup.getName());\r\n        response.setListOfAddons(savedAddonIdsList);\r\n\r\n        return response;\r\n    }\r\n\r\n    @Override\r\n    public ResponseDTO updateAvailabilityStatusByIds(SetAvailabilityStatusRequestDTO setAvailabilityStatusRequestDTO) throws DuplicateRecordException, RecordNotFoundException {\r\n        log.info(\"AddonGroupServiceImpl::updateAvailabilityStatusByIds\");\r\n\r\n        List<Long> addonGroupIdList = setAvailabilityStatusRequestDTO.getIdList();\r\n        Boolean availabilityStatus = setAvailabilityStatusRequestDTO.getAvailabilityStatus();\r\n\r\n        // Check for duplicate IDs in the request\r\n        ValidationUtils.checkForDuplicates(addonGroupIdList, \"Duplicate addon group IDs in the request\");\r\n\r\n        // Find all addon groups by IDs\r\n        List<AddonGroup> addonGroupsToUpdate = addonGroupRepository.findAllById(addonGroupIdList);\r\n\r\n        // Check if all requested addons groups exist\r\n        if (addonGroupsToUpdate.size() != addonGroupIdList.size()) {\r\n            throw new RecordNotFoundException(\"Some addon groups were not found\");\r\n        }\r\n        // Filter only those addon groups where the availability status differs\r\n        List<AddonGroup> filteredAddonGroupsToUpdate = addonGroupsToUpdate.stream()\r\n                .filter(addonGroup -> !availabilityStatus.equals(addonGroup.getAvailabilityStatus()))\r\n                .peek(addonGroup -> {\r\n                    addonGroup.setAvailabilityStatus(availabilityStatus);\r\n                })\r\n                .collect(Collectors.toList());\r\n\r\n        // Save only the filtered Addon Groups\r\n        if (!filteredAddonGroupsToUpdate.isEmpty()) {\r\n            StopWatch watch = new StopWatch();\r\n            watch.start();\r\n            List<AddonGroup> updatedAddonGroupList = addonGroupRepository.saveAll(filteredAddonGroupsToUpdate);\r\n            watch.stop();\r\n\r\n            log.info(\"CategoryServiceImpl::updateAvailabilityStatusByIds -> Query execution time: {}, Total records updated: {}\", watch.getTotalTimeSeconds(), updatedAddonGroupList.size());\r\n        } else {\r\n            log.info(\"CategoryServiceImpl::updateAvailabilityStatusByIds -> No addon group had a change in availability status.\");\r\n        }\r\n\r\n        return new ResponseDTO(\"Availability status updated successfully for Addon Groups.\");\r\n    }\r\n\r\n    @Override\r\n    public GetAddonGroupResponseDTO findAddonGroupById(Long addonGroupId) throws RecordNotFoundException {\r\n        log.info(\"AddonGroupServiceImpl::findAddonGroupById\");\r\n\r\n        // Fetch the AddonGroup by ID or throw an exception if not found\r\n        AddonGroup addonGroup = addonGroupRepository.findById(addonGroupId)\r\n                .orElseThrow(() -> new RecordNotFoundException(\"Addon Group not found with ID -\" + addonGroupId));\r\n\r\n        // Fetch the existing associations for the given Addon Group ID\r\n        Set<AddonAddonGroupRelation> existingAddonGroupAssociations = addonGroup.getAddons();\r\n\r\n        // Map the associations to Response DTOs\r\n        List<AddonAddonGroupRelationResponseDTO> existingAddons = existingAddonGroupAssociations.stream()\r\n                .map(association -> AddonAddonGroupRelationResponseDTO.builder()\r\n                        .addonId(association.getAddon().getAddonId())\r\n                        .name(association.getAddon().getName())\r\n                        .price(association.getPrice())\r\n                        .build()\r\n                )\r\n                .collect(Collectors.toList());\r\n\r\n        // Map the AddonGroup to response DTO\r\n        GetAddonGroupResponseDTO getAddonGroupResponseDTO = mapper.map(addonGroup, GetAddonGroupResponseDTO.class);\r\n        getAddonGroupResponseDTO.setListOfAddons(existingAddons);\r\n\r\n        return getAddonGroupResponseDTO;\r\n    }\r\n\r\n    @Override\r\n    public AddonGroupListResponseDTO findAllAddonGroups(AddonGroupQueryRequestDTO addonGroupQueryRequestDTO) throws RecordNotFoundException {\r\n        log.info(\"AddonGroupServiceImpl::findAllAddonGroups\");\r\n\r\n        return getAddonGroupsResponse(addonGroupQueryRequestDTO, true);\r\n    }\r\n\r\n    @Override\r\n    @Transactional(rollbackOn = {RecordNotFoundException.class})\r\n    public ResponseDTO deleteAddonGroupById(Long addonGroupId) throws RecordNotFoundException {\r\n        log.info(\"AddonGroupServiceImpl::deleteAddonGroup\");\r\n\r\n        // Check if the AddonGroup exists, otherwise throw an exception\r\n        AddonGroup addonGroup = addonGroupRepository.findById(addonGroupId)\r\n                .orElseThrow(() -> new RecordNotFoundException(\"Addon Group not found with addon group Id \" + addonGroupId));\r\n\r\n        // Remove relationships with products and variation relations using streams\r\n        if (addonGroup.getProducts() != null) {\r\n            addonGroup.getProducts().forEach(product -> product.getAddonGroups().remove(addonGroup));\r\n            addonGroup.getProducts().clear();\r\n        }\r\n\r\n        if (addonGroup.getVariationRelation() != null) {\r\n            addonGroup.getVariationRelation().forEach(variationRelation -> variationRelation.getAddonGroups().remove(addonGroup));\r\n            addonGroup.getVariationRelation().clear();\r\n        }\r\n\r\n        // Orphan removal for addons will be handled automatically\r\n        addonGroupRepository.delete(addonGroup);\r\n        return new ResponseDTO(String.format(\"Addon Group with ID %d deleted successfully\", addonGroupId));\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public ResponseDTO deleteAddonGroupsByIds(DeleteByIdsRequestDTO deleteByIdsRequestDTO) throws DuplicateRecordException, RecordNotFoundException {\r\n        log.info(\"AddonGroupServiceImpl::deleteAddonGroupsByIds\");\r\n\r\n        List<Long> addonGroupIdList = deleteByIdsRequestDTO.getIdList();\r\n\r\n        // Check for duplicate IDs in the request\r\n        ValidationUtils.checkForDuplicates(addonGroupIdList, \"Duplicate addon group ids in the request\");\r\n\r\n        // Find all addon groups by IDs\r\n        List<AddonGroup> addonGroupsToDelete = addonGroupRepository.findAllById(addonGroupIdList);\r\n\r\n        // Verify if all requested IDs exist\r\n        if (addonGroupsToDelete.size() != addonGroupIdList.size()) {\r\n            throw new RecordNotFoundException(\"Some addon groups were not found\");\r\n        }\r\n\r\n        // Remove relationships with products and variation relations using streams\r\n        addonGroupsToDelete.forEach(addonGroup -> {\r\n            Set<Product> associatedProducts = addonGroup.getProducts();\r\n            // Clear the products\r\n            if (associatedProducts != null && !associatedProducts.isEmpty()) {\r\n                addonGroup.getProducts().forEach(product -> product.getAddonGroups().remove(addonGroup));\r\n                addonGroup.getProducts().clear();\r\n            }\r\n            Set<VariationRelation> associatedVariations = addonGroup.getVariationRelation();\r\n            // Clear the variation relation\r\n            if (associatedVariations != null && !associatedVariations.isEmpty()) {\r\n                addonGroup.getVariationRelation().forEach(variationRelation -> variationRelation.getAddonGroups().remove(addonGroup));\r\n                addonGroup.getVariationRelation().clear();\r\n            }\r\n        });\r\n\r\n        // Now, delete the addon groups\r\n        StopWatch watch = new StopWatch();\r\n        watch.start();\r\n        addonGroupRepository.deleteAll(addonGroupsToDelete);\r\n        watch.stop();\r\n\r\n        log.info(\r\n                \"AddonGroupServiceImpl::deleteAddonGroupsByIds -> Query execution time: {}, Total records: {}\",\r\n                watch.getTotalTimeSeconds(),\r\n                addonGroupsToDelete.size() // Default deleteAll method is void\r\n        );\r\n\r\n        return new ResponseDTO(\"Addon groups deleted successfully\");\r\n    }\r\n\r\n    @Override\r\n    public InputStreamResource generateImportTemplate() throws IOException {\r\n        log.info(\"AddonGroupServiceImpl::generateImportTemplate\");\r\n\r\n        Set<String> addonItems = addonRepository.findAllAddonNames();\r\n        return new InputStreamResource(ImportTemplates.generateAddonGroupImportTemplate(addonItems));\r\n    }\r\n\r\n    @Override\r\n    @Transactional(rollbackOn = {DuplicateRecordException.class, RecordNotFoundException.class, BadRequestException.class, ExcelDTOMappingValidationException.class, IOException.class})\r\n    public ResponseDTO importAddonGroups(MultipartFile addonGroupExcelFile)\r\n            throws FileNotFoundCustomException, InvalidFileTypeException, DuplicateRecordException, BadRequestException, IOException, ExcelDTOMappingValidationException, RecordNotFoundException {\r\n\r\n        log.info(\"AddonGroupServiceImpl::saveAddonGroupsFromExcelFile\");\r\n\r\n        // Check if file is provided and not empty\r\n        if (addonGroupExcelFile == null || addonGroupExcelFile.isEmpty()) {\r\n            throw new FileNotFoundCustomException(\"No file uploaded or the file is empty\");\r\n        }\r\n\r\n        // Validate file type\r\n        if (!isExcelFile(addonGroupExcelFile)) {\r\n            throw new InvalidFileTypeException(\"Invalid file format. Please upload an Excel file.\");\r\n        }\r\n\r\n        Set<String> existingAddonGroupNames = addonGroupRepository.findAllAddonGroupNames();\r\n        List<Addon> existingAddons = addonRepository.findAll();\r\n\r\n        // Util Method: Returns List AddonGroupRequestDTO from Excel after mapping\r\n        List<AddonGroupRequestDTO> addonGroupRequestDTOList = ImportData.\r\n                convertExcelToAddonGroupDTO(addonGroupExcelFile, existingAddonGroupNames, existingAddons);\r\n\r\n        // for setting AddonAddonGroupRelation\r\n        Map<Long, Addon> addonIdToAddonMap = existingAddons.stream()\r\n                .collect(Collectors.toMap(Addon::getAddonId, addon -> addon));\r\n\r\n        // Map to entity list for saving\r\n        // In this scenario since the request is validated, it is not efficient if we use same logic in create or update method.\r\n        // Therefore, separate function was implemented.\r\n        List<AddonGroup> addonGroupsToSave = addonGroupRequestDTOList.stream()\r\n                .map(addonGroupRequestDTO ->\r\n                        convertDTOToAddonGroupEntity(addonGroupRequestDTO, addonIdToAddonMap))\r\n                .toList();\r\n\r\n        StopWatch watch = new StopWatch();\r\n        watch.start();\r\n        List<AddonGroup> savedAddonGroups = addonGroupRepository.saveAll(addonGroupsToSave);\r\n        watch.stop();\r\n\r\n        log.info(\"saveAddonGroupsFromExcelFile -> Query execution time: {}, Total records: {}\",\r\n                watch.getTotalTimeSeconds(),\r\n                savedAddonGroups.size());\r\n\r\n        return new ResponseDTO(\"File processed and Addon Groups saved successfully\");\r\n    }\r\n\r\n    @Override\r\n    public InputStreamResource exportAddonGroups(AddonGroupQueryRequestDTO requestDTO) throws IOException, RecordNotFoundException {\r\n        log.info(\"AddonGroupServiceImpl::exportAddonGroups\");\r\n\r\n        // Fetching addon groups\r\n        AddonGroupListResponseDTO addonGroupListResponseDTO = getAddonGroupsResponse(requestDTO, requestDTO.getIncludeLimit());\r\n\r\n        return new InputStreamResource(ExportData.exportAddonGroups(addonGroupListResponseDTO.getAddonGroups()));\r\n    }\r\n\r\n    private AddonGroup convertDTOToAddonGroupEntity(AddonGroupRequestDTO addonGroupRequestDTO, Map<Long, Addon> addonIdAddonMap) {\r\n        AddonGroup addonGroup = AddonGroup.builder()\r\n                .name(addonGroupRequestDTO.getName())\r\n                .onlineDisplayName(addonGroupRequestDTO.getOnlineDisplayName())\r\n                .showInOnline(addonGroupRequestDTO.getShowInOnline())\r\n                .availabilityStatus(addonGroupRequestDTO.getAvailabilityStatus())\r\n                .allowMultipleSelections(addonGroupRequestDTO.getAllowMultipleSelections())\r\n                .minimumSelections(addonGroupRequestDTO.getMinimumSelections())\r\n                .maximumSelections(addonGroupRequestDTO.getMaximumSelections())\r\n                .build();\r\n\r\n        // Add Addon relations\r\n        Set<AddonAddonGroupRelation> addonAddonGroupRelationSet = addonGroupRequestDTO.getListOfAddons().stream()\r\n                .map(addonRelationDTO ->\r\n                        convertAddonRelationDTOToEntity(addonRelationDTO, addonGroup, addonIdAddonMap))\r\n                .collect(Collectors.toSet());\r\n\r\n        addonGroup.setAddons(addonAddonGroupRelationSet);\r\n        return addonGroup;\r\n    }\r\n\r\n    private AddonAddonGroupRelation convertAddonRelationDTOToEntity(AddonAddonGroupRelationRequestDTO addonAddonGroupRelationRequestDTO,\r\n                                                                    AddonGroup addonGroup, Map<Long, Addon> addonIdMap) {\r\n\r\n        Addon addon = addonIdMap.get(addonAddonGroupRelationRequestDTO.getAddonId());\r\n\r\n        return AddonAddonGroupRelation.builder()\r\n                .addonGroup(addonGroup)\r\n                .addon(addon)\r\n                .price(addonAddonGroupRelationRequestDTO.getPrice())\r\n                .build();\r\n    }\r\n\r\n    private List<AddonAddonGroupRelation> getAddonAddonGroupRelationEntityList(\r\n            List<AddonAddonGroupRelationRequestDTO> addonAddonGroupRelationRequestDTOList,\r\n            AddonGroup addonGroup\r\n    ) throws RecordNotFoundException {\r\n\r\n        log.info(\"AddonGroupServiceImpl::getAddonAddonGroupRelationEntityList\");\r\n\r\n        // Validate addon ID existence in the Addon\r\n        List<Long> requestAddonIds = addonAddonGroupRelationRequestDTOList.stream()\r\n                .map(AddonAddonGroupRelationRequestDTO::getAddonId)\r\n                .collect(Collectors.toList());\r\n        List<Addon> existingAddonsList = addonRepository.findAllById(requestAddonIds);\r\n\r\n        if (existingAddonsList.size() != requestAddonIds.size()) {\r\n            throw new RecordNotFoundException(\"Some of the addons for given addon ids not found \");\r\n        }\r\n        log.info(\"AddonGroupServiceImpl::getAddonAddonGroupRelationEntityList -> All request Addon Ids are valid\");\r\n        // Create a map - for lookup of Addon by addonId\r\n        Map<Long, Addon> addonLookupMap = existingAddonsList.stream()\r\n                .collect(Collectors.toMap(Addon::getAddonId, a -> a));\r\n\r\n        // Create list of AddonAddonGroupRelation from addonAddonGroupRelationRequestDTOList and Return List\r\n        return addonAddonGroupRelationRequestDTOList.stream()\r\n                .map(requestDTO -> {\r\n\r\n                    // Verify Addon existence\r\n                    Addon addon = addonLookupMap.get(requestDTO.getAddonId());\r\n\r\n                    // Since we have checked this before, addon cannot be null\r\n                    if (addon == null) {\r\n                        throw new CustomInternalServerException(\"Addon with ID \" + requestDTO.getAddonId() + \" not found\");\r\n                    }\r\n                    // Create new Addon-AddonGroup Relation\r\n                    AddonAddonGroupRelation addonAddonGroupRelation = new AddonAddonGroupRelation();\r\n                    addonAddonGroupRelation.setAddonGroup(addonGroup);\r\n                    addonAddonGroupRelation.setAddon(addon);\r\n                    addonAddonGroupRelation.setPrice(requestDTO.getPrice());\r\n                    return addonAddonGroupRelation;\r\n                }).toList();\r\n    }\r\n\r\n    private AddonGroupListResponseDTO getAddonGroupsResponse(AddonGroupQueryRequestDTO addonGroupQueryRequestDTO, Boolean includeLimit) throws RecordNotFoundException {\r\n        log.info(\"AddonGroupServiceImpl::getAddonGroupsResponse\");\r\n\r\n        StopWatch watch = new StopWatch();\r\n        watch.start();\r\n        List<AddonGroupQueryOutputDTO> addonGroupQueryOutputDTOList = addonGroupRepository.findAllAddonGroups(addonGroupQueryRequestDTO, includeLimit);\r\n        watch.stop();\r\n\r\n        // This will throw a RecordNotFound exception when no data found for the export related scenarios\r\n        if (!includeLimit) {\r\n            CommonUtils.validateRecordsNotFound(addonGroupQueryOutputDTOList, \"AddonGroupQueryOutputDTO\");\r\n        }\r\n\r\n        long totalRecords = addonGroupQueryOutputDTOList.isEmpty() ? 0 : addonGroupQueryOutputDTOList.get(0).getTotalRecords();\r\n\r\n        AddonGroupListResponseDTO addonGroupListResponseDTO = new AddonGroupListResponseDTO();\r\n        addonGroupListResponseDTO.setTotalRecords((int) totalRecords);\r\n        addonGroupListResponseDTO.setOffset(addonGroupQueryRequestDTO.getOffset());\r\n        addonGroupListResponseDTO.setLimit(addonGroupQueryRequestDTO.getLimit());\r\n        addonGroupListResponseDTO.setAddonGroups(addonGroupQueryOutputDTOList);\r\n\r\n\r\n        log.info(\"AddonGroupServiceImpl::getAddonGroupsResponse -> Query execution time: {}, Number of addon groups: {}, Total records: {}\",\r\n                watch.getTotalTimeSeconds(),\r\n                addonGroupListResponseDTO.getAddonGroups().size(),\r\n                addonGroupListResponseDTO.getTotalRecords()\r\n        );\r\n\r\n        return addonGroupListResponseDTO;\r\n    }\r\n}"
    },
    {
        "file_name": "AdvancedDecisionMaker.java",
        "java_code": "public class AdvancedDecisionMaker extends BaseAI {\r\n    public String analyzeSituation(int risk, boolean isEmergency, String condition) {\r\n        if (isEmergency) {\r\n            if (risk > 8) {\r\n                if (condition.equals(\"fire\")) {\r\n                    return \"Call fire department immediately\";\r\n                } else if (condition.equals(\"medical\")) {\r\n                    return \"Call an ambulance\";\r\n                } else {\r\n                    return \"Assess further and take action\";\r\n                }\r\n            }\r\n        } else {\r\n            if (risk > 5) {\r\n                try {\r\n                    if (condition.contains(\"weather\")) {\r\n                        return \"Stay indoors\";\r\n                    } else if (condition.contains(\"security\")) {\r\n                        return \"Increase surveillance\";\r\n                    } else {\r\n                        throw new IllegalArgumentException(\"Unknown condition\");\r\n                    }\r\n                } catch (Exception e) {\r\n                    return \"Error: \" + e.getMessage();\r\n                }\r\n            }\r\n        }\r\n        return \"No immediate action required\";\r\n    }\r\n}\r\n"
    }
]
[
    {
        "file_name": "Test.cs",
        "csharp_code": "using System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args){\r\n        Console.WriteLine(\"Starting program...\");\r\n\r\n        for (int i = 1; i <= 2; i++){\r\n            Console.WriteLine($\"Outer loop iteration: {i}\");\r\n            try {\r\n                for (int j = 1; j <= 2; j++) {\r\n                    Console.WriteLine($\"Inner loop iteration: {j}\");\r\n                        try {\r\n                            for (int k = 1; k <= 2; k++) {\r\n                                if ((k % 2 == 0 && i % 2 == 1) || (j + k > 2)){\r\n                                    if (k == 2 && j == 2) {\r\n                                        throw new InvalidOperationException(\"Simulated exception at deep nesting.\");\r\n                                    }\r\n                                }\r\n                            }\r\n                        }catch (Exception ex){\r\n                            Console.WriteLine($\"level exception caught: {ex.Message}\");\r\n                        }\r\n                }\r\n            } catch (Exception ex){\r\n                Console.WriteLine($\"Outer-level exception caught: {ex.Message}\");\r\n            }\r\n        }\r\n\r\n        Console.WriteLine(\"Program completed.\");\r\n    }\r\n}\r\n"
    },
    {
        "file_name": "ExampleClass.cs",
        "csharp_code": "public class ExampleClass\r\n    {\r\n        // Field declarations (for dependency injection)\r\n        private Repository repository;\r\n        private Service service;\r\n\r\n        // Constructor Injection (DI)\r\n        public ExampleClass(Repository repository){\r\n            this.repository = repository; // Assignment in constructor\r\n        }\r\n\r\n        // Setter Injection (DI)\r\n        public void setService(Service service){\r\n            this.service = service; // Assignment in setter\r\n        }\r\n\r\n        public void PerformAction(){\r\n            // Direct Object Instantiation\r\n            Helper helper = new Helper();\r\n            Thread t1 = new Thread();\r\n\r\n            // Static Method Call (should be detected with weight 2)\r\n            string result = Utility.process();\r\n\r\n            // Static Variable Usage (should be detected with weight 1)\r\n            int val = Utility.Value;\r\n\r\n            // Using a built-in class method (Console is excluded)\r\n            Console.WriteLine(result + \" \" + val);\r\n        }\r\n    }"
    },
    {
        "file_name": "ExampleClass.cs",
        "csharp_code": "public class ExampleClass\r\n    {\r\n        // Field declarations (for dependency injection)\r\n        private Repository _repository;\r\n        private Service _service;\r\n\r\n        // Constructor Injection (DI)\r\n        public ExampleClass(Repository repository){\r\n            _repository = repository; // Assignment in constructor\r\n        }\r\n\r\n        // Setter Injection (DI)\r\n        public void setService(Service service){\r\n            _service = service; // Assignment in setter\r\n        }\r\n\r\n        public void PerformAction(){\r\n            // Direct Object Instantiation\r\n            Helper helper = new Helper();\r\n            Thread t1 = new Thread();\r\n\r\n            // Static Method Call (should be detected with weight 2)\r\n            string result = Utility.process();\r\n\r\n            // Static Variable Usage (should be detected with weight 1)\r\n            int val = Utility.Value;\r\n\r\n            // Using a built-in class method (Console is excluded)\r\n            Console.WriteLine(result + \" \" + val);\r\n        }\r\n    }"
    },
    {
        "file_name": "OrderService.cs",
        "csharp_code": "public class OrderService\r\n    {\r\n        private readonly IPaymentProcessor _paymentProcessor;\r\n        private readonly ILogger _logger;\r\n        private DatabaseService _databaseService; // Direct instantiation (bad)\r\n        private EmailService _emailService; // Direct instantiation (bad)\r\n        \r\n        public OrderService(IPaymentProcessor paymentProcessor, ILogger logger)\r\n        {\r\n            _paymentProcessor = paymentProcessor;  // Constructor Injection (coupling)\r\n            _logger = logger;  // Constructor Injection (coupling)\r\n            _databaseService = new DatabaseService();  // Direct Instantiation (High Coupling)\r\n            _emailService = new EmailService();  // Direct Instantiation (High Coupling)\r\n        }\r\n\r\n        public void ProcessOrder(int orderId, double amount)\r\n        {\r\n            // Static method calls (coupling)\r\n            string orderDetails = OrderHelper.GetOrderDetails(orderId);\r\n            \r\n            _paymentProcessor.ProcessPayment(amount); // Interface implementation (coupling)\r\n            _logger.Log(\"Payment processed for order ID: \" + orderId);\r\n            \r\n            _databaseService.SaveOrder(orderId, amount); // Direct method calls (tight coupling)\r\n            _emailService.SendEmail(\"Order Confirmation\", \"Your order is confirmed.\");\r\n            \r\n            Console.WriteLine(\"Order processed successfully.\");\r\n        }\r\n    }"
    },
    {
        "file_name": "OrderService.cs",
        "csharp_code": "public class OrderService\r\n    {\r\n        private readonly IPaymentProcessor _paymentProcessor;\r\n        private readonly ILogger _logger;\r\n        private DatabaseService databaseService; // Direct instantiation (bad)\r\n        private EmailService emailService; // Direct instantiation (bad)\r\n        \r\n        public OrderService(IPaymentProcessor paymentProcessor, ILogger logger)\r\n        {\r\n            _paymentProcessor = paymentProcessor;  // Constructor Injection (coupling)\r\n            _logger = logger;  // Constructor Injection (coupling)\r\n            databaseService = new DatabaseService();  // Direct Instantiation (High Coupling)\r\n            emailService = new EmailService();  // Direct Instantiation (High Coupling)\r\n        }\r\n\r\n        public void ProcessOrder(int orderId, double amount)\r\n        {\r\n            // Static method calls (coupling)\r\n            string orderDetails = OrderHelper.GetOrderDetails(orderId);\r\n            \r\n            _paymentProcessor.ProcessPayment(amount); // Interface implementation (coupling)\r\n            _logger.Log(\"Payment processed for order ID: \" + orderId);\r\n            \r\n            databaseService.SaveOrder(orderId, amount); // Direct method calls (tight coupling)\r\n            emailService.SendEmail(\"Order Confirmation\", \"Your order is confirmed.\");\r\n            \r\n            Console.WriteLine(\"Order processed successfully.\");\r\n        }\r\n    }"
    },
    {
        "file_name": "MyMiddleware.cs",
        "csharp_code": "public class MyMiddleware\r\n{\r\n    private readonly RequestDelegate _next;\r\n    private readonly ILogger _logger;\r\n\r\n    private readonly IOperationSingleton _singletonOperation;\r\n\r\n    public MyMiddleware(RequestDelegate next, ILogger<MyMiddleware> logger,\r\n        IOperationSingleton singletonOperation)\r\n    {\r\n        _logger = logger;\r\n        _singletonOperation = singletonOperation;\r\n        _next = next;\r\n    }\r\n\r\n    public async Task InvokeAsync(HttpContext context,\r\n        IOperationTransient transientOperation, IOperationScoped scopedOperation)\r\n    {\r\n        _logger.LogInformation(\"Transient: \" + transientOperation.OperationId);\r\n        _logger.LogInformation(\"Scoped: \" + scopedOperation.OperationId);\r\n        _logger.LogInformation(\"Singleton: \" + _singletonOperation.OperationId);\r\n\r\n        await _next(context);\r\n    }\r\n}\r\n"
    },
    {
        "file_name": "OrderManager.cs",
        "csharp_code": "public class OrderManager\r\n{\r\n    private readonly IPaymentProcessor _paymentProcessor;\r\n    private readonly ILogger _logger;\r\n    private CustomerService customerService;  // Direct Instantiation (Bad)\r\n    private ShippingService shippingService;  // Direct Instantiation (Bad)\r\n    private DatabaseService databaseService;  // Direct Instantiation (Bad)\r\n    private EmailService emailService;  // Direct Instantiation (Bad)\r\n\r\n    public OrderManager(IPaymentProcessor paymentProcessor, ILogger logger)\r\n    {\r\n        _paymentProcessor = paymentProcessor;  // Constructor Injection (Coupling)\r\n        _logger = logger;  // Constructor Injection (Coupling)\r\n\r\n        // Direct Instantiations (High Coupling)\r\n        customerService = new CustomerService();\r\n        shippingService = new ShippingService();\r\n        databaseService = new DatabaseService();\r\n        emailService = new EmailService();\r\n    }\r\n\r\n    public void ProcessOrder(int orderId, double amount)\r\n    {\r\n        // Static method call (High Coupling)\r\n        string customerDetails = OrderHelper.GetCustomerDetails(orderId);\r\n\r\n        customerService.ValidateCustomer(orderId);  // Direct method call (Tight Coupling)\r\n        _paymentProcessor.ProcessPayment(amount);  // Interface Implementation (Coupling)\r\n        _logger.Log($\"Payment processed for order ID: {orderId}\");\r\n\r\n        databaseService.SaveOrder(orderId, amount);  // Direct method calls (Tight Coupling)\r\n        shippingService.ScheduleDelivery(orderId);  // Direct method calls (Tight Coupling)\r\n        emailService.SendEmail(\"Order Confirmation\", \"Your order has been processed successfully.\");\r\n\r\n        Console.WriteLine(\"Order processing completed.\");\r\n    }\r\n}"
    },
    {
        "file_name": "OrderServiceee.cs",
        "csharp_code": "public class OrderService\r\n{\r\n    private PaymentProcessor paymentProcessor;\r\n    private InvoiceService invoiceService;\r\n    private NotificationService notificationService;\r\n\r\n    public OrderService()\r\n    {\r\n        paymentProcessor = new PaymentProcessor(); // Direct dependency\r\n        invoiceService = new InvoiceService();     // Direct dependency\r\n        notificationService = new NotificationService(); // Direct dependency\r\n    }\r\n\r\n    public void PlaceOrder(Customer customer, Product product)\r\n    {\r\n        Console.WriteLine($\"Placing order for {customer.Name} - {product.Name}\");\r\n        paymentProcessor.ProcessPayment(customer, product.Price);\r\n        invoiceService.GenerateInvoice(customer, product);\r\n        notificationService.SendOrderConfirmation(customer);\r\n    }\r\n}"
    },
    {
        "file_name": "OrderServicerrrr.cs",
        "csharp_code": "public class OrderService : IPaymentProcessor, ILogger\r\n    {\r\n        private readonly IPaymentProcessor _paymentProcessor; // Constructor Injection\r\n        private ILogger _logger; // Setter Injection\r\n        private static string logPath = \"log.txt\"; // Static Variable Usage\r\n\r\n        public OrderService(IPaymentProcessor paymentProcessor)\r\n        {\r\n            _paymentProcessor = paymentProcessor;\r\n        }\r\n\r\n        public void SetLogger(ILogger logger)\r\n        {\r\n            _logger = logger;\r\n        }\r\n\r\n        public void ProcessPayment()\r\n        {\r\n            _paymentProcessor.ProcessPayment();\r\n        }\r\n\r\n        public void Log(string message)\r\n        {\r\n            File.WriteAllText(logPath, message); // Static method usage\r\n        }\r\n\r\n        public void CreateInvoice()\r\n        {\r\n            Invoice invoice = new Invoice(); // Direct Object Instantiation\r\n            invoice.Generate();\r\n        }\r\n    }"
    },
    {
        "file_name": "UserServiceee.cs",
        "csharp_code": "public class UserService : IDatabaseService\r\n    {\r\n        private readonly IDatabaseService _databaseService; // Constructor Injection\r\n        private IEmailService _emailService; // Setter Injection\r\n        private static HttpClient httpClient = new HttpClient(); // Static Variable Usage\r\n\r\n        public UserService(IDatabaseService databaseService)\r\n        {\r\n            _databaseService = databaseService;\r\n        }\r\n\r\n        public void SetEmailService(IEmailService emailService)\r\n        {\r\n            _emailService = emailService;\r\n        }\r\n\r\n        public void SaveData(string data)\r\n        {\r\n            _databaseService.SaveData(data);\r\n        }\r\n\r\n        public void NotifyUser(string email, string message)\r\n        {\r\n            _emailService?.SendEmail(email, message);\r\n        }\r\n\r\n        public void FetchDataFromAPI()\r\n        {\r\n            var response = httpClient.GetStringAsync(\"https://api.example.com/data\").Result; // Static Method Call\r\n            Console.WriteLine(\"Fetched data: \" + response);\r\n        }\r\n\r\n        public void ProcessUser()\r\n        {\r\n            Logger logger = new Logger(); // Direct Object Instantiation\r\n            logger.LogMessage(\"User processed successfully.\");\r\n        }\r\n    }\r\n"
    },
    {
        "file_name": "UserManager.cs",
        "csharp_code": "public class UserManager\r\n    {\r\n        private readonly IAuthService _authService; // Constructor Injection\r\n        private readonly IDatabaseService _databaseService; // Constructor Injection\r\n        private ILoggerService _logger; // Setter Injection\r\n        private static HttpClient _httpClient = new HttpClient(); // Static Variable Usage\r\n\r\n        public UserManager(IAuthService authService, IDatabaseService databaseService)\r\n        {\r\n            _authService = authService;\r\n            _databaseService = databaseService;\r\n        }\r\n\r\n        public void SetLogger(ILoggerService logger)\r\n        {\r\n            _logger = logger;\r\n        }\r\n\r\n        public bool Login(string username, string password)\r\n        {\r\n            bool isAuthenticated = _authService.Authenticate(username, password);\r\n            if (isAuthenticated)\r\n            {\r\n                _logger?.Log($\"User {username} logged in successfully.\");\r\n                _databaseService.SaveUser(username);\r\n            }\r\n            return isAuthenticated;\r\n        }\r\n\r\n        public void FetchRemoteData()\r\n        {\r\n            var response = _httpClient.GetStringAsync(\"https://example.com/api/data\").Result; // Static Method Call\r\n            Console.WriteLine(\"Fetched Data: \" + response);\r\n        }\r\n\r\n        public void GenerateReport()\r\n        {\r\n            ReportGenerator report = new ReportGenerator(); // Direct Object Instantiation\r\n            report.Generate();\r\n        }\r\n    }\r\n"
    },
    {
        "file_name": "UserManager.cs",
        "csharp_code": "public class UserManager\r\n    {\r\n        private readonly IAuthService _authService; // Constructor Injection\r\n        private readonly IDatabaseService _databaseService; // Constructor Injection\r\n        private ILoggerService _logger; // Setter Injection\r\n        private static HttpClient _httpClient = new HttpClient(); // Static Variable Usage\r\n\r\n        public UserManager(IAuthService authService, IDatabaseService databaseService)\r\n        {\r\n            _authService = authService;\r\n            _databaseService = databaseService;\r\n        }\r\n\r\n        public void SetLogger(ILoggerService logger)\r\n        {\r\n            _logger = logger;\r\n        }\r\n\r\n        public bool Login(string username, string password)\r\n        {\r\n            bool isAuthenticated = _authService.Authenticate(username, password);\r\n            if (isAuthenticated)\r\n            {\r\n                _logger?.Log($\"User {username} logged in successfully.\");\r\n                _databaseService.SaveUser(username);\r\n            }\r\n            return isAuthenticated;\r\n        }\r\n\r\n        public void FetchRemoteData()\r\n        {\r\n            var response = _httpClient.GetStringAsync(\"https://example.com/api/data\").Result; // Static Method Call\r\n            Console.WriteLine(\"Fetched Data: \" + response);\r\n        }\r\n\r\n        public void GenerateReport()\r\n        {\r\n            ReportGenerator report = new ReportGenerator(); // Direct Object Instantiation\r\n            Cat c1 = new Cat()\r\n            Dog d1 = new Dog()\r\n            report.Generate();\r\n        }\r\n    }\r\n"
    },
    {
        "file_name": "PaymentProcessor.cs",
        "csharp_code": "public class PaymentProcessor\r\n{\r\n    public bool ProcessPayment(double amount)\r\n    {\r\n        if (amount <= 0)\r\n        {\r\n            throw new ArgumentException(\"Amount must be greater than zero.\");\r\n        }\r\n        Console.WriteLine($\"Processing payment of ${amount}\");\r\n        return true;\r\n    }\r\n}"
    },
    {
        "file_name": "FileLogger.cs",
        "csharp_code": "using System;\r\nusing System.IO;\r\n\r\npublic class FileLogger\r\n{\r\n    private readonly string _filePath;\r\n\r\n    public FileLogger(string filePath)\r\n    {\r\n        _filePath = filePath;\r\n    }\r\n\r\n    public void Log(string message)\r\n    {\r\n        File.AppendAllText(_filePath, DateTime.Now + \": \" + message + \"\\n\");\r\n        Console.WriteLine(\"Log written to file.\");\r\n    }\r\n}"
    },
    {
        "file_name": "EmailService.cs",
        "csharp_code": "using System;\r\n\r\npublic class EmailService\r\n{\r\n    public void SendEmail(string recipient, string subject, string body)\r\n    {\r\n        if (string.IsNullOrEmpty(recipient))\r\n        {\r\n            throw new ArgumentException(\"Recipient email cannot be empty.\");\r\n        }\r\n        Console.WriteLine($\"Sending email to {recipient}: {subject}\\n{body}\");\r\n    }\r\n}"
    },
    {
        "file_name": "OrderProcessor.cs",
        "csharp_code": "public class OrderProcessor\r\n{\r\n    private readonly PaymentProcessor _paymentProcessor;\r\n    private readonly EmailService _emailService;\r\n\r\n    public OrderProcessor(PaymentProcessor paymentProcessor, EmailService emailService)\r\n    {\r\n        _paymentProcessor = paymentProcessor;\r\n        _emailService = emailService;\r\n    }\r\n\r\n    public void ProcessOrder(int orderId, double amount, string customerEmail)\r\n    {\r\n        bool paymentSuccess = _paymentProcessor.ProcessPayment(amount);\r\n        if (paymentSuccess)\r\n        {\r\n            _emailService.SendEmail(customerEmail, \"Order Confirmation\", \"Your order has been processed successfully.\");\r\n            Console.WriteLine(\"Order processed successfully.\");\r\n        }\r\n    }\r\n}"
    },
    {
        "file_name": "UserManager.cs",
        "csharp_code": "public class UserManager\r\n{\r\n    private readonly List<string> _users = new List<string>();\r\n\r\n    public void AddUser(string username)\r\n    {\r\n        if (string.IsNullOrEmpty(username))\r\n        {\r\n            throw new ArgumentException(\"Username cannot be empty.\");\r\n        }\r\n        _users.Add(username);\r\n        Console.WriteLine($\"User {username} added successfully.\");\r\n    }\r\n\r\n    public void ListUsers()\r\n    {\r\n        Console.WriteLine(\"Registered Users:\");\r\n        foreach (var user in _users)\r\n        {\r\n            Console.WriteLine(user);\r\n        }\r\n    }\r\n}"
    },
    {
        "file_name": "ExceptionHandlingExample.cs",
        "csharp_code": "using System;\r\n\r\nclass ExceptionHandlingExample\r\n{\r\n    public void ProcessData()\r\n    {\r\n        try\r\n        {\r\n            Console.WriteLine(\"Processing data...\");\r\n            int result = 10 / 0; // This will cause a DivideByZeroException\r\n        }\r\n        catch (DivideByZeroException ex)\r\n        {\r\n            Console.WriteLine(\"Error: Division by zero.\");\r\n        }\r\n        finally\r\n        {\r\n            Console.WriteLine(\"Cleaning up resources.\");\r\n        }\r\n    }\r\n\r\n    public void NestedTryCatch()\r\n    {\r\n        try {\r\n            Console.WriteLine(\"Outer try block\");\r\n\r\n            try\r\n            {\r\n                try\r\n            {\r\n                Console.WriteLine(\"Inner try block\");\r\n                throw new Exception(\"Inner exception\");\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.WriteLine(\"Caught inner exception: \" + ex.Message);\r\n            }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.WriteLine(\"Caught inner exception: \" + ex.Message);\r\n            }\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine(\"Caught outer exception: \" + ex.Message);\r\n        }\r\n        finally\r\n        {\r\n            Console.WriteLine(\"Final cleanup\");\r\n        }\r\n    }\r\n}\r\n"
    }
]
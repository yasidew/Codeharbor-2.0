control_structure_complexity,nesting_level,compound_condition_weight,try_catch_weight,current_inheritance,label
2,5,3,1,3,Refactor: Reduce nested if-statements and simplify complex conditions using helper functions or early returns.
0,1,3,2,2,no action needed
0,0,0,0,1,No action needed
0,0,0,5,1,Refactor: Flatten try-catch blocks by handling specific exceptions separately.
0,0,0,2,1,No action needed
0,0,0,4,1,Refactor: Flatten try-catch blocks by handling specific exceptions separately.
0,0,0,3,1,No action needed
0,0,0,1,1,No action needed
0,0,0,0,2,No action needed
1,1,2,0,2,No action needed
0,1,0,0,2,No action needed
1,2,2,0,2,No action needed
0,0,0,1,2,No action needed
0,0,0,2,2,No action needed
0,0,0,0,3,No action needed
2,1,0,0,3,No action needed
0,1,0,0,3,No action needed
1,2,2,0,3,No action needed
0,2,0,0,3,No action needed
2,1,0,0,2,No action needed
2,5,0,0,2,Refactor: Optimize loop nesting by breaking logic into smaller functions or using iterators.
1,5,1,0,2,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
1,1,1,0,1,No action needed
0,2,0,0,1,No action needed
3,1,0,0,1,No action needed
0,1,0,0,1,No action needed
2,2,0,0,1,No action needed
2,1,0,0,1,No action needed
1,2,1,0,1,No action needed
1,2,2,0,1,No action needed
0,1,0,5,1,Refactor: Flatten try-catch blocks by handling specific exceptions separately.
1,1,6,0,1,Refactor: Simplify complex conditions using boolean variables or encapsulating logic in functions.
0,1,1,0,1,No action needed
1,1,2,0,1,No action needed
1,1,3,0,1,No action needed
2,5,0,0,1,Refactor: Optimize loop nesting by breaking logic into smaller functions or using iterators.
0,3,0,0,1,No action needed
1,5,1,0,1,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
0,0,0,5,2,Refactor: Flatten try-catch blocks by handling specific exceptions separately.
0,4,0,0,1,No action needed
0,5,0,0,1,No action needed
0,4,0,1,1,No action needed
0,2,2,0,1,No action needed
0,0,0,0,4,Refactor: Simplify class hierarchy by breaking down large inheritance chains into composition-based structures.
0,1,0,3,1,No action needed
1,6,2,0,1,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
0,6,0,0,1,No action needed
1,1,1,0,2,No action needed
0,2,0,0,2,No action needed
2,2,0,0,2,No action needed
0,3,0,0,2,No action needed
1,2,1,0,2,No action needed
0,3,1,0,2,No action needed
0,4,0,0,2,No action needed
0,0,6,0,1,Refactor: Simplify complex conditions using boolean variables or encapsulating logic in functions.
2,1,1,0,3,No action needed
2,2,1,0,2,No action needed
2,1,1,0,1,No action needed
1,1,0,0,1,No action needed
2,1,2,0,1,No action needed
0,1,0,1,1,No action needed
2,5,1,0,1,Refactor: Optimize loop nesting by breaking logic into smaller functions or using iterators.
2,1,1,0,2,No action needed
2,5,1,0,2,Refactor: Optimize loop nesting by breaking logic into smaller functions or using iterators.
2,2,1,0,1,No action needed
0,2,1,0,1,No action needed
1,2,0,0,1,No action needed
4,1,0,0,1,No action needed
1,5,6,0,1,Refactor: Reduce nested if-statements and simplify complex conditions using helper functions or early returns.
1,6,1,0,1,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
3,5,0,0,1,Refactor: Minimize switch-case complexity by using polymorphism or strategy pattern.
0,2,0,1,1,No action needed
0,2,0,1,2,No action needed
0,3,0,1,1,No action needed
0,1,0,1,2,No action needed
3,2,0,0,1,No action needed
3,2,0,1,1,No action needed
5,2,0,0,1,No action needed
1,5,2,0,1,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
0,0,1,0,1,No action needed
0,7,0,0,1,No action needed
6,7,0,0,1,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
0,1,0,2,1,No action needed
1,3,1,0,1,No action needed
0,0,0,0,5,Refactor: Reduce deep inheritance by favoring composition over inheritance.
2,3,1,0,1,No action needed
4,1,1,0,1,No action needed
1,1,4,0,1,No action needed
1,4,1,0,1,No action needed
1,4,2,0,1,No action needed
1,7,2,0,1,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
1,8,1,0,1,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
0,8,0,0,1,No action needed
2,3,0,0,1,No action needed
2,4,0,0,1,No action needed
1,5,4,0,1,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
3,3,1,0,1,No action needed
1,3,0,0,1,No action needed
3,2,1,0,1,No action needed
3,1,1,0,1,No action needed
1,7,2,0,2,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
1,7,2,0,3,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
1,8,2,0,1,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
1,8,2,0,2,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
1,8,2,0,3,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
1,5,4,0,2,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
1,5,4,0,3,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
1,8,1,0,2,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
1,8,1,0,3,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
1,3,1,0,2,No action needed
1,4,1,0,2,No action needed
0,2,0,2,1,No action needed
6,4,1,0,1,No action needed
0,9,0,0,1,No action needed
6,2,1,0,1,No action needed
6,1,1,0,1,No action needed
0,0,0,4,2,Refactor: Flatten try-catch blocks by handling specific exceptions separately.
0,0,0,3,2,No action needed
0,0,0,5,3,Refactor: Flatten try-catch blocks by handling specific exceptions separately.
0,0,0,2,3,No action needed
0,0,0,4,3,Refactor: Flatten try-catch blocks by handling specific exceptions separately.
0,0,0,3,3,No action needed
0,0,0,1,3,No action needed
1,1,2,0,3,No action needed
1,5,2,0,2,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
0,0,1,0,2,No action needed
0,7,0,0,2,No action needed
6,7,0,0,2,Refactor: Minimize switch-case complexity by using polymorphism or strategy pattern.
0,1,0,2,2,No action needed
1,5,2,0,3,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
0,0,1,0,3,No action needed
0,7,0,0,3,No action needed
6,7,0,0,3,Refactor: Minimize switch-case complexity by using polymorphism or strategy pattern.
0,1,0,2,3,No action needed
1,3,1,0,3,No action needed
3,1,0,0,2,No action needed
0,1,0,5,2,Refactor: Flatten try-catch blocks by handling specific exceptions separately.
1,1,6,0,2,Refactor: Simplify complex conditions using boolean variables or encapsulating logic in functions.
0,1,1,0,2,No action needed
1,1,3,0,2,No action needed
1,1,1,0,3,No action needed
3,1,0,0,3,No action needed
2,2,0,0,3,No action needed
1,2,1,0,3,No action needed
0,1,0,5,3,Refactor: Flatten try-catch blocks by handling specific exceptions separately.
1,1,6,0,3,Refactor: Simplify complex conditions using boolean variables or encapsulating logic in functions.
0,1,1,0,3,No action needed
1,1,3,0,3,No action needed
2,5,0,0,3,Refactor: Optimize loop nesting by breaking logic into smaller functions or using iterators.
0,3,0,0,3,No action needed
1,5,1,0,3,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
0,1,0,3,2,No action needed
1,6,2,0,2,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
0,6,0,0,2,No action needed
0,1,0,3,3,No action needed
1,6,2,0,3,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
0,6,0,0,3,No action needed
0,3,1,0,1,No action needed
5,8,0,0,3,Refactor: Minimize switch-case complexity by using polymorphism or strategy pattern.
5,8,0,0,2,Refactor: Minimize switch-case complexity by using polymorphism or strategy pattern.
5,8,0,0,1,Refactor: Minimize switch-case complexity by using polymorphism or strategy pattern.
4,8,0,0,3,Refactor: Minimize switch-case complexity by using polymorphism or strategy pattern.
4,8,0,0,2,Refactor: Minimize switch-case complexity by using polymorphism or strategy pattern.
4,8,0,0,1,Refactor: Minimize switch-case complexity by using polymorphism or strategy pattern.
3,8,0,0,3,Refactor: Minimize switch-case complexity by using polymorphism or strategy pattern.
3,8,0,0,2,Refactor: Minimize switch-case complexity by using polymorphism or strategy pattern.
3,8,0,0,1,Refactor: Minimize switch-case complexity by using polymorphism or strategy pattern.
0,0,0,6,1,Refactor: Reduce excessive try-catch nesting by isolating error-prone logic into separate functions.
0,0,0,6,2,Refactor: Reduce excessive try-catch nesting by isolating error-prone logic into separate functions.
0,0,0,6,3,Refactor: Reduce excessive try-catch nesting by isolating error-prone logic into separate functions.
4,6,1,0,1,Refactor: Minimize switch-case complexity by using polymorphism or strategy pattern.
1,7,1,0,1,Refactor: Reduce deep if-nesting by restructuring logic or using guard clauses.
4,2,1,0,1,No action needed
0,3,2,0,1,No action needed
1,3,3,0,1,No refactoring needed.
1,4,4,0,1,No refactoring needed.
1,2,3,0,1,No refactoring needed.
5,1,1,0,1,No refactoring needed.

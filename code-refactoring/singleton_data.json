[
  {
    "type": "EagerlyInitializedSingleton",
    "input": "public class EagerlyInitializedSingleton {\n\n    public EagerlyInitializedSingleton() {}\n\n}",
    "output": "public class EagerlyInitializedSingleton {\n\n    private EagerlyInitializedSingleton() {}\n\n    private static final EagerlyInitializedSingleton instance = new EagerlyInitializedSingleton();\n\n    public static EagerlyInitializedSingleton getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazyInitializedSingleton",
    "input": "public class LazyInitializedSingleton {\n\n    public LazyInitializedSingleton() {}\n\n}",
    "output": "public class LazyInitializedSingleton {\n\n    private static LazyInitializedSingleton instance;\n\n    private LazyInitializedSingleton() {}\n\n    public static LazyInitializedSingleton getInstance() {\n        if (instance == null) {\n            instance = new LazyInitializedSingleton();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingleton",
    "input": "public class ThreadSafeSingleton {\n\n    public ThreadSafeSingleton() {}\n\n}",
    "output": "public class ThreadSafeSingleton {\n\n    private static ThreadSafeSingleton instance;\n\n    private ThreadSafeSingleton() {}\n\n    public static synchronized ThreadSafeSingleton getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingleton();\n        }\n        return instance;\n    }\n\n}"
  },  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingleton {\n\n    public BillPughSingleton() {}\n\n}",
    "output": "public class BillPughSingleton {\n\n    private BillPughSingleton() {}\n\n    private static class SingletonHelper {\n        private static final BillPughSingleton INSTANCE = new BillPughSingleton();\n    }\n\n    public static BillPughSingleton getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "EnumSingleton",
    "input": "public class EnumSingleton {\n\n    public EnumSingleton() {}\n\n}",
    "output": "public enum EnumSingleton {\n    INSTANCE;\n\n    public void someMethod() {\n        // Your method implementation\n    }\n}"
  },
  {
    "type": "EagerlyInitializedStaticBlockSingleton",
    "input": "public class EagerlyInitializedStaticBlockSingleton {\n\n    public EagerlyInitializedStaticBlockSingleton() {}\n\n}",
    "output": "public class EagerlyInitializedStaticBlockSingleton {\n\n    private static EagerlyInitializedStaticBlockSingleton instance;\n\n    private EagerlyInitializedStaticBlockSingleton() {}\n\n    static {\n        try {\n            instance = new EagerlyInitializedStaticBlockSingleton();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    public static EagerlyInitializedStaticBlockSingleton getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EnumSingleton",
    "input": "public class EnumSingleton {\n\n    public EnumSingleton() {}\n\n}",
    "output": "public enum EnumSingleton {\n\n    INSTANCE;\n\n    //other\n}"
  },
  {
    "type": "LazilyInitializedDoubleCheckedLockingSingleton",
    "input": "public class LazilyInitializedDoubleCheckedLockingSingleton {\n\n    public LazilyInitializedDoubleCheckedLockingSingleton() {}\n\n}",
    "output": "public class LazilyInitializedDoubleCheckedLockingSingleton {\n\n    private static volatile LazilyInitializedDoubleCheckedLockingSingleton instance;\n\n    private LazilyInitializedDoubleCheckedLockingSingleton() {}\n\n    public static LazilyInitializedDoubleCheckedLockingSingleton getInstance() {\n        if(instance == null) {\n            synchronized (LazilyInitializedDoubleCheckedLockingSingleton.class) {\n                if(instance == null) {\n                    instance = new LazilyInitializedDoubleCheckedLockingSingleton();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazilyInitializedInnerClassSingleton",
    "input": "public class LazilyInitializedInnerClassSingleton {\n\n    public LazilyInitializedInnerClassSingleton() {}\n\n}",
    "output": "public class LazilyInitializedInnerClassSingleton {\n\n    private LazilyInitializedInnerClassSingleton() {}\n\n    private static class InnerSingletonInitializer {\n        private static final LazilyInitializedInnerClassSingleton INSTANCE = new LazilyInitializedInnerClassSingleton();\n    }\n\n    public static LazilyInitializedInnerClassSingleton getInstance() {\n        return InnerSingletonInitializer.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingleton {\n\n    public LazilyInitializedSingleton() {}\n\n}",
    "output": "public class LazilyInitializedSingleton {\n\n    private static LazilyInitializedSingleton instance;\n\n    private LazilyInitializedSingleton() {}\n\n    public static synchronized LazilyInitializedSingleton getInstance() {\n        if(instance == null) {\n            instance = new LazilyInitializedSingleton();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ProtectionAgainstReflectionSingleton",
    "input": "public class ProtectionAgainstReflectionSingleton {\n\n    public ProtectionAgainstReflectionSingleton() {}\n\n}",
    "output": "public class ProtectionAgainstReflectionSingleton {\n\n    private ProtectionAgainstReflectionSingleton() {\n        if(instance != null) {\n            throw new IllegalStateException(\"Singleton already initialized\");\n        }\n    }\n\n    private static final ProtectionAgainstReflectionSingleton instance = new ProtectionAgainstReflectionSingleton();\n\n    public static ProtectionAgainstReflectionSingleton getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SerializableSingleton",
    "input": "public class SerializableSingleton {\n\n    public SerializableSingleton() {}\n\n}",
    "output": "public class SerializableSingleton implements Serializable {\n\n    private static final long serialVersionUID = -6265755052204900542L;\n\n    private static SerializableSingleton instance;\n\n    private SerializableSingleton() {}\n\n    public static synchronized SerializableSingleton getInstance() {\n        if(instance == null) {\n            instance = new SerializableSingleton();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SerializableWithReadResolveSingleton",
    "input": "public class SerializableWithReadResolveSingleton {\n\n    public SerializableWithReadResolveSingleton() {}\n\n}",
    "output": "public class SerializableWithReadResolveSingleton implements Serializable {\n\n    private static final long serialVersionUID = 1911904003687931976L;\n\n    private static SerializableWithReadResolveSingleton instance;\n\n    private SerializableWithReadResolveSingleton() {}\n\n    protected Object readResolve() {\n        return instance;\n    }\n\n    public static synchronized SerializableWithReadResolveSingleton getInstance() {\n        if(instance == null) {\n            instance = new SerializableWithReadResolveSingleton();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class Universe {\n\n    private String name;\n    private int numberOfGalaxies;\n\n    public Universe(String name, int numberOfGalaxies) {\n        this.name = name;\n        this.numberOfGalaxies = numberOfGalaxies;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public int getNumberOfGalaxies() {\n        return this.numberOfGalaxies;\n    }\n\n    public void setName(String aNewName) {\n        this.name = aNewName;\n    }\n\n}\n\npublic class BigBang {\n\n    public BigBang() {}\n\n    public Universe makeUniverse(String name, int numberOfGalaxies) {\n        return new Universe(name, numberOfGalaxies);\n    }\n\n}",
    "output": "public class Universe {\n    private static Universe instance;\n\n    private String name;\n    private int numberOfGalaxies;\n\n    private Universe(String name, int numberOfGalaxies) {\n        this.name = name;\n        this.numberOfGalaxies = numberOfGalaxies;\n    }\n\n    public static Universe getInstance(String name, int numberOfGalaxies) {\n        if (instance == null) {\n            instance = new Universe(name, numberOfGalaxies);\n        }\n        return instance;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public int getNumberOfGalaxies() {\n        return this.numberOfGalaxies;\n    }\n\n    public void setName(String aNewName) {\n        this.name = aNewName;\n    }\n}\n\npublic class BigBang {\n    public BigBang() {}\n\n    public Universe makeUniverse(String name, int numberOfGalaxies) {\n        return Universe.getInstance(name, numberOfGalaxies);\n    }\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class MakeACaptain {\n\n    public MakeACaptain() {}\n\n    public static MakeACaptain getCaptain() {\n        return new MakeACaptain();\n    }\n\n    public static void main(String[] args) {\n        MakeACaptain c1 = new MakeACaptain();\n        MakeACaptain c2 = new MakeACaptain();\n\n        if (c1 == c2) {\n            System.out.println(\"c1 i c2 su iste instance\");\n        } else {\n            System.out.println(\"c1 i c2 nisu iste instance\");\n        }\n    }\n}",
    "output": "public class MakeACaptain {\n    private static MakeACaptain _captain;\n\n    private MakeACaptain() {}\n\n    public static MakeACaptain getCaptain() {\n        if (_captain == null) {\n            _captain = new MakeACaptain();\n            System.out.println(\"Izabran novi kapiten\");\n        } else {\n            System.out.println(\"Vec postoji kapiten\");\n        }\n        return _captain;\n    }\n\n    public static void main(String[] args) {\n        MakeACaptain c1 = MakeACaptain.getCaptain();\n        MakeACaptain c2 = MakeACaptain.getCaptain();\n\n        if (c1 == c2) {\n            System.out.println(\"c1 i c2 su iste instance\");\n        }\n    }\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class printer {\n  public printer() {}\n\n  public static printer getPublicPrinter() {\n    return new printer();\n  }\n\n  public Connection getConnection() {\n    String url = \"jdbc:derby:memory:sample;create=true\";\n    Connection connection = null;\n    try {\n      connection = DriverManager.getConnection(url);\n    } catch (SQLException e) {\n      e.printStackTrace();\n    }\n    return connection;\n  }\n}",
    "output": "public class printer {\n  private static volatile printer publicPrinter;\n  private static volatile Connection connection;\n\n  private printer() {\n    if (publicPrinter != null) {\n      throw new RuntimeException(\"please use publicPrinter\");\n    }\n  }\n\n  public static printer getPublicPrinter() {\n    if (publicPrinter == null) {\n      synchronized (printer.class) {\n        if (publicPrinter == null) {\n          publicPrinter = new printer();\n        }\n      }\n    }\n    return publicPrinter;\n  }\n\n  public Connection getConnection() {\n    if (connection == null) {\n      synchronized (printer.class) {\n        if (connection == null) {\n          String url = \"jdbc:derby:memory:sample;create=true\";\n          try {\n            connection = DriverManager.getConnection(url);\n          } catch (SQLException e) {\n            e.printStackTrace();\n          }\n        }\n      }\n    }\n    return connection;\n  }\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class Singleton {\n\n    public String str;\n\n    public Singleton() {\n        str = \"This is a string of singleton\";\n    }\n\n    public static Singleton getInstance() {\n        return new Singleton();\n    }\n\n    public static void main(String[] args) {\n        Singleton s = new Singleton();\n\n        Singleton t = new Singleton();\n\n        Singleton u = new Singleton();\n\n        t.str = t.str.toUpperCase();\n\n        System.out.println(\"For Instance of 's': \" + s.str);\n        System.out.println(\"For Instance of 't': \" + t.str);\n        System.out.println(\"For Instance of 'u': \" + u.str);\n    }\n}",
    "output": "public class Singleton {\n\n    public String str;\n\n    private Singleton() {\n        str = \"This is a string of singleton\";\n    }\n\n    private static Singleton singleInstance = null;\n\n    public static Singleton getInstance() {\n        if (singleInstance == null) {\n            singleInstance = new Singleton();\n        }\n        return singleInstance;\n    }\n\n    public static void main(String[] args) {\n        Singleton s = Singleton.getInstance();\n\n        Singleton t = Singleton.getInstance();\n\n        Singleton u = Singleton.getInstance();\n\n        t.str = t.str.toUpperCase();\n\n        System.out.println(\"For Instance of 's': \" + s.str);\n        System.out.println(\"For Instance of 't': \" + t.str);\n        System.out.println(\"For Instance of 'u': \" + u.str);\n    }\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckLockSingleton {\n\n    public DoubleCheckLockSingleton() {\n        // public constructor\n    }\n\n    public static DoubleCheckLockSingleton getInstance() {\n        return new DoubleCheckLockSingleton();\n    }\n}",
    "output": "public class DoubleCheckLockSingleton {\n    private static volatile DoubleCheckLockSingleton instance = null;\n\n    private DoubleCheckLockSingleton() {\n        // private constructor\n    }\n\n    public static DoubleCheckLockSingleton getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckLockSingleton.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckLockSingleton();\n                }\n            }\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "EagerSingleton",
    "input": "public class EagerSingleton {\n    public EagerSingleton() {}\n    public static EagerSingleton getInstance() {\n        return new EagerSingleton();\n    }\n}",
    "output": "public class EagerSingleton {\n    private static final EagerSingleton instance = new EagerSingleton();\n\n    private EagerSingleton() {\n        // private constructor\n    }\n\n    public static EagerSingleton getInstance() {\n        return instance;\n    }\n}"
  },
  {
    "type": "EnumSingleton",
    "input": "public class EnumSingleton {\n\n    public EnumSingleton(String info) {\n        // constructor\n    }\n\n    public EnumSingleton getInstance() {\n        return new EnumSingleton(\"property want to initialize at once\");\n    }\n}",
    "output": "public enum EnumSingleton {\n\n    INSTANCE(\"property want to initialize at once\");\n\n    private String info;\n\n    private EnumSingleton(String info) {\n        this.info = info;\n    }\n\n    public EnumSingleton getInstance() {\n        return INSTANCE;\n    }\n}"
  },
  {
    "type": "LazySingleton",
    "input": "public class LazySingleton {\n    public LazySingleton() {}\n    public static LazySingleton getInstance() {\n        return new LazySingleton();\n    }\n}",
    "output": "public class LazySingleton {\n    private static LazySingleton instance;\n\n    private LazySingleton() {\n        // private constructor\n    }\n\n    public static LazySingleton getInstance() {\n        if (instance == null) {\n            instance = new LazySingleton();\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class Singleton {\n    public Singleton() {}\n    public static Singleton getInstance() {\n        return new Singleton();\n    }\n}",
    "output": "public class Singleton {\n\n    private Singleton() {\n    }\n\n    private static class SingletonHelper {\n        private static final Singleton INSTANCE = new Singleton();\n    }\n\n    public static Singleton getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n}"
  },
  {
    "type": "StaticBlockSingleton",
    "input": "public class StaticBlockSingleton {\n    public StaticBlockSingleton() {}\n}",
    "output": "public class StaticBlockSingleton {\n    public static StaticBlockSingleton instance;\n\n    private StaticBlockSingleton() {\n        // private constructor\n    }\n\n    static {\n        instance = new StaticBlockSingleton();\n    }\n}"
  },
  {
    "type": "ThreadSafeDoubleCheckedLockingSingleton",
    "input": "public class ThreadSafeSingle {\n    public ThreadSafeSingle() {}\n    public static ThreadSafeSingle getInstance() {\n        return new ThreadSafeSingle();\n    }\n}",
    "output": "public class ThreadSafeSingle {\n    private static volatile ThreadSafeSingle instance = null;\n\n    private ThreadSafeSingle() {}\n\n    public static ThreadSafeSingle getInstance() {\n        if (instance == null) {\n            synchronized (ThreadSafeSingle.class) {\n                if (instance == null) {\n                    instance = new ThreadSafeSingle();\n                }\n            }\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "OptimizedLazySingleton",
    "input": "public class YourObject {\n    public YourObject() {}\n    public static YourObject getInstance() {\n        return new YourObject();\n    }\n}",
    "output": "public class YourObject {\n\n    private static final Object lock = new Object();\n    private static volatile YourObject instance;\n\n    public static YourObject getInstance() {\n        YourObject r = instance;\n        if (r == null) {\n            synchronized (lock) {\n                r = instance;\n                if (r == null) {\n                    r = new YourObject();\n                    instance = r;\n                }\n            }\n        }\n        return r;\n    }\n}"
  },
  {
    "type": "LazySingleton",
    "input": "public class Singleton {\n    \n    private Singleton() {\n        // private constructor\n    }\n\n    public void mostrarMensagem() {\n        System.out.println(\"Exemplo de Singleton!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Singleton instancia = new Singleton();\n        instancia.mostrarMensagem();\n    }\n}",
    "output": "public class Singleton {\n    \n    private static Singleton instanciaUnica;\n\n    private Singleton() {\n        // private constructor\n    }\n\n    public static Singleton getInstancia() {\n        if (instanciaUnica == null) {\n            instanciaUnica = new Singleton();\n        }\n        return instanciaUnica;\n    }\n\n    public void mostrarMensagem() {\n        System.out.println(\"Exemplo de Singleton!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Singleton instancia = Singleton.getInstancia();\n        instancia.mostrarMensagem();\n    }\n}"
  },
  {
    "type": "ThreadSafeSingletonWithInitializationOnDemand",
    "input": "public class ThreadSafeSingleton {\n\n    public ThreadSafeSingleton() {}\n\n}",
    "output": "public class ThreadSafeSingleton {\n\n    private ThreadSafeSingleton() {}\n\n    private static class SingletonHelper {\n        private static final ThreadSafeSingleton INSTANCE = new ThreadSafeSingleton();\n    }\n\n    public static ThreadSafeSingleton getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "SynchronizedSingleton",
    "input": "public class SynchronizedSingleton {\n\n    public SynchronizedSingleton() {}\n\n}",
    "output": "public class SynchronizedSingleton {\n\n    private static SynchronizedSingleton instance;\n\n    private SynchronizedSingleton() {}\n\n    public static synchronized SynchronizedSingleton getInstance() {\n        if (instance == null) {\n            instance = new SynchronizedSingleton();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithCounter",
    "input": "public class LazySingletonWithCounter {\n\n    public LazySingletonWithCounter() {}\n\n    public static LazySingletonWithCounter getInstance() {\n        return new LazySingletonWithCounter();\n    }\n\n    public int getInstanceCount() {\n        return 0;\n    }\n\n}",
    "output": "public class LazySingletonWithCounter {\n\n    private static LazySingletonWithCounter instance;\n    private static int counter;\n\n    private LazySingletonWithCounter() {\n        counter++;\n    }\n\n    public static LazySingletonWithCounter getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithCounter();\n        }\n        return instance;\n    }\n\n    public int getInstanceCount() {\n        return counter;\n    }\n\n}"
  },
  {
    "type": "EagerSingletonWithLogging",
    "input": "public class EagerSingletonWithLogging {\n\n    public EagerSingletonWithLogging() {}\n\n    public static EagerSingletonWithLogging getInstance() {\n        return new EagerSingletonWithLogging();\n    }\n\n}",
    "output": "public class EagerSingletonWithLogging {\n\n    private static final EagerSingletonWithLogging instance = new EagerSingletonWithLogging();\n\n    private EagerSingletonWithLogging() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    public static EagerSingletonWithLogging getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EnumSingletonWithData",
    "input": "public class EnumSingletonWithData {\n\n    public EnumSingletonWithData(String data) {}\n\n    public static EnumSingletonWithData getInstance() {\n        return new EnumSingletonWithData(\"default\");\n    }\n\n}",
    "output": "public enum EnumSingletonWithData {\n\n    INSTANCE(\"default\");\n\n    private String data;\n\n    private EnumSingletonWithData(String data) {\n        this.data = data;\n    }\n\n    public String getData() {\n        return data;\n    }\n\n    public void setData(String data) {\n        this.data = data;\n    }\n\n}"
  },
  {
    "type": "StaticBlockSingletonWithErrorHandling",
    "input": "public class StaticBlockSingletonWithErrorHandling {\n\n    public StaticBlockSingletonWithErrorHandling() {}\n\n}",
    "output": "public class StaticBlockSingletonWithErrorHandling {\n\n    private static StaticBlockSingletonWithErrorHandling instance;\n\n    private StaticBlockSingletonWithErrorHandling() {}\n\n    static {\n        try {\n            instance = new StaticBlockSingletonWithErrorHandling();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error creating singleton instance\", e);\n        }\n    }\n\n    public static StaticBlockSingletonWithErrorHandling getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithReadResolve",
    "input": "public class LazySingletonWithReadResolve {\n\n    public LazySingletonWithReadResolve() {}\n\n    public static LazySingletonWithReadResolve getInstance() {\n        return new LazySingletonWithReadResolve();\n    }\n\n}",
    "output": "public class LazySingletonWithReadResolve implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static LazySingletonWithReadResolve instance;\n\n    private LazySingletonWithReadResolve() {}\n\n    public static LazySingletonWithReadResolve getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithReadResolve();\n        }\n        return instance;\n    }\n\n    protected Object readResolve() {\n        return getInstance();\n    }\n\n}"
  },
  {
    "type": "SingletonWithEnumAndMethod",
    "input": "public class SingletonWithEnumAndMethod {\n\n    public SingletonWithEnumAndMethod() {}\n\n    public static SingletonWithEnumAndMethod getInstance() {\n        return new SingletonWithEnumAndMethod();\n    }\n\n}",
    "output": "public enum SingletonWithEnumAndMethod {\n\n    INSTANCE;\n\n    public void performAction() {\n        System.out.println(\"Action performed by SingletonWithEnumAndMethod\");\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingleton {\n\n    public ThreadLocalSingleton() {}\n\n}",
    "output": "public class ThreadLocalSingleton {\n\n    private static final ThreadLocal<ThreadLocalSingleton> instance = ThreadLocal.withInitial(ThreadLocalSingleton::new);\n\n    private ThreadLocalSingleton() {}\n\n    public static ThreadLocalSingleton getInstance() {\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "ParameterizedLazySingleton",
    "input": "public class ParameterizedLazySingleton {\n\n    public ParameterizedLazySingleton(String param) {}\n\n    public static ParameterizedLazySingleton getInstance() {\n        return new ParameterizedLazySingleton(\"default\");\n    }\n\n}",
    "output": "public class ParameterizedLazySingleton {\n\n    private static ParameterizedLazySingleton instance;\n    private String param;\n\n    private ParameterizedLazySingleton(String param) {\n        this.param = param;\n    }\n\n    public static synchronized ParameterizedLazySingleton getInstance(String param) {\n        if (instance == null) {\n            instance = new ParameterizedLazySingleton(param);\n        }\n        return instance;\n    }\n\n    public String getParam() {\n        return param;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithInitializationCount",
    "input": "public class LazySingletonWithInitializationCount {\n\n    public LazySingletonWithInitializationCount() {}\n\n}",
    "output": "public class LazySingletonWithInitializationCount {\n\n    private static LazySingletonWithInitializationCount instance;\n    private static int initializationCount = 0;\n\n    private LazySingletonWithInitializationCount() {\n        initializationCount++;\n    }\n\n    public static LazySingletonWithInitializationCount getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithInitializationCount();\n        }\n        return instance;\n    }\n\n    public static int getInitializationCount() {\n        return initializationCount;\n    }\n\n}"
  },
  {
    "type": "MultithreadedLazySingleton",
    "input": "public class MultithreadedLazySingleton {\n\n    public MultithreadedLazySingleton() {}\n\n}",
    "output": "public class MultithreadedLazySingleton {\n\n    private static MultithreadedLazySingleton instance;\n\n    private MultithreadedLazySingleton() {}\n\n    public static MultithreadedLazySingleton getInstance() {\n        synchronized (MultithreadedLazySingleton.class) {\n            if (instance == null) {\n                instance = new MultithreadedLazySingleton();\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithOptionalInstance",
    "input": "public class LazySingletonWithOptionalInstance {\n\n    public LazySingletonWithOptionalInstance() {}\n\n}",
    "output": "import java.util.Optional;\n\npublic class LazySingletonWithOptionalInstance {\n\n    private static LazySingletonWithOptionalInstance instance;\n\n    private LazySingletonWithOptionalInstance() {}\n\n    public static Optional<LazySingletonWithOptionalInstance> getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithOptionalInstance();\n        }\n        return Optional.of(instance);\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithDynamicConfig",
    "input": "public class LazySingletonWithDynamicConfig {\n\n    public LazySingletonWithDynamicConfig(String config) {}\n\n}",
    "output": "public class LazySingletonWithDynamicConfig {\n\n    private static LazySingletonWithDynamicConfig instance;\n    private String config;\n\n    private LazySingletonWithDynamicConfig(String config) {\n        this.config = config;\n    }\n\n    public static LazySingletonWithDynamicConfig getInstance(String config) {\n        if (instance == null) {\n            instance = new LazySingletonWithDynamicConfig(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "EagerSingletonWithStartupLogging",
    "input": "public class EagerSingletonWithStartupLogging {\n\n    public EagerSingletonWithStartupLogging() {}\n\n}",
    "output": "public class EagerSingletonWithStartupLogging {\n\n    private static final EagerSingletonWithStartupLogging instance = new EagerSingletonWithStartupLogging();\n\n    private EagerSingletonWithStartupLogging() {\n        System.out.println(\"Singleton initialized during class loading\");\n    }\n\n    public static EagerSingletonWithStartupLogging getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "DoubleCheckedLockingWithLazyInitialization",
    "input": "public class DoubleCheckedLockingWithLazyInitialization {\n\n    public DoubleCheckedLockingWithLazyInitialization() {}\n\n}",
    "output": "public class DoubleCheckedLockingWithLazyInitialization {\n\n    private static volatile DoubleCheckedLockingWithLazyInitialization instance;\n\n    private DoubleCheckedLockingWithLazyInitialization() {}\n\n    public static DoubleCheckedLockingWithLazyInitialization getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingWithLazyInitialization.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingWithLazyInitialization();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithWeakReference",
    "input": "public class SingletonWithWeakReference {\n\n    public SingletonWithWeakReference() {}\n\n}",
    "output": "import java.lang.ref.WeakReference;\n\npublic class SingletonWithWeakReference {\n\n    private static WeakReference<SingletonWithWeakReference> instance;\n\n    private SingletonWithWeakReference() {}\n\n    public static SingletonWithWeakReference getInstance() {\n        if (instance == null || instance.get() == null) {\n            instance = new WeakReference<>(new SingletonWithWeakReference());\n        }\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "StaticBlockWithInstanceValidation",
    "input": "public class StaticBlockWithInstanceValidation {\n\n    public StaticBlockWithInstanceValidation() {}\n\n}",
    "output": "public class StaticBlockWithInstanceValidation {\n\n    private static StaticBlockWithInstanceValidation instance;\n\n    private StaticBlockWithInstanceValidation() {}\n\n    static {\n        try {\n            instance = new StaticBlockWithInstanceValidation();\n        } catch (Exception e) {\n            System.err.println(\"Error during instance initialization: \" + e.getMessage());\n        }\n    }\n\n    public static StaticBlockWithInstanceValidation getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithPropertiesFile",
    "input": "public class LazySingletonWithPropertiesFile {\n\n    public LazySingletonWithPropertiesFile() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class LazySingletonWithPropertiesFile {\n\n    private static LazySingletonWithPropertiesFile instance;\n    private Properties properties;\n\n    private LazySingletonWithPropertiesFile() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LazySingletonWithPropertiesFile getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithPropertiesFile();\n        }\n        return instance;\n    }\n\n    public Properties getProperties() {\n        return properties;\n    }\n\n}"
  },
  {
    "type": "SingletonWithCache",
    "input": "public class SingletonWithCache {\n\n    public SingletonWithCache() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithCache {\n\n    private static SingletonWithCache instance;\n    private Map<String, String> cache;\n\n    private SingletonWithCache() {\n        cache = new HashMap<>();\n    }\n\n    public static SingletonWithCache getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCache();\n        }\n        return instance;\n    }\n\n    public void putInCache(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String getFromCache(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "SingletonWithImmutableData",
    "input": "public class SingletonWithImmutableData {\n\n    public SingletonWithImmutableData(String data) {}\n\n}",
    "output": "public class SingletonWithImmutableData {\n\n    private static SingletonWithImmutableData instance;\n    private final String data;\n\n    private SingletonWithImmutableData(String data) {\n        this.data = data;\n    }\n\n    public static SingletonWithImmutableData getInstance(String data) {\n        if (instance == null) {\n            instance = new SingletonWithImmutableData(data);\n        }\n        return instance;\n    }\n\n    public String getData() {\n        return data;\n    }\n\n}"
  },
  {
    "type": "SingletonWithBackgroundTask",
    "input": "public class SingletonWithBackgroundTask {\n\n    public SingletonWithBackgroundTask() {}\n\n}",
    "output": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingletonWithBackgroundTask {\n\n    private static SingletonWithBackgroundTask instance;\n    private ExecutorService executorService;\n\n    private SingletonWithBackgroundTask() {\n        executorService = Executors.newSingleThreadExecutor();\n    }\n\n    public static SingletonWithBackgroundTask getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithBackgroundTask();\n        }\n        return instance;\n    }\n\n    public void runTask(Runnable task) {\n        executorService.submit(task);\n    }\n\n}"
  },
  {
    "type": "ClusteredSingleton",
    "input": "public class ClusteredSingleton {\n\n    public ClusteredSingleton() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class ClusteredSingleton {\n\n    private static final ConcurrentMap<String, ClusteredSingleton> instances = new ConcurrentHashMap<>();\n\n    private ClusteredSingleton() {}\n\n    public static ClusteredSingleton getInstance(String clusterKey) {\n        return instances.computeIfAbsent(clusterKey, key -> new ClusteredSingleton());\n    }\n\n}"
  },
  {
    "type": "SingletonWithStateTracking",
    "input": "public class SingletonWithStateTracking {\n\n    public SingletonWithStateTracking() {}\n\n}",
    "output": "public class SingletonWithStateTracking {\n\n    private static SingletonWithStateTracking instance;\n    private int state;\n\n    private SingletonWithStateTracking() {\n        state = 0;\n    }\n\n    public static SingletonWithStateTracking getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithStateTracking();\n        }\n        return instance;\n    }\n\n    public void incrementState() {\n        state++;\n    }\n\n    public int getState() {\n        return state;\n    }\n\n}"
  },
  {
    "type": "EnvironmentBasedSingleton",
    "input": "public class EnvironmentBasedSingleton {\n\n    public EnvironmentBasedSingleton() {}\n\n}",
    "output": "public class EnvironmentBasedSingleton {\n\n    private static EnvironmentBasedSingleton instance;\n    private String environment;\n\n    private EnvironmentBasedSingleton(String environment) {\n        this.environment = environment;\n    }\n\n    public static EnvironmentBasedSingleton getInstance(String environment) {\n        if (instance == null) {\n            instance = new EnvironmentBasedSingleton(environment);\n        }\n        return instance;\n    }\n\n    public String getEnvironment() {\n        return environment;\n    }\n\n}"
  },
  {
    "type": "SingletonWithThreadPool",
    "input": "public class SingletonWithThreadPool {\n\n    public SingletonWithThreadPool() {}\n\n}",
    "output": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingletonWithThreadPool {\n\n    private static SingletonWithThreadPool instance;\n    private ExecutorService threadPool;\n\n    private SingletonWithThreadPool() {\n        threadPool = Executors.newFixedThreadPool(5);\n    }\n\n    public static SingletonWithThreadPool getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithThreadPool();\n        }\n        return instance;\n    }\n\n    public ExecutorService getThreadPool() {\n        return threadPool;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMultitonSupport",
    "input": "public class SingletonWithMultitonSupport {\n\n    public SingletonWithMultitonSupport() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithMultitonSupport {\n\n    private static Map<String, SingletonWithMultitonSupport> instances = new HashMap<>();\n\n    private SingletonWithMultitonSupport() {}\n\n    public static SingletonWithMultitonSupport getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new SingletonWithMultitonSupport());\n    }\n\n}"
  },
  {
    "type": "SingletonWithObserverPattern",
    "input": "public class SingletonWithObserverPattern {\n\n    public SingletonWithObserverPattern() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithObserverPattern {\n\n    private static SingletonWithObserverPattern instance;\n    private List<Observer> observers;\n\n    private SingletonWithObserverPattern() {\n        observers = new ArrayList<>();\n    }\n\n    public static SingletonWithObserverPattern getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithObserverPattern();\n        }\n        return instance;\n    }\n\n    public void addObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyObservers() {\n        for (Observer observer : observers) {\n            observer.update();\n        }\n    }\n\n}\n\ninterface Observer {\n    void update();\n}"
  },
  {
    "type": "SingletonWithLifecycleCallbacks",
    "input": "public class SingletonWithLifecycleCallbacks {\n\n    public SingletonWithLifecycleCallbacks() {}\n\n}",
    "output": "public class SingletonWithLifecycleCallbacks {\n\n    private static SingletonWithLifecycleCallbacks instance;\n\n    private SingletonWithLifecycleCallbacks() {}\n\n    public static SingletonWithLifecycleCallbacks getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithLifecycleCallbacks();\n            onCreate();\n        }\n        return instance;\n    }\n\n    public static void onCreate() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    public static void onDestroy() {\n        System.out.println(\"Singleton instance destroyed\");\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionSingleton",
    "input": "public class DatabaseConnection {\n\n    public DatabaseConnection() {}\n\n    public Connection connect() {\n        return null;\n    }\n\n}",
    "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class DatabaseConnection {\n\n    private static DatabaseConnection instance;\n    private Connection connection;\n\n    private DatabaseConnection() {\n        try {\n            connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db\", \"user\", \"password\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static DatabaseConnection getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnection();\n        }\n        return instance;\n    }\n\n    public Connection getConnection() {\n        return connection;\n    }\n\n}"
  },
  {
    "type": "LoggingSingleton",
    "input": "public class Logger {\n\n    public Logger() {}\n\n    public void log(String message) {\n        System.out.println(message);\n    }\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class Logger {\n\n    private static Logger instance;\n    private FileWriter fileWriter;\n\n    private Logger() {\n        try {\n            fileWriter = new FileWriter(\"app.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static Logger getInstance() {\n        if (instance == null) {\n            instance = new Logger();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "ConfigurationSingleton",
    "input": "public class Configuration {\n\n    public Configuration() {}\n\n    public String getConfig(String key) {\n        return null;\n    }\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class Configuration {\n\n    private static Configuration instance;\n    private Properties properties;\n\n    private Configuration() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static Configuration getInstance() {\n        if (instance == null) {\n            instance = new Configuration();\n        }\n        return instance;\n    }\n\n    public String getConfig(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalInstance {\n\n    public ThreadLocalInstance() {}\n\n}",
    "output": "public class ThreadLocalInstance {\n\n    private static final ThreadLocal<ThreadLocalInstance> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalInstance::new);\n\n    private ThreadLocalInstance() {}\n\n    public static ThreadLocalInstance getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "MultitonSingleton",
    "input": "public class Multiton {\n\n    public Multiton() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class Multiton {\n\n    private static final Map<String, Multiton> instances = new HashMap<>();\n\n    private Multiton() {}\n\n    public static Multiton getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new Multiton());\n    }\n\n}"
  },
  {
    "type": "SingletonWithSerialization",
    "input": "public class SerializableSingleton {\n\n    public SerializableSingleton() {}\n\n}",
    "output": "import java.io.Serializable;\n\npublic class SerializableSingleton implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static SerializableSingleton instance;\n\n    private SerializableSingleton() {}\n\n    public static SerializableSingleton getInstance() {\n        if (instance == null) {\n            instance = new SerializableSingleton();\n        }\n        return instance;\n    }\n\n    protected Object readResolve() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazyLoadingSingleton",
    "input": "public class LazyLoadingSingleton {\n\n    public LazyLoadingSingleton() {}\n\n}",
    "output": "public class LazyLoadingSingleton {\n\n    private LazyLoadingSingleton() {}\n\n    private static class Holder {\n        private static final LazyLoadingSingleton INSTANCE = new LazyLoadingSingleton();\n    }\n\n    public static LazyLoadingSingleton getInstance() {\n        return Holder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "SingletonWithObserverPattern",
    "input": "public class ObserverSingleton {\n\n    public ObserverSingleton() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class ObserverSingleton {\n\n    private static ObserverSingleton instance;\n    private List<Observer> observers;\n\n    private ObserverSingleton() {\n        observers = new ArrayList<>();\n    }\n\n    public static ObserverSingleton getInstance() {\n        if (instance == null) {\n            instance = new ObserverSingleton();\n        }\n        return instance;\n    }\n\n    public void addObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyObservers(String message) {\n        for (Observer observer : observers) {\n            observer.update(message);\n        }\n    }\n\n}\n\ninterface Observer {\n    void update(String message);\n}"
  },
  {
    "type": "SingletonWithStateTracking",
    "input": "public class StatefulSingleton {\n\n    public StatefulSingleton() {}\n\n}",
    "output": "public class StatefulSingleton {\n\n    private static StatefulSingleton instance;\n    private int state;\n\n    private StatefulSingleton() {\n        state = 0;\n    }\n\n    public static StatefulSingleton getInstance() {\n        if (instance == null) {\n            instance = new StatefulSingleton();\n        }\n        return instance;\n    }\n\n    public void incrementState() {\n        state++;\n    }\n\n    public int getState() {\n        return state;\n    }\n\n}"
  },
  {
    "type": "SingletonWithDynamicConfiguration",
    "input": "public class DynamicConfigSingleton {\n\n    public DynamicConfigSingleton() {}\n\n}",
    "output": "public class DynamicConfigSingleton {\n\n    private static DynamicConfigSingleton instance;\n    private String config;\n\n    private DynamicConfigSingleton(String config) {\n        this.config = config;\n    }\n\n    public static DynamicConfigSingleton getInstance(String config) {\n        if (instance == null) {\n            instance = new DynamicConfigSingleton(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "EventDrivenSingleton",
    "input": "public class EventHandler {\n\n    public EventHandler() {}\n\n    public void handleEvent(String event) {\n        System.out.println(event);\n    }\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EventHandler {\n\n    private static EventHandler instance;\n    private List<String> eventQueue;\n\n    private EventHandler() {\n        eventQueue = new ArrayList<>();\n    }\n\n    public static EventHandler getInstance() {\n        if (instance == null) {\n            instance = new EventHandler();\n        }\n        return instance;\n    }\n\n    public void handleEvent(String event) {\n        eventQueue.add(event);\n        System.out.println(\"Event handled: \" + event);\n    }\n\n    public List<String> getEventQueue() {\n        return eventQueue;\n    }\n\n}"
  },
  {
    "type": "SessionManagerSingleton",
    "input": "public class SessionManager {\n\n    public SessionManager() {}\n\n    public void createSession(String user) {\n        System.out.println(\"Session created for: \" + user);\n    }\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SessionManager {\n\n    private static SessionManager instance;\n    private Map<String, String> activeSessions;\n\n    private SessionManager() {\n        activeSessions = new HashMap<>();\n    }\n\n    public static SessionManager getInstance() {\n        if (instance == null) {\n            instance = new SessionManager();\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        activeSessions.put(user, \"SessionActive\");\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return activeSessions.containsKey(user);\n    }\n\n}"
  },
  {
    "type": "ConfigurationManagerSingleton",
    "input": "public class ConfigurationManager {\n\n    public ConfigurationManager() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationManager {\n\n    private static ConfigurationManager instance;\n    private Properties properties;\n\n    private ConfigurationManager() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"app_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationManager getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationManager();\n        }\n        return instance;\n    }\n\n    public String getConfigValue(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ResourcePoolSingleton",
    "input": "public class ResourcePool {\n\n    public ResourcePool() {}\n\n    public void allocateResource(String resourceName) {\n        System.out.println(\"Allocated: \" + resourceName);\n    }\n\n}",
    "output": "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class ResourcePool {\n\n    private static ResourcePool instance;\n    private Queue<String> availableResources;\n\n    private ResourcePool() {\n        availableResources = new LinkedList<>();\n        availableResources.add(\"Resource1\");\n        availableResources.add(\"Resource2\");\n    }\n\n    public static ResourcePool getInstance() {\n        if (instance == null) {\n            instance = new ResourcePool();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return availableResources.poll();\n    }\n\n    public void releaseResource(String resource) {\n        availableResources.add(resource);\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class MetricsCollector {\n\n    public MetricsCollector() {}\n\n    public void collectMetric(String metric) {\n        System.out.println(metric);\n    }\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class MetricsCollector {\n\n    private static MetricsCollector instance;\n    private List<String> collectedMetrics;\n\n    private MetricsCollector() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static MetricsCollector getInstance() {\n        if (instance == null) {\n            instance = new MetricsCollector();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n    }\n\n    public List<String> getMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "LazyLoadedSingletonWithLogging",
    "input": "public class LoggingSingleton {\n\n    public LoggingSingleton() {}\n\n}",
    "output": "public class LoggingSingleton {\n\n    private LoggingSingleton() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    private static class SingletonHolder {\n        private static final LoggingSingleton INSTANCE = new LoggingSingleton();\n    }\n\n    public static LoggingSingleton getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "PriorityBasedSingleton",
    "input": "public class PrioritySingleton {\n\n    public PrioritySingleton() {}\n\n}",
    "output": "import java.util.PriorityQueue;\n\npublic class PrioritySingleton {\n\n    private static PrioritySingleton instance;\n    private PriorityQueue<Integer> priorityQueue;\n\n    private PrioritySingleton() {\n        priorityQueue = new PriorityQueue<>();\n    }\n\n    public static PrioritySingleton getInstance() {\n        if (instance == null) {\n            instance = new PrioritySingleton();\n        }\n        return instance;\n    }\n\n    public void addPriority(int priority) {\n        priorityQueue.add(priority);\n    }\n\n    public int getHighestPriority() {\n        return priorityQueue.poll();\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithOnDemandInitialization",
    "input": "public class OnDemandSingleton {\n\n    public OnDemandSingleton() {}\n\n}",
    "output": "public class OnDemandSingleton {\n\n    private static OnDemandSingleton instance;\n\n    private OnDemandSingleton() {}\n\n    public static OnDemandSingleton getInstance() {\n        if (instance == null) {\n            instance = new OnDemandSingleton();\n        }\n        return instance;\n    }\n\n    public String fetchData() {\n        return \"Fetched on-demand data\";\n    }\n\n}"
  },
  {
    "type": "SingletonWithLifecycleHooks",
    "input": "public class LifecycleSingleton {\n\n    public LifecycleSingleton() {}\n\n}",
    "output": "public class LifecycleSingleton {\n\n    private static LifecycleSingleton instance;\n\n    private LifecycleSingleton() {\n        onCreate();\n    }\n\n    public static LifecycleSingleton getInstance() {\n        if (instance == null) {\n            instance = new LifecycleSingleton();\n        }\n        return instance;\n    }\n\n    private void onCreate() {\n        System.out.println(\"LifecycleSingleton created\");\n    }\n\n    public void onDestroy() {\n        System.out.println(\"LifecycleSingleton destroyed\");\n        instance = null;\n    }\n\n}"
  },
  {
    "type": "LoggingManagerSingleton",
    "input": "public class LoggingManager {\n\n    public LoggingManager() {}\n\n    public void logMessage(String message) {\n        System.out.println(message);\n    }\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggingManager {\n\n    private static LoggingManager instance;\n    private FileWriter fileWriter;\n\n    private LoggingManager() {\n        try {\n            fileWriter = new FileWriter(\"logfile.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggingManager getInstance() {\n        if (instance == null) {\n            instance = new LoggingManager();\n        }\n        return instance;\n    }\n\n    public void logMessage(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "ResourceTrackerSingleton",
    "input": "public class ResourceTracker {\n\n    public ResourceTracker() {}\n\n    public void track(String resource) {\n        System.out.println(\"Tracking: \" + resource);\n    }\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class ResourceTracker {\n\n    private static ResourceTracker instance;\n    private Set<String> trackedResources;\n\n    private ResourceTracker() {\n        trackedResources = new HashSet<>();\n    }\n\n    public static ResourceTracker getInstance() {\n        if (instance == null) {\n            instance = new ResourceTracker();\n        }\n        return instance;\n    }\n\n    public void track(String resource) {\n        trackedResources.add(resource);\n        System.out.println(\"Tracking: \" + resource);\n    }\n\n    public boolean isTracked(String resource) {\n        return trackedResources.contains(resource);\n    }\n\n}"
  },
  {
    "type": "TaskQueueSingleton",
    "input": "public class TaskQueue {\n\n    public TaskQueue() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class TaskQueue {\n\n    private static TaskQueue instance;\n    private Queue<String> tasks;\n\n    private TaskQueue() {\n        tasks = new LinkedList<>();\n    }\n\n    public static TaskQueue getInstance() {\n        if (instance == null) {\n            instance = new TaskQueue();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        tasks.add(task);\n    }\n\n    public String getNextTask() {\n        return tasks.poll();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalLoggerSingleton",
    "input": "public class ThreadLocalLogger {\n\n    public ThreadLocalLogger() {}\n\n    public void log(String message) {\n        System.out.println(message);\n    }\n\n}",
    "output": "public class ThreadLocalLogger {\n\n    private static final ThreadLocal<ThreadLocalLogger> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalLogger::new);\n\n    private ThreadLocalLogger() {}\n\n    public static ThreadLocalLogger getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public void log(String message) {\n        System.out.println(Thread.currentThread().getName() + \": \" + message);\n    }\n\n}"
  },
  {
    "type": "ConfigurationCacheSingleton",
    "input": "public class ConfigurationCache {\n\n    public ConfigurationCache() {}\n\n    public String get(String key) {\n        return null;\n    }\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ConfigurationCache {\n\n    private static ConfigurationCache instance;\n    private Map<String, String> cache;\n\n    private ConfigurationCache() {\n        cache = new HashMap<>();\n    }\n\n    public static ConfigurationCache getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationCache();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "EventDispatcherSingleton",
    "input": "public class EventDispatcher {\n\n    public EventDispatcher() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EventDispatcher {\n\n    private static EventDispatcher instance;\n    private List<String> events;\n\n    private EventDispatcher() {\n        events = new ArrayList<>();\n    }\n\n    public static EventDispatcher getInstance() {\n        if (instance == null) {\n            instance = new EventDispatcher();\n        }\n        return instance;\n    }\n\n    public void dispatch(String event) {\n        events.add(event);\n        System.out.println(\"Event dispatched: \" + event);\n    }\n\n    public List<String> getDispatchedEvents() {\n        return events;\n    }\n\n}"
  },
  {
    "type": "UserManagerSingleton",
    "input": "public class UserManager {\n\n    public UserManager() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class UserManager {\n\n    private static UserManager instance;\n    private Map<String, String> users;\n\n    private UserManager() {\n        users = new HashMap<>();\n    }\n\n    public static UserManager getInstance() {\n        if (instance == null) {\n            instance = new UserManager();\n        }\n        return instance;\n    }\n\n    public void addUser(String id, String name) {\n        users.put(id, name);\n    }\n\n    public String getUser(String id) {\n        return users.get(id);\n    }\n\n}"
  },
  {
    "type": "StatefulLoggerSingleton",
    "input": "public class StatefulLogger {\n\n    public StatefulLogger() {}\n\n}",
    "output": "public class StatefulLogger {\n\n    private static StatefulLogger instance;\n    private int logCount;\n\n    private StatefulLogger() {\n        logCount = 0;\n    }\n\n    public static StatefulLogger getInstance() {\n        if (instance == null) {\n            instance = new StatefulLogger();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        logCount++;\n        System.out.println(logCount + \": \" + message);\n    }\n\n    public int getLogCount() {\n        return logCount;\n    }\n\n}"
  },
  {
    "type": "NotificationManagerSingleton",
    "input": "public class NotificationManager {\n\n    public NotificationManager() {}\n\n    public void notify(String message) {\n        System.out.println(message);\n    }\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationManager {\n\n    private static NotificationManager instance;\n    private List<String> notifications;\n\n    private NotificationManager() {\n        notifications = new ArrayList<>();\n    }\n\n    public static NotificationManager getInstance() {\n        if (instance == null) {\n            instance = new NotificationManager();\n        }\n        return instance;\n    }\n\n    public void notify(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithRetry",
    "input": "public class RetryManager {\n\n    public RetryManager() {}\n\n    public void retry(String task) {\n        System.out.println(\"Retrying: \" + task);\n    }\n\n}",
    "output": "public class RetryManager {\n\n    private static RetryManager instance;\n    private int retryCount;\n\n    private RetryManager() {\n        retryCount = 0;\n    }\n\n    public static RetryManager getInstance() {\n        if (instance == null) {\n            instance = new RetryManager();\n        }\n        return instance;\n    }\n\n    public void retry(String task) {\n        retryCount++;\n        System.out.println(\"Retrying task: \" + task + \" - Retry Count: \" + retryCount);\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionPoolSingleton",
    "input": "public class ConnectionPool {\n\n    public ConnectionPool() {}\n\n    public void addConnection(String conn) {\n        System.out.println(\"Adding: \" + conn);\n    }\n\n}",
    "output": "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class ConnectionPool {\n\n    private static ConnectionPool instance;\n    private Queue<String> connectionPool;\n\n    private ConnectionPool() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static ConnectionPool getInstance() {\n        if (instance == null) {\n            instance = new ConnectionPool();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}"
  },
  {
    "type": "CacheManagerSingleton",
    "input": "public class CacheManager {\n\n    public CacheManager() {}\n\n    public void put(String key, String value) {\n        System.out.println(\"Put: \" + key + \" -> \" + value);\n    }\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class CacheManager {\n\n    private static CacheManager instance;\n    private Map<String, String> cache;\n\n    private CacheManager() {\n        cache = new HashMap<>();\n    }\n\n    public static CacheManager getInstance() {\n        if (instance == null) {\n            instance = new CacheManager();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "MultithreadedTaskManagerSingleton",
    "input": "public class TaskManager {\n\n    public TaskManager() {}\n\n    public void addTask(String task) {\n        System.out.println(\"Task Added: \" + task);\n    }\n\n}",
    "output": "import java.util.Queue;\nimport java.util.concurrent.ConcurrentLinkedQueue;\n\npublic class TaskManager {\n\n    private static TaskManager instance;\n    private Queue<String> taskQueue;\n\n    private TaskManager() {\n        taskQueue = new ConcurrentLinkedQueue<>();\n    }\n\n    public static synchronized TaskManager getInstance() {\n        if (instance == null) {\n            instance = new TaskManager();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        taskQueue.add(task);\n    }\n\n    public String getTask() {\n        return taskQueue.poll();\n    }\n\n}"
  },
  {
    "type": "ThreadSafeConfigManagerSingleton",
    "input": "public class ConfigManager {\n\n    public ConfigManager() {}\n\n    public String getConfig(String key) {\n        return null;\n    }\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.Map;\n\npublic class ConfigManager {\n\n    private static volatile ConfigManager instance;\n    private Map<String, String> config;\n\n    private ConfigManager() {\n        config = new ConcurrentHashMap<>();\n    }\n\n    public static ConfigManager getInstance() {\n        if (instance == null) {\n            synchronized (ConfigManager.class) {\n                if (instance == null) {\n                    instance = new ConfigManager();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void setConfig(String key, String value) {\n        config.put(key, value);\n    }\n\n    public String getConfig(String key) {\n        return config.get(key);\n    }\n\n}"
  },
  {
    "type": "TokenBucketRateLimiterSingleton",
    "input": "public class RateLimiter {\n\n    public RateLimiter() {}\n\n    public boolean allowRequest() {\n        return true;\n    }\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class RateLimiter {\n\n    private static RateLimiter instance;\n    private AtomicInteger tokens;\n    private static final int MAX_TOKENS = 10;\n\n    private RateLimiter() {\n        tokens = new AtomicInteger(MAX_TOKENS);\n    }\n\n    public static RateLimiter getInstance() {\n        if (instance == null) {\n            instance = new RateLimiter();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest() {\n        if (tokens.get() > 0) {\n            tokens.decrementAndGet();\n            return true;\n        } else {\n            System.out.println(\"Request denied: Rate limit exceeded\");\n            return false;\n        }\n    }\n\n    public void refillTokens() {\n        tokens.set(MAX_TOKENS);\n    }\n\n}"
  },
  {
    "type": "GlobalIdGeneratorSingleton",
    "input": "public class IdGenerator {\n\n    public IdGenerator() {}\n\n    public int generate() {\n        return 0;\n    }\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class IdGenerator {\n\n    private static IdGenerator instance;\n    private AtomicInteger counter;\n\n    private IdGenerator() {\n        counter = new AtomicInteger(0);\n    }\n\n    public static IdGenerator getInstance() {\n        if (instance == null) {\n            instance = new IdGenerator();\n        }\n        return instance;\n    }\n\n    public int generate() {\n        return counter.incrementAndGet();\n    }\n\n}"
  },
  {
    "type": "DistributedLockManagerSingleton",
    "input": "public class LockManager {\n\n    public LockManager() {}\n\n    public boolean acquireLock(String key) {\n        return true;\n    }\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class LockManager {\n\n    private static LockManager instance;\n    private ConcurrentHashMap<String, Boolean> locks;\n\n    private LockManager() {\n        locks = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized LockManager getInstance() {\n        if (instance == null) {\n            instance = new LockManager();\n        }\n        return instance;\n    }\n\n    public boolean acquireLock(String key) {\n        return locks.putIfAbsent(key, true) == null;\n    }\n\n    public void releaseLock(String key) {\n        locks.remove(key);\n    }\n\n}"
  },
  {
    "type": "RealTimeEventPublisherSingleton",
    "input": "public class EventPublisher {\n\n    public EventPublisher() {}\n\n    public void publishEvent(String event) {\n        System.out.println(event);\n    }\n\n}",
    "output": "import java.util.concurrent.CopyOnWriteArrayList;\n\npublic class EventPublisher {\n\n    private static EventPublisher instance;\n    private CopyOnWriteArrayList<String> eventListeners;\n\n    private EventPublisher() {\n        eventListeners = new CopyOnWriteArrayList<>();\n    }\n\n    public static EventPublisher getInstance() {\n        if (instance == null) {\n            instance = new EventPublisher();\n        }\n        return instance;\n    }\n\n    public void addListener(String listener) {\n        eventListeners.add(listener);\n    }\n\n    public void publishEvent(String event) {\n        for (String listener : eventListeners) {\n            System.out.println(\"Notifying listener: \" + listener + \" of event: \" + event);\n        }\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class MetricsCollector {\n\n    public MetricsCollector() {}\n\n    public void collectMetric(String metric) {\n        System.out.println(metric);\n    }\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class MetricsCollector {\n\n    private static MetricsCollector instance;\n    private List<String> collectedMetrics;\n\n    private MetricsCollector() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static MetricsCollector getInstance() {\n        if (instance == null) {\n            instance = new MetricsCollector();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class MetricsCollector {\n\n    public MetricsCollector() {}\n\n    public void collectMetric(String metric) {\n        System.out.println(metric);\n    }\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class MetricsCollector {\n\n    private static MetricsCollector instance;\n    private List<String> collectedMetrics;\n\n    private MetricsCollector() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static MetricsCollector getInstance() {\n        if (instance == null) {\n            instance = new MetricsCollector();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class MetricsCollector {\n\n    public MetricsCollector() {}\n\n    public void collectMetric(String metric) {\n        System.out.println(metric);\n    }\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class MetricsCollector {\n\n    private static MetricsCollector instance;\n    private List<String> collectedMetrics;\n\n    private MetricsCollector() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static MetricsCollector getInstance() {\n        if (instance == null) {\n            instance = new MetricsCollector();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class MetricsCollector {\n\n    public MetricsCollector() {}\n\n    public void collectMetric(String metric) {\n        System.out.println(metric);\n    }\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class MetricsCollector {\n\n    private static MetricsCollector instance;\n    private List<String> collectedMetrics;\n\n    private MetricsCollector() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static MetricsCollector getInstance() {\n        if (instance == null) {\n            instance = new MetricsCollector();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class MetricsCollector {\n\n    public MetricsCollector() {}\n\n    public void collectMetric(String metric) {\n        System.out.println(metric);\n    }\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class MetricsCollector {\n\n    private static MetricsCollector instance;\n    private List<String> collectedMetrics;\n\n    private MetricsCollector() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static MetricsCollector getInstance() {\n        if (instance == null) {\n            instance = new MetricsCollector();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class MetricsCollector {\n\n    public MetricsCollector() {}\n\n    public void collectMetric(String metric) {\n        System.out.println(metric);\n    }\n\n}",
    "output": "import java.util.ArrayList;\n   private static MetricsCollector instance;\n    private List<String> collectedMetrics;\n\n    private MetricsCollector() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static MetricsCollector getInstance() {\n        if (instance == null) {\n            instance = new MetricsCollector();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "DatabasePoolSingleton",
    "input": "public class DatabasePoolSingleton {\n\n    public DatabasePoolSingleton() {}\n\n    public Connection getConnection() {\n        return null;\n    }\n\n    public void releaseConnection(Connection connection) {\n        System.out.println(\"Connection released\");\n    }\n\n}",
    "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class DatabasePoolSingleton {\n    private static DatabasePoolSingleton instance;\n    private BlockingQueue<Connection> connectionPool;\n\n    private DatabasePoolSingleton() {\n        connectionPool = new ArrayBlockingQueue<>(5);\n        try {\n            for (int i = 0; i < 5; i++) {\n                connectionPool.add(DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db\", \"user\", \"password\"));\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized DatabasePoolSingleton getInstance() {\n        if (instance == null) {\n            instance = new DatabasePoolSingleton();\n        }\n        return instance;\n    }\n\n    public Connection getConnection() {\n        try {\n            return connectionPool.take();\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"No connections available\");\n        }\n    }\n\n    public void releaseConnection(Connection connection) {\n        connectionPool.offer(connection);\n    }\n}"
  },
  {
    "type": "LoggerSingleton",
    "input": "public class LoggerSingleton {\n\n    public LoggerSingleton() {}\n\n    public void log(String level, String message) {\n        System.out.println(level + \": \" + message);\n    }\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingleton {\n    private static LoggerSingleton instance;\n    private FileWriter fileWriter;\n\n    private LoggerSingleton() {\n        try {\n            fileWriter = new FileWriter(\"application.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggerSingleton getInstance() {\n        if (instance == null) {\n            synchronized (LoggerSingleton.class) {\n                if (instance == null) {\n                    instance = new LoggerSingleton();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public synchronized void log(String level, String message) {\n        try {\n            fileWriter.write(level + \": \" + message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "type": "ConfigurationManager",
    "input": "public class ConfigurationManager {\n\n    public ConfigurationManager() {}\n\n    public String getConfig(String key) {\n        return null;\n    }\n\n    public void setConfig(String key, String value) {\n        System.out.println(key + \" -> \" + value);\n    }\n\n}",
    "output": "public enum ConfigurationManager {\n    INSTANCE;\n\n    private Map<String, String> config;\n\n    ConfigurationManager() {\n        config = new HashMap<>();\n        config.put(\"url\", \"http://example.com\");\n        config.put(\"timeout\", \"5000\");\n    }\n\n    public String getConfig(String key) {\n        return config.get(key);\n    }\n\n    public void setConfig(String key, String value) {\n        config.put(key, value);\n    }\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingleton {\n\n    public DoubleCheckedLockingSingleton() {}\n\n    public static DoubleCheckedLockingSingleton getInstance() {\n        return new DoubleCheckedLockingSingleton();\n    }\n\n}",
    "output": "public class DoubleCheckedLockingSingleton {\n    private static volatile DoubleCheckedLockingSingleton instance;\n\n    private DoubleCheckedLockingSingleton() {\n    }\n\n    public static DoubleCheckedLockingSingleton getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingleton.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingleton();\n                }\n            }\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingleton {\n\n    public ThreadLocalSingleton() {}\n\n    public static ThreadLocalSingleton getInstance() {\n        return new ThreadLocalSingleton();\n    }\n\n}",
    "output": "public class ThreadLocalSingleton {\n    private static final ThreadLocal<ThreadLocalSingleton> threadLocalInstance =\n            ThreadLocal.withInitial(ThreadLocalSingleton::new);\n\n    private ThreadLocalSingleton() {\n    }\n\n    public static ThreadLocalSingleton getInstance() {\n        return threadLocalInstance.get();\n    }\n}"
  },
  {
    "type": "ExpiringSingleton",
    "input": "public class ExpiringSingleton {\n\n    public ExpiringSingleton() {}\n\n    public String getCreationTime() {\n        return null;\n    }\n\n}",
    "output": "import java.time.Instant;\n\npublic class ExpiringSingleton {\n    private static ExpiringSingleton instance;\n    private Instant creationTime;\n\n    private ExpiringSingleton() {\n        creationTime = Instant.now();\n    }\n\n    public static ExpiringSingleton getInstance() {\n        if (instance == null || Instant.now().isAfter(instance.creationTime.plusSeconds(60))) {\n            synchronized (ExpiringSingleton.class) {\n                if (instance == null || Instant.now().isAfter(instance.creationTime.plusSeconds(60))) {\n                    instance = new ExpiringSingleton();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public String getCreationTime() {\n        return creationTime.toString();\n    }\n}"
  },
  {
    "type": "CurrencyConverterSingleton",
    "input": "public class CurrencyConverter {\n\n    public CurrencyConverter() {}\n\n    public double convert(String from, String to, double amount) {\n        return 0.0;\n    }\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class CurrencyConverter {\n\n    private static CurrencyConverter instance;\n    private Map<String, Double> exchangeRates;\n\n    private CurrencyConverter() {\n        exchangeRates = new HashMap<>();\n        exchangeRates.put(\"USD_EUR\", 0.85);\n        exchangeRates.put(\"EUR_USD\", 1.18);\n    }\n\n    public static CurrencyConverter getInstance() {\n        if (instance == null) {\n            synchronized (CurrencyConverter.class) {\n                if (instance == null) {\n                    instance = new CurrencyConverter();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public double convert(String from, String to, double amount) {\n        String key = from + \"_\" + to;\n        return amount * exchangeRates.getOrDefault(key, 1.0);\n    }\n\n}"
  },
  {
    "type": "FileSystemCacheSingleton",
    "input": "public class FileSystemCache {\n\n    public FileSystemCache() {}\n\n    public void cacheFile(String path) {\n        System.out.println(\"Caching file: \" + path);\n    }\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class FileSystemCache {\n\n    private static FileSystemCache instance;\n    private Set<String> cachedFiles;\n\n    private FileSystemCache() {\n        cachedFiles = new HashSet<>();\n    }\n\n    public static synchronized FileSystemCache getInstance() {\n        if (instance == null) {\n            instance = new FileSystemCache();\n        }\n        return instance;\n    }\n\n    public void cacheFile(String path) {\n        cachedFiles.add(path);\n        System.out.println(\"Caching file: \" + path);\n    }\n\n    public boolean isFileCached(String path) {\n        return cachedFiles.contains(path);\n    }\n\n}"
  },
  {
    "type": "NotificationServiceSingleton",
    "input": "public class NotificationService {\n\n    public NotificationService() {}\n\n    public void sendNotification(String user, String message) {\n        System.out.println(\"Notification sent to \" + user + \": \" + message);\n    }\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class NotificationService {\n\n    private static NotificationService instance;\n    private Set<String> registeredUsers;\n\n    private NotificationService() {\n        registeredUsers = new HashSet<>();\n    }\n\n    public static synchronized NotificationService getInstance() {\n        if (instance == null) {\n            instance = new NotificationService();\n        }\n        return instance;\n    }\n\n    public void registerUser(String user) {\n        registeredUsers.add(user);\n    }\n\n    public void sendNotification(String user, String message) {\n        if (registeredUsers.contains(user)) {\n            System.out.println(\"Notification sent to \" + user + \": \" + message);\n        } else {\n            System.out.println(\"User not registered: \" + user);\n        }\n    }\n\n}"
  },
  {
    "type": "SessionManagerSingleton",
    "input": "public class SessionManager {\n\n    public SessionManager() {}\n\n    public void createSession(String user) {\n        System.out.println(\"Session created for: \" + user);\n    }\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SessionManager {\n\n    private static SessionManager instance;\n    private Map<String, String> sessions;\n\n    private SessionManager() {\n        sessions = new HashMap<>();\n    }\n\n    public static SessionManager getInstance() {\n        if (instance == null) {\n            synchronized (SessionManager.class) {\n                if (instance == null) {\n                    instance = new SessionManager();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        sessions.put(user, \"Active\");\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return sessions.containsKey(user);\n    }\n\n}"
  },
  {
    "type": "ApplicationSettingsSingleton",
    "input": "public class ApplicationSettings {\n\n    public ApplicationSettings() {}\n\n    public String getSetting(String key) {\n        return null;\n    }\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ApplicationSettings {\n\n    private static ApplicationSettings instance;\n    private Properties properties;\n\n    private ApplicationSettings() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"appsettings.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized ApplicationSettings getInstance() {\n        if (instance == null) {\n            instance = new ApplicationSettings();\n        }\n        return instance;\n    }\n\n    public String getSetting(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "LoggerSingleton",
    "input": "public class Logger {\n\n    public Logger() {}\n\n    public void log(String message) {\n        System.out.println(message);\n    }\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class Logger {\n\n    private static Logger instance;\n    private FileWriter fileWriter;\n\n    private Logger() {\n        try {\n            fileWriter = new FileWriter(\"log.txt\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized Logger getInstance() {\n        if (instance == null) {\n            instance = new Logger();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionPoolSingleton",
    "input": "public class DatabaseConnectionPool {\n\n    public DatabaseConnectionPool() {}\n\n    public void addConnection(String conn) {\n        System.out.println(\"Adding connection: \" + conn);\n    }\n\n}",
    "output": "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class DatabaseConnectionPool {\n\n    private static DatabaseConnectionPool instance;\n    private Queue<String> connectionPool;\n\n    private DatabaseConnectionPool() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static synchronized DatabaseConnectionPool getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionPool();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}"
  },
  {
    "type": "APIRequestRateLimiterSingleton",
    "input": "public class RateLimiter {\n\n    public RateLimiter() {}\n\n    public boolean allowRequest() {\n        return true;\n    }\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class RateLimiter {\n\n    private static RateLimiter instance;\n    private AtomicInteger tokenCount;\n    private static final int MAX_TOKENS = 100;\n\n    private RateLimiter() {\n        tokenCount = new AtomicInteger(MAX_TOKENS);\n    }\n\n    public static synchronized RateLimiter getInstance() {\n        if (instance == null) {\n            instance = new RateLimiter();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest() {\n        if (tokenCount.get() > 0) {\n            tokenCount.decrementAndGet();\n            return true;\n        }\n        return false;\n    }\n\n    public void refillTokens() {\n        tokenCount.set(MAX_TOKENS);\n    }\n\n}"
  },
  {
    "type": "ConfigurationCacheSingleton",
    "input": "public class ConfigurationCache {\n\n    public ConfigurationCache() {}\n\n    public String getConfig(String key) {\n        return null;\n    }\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ConfigurationCache {\n\n    private static ConfigurationCache instance;\n    private Map<String, String> cache;\n\n    private ConfigurationCache() {\n        cache = new HashMap<>();\n    }\n\n    public static synchronized ConfigurationCache getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationCache();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "TaskSchedulerSingleton",
    "input": "public class TaskScheduler {\n\n    public TaskScheduler() {}\n\n    public void scheduleTask(Runnable task) {\n        System.out.println(\"Task scheduled.\");\n    }\n\n}",
    "output": "import java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class TaskScheduler {\n\n    private static TaskScheduler instance;\n    private ScheduledExecutorService scheduler;\n\n    private TaskScheduler() {\n        scheduler = Executors.newScheduledThreadPool(1);\n    }\n\n    public static synchronized TaskScheduler getInstance() {\n        if (instance == null) {\n            instance = new TaskScheduler();\n        }\n        return instance;\n    }\n\n    public void scheduleTask(Runnable task, long delay, TimeUnit unit) {\n        scheduler.schedule(task, delay, unit);\n    }\n\n}"
  },
  {
    "type": "AuthenticationManagerSingleton",
    "input": "public class AuthenticationManager {\n\n    public AuthenticationManager() {}\n\n    public boolean authenticate(String user, String password) {\n        return false;\n    }\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class AuthenticationManager {\n\n    private static AuthenticationManager instance;\n    private Map<String, String> userDatabase;\n\n    private AuthenticationManager() {\n        userDatabase = new HashMap<>();\n        userDatabase.put(\"admin\", \"password123\");\n        userDatabase.put(\"user\", \"pass\");\n    }\n\n    public static synchronized AuthenticationManager getInstance() {\n        if (instance == null) {\n            instance = new AuthenticationManager();\n        }\n        return instance;\n    }\n\n    public boolean authenticate(String user, String password) {\n        return password.equals(userDatabase.get(user));\n    }\n\n}"
  },
  {
    "type": "EmailSenderSingleton",
    "input": "public class EmailSender {\n\n    public EmailSender() {}\n\n    public void sendEmail(String recipient, String subject, String body) {\n        System.out.println(\"Email sent to: \" + recipient);\n    }\n\n}",
    "output": "public class EmailSender {\n\n    private static EmailSender instance;\n\n    private EmailSender() {}\n\n    public static synchronized EmailSender getInstance() {\n        if (instance == null) {\n            instance = new EmailSender();\n        }\n        return instance;\n    }\n\n    public void sendEmail(String recipient, String subject, String body) {\n        System.out.println(\"Email sent to: \" + recipient + \" | Subject: \" + subject);\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSessionManagerSingleton",
    "input": "public class ThreadLocalSessionManager {\n\n    public ThreadLocalSessionManager() {}\n\n}",
    "output": "public class ThreadLocalSessionManager {\n\n    private static final ThreadLocal<ThreadLocalSessionManager> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSessionManager::new);\n\n    private ThreadLocalSessionManager() {}\n\n    public static ThreadLocalSessionManager getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public void createSession(String sessionId) {\n        System.out.println(Thread.currentThread().getName() + \" - Session Created: \" + sessionId);\n    }\n\n}"
  },
  {
    "type": "SessionTrackerSingleton",
    "input": "public class SessionTracker {\n\n    public SessionTracker() {}\n\n    public void trackSession(String sessionId) {\n        System.out.println(\"Tracking session: \" + sessionId);\n    }\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class SessionTracker {\n\n    private static SessionTracker instance;\n    private Set<String> activeSessions;\n\n    private SessionTracker() {\n        activeSessions = new HashSet<>();\n    }\n\n    public static synchronized SessionTracker getInstance() {\n        if (instance == null) {\n            instance = new SessionTracker();\n        }\n        return instance;\n    }\n\n    public void trackSession(String sessionId) {\n        activeSessions.add(sessionId);\n        System.out.println(\"Session tracked: \" + sessionId);\n    }\n\n    public boolean isSessionActive(String sessionId) {\n        return activeSessions.contains(sessionId);\n    }\n\n}"
  },
  {
    "type": "NotificationCenterSingleton",
    "input": "public class NotificationCenter {\n\n    public NotificationCenter() {}\n\n    public void sendNotification(String message) {\n        System.out.println(\"Notification: \" + message);\n    }\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationCenter {\n\n    private static NotificationCenter instance;\n    private List<String> notifications;\n\n    private NotificationCenter() {\n        notifications = new ArrayList<>();\n    }\n\n    public static synchronized NotificationCenter getInstance() {\n        if (instance == null) {\n            instance = new NotificationCenter();\n        }\n        return instance;\n    }\n\n    public void sendNotification(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification sent: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}"
  },
  {
    "type": "ResourceAllocatorSingleton",
    "input": "public class ResourceAllocator {\n\n    public ResourceAllocator() {}\n\n    public void allocateResource(String resourceName) {\n        System.out.println(\"Allocated resource: \" + resourceName);\n    }\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class ResourceAllocator {\n\n    private static ResourceAllocator instance;\n    private Queue<String> resources;\n\n    private ResourceAllocator() {\n        resources = new LinkedList<>();\n        resources.add(\"Resource1\");\n        resources.add(\"Resource2\");\n    }\n\n    public static synchronized ResourceAllocator getInstance() {\n        if (instance == null) {\n            instance = new ResourceAllocator();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return resources.poll();\n    }\n\n    public void releaseResource(String resourceName) {\n        resources.add(resourceName);\n    }\n\n}"
  },
  {
    "type": "GlobalEventBusSingleton",
    "input": "public class EventBus {\n\n    public EventBus() {}\n\n    public void postEvent(String event) {\n        System.out.println(\"Event posted: \" + event);\n    }\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EventBus {\n\n    private static EventBus instance;\n    private List<String> events;\n\n    private EventBus() {\n        events = new ArrayList<>();\n    }\n\n    public static synchronized EventBus getInstance() {\n        if (instance == null) {\n            instance = new EventBus();\n        }\n        return instance;\n    }\n\n    public void postEvent(String event) {\n        events.add(event);\n        System.out.println(\"Event posted: \" + event);\n    }\n\n    public List<String> getPostedEvents() {\n        return events;\n    }\n\n}"
  },
  {
    "type": "FileStorageManagerSingleton",
    "input": "public class FileStorageManager {\n\n    public FileStorageManager() {}\n\n    public void saveFile(String fileName) {\n        System.out.println(\"File saved: \" + fileName);\n    }\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class FileStorageManager {\n\n    private static FileStorageManager instance;\n    private Map<String, byte[]> fileStorage;\n\n    private FileStorageManager() {\n        fileStorage = new HashMap<>();\n    }\n\n    public static synchronized FileStorageManager getInstance() {\n        if (instance == null) {\n            instance = new FileStorageManager();\n        }\n        return instance;\n    }\n\n    public void saveFile(String fileName, byte[] data) {\n        fileStorage.put(fileName, data);\n        System.out.println(\"File saved: \" + fileName);\n    }\n\n    public byte[] getFile(String fileName) {\n        return fileStorage.get(fileName);\n    }\n\n}"
  },
  {
    "type": "LocalizationManagerSingleton",
    "input": "public class LocalizationManager {\n\n    public LocalizationManager() {}\n\n    public String getTranslation(String key) {\n        return null;\n    }\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class LocalizationManager {\n\n    private static LocalizationManager instance;\n    private Map<String, String> translations;\n\n    private LocalizationManager() {\n        translations = new HashMap<>();\n        translations.put(\"hello\", \"Hello\");\n        translations.put(\"goodbye\", \"Goodbye\");\n    }\n\n    public static synchronized LocalizationManager getInstance() {\n        if (instance == null) {\n            instance = new LocalizationManager();\n        }\n        return instance;\n    }\n\n    public String getTranslation(String key) {\n        return translations.getOrDefault(key, \"Translation not found\");\n    }\n\n}"
  },
  {
    "type": "AnalyticsTrackerSingleton",
    "input": "public class AnalyticsTracker {\n\n    public AnalyticsTracker() {}\n\n    public void trackEvent(String eventName) {\n        System.out.println(\"Event tracked: \" + eventName);\n    }\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class AnalyticsTracker {\n\n    private static AnalyticsTracker instance;\n    private List<String> trackedEvents;\n\n    private AnalyticsTracker() {\n        trackedEvents = new ArrayList<>();\n    }\n\n    public static synchronized AnalyticsTracker getInstance() {\n        if (instance == null) {\n            instance = new AnalyticsTracker();\n        }\n        return instance;\n    }\n\n    public void trackEvent(String eventName) {\n        trackedEvents.add(eventName);\n        System.out.println(\"Event tracked: \" + eventName);\n    }\n\n    public List<String> getTrackedEvents() {\n        return trackedEvents;\n    }\n\n}"
  },
  {
    "type": "SchedulerWithCronJobsSingleton",
    "input": "public class Scheduler {\n\n    public Scheduler() {}\n\n    public void addJob(String job) {\n        System.out.println(\"Job added: \" + job);\n    }\n\n}",
    "output": "import java.util.Timer;\nimport java.util.TimerTask;\n\npublic class Scheduler {\n\n    private static Scheduler instance;\n    private Timer timer;\n\n    private Scheduler() {\n        timer = new Timer(true);\n    }\n\n    public static synchronized Scheduler getInstance() {\n        if (instance == null) {\n            instance = new Scheduler();\n        }\n        return instance;\n    }\n\n    public void addJob(String job, long delay) {\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                System.out.println(\"Executing job: \" + job);\n            }\n        }, delay);\n    }\n\n}"
  },
  {
    "type": "GlobalConfigurationSingleton",
    "input": "public class GlobalConfig {\n\n    public GlobalConfig() {}\n\n    public String getSetting(String key) {\n        return null;\n    }\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class GlobalConfig {\n\n    private static GlobalConfig instance;\n    private Properties properties;\n\n    private GlobalConfig() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"global_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized GlobalConfig getInstance() {\n        if (instance == null) {\n            instance = new GlobalConfig();\n        }\n        return instance;\n    }\n\n    public String getSetting(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "EventLoggerSingleton",
    "input": "public class EventLogger {\n\n    public EventLogger() {}\n\n    public void logEvent(String event) {\n        System.out.println(event);\n    }\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class EventLogger {\n\n    private static EventLogger instance;\n    private FileWriter writer;\n\n    private EventLogger() {\n        try {\n            writer = new FileWriter(\"events.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized EventLogger getInstance() {\n        if (instance == null) {\n            instance = new EventLogger();\n        }\n        return instance;\n    }\n\n    public void logEvent(String event) {\n        try {\n            writer.write(event + \"\\n\");\n            writer.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "ImageCacheSingleton",
    "input": "public class ImageCache {\n\n    public ImageCache() {}\n\n    public void addImage(String imageName, byte[] imageData) {\n        System.out.println(\"Image added: \" + imageName);\n    }\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ImageCache {\n\n    private static ImageCache instance;\n    private Map<String, byte[]> cache;\n\n    private ImageCache() {\n        cache = new HashMap<>();\n    }\n\n    public static synchronized ImageCache getInstance() {\n        if (instance == null) {\n            instance = new ImageCache();\n        }\n        return instance;\n    }\n\n    public void addImage(String imageName, byte[] imageData) {\n        cache.put(imageName, imageData);\n    }\n\n    public byte[] getImage(String imageName) {\n        return cache.get(imageName);\n    }\n\n}"
  },
  {
    "type": "AppConfigManagerSingleton",
    "input": "public class AppConfig {\n\n    public AppConfig() {}\n\n    public String getConfig(String key) {\n        return null;\n    }\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class AppConfig {\n\n    private static AppConfig instance;\n    private Properties config;\n\n    private AppConfig() {\n        config = new Properties();\n        try {\n            config.load(new FileInputStream(\"app_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized AppConfig getInstance() {\n        if (instance == null) {\n            instance = new AppConfig();\n        }\n        return instance;\n    }\n\n    public String getConfig(String key) {\n        return config.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "DatabaseMigrationManagerSingleton",
    "input": "public class MigrationManager {\n\n    public MigrationManager() {}\n\n    public void migrateDatabase(String migrationScript) {\n        System.out.println(\"Migration executed: \" + migrationScript);\n    }\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class MigrationManager {\n\n    private static MigrationManager instance;\n    private List<String> executedMigrations;\n\n    private MigrationManager() {\n        executedMigrations = new ArrayList<>();\n    }\n\n    public static synchronized MigrationManager getInstance() {\n        if (instance == null) {\n            instance = new MigrationManager();\n        }\n        return instance;\n    }\n\n    public void migrateDatabase(String migrationScript) {\n        if (!executedMigrations.contains(migrationScript)) {\n            executedMigrations.add(migrationScript);\n            System.out.println(\"Migration executed: \" + migrationScript);\n        } else {\n            System.out.println(\"Migration already executed: \" + migrationScript);\n        }\n    }\n\n}"
  },
  {
    "type": "TaskQueueManagerSingleton",
    "input": "public class TaskQueueManager {\n\n    public TaskQueueManager() {}\n\n    public void addTask(String task) {\n        System.out.println(\"Task added: \" + task);\n    }\n\n}",
    "output": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class TaskQueueManager {\n\n    private static TaskQueueManager instance;\n    private LinkedBlockingQueue<String> taskQueue;\n\n    private TaskQueueManager() {\n        taskQueue = new LinkedBlockingQueue<>();\n    }\n\n    public static synchronized TaskQueueManager getInstance() {\n        if (instance == null) {\n            instance = new TaskQueueManager();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        try {\n            taskQueue.put(task);\n            System.out.println(\"Task added: \" + task);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public String getNextTask() {\n        return taskQueue.poll();\n    }\n\n}"
  },
  {
    "type": "FeatureFlagManagerSingleton",
    "input": "public class FeatureFlagManager {\n\n    public FeatureFlagManager() {}\n\n    public boolean isFeatureEnabled(String feature) {\n        return false;\n    }\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class FeatureFlagManager {\n\n    private static FeatureFlagManager instance;\n    private Map<String, Boolean> featureFlags;\n\n    private FeatureFlagManager() {\n        featureFlags = new HashMap<>();\n        featureFlags.put(\"DarkMode\", true);\n        featureFlags.put(\"BetaFeatures\", false);\n    }\n\n    public static synchronized FeatureFlagManager getInstance() {\n        if (instance == null) {\n            instance = new FeatureFlagManager();\n        }\n        return instance;\n    }\n\n    public boolean isFeatureEnabled(String feature) {\n        return featureFlags.getOrDefault(feature, false);\n    }\n\n}"
  },
  {
    "type": "GlobalThemeManagerSingleton",
    "input": "public class ThemeManager {\n\n    public ThemeManager() {}\n\n    public String getCurrentTheme() {\n        return null;\n    }\n\n}",
    "output": "public class ThemeManager {\n\n    private static ThemeManager instance;\n    private String currentTheme;\n\n    private ThemeManager() {\n        currentTheme = \"Light\";\n    }\n\n    public static synchronized ThemeManager getInstance() {\n        if (instance == null) {\n            instance = new ThemeManager();\n        }\n        return instance;\n    }\n\n    public String getCurrentTheme() {\n        return currentTheme;\n    }\n\n    public void setTheme(String theme) {\n        currentTheme = theme;\n        System.out.println(\"Theme updated to: \" + theme);\n    }\n\n}"
  },
  {
    "type": "SecurityManagerSingleton",
    "input": "public class SecurityManager {\n\n    public SecurityManager() {}\n\n    public boolean hasPermission(String user, String resource) {\n        return false;\n    }\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SecurityManager {\n\n    private static SecurityManager instance;\n    private Map<String, String> permissions;\n\n    private SecurityManager() {\n        permissions = new HashMap<>();\n        permissions.put(\"admin\", \"*:*\" );\n        permissions.put(\"user\", \"read:resources\");\n    }\n\n    public static synchronized SecurityManager getInstance() {\n        if (instance == null) {\n            instance = new SecurityManager();\n        }\n        return instance;\n    }\n\n    public boolean hasPermission(String user, String resource) {\n        String allowedPermissions = permissions.get(user);\n        return allowedPermissions != null && (allowedPermissions.equals(\"*:*\") || allowedPermissions.contains(resource));\n    }\n\n}"
  },
  {
    "type": "DistributedCacheSingleton",
    "input": "public class DistributedCache {\n\n    public DistributedCache() {}\n\n    public void addCacheEntry(String key, String value) {\n        System.out.println(\"Added to cache: \" + key);\n    }\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedCache {\n\n    private static DistributedCache instance;\n    private ConcurrentHashMap<String, String> cache;\n\n    private DistributedCache() {\n        cache = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedCache getInstance() {\n        if (instance == null) {\n            instance = new DistributedCache();\n        }\n        return instance;\n    }\n\n    public void addCacheEntry(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String getCacheEntry(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "LazyLoadedResourceManagerSingleton",
    "input": "public class ResourceManager {\n\n    public ResourceManager() {}\n\n    public void allocateResource(String resource) {\n        System.out.println(\"Allocating resource: \" + resource);\n    }\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class ResourceManager {\n\n    private static ResourceManager instance;\n    private Queue<String> availableResources;\n\n    private ResourceManager() {\n        availableResources = new LinkedList<>();\n        availableResources.add(\"Resource1\");\n        availableResources.add(\"Resource2\");\n    }\n\n    public static synchronized ResourceManager getInstance() {\n        if (instance == null) {\n            instance = new ResourceManager();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return availableResources.poll();\n    }\n\n    public void releaseResource(String resource) {\n        availableResources.add(resource);\n    }\n\n}"
  },
  {
    "type": "ThreadSafeFeatureToggleSingleton",
    "input": "public class FeatureToggle {\n\n    public FeatureToggle() {}\n\n    public boolean isFeatureEnabled(String feature) {\n        return false;\n    }\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class FeatureToggle {\n\n    private static FeatureToggle instance;\n    private ConcurrentHashMap<String, Boolean> toggles;\n\n    private FeatureToggle() {\n        toggles = new ConcurrentHashMap<>();\n        toggles.put(\"NewFeature\", true);\n        toggles.put(\"BetaMode\", false);\n    }\n\n    public static synchronized FeatureToggle getInstance() {\n        if (instance == null) {\n            instance = new FeatureToggle();\n        }\n        return instance;\n    }\n\n    public boolean isFeatureEnabled(String feature) {\n        return toggles.getOrDefault(feature, false);\n    }\n\n    public void setFeature(String feature, boolean isEnabled) {\n        toggles.put(feature, isEnabled);\n    }\n\n}"
  },
  {
    "type": "ConnectionPoolManagerSingleton",
    "input": "public class ConnectionPoolManager {\n\n    public ConnectionPoolManager() {}\n\n    public void addConnection(String connection) {\n        System.out.println(\"Added connection: \" + connection);\n    }\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class ConnectionPoolManager {\n\n    private static ConnectionPoolManager instance;\n    private Queue<String> connectionPool;\n\n    private ConnectionPoolManager() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static synchronized ConnectionPoolManager getInstance() {\n        if (instance == null) {\n            instance = new ConnectionPoolManager();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}"
  },
  {
    "type": "NotificationServiceSingleton",
    "input": "public class NotificationService {\n\n    public NotificationService() {}\n\n    public void sendNotification(String message) {\n        System.out.println(message);\n    }\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationService {\n\n    private static NotificationService instance;\n    private List<String> notifications;\n\n    private NotificationService() {\n        notifications = new ArrayList<>();\n    }\n\n    public static synchronized NotificationService getInstance() {\n        if (instance == null) {\n            instance = new NotificationService();\n        }\n        return instance;\n    }\n\n    public void sendNotification(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification sent: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}"
  },
  {
    "type": "EventBusSingleton",
    "input": "public class EventBus {\n\n    public EventBus() {}\n\n    public void postEvent(String event) {\n        System.out.println(event);\n    }\n\n}",
    "output": "import java.util.concurrent.CopyOnWriteArrayList;\n\npublic class EventBus {\n\n    private static EventBus instance;\n    private CopyOnWriteArrayList<String> subscribers;\n\n    private EventBus() {\n        subscribers = new CopyOnWriteArrayList<>();\n    }\n\n    public static synchronized EventBus getInstance() {\n        if (instance == null) {\n            instance = new EventBus();\n        }\n        return instance;\n    }\n\n    public void subscribe(String subscriber) {\n        subscribers.add(subscriber);\n    }\n\n    public void postEvent(String event) {\n        for (String subscriber : subscribers) {\n            System.out.println(\"Event sent to \" + subscriber + \": \" + event);\n        }\n    }\n\n}"
  },
  {
    "type": "ThreadLocalCounterSingleton",
    "input": "public class ThreadLocalCounter {\n\n    public ThreadLocalCounter() {}\n\n    public int incrementAndGet() {\n        return 0;\n    }\n\n}",
    "output": "public class ThreadLocalCounter {\n\n    private static final ThreadLocal<ThreadLocalCounter> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalCounter::new);\n    private int counter;\n\n    private ThreadLocalCounter() {\n        counter = 0;\n    }\n\n    public static ThreadLocalCounter getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public int incrementAndGet() {\n        return ++counter;\n    }\n\n}"
  },
  {
    "type": "GlobalRateLimiterSingleton",
    "input": "public class RateLimiter {\n\n    public RateLimiter() {}\n\n    public boolean allowRequest(String clientId) {\n        return false;\n    }\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class RateLimiter {\n\n    private static RateLimiter instance;\n    private ConcurrentHashMap<String, AtomicInteger> clientRequests;\n    private static final int MAX_REQUESTS = 5;\n\n    private RateLimiter() {\n        clientRequests = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized RateLimiter getInstance() {\n        if (instance == null) {\n            instance = new RateLimiter();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest(String clientId) {\n        clientRequests.putIfAbsent(clientId, new AtomicInteger(0));\n        AtomicInteger requestCount = clientRequests.get(clientId);\n        if (requestCount.get() < MAX_REQUESTS) {\n            requestCount.incrementAndGet();\n            return true;\n        } else {\n            System.out.println(\"Rate limit exceeded for: \" + clientId);\n            return false;\n        }\n    }\n\n}"
  },
  {
    "type": "SingletonWithTimeoutInitialization",
    "input": "public class TimedInitializer {\n\n    public TimedInitializer() {}\n\n    public void initialize() {\n        System.out.println(\"Initialized\");\n    }\n\n}",
    "output": "import java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class TimedInitializer {\n\n    private static TimedInitializer instance;\n    private static final Lock lock = new ReentrantLock();\n\n    private TimedInitializer() {}\n\n    public static TimedInitializer getInstance() {\n        if (instance == null) {\n            try {\n                if (lock.tryLock()) {\n                    try {\n                        if (instance == null) {\n                            instance = new TimedInitializer();\n                        }\n                    } finally {\n                        lock.unlock();\n                    }\n                }\n            } catch (Exception e) {\n                System.out.println(\"Timeout during initialization\");\n            }\n        }\n        return instance;\n    }\n\n    public void initialize() {\n        System.out.println(\"Initialized\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithCyclicDependencyGuard",
    "input": "public class CyclicDependencySingleton {\n\n    public CyclicDependencySingleton() {}\n\n}",
    "output": "public class CyclicDependencySingleton {\n\n    private static CyclicDependencySingleton instance;\n    private static boolean isCreating;\n\n    private CyclicDependencySingleton() {\n        if (isCreating) {\n            throw new IllegalStateException(\"Cyclic dependency detected!\");\n        }\n        isCreating = true;\n    }\n\n    public static synchronized CyclicDependencySingleton getInstance() {\n        if (instance == null) {\n            instance = new CyclicDependencySingleton();\n            isCreating = false;\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithFallbackInstance",
    "input": "public class FallbackSingleton {\n\n    public FallbackSingleton() {}\n\n}",
    "output": "public class FallbackSingleton {\n\n    private static FallbackSingleton instance;\n    private static final FallbackSingleton fallbackInstance = new FallbackSingleton(\"fallback\");\n\n    private String mode;\n\n    private FallbackSingleton(String mode) {\n        this.mode = mode;\n    }\n\n    public static FallbackSingleton getInstance(boolean useFallback) {\n        if (useFallback) {\n            return fallbackInstance;\n        }\n        if (instance == null) {\n            instance = new FallbackSingleton(\"primary\");\n        }\n        return instance;\n    }\n\n    public String getMode() {\n        return mode;\n    }\n\n}"
  },
  {
    "type": "SelfDestructingSingleton",
    "input": "public class SelfDestructingInstance {\n\n    public SelfDestructingInstance() {}\n\n}",
    "output": "public class SelfDestructingInstance {\n\n    private static SelfDestructingInstance instance;\n    private static long lastAccessed;\n    private static final long TIMEOUT = 3000; // milliseconds\n\n    private SelfDestructingInstance() {}\n\n    public static synchronized SelfDestructingInstance getInstance() {\n        if (instance == null || (System.currentTimeMillis() - lastAccessed) > TIMEOUT) {\n            instance = new SelfDestructingInstance();\n        }\n        lastAccessed = System.currentTimeMillis();\n        return instance;\n    }\n\n}"
  },
  {
    "type": "DistributedLockingSingleton",
    "input": "public class DistributedLockManager {\n\n    public DistributedLockManager() {}\n\n    public boolean acquireLock(String key) {\n        return false;\n    }\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedLockManager {\n\n    private static DistributedLockManager instance;\n    private ConcurrentHashMap<String, Boolean> lockMap;\n\n    private DistributedLockManager() {\n        lockMap = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedLockManager getInstance() {\n        if (instance == null) {\n            instance = new DistributedLockManager();\n        }\n        return instance;\n    }\n\n    public boolean acquireLock(String key) {\n        return lockMap.putIfAbsent(key, true) == null;\n    }\n\n    public void releaseLock(String key) {\n        lockMap.remove(key);\n    }\n\n}"
  },
  {
    "type": "SingletonWithObserverLifecycle",
    "input": "public class ObserverLifecycleManager {\n\n    public ObserverLifecycleManager() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class ObserverLifecycleManager {\n\n    private static ObserverLifecycleManager instance;\n    private List<String> events;\n\n    private ObserverLifecycleManager() {\n        events = new ArrayList<>();\n        onStart();\n    }\n\n    public static synchronized ObserverLifecycleManager getInstance() {\n        if (instance == null) {\n            instance = new ObserverLifecycleManager();\n        }\n        return instance;\n    }\n\n    public void onStart() {\n        System.out.println(\"Singleton started\");\n    }\n\n    public void onEvent(String event) {\n        events.add(event);\n        System.out.println(\"Event captured: \" + event);\n    }\n\n    public void onStop() {\n        events.clear();\n        System.out.println(\"Singleton stopped\");\n    }\n\n}"
  },
  {
    "type": "SynchronizedMethodSingleton",
    "input": "public class SynchronizedMethodSingleton {\n\n    public SynchronizedMethodSingleton() {}\n\n}",
    "output": "public class SynchronizedMethodSingleton {\n\n    private static SynchronizedMethodSingleton instance;\n\n    private SynchronizedMethodSingleton() {}\n\n    public static synchronized SynchronizedMethodSingleton getInstance() {\n        if (instance == null) {\n            instance = new SynchronizedMethodSingleton();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingleton {\n\n    public DoubleCheckedLockingSingleton() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingleton {\n\n    private static volatile DoubleCheckedLockingSingleton instance;\n\n    private DoubleCheckedLockingSingleton() {}\n\n    public static DoubleCheckedLockingSingleton getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingleton.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingleton();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingleton {\n\n    public BillPughSingleton() {}\n\n}",
    "output": "public class BillPughSingleton {\n\n    private BillPughSingleton() {}\n\n    private static class SingletonHelper {\n        private static final BillPughSingleton INSTANCE = new BillPughSingleton();\n    }\n\n    public static BillPughSingleton getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingleton {\n\n    public ThreadLocalSingleton() {}\n\n}",
    "output": "public class ThreadLocalSingleton {\n\n    private static final ThreadLocal<ThreadLocalSingleton> instance = ThreadLocal.withInitial(ThreadLocalSingleton::new);\n\n    private ThreadLocalSingleton() {}\n\n    public static ThreadLocalSingleton getInstance() {\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "EnumBasedSingleton",
    "input": "public class EnumBasedSingleton {\n\n    public EnumBasedSingleton() {}\n\n}",
    "output": "public enum EnumBasedSingleton {\n\n    INSTANCE;\n\n    public void performAction() {\n        System.out.println(\"Action performed by Singleton\");\n    }\n\n}"
  },
  {
    "type": "StaticBlockInitializationSingleton",
    "input": "public class StaticBlockInitializationSingleton {\n\n    public StaticBlockInitializationSingleton() {}\n\n}",
    "output": "public class StaticBlockInitializationSingleton {\n\n    private static StaticBlockInitializationSingleton instance;\n\n    static {\n        try {\n            instance = new StaticBlockInitializationSingleton();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error initializing singleton\", e);\n        }\n    }\n\n    private StaticBlockInitializationSingleton() {}\n\n    public static StaticBlockInitializationSingleton getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "VolatileLazyInitializationSingleton",
    "input": "public class VolatileLazyInitializationSingleton {\n\n    public VolatileLazyInitializationSingleton() {}\n\n}",
    "output": "public class VolatileLazyInitializationSingleton {\n\n    private static volatile VolatileLazyInitializationSingleton instance;\n\n    private VolatileLazyInitializationSingleton() {}\n\n    public static VolatileLazyInitializationSingleton getInstance() {\n        if (instance == null) {\n            synchronized (VolatileLazyInitializationSingleton.class) {\n                if (instance == null) {\n                    instance = new VolatileLazyInitializationSingleton();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeLazyHolderSingleton",
    "input": "public class ThreadSafeLazyHolderSingleton {\n\n    public ThreadSafeLazyHolderSingleton() {}\n\n}",
    "output": "public class ThreadSafeLazyHolderSingleton {\n\n    private ThreadSafeLazyHolderSingleton() {}\n\n    private static class LazyHolder {\n        private static final ThreadSafeLazyHolderSingleton INSTANCE = new ThreadSafeLazyHolderSingleton();\n    }\n\n    public static ThreadSafeLazyHolderSingleton getInstance() {\n        return LazyHolder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "SynchronizedBlockSingleton",
    "input": "public class SynchronizedBlockSingleton {\n\n    public SynchronizedBlockSingleton() {}\n\n}",
    "output": "public class SynchronizedBlockSingleton {\n\n    private static SynchronizedBlockSingleton instance;\n\n    private SynchronizedBlockSingleton() {}\n\n    public static SynchronizedBlockSingleton getInstance() {\n        if (instance == null) {\n            synchronized (SynchronizedBlockSingleton.class) {\n                if (instance == null) {\n                    instance = new SynchronizedBlockSingleton();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeInitializationOnDemandHolder",
    "input": "public class InitializationOnDemandHolderSingleton {\n\n    public InitializationOnDemandHolderSingleton() {}\n\n}",
    "output": "public class InitializationOnDemandHolderSingleton {\n\n    private InitializationOnDemandHolderSingleton() {}\n\n    private static class Holder {\n        private static final InitializationOnDemandHolderSingleton INSTANCE = new InitializationOnDemandHolderSingleton();\n    }\n\n    public static InitializationOnDemandHolderSingleton getInstance() {\n        return Holder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "EagerThreadSafeSingleton",
    "input": "public class EagerThreadSafeSingleton {\n\n    public EagerThreadSafeSingleton() {}\n\n}",
    "output": "public class EagerThreadSafeSingleton {\n\n    private static final EagerThreadSafeSingleton INSTANCE = new EagerThreadSafeSingleton();\n\n    private EagerThreadSafeSingleton() {}\n\n    public static EagerThreadSafeSingleton getInstance() {\n        return INSTANCE;\n    }\n\n}"
  },
  {
    "type": "SynchronizedDoubleCheckSingleton",
    "input": "public class SynchronizedDoubleCheckSingleton {\n\n    public SynchronizedDoubleCheckSingleton() {}\n\n}",
    "output": "public class SynchronizedDoubleCheckSingleton {\n\n    private static volatile SynchronizedDoubleCheckSingleton instance;\n\n    private SynchronizedDoubleCheckSingleton() {}\n\n    public static SynchronizedDoubleCheckSingleton getInstance() {\n        if (instance == null) {\n            synchronized (SynchronizedDoubleCheckSingleton.class) {\n                if (instance == null) {\n                    instance = new SynchronizedDoubleCheckSingleton();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedAccessSingleton",
    "input": "public class SynchronizedAccessSingleton {\n\n    public SynchronizedAccessSingleton() {}\n\n}",
    "output": "public class SynchronizedAccessSingleton {\n\n    private static SynchronizedAccessSingleton instance;\n\n    private SynchronizedAccessSingleton() {}\n\n    public static SynchronizedAccessSingleton getInstance() {\n        synchronized (SynchronizedAccessSingleton.class) {\n            if (instance == null) {\n                instance = new SynchronizedAccessSingleton();\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ConcurrentMapSingleton",
    "input": "public class ConcurrentMapSingleton {\n\n    public ConcurrentMapSingleton() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class ConcurrentMapSingleton {\n\n    private static final ConcurrentHashMap<String, ConcurrentMapSingleton> instances = new ConcurrentHashMap<>();\n\n    private ConcurrentMapSingleton() {}\n\n    public static ConcurrentMapSingleton getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new ConcurrentMapSingleton());\n    }\n\n}"
  },
  {
    "type": "AtomicReferenceSingleton",
    "input": "public class AtomicReferenceSingleton {\n\n    public AtomicReferenceSingleton() {}\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicReference;\n\npublic class AtomicReferenceSingleton {\n\n    private static final AtomicReference<AtomicReferenceSingleton> INSTANCE = new AtomicReference<>();\n\n    private AtomicReferenceSingleton() {}\n\n    public static AtomicReferenceSingleton getInstance() {\n        if (INSTANCE.get() == null) {\n            INSTANCE.compareAndSet(null, new AtomicReferenceSingleton());\n        }\n        return INSTANCE.get();\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithCounter",
    "input": "public class ThreadSafeSingletonWithCounter {\n\n    public ThreadSafeSingletonWithCounter() {}\n\n}",
    "output": "public class ThreadSafeSingletonWithCounter {\n\n    private static ThreadSafeSingletonWithCounter instance;\n    private int counter;\n\n    private ThreadSafeSingletonWithCounter() {\n        counter = 0;\n    }\n\n    public static synchronized ThreadSafeSingletonWithCounter getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithCounter();\n        }\n        return instance;\n    }\n\n    public synchronized void incrementCounter() {\n        counter++;\n    }\n\n    public synchronized int getCounter() {\n        return counter;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithThreadPool",
    "input": "public class ThreadSafeSingletonWithThreadPool {\n\n    public ThreadSafeSingletonWithThreadPool() {}\n\n}",
    "output": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class ThreadSafeSingletonWithThreadPool {\n\n    private static ThreadSafeSingletonWithThreadPool instance;\n    private ExecutorService executorService;\n\n    private ThreadSafeSingletonWithThreadPool() {\n        executorService = Executors.newFixedThreadPool(5);\n    }\n\n    public static synchronized ThreadSafeSingletonWithThreadPool getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithThreadPool();\n        }\n        return instance;\n    }\n\n    public ExecutorService getExecutorService() {\n        return executorService;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithCache",
    "input": "public class ThreadSafeSingletonWithCache {\n\n    public ThreadSafeSingletonWithCache() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.Map;\n\npublic class ThreadSafeSingletonWithCache {\n\n    private static ThreadSafeSingletonWithCache instance;\n    private Map<String, String> cache;\n\n    private ThreadSafeSingletonWithCache() {\n        cache = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized ThreadSafeSingletonWithCache getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithCache();\n        }\n        return instance;\n    }\n\n    public synchronized void addToCache(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public synchronized String getFromCache(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithLifecycle",
    "input": "public class ThreadSafeSingletonWithLifecycle {\n\n    public ThreadSafeSingletonWithLifecycle() {}\n\n}",
    "output": "public class ThreadSafeSingletonWithLifecycle {\n\n    private static ThreadSafeSingletonWithLifecycle instance;\n\n    private ThreadSafeSingletonWithLifecycle() {\n        onCreate();\n    }\n\n    public static synchronized ThreadSafeSingletonWithLifecycle getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithLifecycle();\n        }\n        return instance;\n    }\n\n    private void onCreate() {\n        System.out.println(\"Singleton created\");\n    }\n\n    public void onDestroy() {\n        System.out.println(\"Singleton destroyed\");\n        instance = null;\n    }\n\n}"
  },
  {
    "type": "SynchronizedWeakReferenceSingleton",
    "input": "public class SynchronizedWeakReferenceSingleton {\n\n    public SynchronizedWeakReferenceSingleton() {}\n\n}",
    "output": "import java.lang.ref.WeakReference;\n\npublic class SynchronizedWeakReferenceSingleton {\n\n    private static WeakReference<SynchronizedWeakReferenceSingleton> instance;\n\n    private SynchronizedWeakReferenceSingleton() {}\n\n    public static synchronized SynchronizedWeakReferenceSingleton getInstance() {\n        if (instance == null || instance.get() == null) {\n            instance = new WeakReference<>(new SynchronizedWeakReferenceSingleton());\n        }\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "SingletonWithRetryPolicy",
    "input": "public class RetryPolicy {\n\n    public RetryPolicy() {}\n\n    public void retry(String task) {\n        System.out.println(\"Retrying: \" + task);\n    }\n\n}",
    "output": "public class RetryPolicy {\n\n    private static RetryPolicy instance;\n    private int retryCount;\n\n    private RetryPolicy() {\n        retryCount = 0;\n    }\n\n    public static synchronized RetryPolicy getInstance() {\n        if (instance == null) {\n            instance = new RetryPolicy();\n        }\n        return instance;\n    }\n\n    public void retry(String task) {\n        retryCount++;\n        System.out.println(\"Retrying task: \" + task + \" - Retry Count: \" + retryCount);\n    }\n\n    public int getRetryCount() {\n        return retryCount;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithInitializationCheck",
    "input": "public class LazySingletonCheck {\n\n    public LazySingletonCheck() {}\n\n}",
    "output": "public class LazySingletonCheck {\n\n    private static LazySingletonCheck instance;\n\n    private LazySingletonCheck() {}\n\n    public static synchronized LazySingletonCheck getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonCheck();\n        }\n        return instance;\n    }\n\n    public boolean isInitialized() {\n        return instance != null;\n    }\n\n}"
  },
  {
    "type": "SingletonWithSessionTimeout",
    "input": "public class SessionManager {\n\n    public SessionManager() {}\n\n    public void createSession(String user) {\n        System.out.println(\"Session created for: \" + user);\n    }\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class SessionManager {\n\n    private static SessionManager instance;\n    private Map<String, Long> sessions;\n    private ScheduledExecutorService scheduler;\n\n    private SessionManager() {\n        sessions = new HashMap<>();\n        scheduler = Executors.newScheduledThreadPool(1);\n        scheduler.scheduleAtFixedRate(() -> {\n            long currentTime = System.currentTimeMillis();\n            sessions.entrySet().removeIf(entry -> currentTime - entry.getValue() > 30000);\n        }, 0, 10, TimeUnit.SECONDS);\n    }\n\n    public static synchronized SessionManager getInstance() {\n        if (instance == null) {\n            instance = new SessionManager();\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        sessions.put(user, System.currentTimeMillis());\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return sessions.containsKey(user);\n    }\n\n}"
  },
  {
    "type": "SingletonWithDynamicResourcePool",
    "input": "public class ResourcePool {\n\n    public ResourcePool() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentLinkedQueue;\n\npublic class ResourcePool {\n\n    private static ResourcePool instance;\n    private ConcurrentLinkedQueue<String> resources;\n\n    private ResourcePool() {\n        resources = new ConcurrentLinkedQueue<>();\n    }\n\n    public static synchronized ResourcePool getInstance() {\n        if (instance == null) {\n            instance = new ResourcePool();\n        }\n        return instance;\n    }\n\n    public void addResource(String resource) {\n        resources.add(resource);\n    }\n\n    public String getResource() {\n        return resources.poll();\n    }\n\n}"
  },
  {
    "type": "DistributedSingleton",
    "input": "public class DistributedSingleton {\n\n    public DistributedSingleton() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedSingleton {\n\n    private static ConcurrentHashMap<String, DistributedSingleton> instances = new ConcurrentHashMap<>();\n\n    private DistributedSingleton() {}\n\n    public static DistributedSingleton getInstance(String region) {\n        return instances.computeIfAbsent(region, k -> new DistributedSingleton());\n    }\n\n}"
  },
  {
    "type": "SingletonWithPreloadedData",
    "input": "public class PreloadedDataSingleton {\n\n    public PreloadedDataSingleton() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class PreloadedDataSingleton {\n\n    private static PreloadedDataSingleton instance;\n    private Map<String, String> data;\n\n    private PreloadedDataSingleton() {\n        data = new HashMap<>();\n        data.put(\"Key1\", \"Value1\");\n        data.put(\"Key2\", \"Value2\");\n    }\n\n    public static synchronized PreloadedDataSingleton getInstance() {\n        if (instance == null) {\n            instance = new PreloadedDataSingleton();\n        }\n        return instance;\n    }\n\n    public String getData(String key) {\n        return data.get(key);\n    }\n\n}"
  },
  {
    "type": "SingletonWithRuntimeExceptionProtection",
    "input": "public class ProtectedSingleton {\n\n    public ProtectedSingleton() {}\n\n}",
    "output": "public class ProtectedSingleton {\n\n    private static ProtectedSingleton instance;\n\n    private ProtectedSingleton() {\n        if (instance != null) {\n            throw new RuntimeException(\"Instance already created\");\n        }\n    }\n\n    public static synchronized ProtectedSingleton getInstance() {\n        if (instance == null) {\n            instance = new ProtectedSingleton();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithInitializationHooks",
    "input": "public class HookedSingleton {\n\n    public HookedSingleton() {}\n\n}",
    "output": "public class HookedSingleton {\n\n    private static HookedSingleton instance;\n\n    private HookedSingleton() {\n        initialize();\n    }\n\n    public static synchronized HookedSingleton getInstance() {\n        if (instance == null) {\n            instance = new HookedSingleton();\n        }\n        return instance;\n    }\n\n    private void initialize() {\n        System.out.println(\"Singleton Initialized\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithOptionalInstance",
    "input": "public class OptionalSingleton {\n\n    public OptionalSingleton() {}\n\n}",
    "output": "import java.util.Optional;\n\npublic class OptionalSingleton {\n\n    private static OptionalSingleton instance;\n\n    private OptionalSingleton() {}\n\n    public static Optional<OptionalSingleton> getInstance() {\n        if (instance == null) {\n            instance = new OptionalSingleton();\n        }\n        return Optional.of(instance);\n    }\n\n}"
  },
  {
    "type": "ParameterizedLazySingleton",
    "input": "public class LazySingletonWithParameter {\n\n    public LazySingletonWithParameter(String config) {}\n\n}",
    "output": "public class LazySingletonWithParameter {\n\n    private static LazySingletonWithParameter instance;\n    private String config;\n\n    private LazySingletonWithParameter(String config) {\n        this.config = config;\n    }\n\n    public static LazySingletonWithParameter getInstance(String config) {\n        if (instance == null) {\n            instance = new LazySingletonWithParameter(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeLazySingleton",
    "input": "public class ThreadSafeLazySingleton {\n\n    public ThreadSafeLazySingleton() {}\n\n}",
    "output": "public class ThreadSafeLazySingleton {\n\n    private static volatile ThreadSafeLazySingleton instance;\n\n    private ThreadSafeLazySingleton() {}\n\n    public static ThreadSafeLazySingleton getInstance() {\n        if (instance == null) {\n            synchronized (ThreadSafeLazySingleton.class) {\n                if (instance == null) {\n                    instance = new ThreadSafeLazySingleton();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithDynamicConfiguration",
    "input": "public class DynamicConfigSingleton {\n\n    public DynamicConfigSingleton(String environment) {}\n\n}",
    "output": "public class DynamicConfigSingleton {\n\n    private static DynamicConfigSingleton instance;\n    private String environment;\n\n    private DynamicConfigSingleton(String environment) {\n        this.environment = environment;\n    }\n\n    public static DynamicConfigSingleton getInstance(String environment) {\n        if (instance == null) {\n            instance = new DynamicConfigSingleton(environment);\n        }\n        return instance;\n    }\n\n    public String getEnvironment() {\n        return environment;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMultipleConstructors",
    "input": "public class MultiConstructorSingleton {\n\n    public MultiConstructorSingleton() {}\n    public MultiConstructorSingleton(String config) {}\n\n}",
    "output": "public class MultiConstructorSingleton {\n\n    private static MultiConstructorSingleton instance;\n    private String config;\n\n    private MultiConstructorSingleton(String config) {\n        this.config = config;\n    }\n\n    private MultiConstructorSingleton() {}\n\n    public static MultiConstructorSingleton getInstance(String config) {\n        if (instance == null) {\n            instance = new MultiConstructorSingleton(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "SingletonWithInheritance",
    "input": "public class BaseClass {\n\n    public BaseClass() {}\n\n}\n\npublic class DerivedSingleton extends BaseClass {\n\n    public DerivedSingleton() {}\n\n}",
    "output": "public class BaseClass {\n\n    public BaseClass() {}\n\n}\n\npublic class DerivedSingleton extends BaseClass {\n\n    private static DerivedSingleton instance;\n\n    private DerivedSingleton() {}\n\n    public static DerivedSingleton getInstance() {\n        if (instance == null) {\n            instance = new DerivedSingleton();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithInitializationLogging",
    "input": "public class LoggingSingleton {\n\n    public LoggingSingleton() {}\n\n}",
    "output": "public class LoggingSingleton {\n\n    private static LoggingSingleton instance;\n\n    private LoggingSingleton() {\n        System.out.println(\"LoggingSingleton initialized\");\n    }\n\n    public static LoggingSingleton getInstance() {\n        if (instance == null) {\n            instance = new LoggingSingleton();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithImmutableState",
    "input": "public class ImmutableSingleton {\n\n    public ImmutableSingleton(String state) {}\n\n}",
    "output": "public class ImmutableSingleton {\n\n    private static ImmutableSingleton instance;\n    private final String state;\n\n    private ImmutableSingleton(String state) {\n        this.state = state;\n    }\n\n    public static ImmutableSingleton getInstance(String state) {\n        if (instance == null) {\n            instance = new ImmutableSingleton(state);\n        }\n        return instance;\n    }\n\n    public String getState() {\n        return state;\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingleton {\n\n    public ThreadLocalSingleton() {}\n\n}",
    "output": "public class ThreadLocalSingleton {\n\n    private static final ThreadLocal<ThreadLocalSingleton> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingleton::new);\n\n    private ThreadLocalSingleton() {}\n\n    public static ThreadLocalSingleton getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "SingletonWithFallbackInstance",
    "input": "public class FallbackSingleton {\n\n    public FallbackSingleton() {}\n\n}",
    "output": "public class FallbackSingleton {\n\n    private static FallbackSingleton instance;\n\n    private FallbackSingleton() {}\n\n    public static FallbackSingleton getInstance() {\n        if (instance == null) {\n            try {\n                instance = new FallbackSingleton();\n            } catch (Exception e) {\n                instance = new FallbackSingleton(); // Fallback logic\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EagerlyInitializedSingleton",
    "input": "public class EagerlyInitializedSingletonExample1 {\n\n    public EagerlyInitializedSingletonExample1() {}\n\n}",
    "output": "public class EagerlyInitializedSingletonExample1 {\n\n    private EagerlyInitializedSingletonExample1() {}\n\n    private static final EagerlyInitializedSingletonExample1 instance = new EagerlyInitializedSingletonExample1();\n\n    public static EagerlyInitializedSingletonExample1 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EagerlyInitializedSingleton",
    "input": "public class EagerlyInitializedSingletonExample2 {\n\n    public EagerlyInitializedSingletonExample2() {}\n\n}",
    "output": "public class EagerlyInitializedSingletonExample2 {\n\n    private EagerlyInitializedSingletonExample2() {}\n\n    private static final EagerlyInitializedSingletonExample2 instance = new EagerlyInitializedSingletonExample2();\n\n    public static EagerlyInitializedSingletonExample2 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EagerlyInitializedSingleton",
    "input": "public class EagerlyInitializedSingletonExample3 {\n\n    public EagerlyInitializedSingletonExample3() {}\n\n}",
    "output": "public class EagerlyInitializedSingletonExample3 {\n\n    private EagerlyInitializedSingletonExample3() {}\n\n    private static final EagerlyInitializedSingletonExample3 instance = new EagerlyInitializedSingletonExample3();\n\n    public static EagerlyInitializedSingletonExample3 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EagerlyInitializedSingleton",
    "input": "public class EagerlyInitializedSingletonExample4 {\n\n    public EagerlyInitializedSingletonExample4() {}\n\n}",
    "output": "public class EagerlyInitializedSingletonExample4 {\n\n    private EagerlyInitializedSingletonExample4() {}\n\n    private static final EagerlyInitializedSingletonExample4 instance = new EagerlyInitializedSingletonExample4();\n\n    public static EagerlyInitializedSingletonExample4 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EagerlyInitializedSingleton",
    "input": "public class EagerlyInitializedSingletonExample5 {\n\n    public EagerlyInitializedSingletonExample5() {}\n\n}",
    "output": "public class EagerlyInitializedSingletonExample5 {\n\n    private EagerlyInitializedSingletonExample5() {}\n\n    private static final EagerlyInitializedSingletonExample5 instance = new EagerlyInitializedSingletonExample5();\n\n    public static EagerlyInitializedSingletonExample5 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazyInitializedSingleton",
    "input": "public class LazyInitializedSingletonExample1 {\n\n    public LazyInitializedSingletonExample1() {}\n\n}",
    "output": "public class LazyInitializedSingletonExample1 {\n\n    private static LazyInitializedSingletonExample1 instance;\n\n    private LazyInitializedSingletonExample1() {}\n\n    public static LazyInitializedSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new LazyInitializedSingletonExample1();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazyInitializedSingleton",
    "input": "public class LazyInitializedSingletonExample2 {\n\n    public LazyInitializedSingletonExample2() {}\n\n}",
    "output": "public class LazyInitializedSingletonExample2 {\n\n    private static LazyInitializedSingletonExample2 instance;\n\n    private LazyInitializedSingletonExample2() {}\n\n    public static LazyInitializedSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazyInitializedSingletonExample2();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazyInitializedSingleton",
    "input": "public class LazyInitializedSingletonExample3 {\n\n    public LazyInitializedSingletonExample3() {}\n\n}",
    "output": "public class LazyInitializedSingletonExample3 {\n\n    private static LazyInitializedSingletonExample3 instance;\n\n    private LazyInitializedSingletonExample3() {}\n\n    public static LazyInitializedSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new LazyInitializedSingletonExample3();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazyInitializedSingleton",
    "input": "public class LazyInitializedSingletonExample4 {\n\n    public LazyInitializedSingletonExample4() {}\n\n}",
    "output": "public class LazyInitializedSingletonExample4 {\n\n    private static LazyInitializedSingletonExample4 instance;\n\n    private LazyInitializedSingletonExample4() {}\n\n    public static LazyInitializedSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new LazyInitializedSingletonExample4();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazyInitializedSingleton",
    "input": "public class LazyInitializedSingletonExample5 {\n\n    public LazyInitializedSingletonExample5() {}\n\n}",
    "output": "public class LazyInitializedSingletonExample5 {\n\n    private static LazyInitializedSingletonExample5 instance;\n\n    private LazyInitializedSingletonExample5() {}\n\n    public static LazyInitializedSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new LazyInitializedSingletonExample5();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingleton",
    "input": "public class ThreadSafeSingletonExample1 {\n\n    public ThreadSafeSingletonExample1() {}\n\n}",
    "output": "public class ThreadSafeSingletonExample1 {\n\n    private static ThreadSafeSingletonExample1 instance;\n\n    private ThreadSafeSingletonExample1() {}\n\n    public static synchronized ThreadSafeSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonExample1();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingleton",
    "input": "public class ThreadSafeSingletonExample2 {\n\n    public ThreadSafeSingletonExample2() {}\n\n}",
    "output": "public class ThreadSafeSingletonExample2 {\n\n    private static ThreadSafeSingletonExample2 instance;\n\n    private ThreadSafeSingletonExample2() {}\n\n    public static synchronized ThreadSafeSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonExample2();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingleton",
    "input": "public class ThreadSafeSingletonExample3 {\n\n    public ThreadSafeSingletonExample3() {}\n\n}",
    "output": "public class ThreadSafeSingletonExample3 {\n\n    private static ThreadSafeSingletonExample3 instance;\n\n    private ThreadSafeSingletonExample3() {}\n\n    public static synchronized ThreadSafeSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonExample3();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingleton",
    "input": "public class ThreadSafeSingletonExample4 {\n\n    public ThreadSafeSingletonExample4() {}\n\n}",
    "output": "public class ThreadSafeSingletonExample4 {\n\n    private static ThreadSafeSingletonExample4 instance;\n\n    private ThreadSafeSingletonExample4() {}\n\n    public static synchronized ThreadSafeSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonExample4();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingleton",
    "input": "public class ThreadSafeSingletonExample5 {\n\n    public ThreadSafeSingletonExample5() {}\n\n}",
    "output": "public class ThreadSafeSingletonExample5 {\n\n    private static ThreadSafeSingletonExample5 instance;\n\n    private ThreadSafeSingletonExample5() {}\n\n    public static synchronized ThreadSafeSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonExample5();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingletonExample1 {\n\n    public BillPughSingletonExample1() {}\n\n}",
    "output": "public class BillPughSingletonExample1 {\n\n    private BillPughSingletonExample1() {}\n\n    private static class SingletonHelper {\n        private static final BillPughSingletonExample1 INSTANCE = new BillPughSingletonExample1();\n    }\n\n    public static BillPughSingletonExample1 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingletonExample2 {\n\n    public BillPughSingletonExample2() {}\n\n}",
    "output": "public class BillPughSingletonExample2 {\n\n    private BillPughSingletonExample2() {}\n\n    private static class SingletonHelper {\n        private static final BillPughSingletonExample2 INSTANCE = new BillPughSingletonExample2();\n    }\n\n    public static BillPughSingletonExample2 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingletonExample3 {\n\n    public BillPughSingletonExample3() {}\n\n}",
    "output": "public class BillPughSingletonExample3 {\n\n    private BillPughSingletonExample3() {}\n\n    private static class SingletonHelper {\n        private static final BillPughSingletonExample3 INSTANCE = new BillPughSingletonExample3();\n    }\n\n    public static BillPughSingletonExample3 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingletonExample4 {\n\n    public BillPughSingletonExample4() {}\n\n}",
    "output": "public class BillPughSingletonExample4 {\n\n    private BillPughSingletonExample4() {}\n\n    private static class SingletonHelper {\n        private static final BillPughSingletonExample4 INSTANCE = new BillPughSingletonExample4();\n    }\n\n    public static BillPughSingletonExample4 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingletonExample5 {\n\n    public BillPughSingletonExample5() {}\n\n}",
    "output": "public class BillPughSingletonExample5 {\n\n    private BillPughSingletonExample5() {}\n\n    private static class SingletonHelper {\n        private static final BillPughSingletonExample5 INSTANCE = new BillPughSingletonExample5();\n    }\n\n    public static BillPughSingletonExample5 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "SerializableSingleton",
    "input": "public class SerializableSingletonExample1 {\n\n    public SerializableSingletonExample1() {}\n\n}",
    "output": "import java.io.Serializable;\n\npublic class SerializableSingletonExample1 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static SerializableSingletonExample1 instance;\n\n    private SerializableSingletonExample1() {}\n\n    public static SerializableSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new SerializableSingletonExample1();\n        }\n        return instance;\n    }\n\n    protected Object readResolve() {\n        return getInstance();\n    }\n\n}"
  },
  {
    "type": "SerializableSingleton",
    "input": "public class SerializableSingletonExample2 {\n\n    public SerializableSingletonExample2() {}\n\n}",
    "output": "import java.io.Serializable;\n\npublic class SerializableSingletonExample2 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static SerializableSingletonExample2 instance;\n\n    private SerializableSingletonExample2() {}\n\n    public static SerializableSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new SerializableSingletonExample2();\n        }\n        return instance;\n    }\n\n    protected Object readResolve() {\n        return getInstance();\n    }\n\n}"
  },
  {
    "type": "SerializableSingleton",
    "input": "public class SerializableSingletonExample3 {\n\n    public SerializableSingletonExample3() {}\n\n}",
    "output": "import java.io.Serializable;\n\npublic class SerializableSingletonExample3 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static SerializableSingletonExample3 instance;\n\n    private SerializableSingletonExample3() {}\n\n    public static SerializableSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new SerializableSingletonExample3();\n        }\n        return instance;\n    }\n\n    protected Object readResolve() {\n        return getInstance();\n    }\n\n}"
  },
  {
    "type": "SerializableSingleton",
    "input": "public class SerializableSingletonExample4 {\n\n    public SerializableSingletonExample4() {}\n\n}",
    "output": "import java.io.Serializable;\n\npublic class SerializableSingletonExample4 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static SerializableSingletonExample4 instance;\n\n    private SerializableSingletonExample4() {}\n\n    public static SerializableSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new SerializableSingletonExample4();\n        }\n        return instance;\n    }\n\n    protected Object readResolve() {\n        return getInstance();\n    }\n\n}"
  },
  {
    "type": "SerializableSingleton",
    "input": "public class SerializableSingletonExample5 {\n\n    public SerializableSingletonExample5() {}\n\n}",
    "output": "import java.io.Serializable;\n\npublic class SerializableSingletonExample5 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static SerializableSingletonExample5 instance;\n\n    private SerializableSingletonExample5() {}\n\n    public static SerializableSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new SerializableSingletonExample5();\n        }\n        return instance;\n    }\n\n    protected Object readResolve() {\n        return getInstance();\n    }\n\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample1 {\n\n    public DoubleCheckedLockingSingletonExample1() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample1 {\n\n    private static volatile DoubleCheckedLockingSingletonExample1 instance;\n\n    private DoubleCheckedLockingSingletonExample1() {}\n\n    public static DoubleCheckedLockingSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample2 {\n\n    public DoubleCheckedLockingSingletonExample2() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample2 {\n\n    private static volatile DoubleCheckedLockingSingletonExample2 instance;\n\n    private DoubleCheckedLockingSingletonExample2() {}\n\n    public static DoubleCheckedLockingSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample3 {\n\n    public DoubleCheckedLockingSingletonExample3() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample3 {\n\n    private static volatile DoubleCheckedLockingSingletonExample3 instance;\n\n    private DoubleCheckedLockingSingletonExample3() {}\n\n    public static DoubleCheckedLockingSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample4 {\n\n    public DoubleCheckedLockingSingletonExample4() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample4 {\n\n    private static volatile DoubleCheckedLockingSingletonExample4 instance;\n\n    private DoubleCheckedLockingSingletonExample4() {}\n\n    public static DoubleCheckedLockingSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample5 {\n\n    public DoubleCheckedLockingSingletonExample5() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample5 {\n\n    private static volatile DoubleCheckedLockingSingletonExample5 instance;\n\n    private DoubleCheckedLockingSingletonExample5() {}\n\n    public static DoubleCheckedLockingSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "StaticBlockSingleton",
    "input": "public class StaticBlockSingletonExample1 {\n\n    public StaticBlockSingletonExample1() {}\n\n}",
    "output": "public class StaticBlockSingletonExample1 {\n\n    private static StaticBlockSingletonExample1 instance;\n\n    static {\n        try {\n            instance = new StaticBlockSingletonExample1();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private StaticBlockSingletonExample1() {}\n\n    public static StaticBlockSingletonExample1 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "StaticBlockSingleton",
    "input": "public class StaticBlockSingletonExample2 {\n\n    public StaticBlockSingletonExample2() {}\n\n}",
    "output": "public class StaticBlockSingletonExample2 {\n\n    private static StaticBlockSingletonExample2 instance;\n\n    static {\n        try {\n            instance = new StaticBlockSingletonExample2();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private StaticBlockSingletonExample2() {}\n\n    public static StaticBlockSingletonExample2 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "StaticBlockSingleton",
    "input": "public class StaticBlockSingletonExample3 {\n\n    public StaticBlockSingletonExample3() {}\n\n}",
    "output": "public class StaticBlockSingletonExample3 {\n\n    private static StaticBlockSingletonExample3 instance;\n\n    static {\n        try {\n            instance = new StaticBlockSingletonExample3();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private StaticBlockSingletonExample3() {}\n\n    public static StaticBlockSingletonExample3 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "StaticBlockSingleton",
    "input": "public class StaticBlockSingletonExample4 {\n\n    public StaticBlockSingletonExample4() {}\n\n}",
    "output": "public class StaticBlockSingletonExample4 {\n\n    private static StaticBlockSingletonExample4 instance;\n\n    static {\n        try {\n            instance = new StaticBlockSingletonExample4();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private StaticBlockSingletonExample4() {}\n\n    public static StaticBlockSingletonExample4 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "StaticBlockSingleton",
    "input": "public class StaticBlockSingletonExample5 {\n\n    public StaticBlockSingletonExample5() {}\n\n}",
    "output": "public class StaticBlockSingletonExample5 {\n\n    private static StaticBlockSingletonExample5 instance;\n\n    static {\n        try {\n            instance = new StaticBlockSingletonExample5();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private StaticBlockSingletonExample5() {}\n\n    public static StaticBlockSingletonExample5 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ObserverPatternSingleton",
    "input": "public class ObserverPatternSingletonExample1 {\n\n    public ObserverPatternSingletonExample1() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class ObserverPatternSingletonExample1 {\n\n    private static ObserverPatternSingletonExample1 instance;\n    private List<Observer> observers;\n\n    private ObserverPatternSingletonExample1() {\n        observers = new ArrayList<>();\n    }\n\n    public static ObserverPatternSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new ObserverPatternSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void addObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyObservers() {\n        for (Observer observer : observers) {\n            observer.update();\n        }\n    }\n\n}\n\ninterface Observer {\n    void update();\n}"
  },
  {
    "type": "ObserverPatternSingleton",
    "input": "public class ObserverPatternSingletonExample2 {\n\n    public ObserverPatternSingletonExample2() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class ObserverPatternSingletonExample2 {\n\n    private static ObserverPatternSingletonExample2 instance;\n    private List<Observer> observers;\n\n    private ObserverPatternSingletonExample2() {\n        observers = new ArrayList<>();\n    }\n\n    public static ObserverPatternSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new ObserverPatternSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void addObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyObservers() {\n        for (Observer observer : observers) {\n            observer.update();\n        }\n    }\n\n}\n\ninterface Observer {\n    void update();\n}"
  },
  {
    "type": "ObserverPatternSingleton",
    "input": "public class ObserverPatternSingletonExample3 {\n\n    public ObserverPatternSingletonExample3() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class ObserverPatternSingletonExample3 {\n\n    private static ObserverPatternSingletonExample3 instance;\n    private List<Observer> observers;\n\n    private ObserverPatternSingletonExample3() {\n        observers = new ArrayList<>();\n    }\n\n    public static ObserverPatternSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new ObserverPatternSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void addObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyObservers() {\n        for (Observer observer : observers) {\n            observer.update();\n        }\n    }\n\n}\n\ninterface Observer {\n    void update();\n}"
  },
  {
    "type": "ObserverPatternSingleton",
    "input": "public class ObserverPatternSingletonExample4 {\n\n    public ObserverPatternSingletonExample4() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class ObserverPatternSingletonExample4 {\n\n    private static ObserverPatternSingletonExample4 instance;\n    private List<Observer> observers;\n\n    private ObserverPatternSingletonExample4() {\n        observers = new ArrayList<>();\n    }\n\n    public static ObserverPatternSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new ObserverPatternSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void addObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyObservers() {\n        for (Observer observer : observers) {\n            observer.update();\n        }\n    }\n\n}\n\ninterface Observer {\n    void update();\n}"
  },
  {
    "type": "ObserverPatternSingleton",
    "input": "public class ObserverPatternSingletonExample5 {\n\n    public ObserverPatternSingletonExample5() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class ObserverPatternSingletonExample5 {\n\n    private static ObserverPatternSingletonExample5 instance;\n    private List<Observer> observers;\n\n    private ObserverPatternSingletonExample5() {\n        observers = new ArrayList<>();\n    }\n\n    public static ObserverPatternSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new ObserverPatternSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void addObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyObservers() {\n        for (Observer observer : observers) {\n            observer.update();\n        }\n    }\n\n}\n\ninterface Observer {\n    void update();\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample1 {\n\n    public ThreadLocalSingletonExample1() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample1 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample1> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample1::new);\n\n    private ThreadLocalSingletonExample1() {}\n\n    public static ThreadLocalSingletonExample1 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample2 {\n\n    public ThreadLocalSingletonExample2() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample2 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample2> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample2::new);\n\n    private ThreadLocalSingletonExample2() {}\n\n    public static ThreadLocalSingletonExample2 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample3 {\n\n    public ThreadLocalSingletonExample3() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample3 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample3> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample3::new);\n\n    private ThreadLocalSingletonExample3() {}\n\n    public static ThreadLocalSingletonExample3 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample4 {\n\n    public ThreadLocalSingletonExample4() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample4 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample4> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample4::new);\n\n    private ThreadLocalSingletonExample4() {}\n\n    public static ThreadLocalSingletonExample4 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample5 {\n\n    public ThreadLocalSingletonExample5() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample5 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample5> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample5::new);\n\n    private ThreadLocalSingletonExample5() {}\n\n    public static ThreadLocalSingletonExample5 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "EagerlyInitializedSingleton",
    "input": "public class EagerlyInitializedSingletonExample1 {\n\n    public EagerlyInitializedSingletonExample1() {}\n\n}",
    "output": "public class EagerlyInitializedSingletonExample1 {\n\n    private EagerlyInitializedSingletonExample1() {}\n\n    private static final EagerlyInitializedSingletonExample1 instance = new EagerlyInitializedSingletonExample1();\n\n    public static EagerlyInitializedSingletonExample1 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EagerlyInitializedSingleton",
    "input": "public class EagerlyInitializedSingletonExample2 {\n\n    public EagerlyInitializedSingletonExample2() {}\n\n}",
    "output": "public class EagerlyInitializedSingletonExample2 {\n\n    private EagerlyInitializedSingletonExample2() {}\n\n    private static final EagerlyInitializedSingletonExample2 instance = new EagerlyInitializedSingletonExample2();\n\n    public static EagerlyInitializedSingletonExample2 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EagerlyInitializedSingleton",
    "input": "public class EagerlyInitializedSingletonExample3 {\n\n    public EagerlyInitializedSingletonExample3() {}\n\n}",
    "output": "public class EagerlyInitializedSingletonExample3 {\n\n    private EagerlyInitializedSingletonExample3() {}\n\n    private static final EagerlyInitializedSingletonExample3 instance = new EagerlyInitializedSingletonExample3();\n\n    public static EagerlyInitializedSingletonExample3 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EagerlyInitializedSingleton",
    "input": "public class EagerlyInitializedSingletonExample4 {\n\n    public EagerlyInitializedSingletonExample4() {}\n\n}",
    "output": "public class EagerlyInitializedSingletonExample4 {\n\n    private EagerlyInitializedSingletonExample4() {}\n\n    private static final EagerlyInitializedSingletonExample4 instance = new EagerlyInitializedSingletonExample4();\n\n    public static EagerlyInitializedSingletonExample4 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EagerlyInitializedSingleton",
    "input": "public class EagerlyInitializedSingletonExample5 {\n\n    public EagerlyInitializedSingletonExample5() {}\n\n}",
    "output": "public class EagerlyInitializedSingletonExample5 {\n\n    private EagerlyInitializedSingletonExample5() {}\n\n    private static final EagerlyInitializedSingletonExample5 instance = new EagerlyInitializedSingletonExample5();\n\n    public static EagerlyInitializedSingletonExample5 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazyInitializedSingleton",
    "input": "public class LazyInitializedSingletonExample1 {\n\n    public LazyInitializedSingletonExample1() {}\n\n}",
    "output": "public class LazyInitializedSingletonExample1 {\n\n    private static LazyInitializedSingletonExample1 instance;\n\n    private LazyInitializedSingletonExample1() {}\n\n    public static LazyInitializedSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new LazyInitializedSingletonExample1();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazyInitializedSingleton",
    "input": "public class LazyInitializedSingletonExample2 {\n\n    public LazyInitializedSingletonExample2() {}\n\n}",
    "output": "public class LazyInitializedSingletonExample2 {\n\n    private static LazyInitializedSingletonExample2 instance;\n\n    private LazyInitializedSingletonExample2() {}\n\n    public static LazyInitializedSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazyInitializedSingletonExample2();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazyInitializedSingleton",
    "input": "public class LazyInitializedSingletonExample3 {\n\n    public LazyInitializedSingletonExample3() {}\n\n}",
    "output": "public class LazyInitializedSingletonExample3 {\n\n    private static LazyInitializedSingletonExample3 instance;\n\n    private LazyInitializedSingletonExample3() {}\n\n    public static LazyInitializedSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new LazyInitializedSingletonExample3();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazyInitializedSingleton",
    "input": "public class LazyInitializedSingletonExample4 {\n\n    public LazyInitializedSingletonExample4() {}\n\n}",
    "output": "public class LazyInitializedSingletonExample4 {\n\n    private static LazyInitializedSingletonExample4 instance;\n\n    private LazyInitializedSingletonExample4() {}\n\n    public static LazyInitializedSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new LazyInitializedSingletonExample4();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazyInitializedSingleton",
    "input": "public class LazyInitializedSingletonExample5 {\n\n    public LazyInitializedSingletonExample5() {}\n\n}",
    "output": "public class LazyInitializedSingletonExample5 {\n\n    private static LazyInitializedSingletonExample5 instance;\n\n    private LazyInitializedSingletonExample5() {}\n\n    public static LazyInitializedSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new LazyInitializedSingletonExample5();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingleton",
    "input": "public class ThreadSafeSingletonExample1 {\n\n    public ThreadSafeSingletonExample1() {}\n\n}",
    "output": "public class ThreadSafeSingletonExample1 {\n\n    private static ThreadSafeSingletonExample1 instance;\n\n    private ThreadSafeSingletonExample1() {}\n\n    public static synchronized ThreadSafeSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonExample1();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingleton",
    "input": "public class ThreadSafeSingletonExample2 {\n\n    public ThreadSafeSingletonExample2() {}\n\n}",
    "output": "public class ThreadSafeSingletonExample2 {\n\n    private static ThreadSafeSingletonExample2 instance;\n\n    private ThreadSafeSingletonExample2() {}\n\n    public static synchronized ThreadSafeSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonExample2();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingleton",
    "input": "public class ThreadSafeSingletonExample3 {\n\n    public ThreadSafeSingletonExample3() {}\n\n}",
    "output": "public class ThreadSafeSingletonExample3 {\n\n    private static ThreadSafeSingletonExample3 instance;\n\n    private ThreadSafeSingletonExample3() {}\n\n    public static synchronized ThreadSafeSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonExample3();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingleton",
    "input": "public class ThreadSafeSingletonExample4 {\n\n    public ThreadSafeSingletonExample4() {}\n\n}",
    "output": "public class ThreadSafeSingletonExample4 {\n\n    private static ThreadSafeSingletonExample4 instance;\n\n    private ThreadSafeSingletonExample4() {}\n\n    public static synchronized ThreadSafeSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonExample4();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingleton",
    "input": "public class ThreadSafeSingletonExample5 {\n\n    public ThreadSafeSingletonExample5() {}\n\n}",
    "output": "public class ThreadSafeSingletonExample5 {\n\n    private static ThreadSafeSingletonExample5 instance;\n\n    private ThreadSafeSingletonExample5() {}\n\n    public static synchronized ThreadSafeSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonExample5();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingletonExample1 {\n\n    public BillPughSingletonExample1() {}\n\n}",
    "output": "public class BillPughSingletonExample1 {\n\n    private BillPughSingletonExample1() {}\n\n    private static class SingletonHelper {\n        private static final BillPughSingletonExample1 INSTANCE = new BillPughSingletonExample1();\n    }\n\n    public static BillPughSingletonExample1 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingletonExample2 {\n\n    public BillPughSingletonExample2() {}\n\n}",
    "output": "public class BillPughSingletonExample2 {\n\n    private BillPughSingletonExample2() {}\n\n    private static class SingletonHelper {\n        private static final BillPughSingletonExample2 INSTANCE = new BillPughSingletonExample2();\n    }\n\n    public static BillPughSingletonExample2 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingletonExample3 {\n\n    public BillPughSingletonExample3() {}\n\n}",
    "output": "public class BillPughSingletonExample3 {\n\n    private BillPughSingletonExample3() {}\n\n    private static class SingletonHelper {\n        private static final BillPughSingletonExample3 INSTANCE = new BillPughSingletonExample3();\n    }\n\n    public static BillPughSingletonExample3 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingletonExample4 {\n\n    public BillPughSingletonExample4() {}\n\n}",
    "output": "public class BillPughSingletonExample4 {\n\n    private BillPughSingletonExample4() {}\n\n    private static class SingletonHelper {\n        private static final BillPughSingletonExample4 INSTANCE = new BillPughSingletonExample4();\n    }\n\n    public static BillPughSingletonExample4 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingletonExample5 {\n\n    public BillPughSingletonExample5() {}\n\n}",
    "output": "public class BillPughSingletonExample5 {\n\n    private BillPughSingletonExample5() {}\n\n    private static class SingletonHelper {\n        private static final BillPughSingletonExample5 INSTANCE = new BillPughSingletonExample5();\n    }\n\n    public static BillPughSingletonExample5 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "EnumSingleton",
    "input": "public class EnumSingletonExample1 {\n\n    public EnumSingletonExample1() {}\n\n}",
    "output": "public enum EnumSingletonExample1 {\n    INSTANCE;\n\n    public void someMethod() {\n        // Your method implementation\n    }\n}"
  },
  {
    "type": "EnumSingleton",
    "input": "public class EnumSingletonExample2 {\n\n    public EnumSingletonExample2() {}\n\n}",
    "output": "public enum EnumSingletonExample2 {\n    INSTANCE;\n\n    public void someMethod() {\n        // Your method implementation\n    }\n}"
  },
  {
    "type": "EnumSingleton",
    "input": "public class EnumSingletonExample3 {\n\n    public EnumSingletonExample3() {}\n\n}",
    "output": "public enum EnumSingletonExample3 {\n    INSTANCE;\n\n    public void someMethod() {\n        // Your method implementation\n    }\n}"
  },
  {
    "type": "EnumSingleton",
    "input": "public class EnumSingletonExample4 {\n\n    public EnumSingletonExample4() {}\n\n}",
    "output": "public enum EnumSingletonExample4 {\n    INSTANCE;\n\n    public void someMethod() {\n        // Your method implementation\n    }\n}"
  },
  {
    "type": "EnumSingleton",
    "input": "public class EnumSingletonExample5 {\n\n    public EnumSingletonExample5() {}\n\n}",
    "output": "public enum EnumSingletonExample5 {\n    INSTANCE;\n\n    public void someMethod() {\n        // Your method implementation\n    }\n}"
  },
  {
    "type": "EagerlyInitializedStaticBlockSingleton",
    "input": "public class EagerlyInitializedStaticBlockSingletonExample1 {\n\n    public EagerlyInitializedStaticBlockSingletonExample1() {}\n\n}",
    "output": "public class EagerlyInitializedStaticBlockSingletonExample1 {\n\n    private static EagerlyInitializedStaticBlockSingletonExample1 instance;\n\n    private EagerlyInitializedStaticBlockSingletonExample1() {}\n\n    static {\n        try {\n            instance = new EagerlyInitializedStaticBlockSingletonExample1();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    public static EagerlyInitializedStaticBlockSingletonExample1 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EagerlyInitializedStaticBlockSingleton",
    "input": "public class EagerlyInitializedStaticBlockSingletonExample2 {\n\n    public EagerlyInitializedStaticBlockSingletonExample2() {}\n\n}",
    "output": "public class EagerlyInitializedStaticBlockSingletonExample2 {\n\n    private static EagerlyInitializedStaticBlockSingletonExample2 instance;\n\n    private EagerlyInitializedStaticBlockSingletonExample2() {}\n\n    static {\n        try {\n            instance = new EagerlyInitializedStaticBlockSingletonExample2();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    public static EagerlyInitializedStaticBlockSingletonExample2 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EagerlyInitializedStaticBlockSingleton",
    "input": "public class EagerlyInitializedStaticBlockSingletonExample3 {\n\n    public EagerlyInitializedStaticBlockSingletonExample3() {}\n\n}",
    "output": "public class EagerlyInitializedStaticBlockSingletonExample3 {\n\n    private static EagerlyInitializedStaticBlockSingletonExample3 instance;\n\n    private EagerlyInitializedStaticBlockSingletonExample3() {}\n\n    static {\n        try {\n            instance = new EagerlyInitializedStaticBlockSingletonExample3();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    public static EagerlyInitializedStaticBlockSingletonExample3 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EagerlyInitializedStaticBlockSingleton",
    "input": "public class EagerlyInitializedStaticBlockSingletonExample4 {\n\n    public EagerlyInitializedStaticBlockSingletonExample4() {}\n\n}",
    "output": "public class EagerlyInitializedStaticBlockSingletonExample4 {\n\n    private static EagerlyInitializedStaticBlockSingletonExample4 instance;\n\n    private EagerlyInitializedStaticBlockSingletonExample4() {}\n\n    static {\n        try {\n            instance = new EagerlyInitializedStaticBlockSingletonExample4();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    public static EagerlyInitializedStaticBlockSingletonExample4 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EagerlyInitializedStaticBlockSingleton",
    "input": "public class EagerlyInitializedStaticBlockSingletonExample5 {\n\n    public EagerlyInitializedStaticBlockSingletonExample5() {}\n\n}",
    "output": "public class EagerlyInitializedStaticBlockSingletonExample5 {\n\n    private static EagerlyInitializedStaticBlockSingletonExample5 instance;\n\n    private EagerlyInitializedStaticBlockSingletonExample5() {}\n\n    static {\n        try {\n            instance = new EagerlyInitializedStaticBlockSingletonExample5();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    public static EagerlyInitializedStaticBlockSingletonExample5 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EnumSingleton",
    "input": "public class EnumSingletonExample1 {\n\n    public EnumSingletonExample1() {}\n\n}",
    "output": "public enum EnumSingletonExample1 {\n\n    INSTANCE;\n\n    //other\n}"
  },
  {
    "type": "EnumSingleton",
    "input": "public class EnumSingletonExample2 {\n\n    public EnumSingletonExample2() {}\n\n}",
    "output": "public enum EnumSingletonExample2 {\n\n    INSTANCE;\n\n    //other\n}"
  },
  {
    "type": "EnumSingleton",
    "input": "public class EnumSingletonExample3 {\n\n    public EnumSingletonExample3() {}\n\n}",
    "output": "public enum EnumSingletonExample3 {\n\n    INSTANCE;\n\n    //other\n}"
  },
  {
    "type": "EnumSingleton",
    "input": "public class EnumSingletonExample4 {\n\n    public EnumSingletonExample4() {}\n\n}",
    "output": "public enum EnumSingletonExample4 {\n\n    INSTANCE;\n\n    //other\n}"
  },
  {
    "type": "EnumSingleton",
    "input": "public class EnumSingletonExample5 {\n\n    public EnumSingletonExample5() {}\n\n}",
    "output": "public enum EnumSingletonExample5 {\n\n    INSTANCE;\n\n    //other\n}"
  },
  {
    "type": "LazilyInitializedDoubleCheckedLockingSingleton",
    "input": "public class LazilyInitializedDoubleCheckedLockingSingletonExample1 {\n\n    public LazilyInitializedDoubleCheckedLockingSingletonExample1() {}\n\n}",
    "output": "public class LazilyInitializedDoubleCheckedLockingSingletonExample1 {\n\n    private static volatile LazilyInitializedDoubleCheckedLockingSingletonExample1 instance;\n\n    private LazilyInitializedDoubleCheckedLockingSingletonExample1() {}\n\n    public static LazilyInitializedDoubleCheckedLockingSingletonExample1 getInstance() {\n        if(instance == null) {\n            synchronized (LazilyInitializedDoubleCheckedLockingSingletonExample1.class) {\n                if(instance == null) {\n                    instance = new LazilyInitializedDoubleCheckedLockingSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazilyInitializedDoubleCheckedLockingSingleton",
    "input": "public class LazilyInitializedDoubleCheckedLockingSingletonExample2 {\n\n    public LazilyInitializedDoubleCheckedLockingSingletonExample2() {}\n\n}",
    "output": "public class LazilyInitializedDoubleCheckedLockingSingletonExample2 {\n\n    private static volatile LazilyInitializedDoubleCheckedLockingSingletonExample2 instance;\n\n    private LazilyInitializedDoubleCheckedLockingSingletonExample2() {}\n\n    public static LazilyInitializedDoubleCheckedLockingSingletonExample2 getInstance() {\n        if(instance == null) {\n            synchronized (LazilyInitializedDoubleCheckedLockingSingletonExample2.class) {\n                if(instance == null) {\n                    instance = new LazilyInitializedDoubleCheckedLockingSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazilyInitializedDoubleCheckedLockingSingleton",
    "input": "public class LazilyInitializedDoubleCheckedLockingSingletonExample3 {\n\n    public LazilyInitializedDoubleCheckedLockingSingletonExample3() {}\n\n}",
    "output": "public class LazilyInitializedDoubleCheckedLockingSingletonExample3 {\n\n    private static volatile LazilyInitializedDoubleCheckedLockingSingletonExample3 instance;\n\n    private LazilyInitializedDoubleCheckedLockingSingletonExample3() {}\n\n    public static LazilyInitializedDoubleCheckedLockingSingletonExample3 getInstance() {\n        if(instance == null) {\n            synchronized (LazilyInitializedDoubleCheckedLockingSingletonExample3.class) {\n                if(instance == null) {\n                    instance = new LazilyInitializedDoubleCheckedLockingSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazilyInitializedDoubleCheckedLockingSingleton",
    "input": "public class LazilyInitializedDoubleCheckedLockingSingletonExample4 {\n\n    public LazilyInitializedDoubleCheckedLockingSingletonExample4() {}\n\n}",
    "output": "public class LazilyInitializedDoubleCheckedLockingSingletonExample4 {\n\n    private static volatile LazilyInitializedDoubleCheckedLockingSingletonExample4 instance;\n\n    private LazilyInitializedDoubleCheckedLockingSingletonExample4() {}\n\n    public static LazilyInitializedDoubleCheckedLockingSingletonExample4 getInstance() {\n        if(instance == null) {\n            synchronized (LazilyInitializedDoubleCheckedLockingSingletonExample4.class) {\n                if(instance == null) {\n                    instance = new LazilyInitializedDoubleCheckedLockingSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazilyInitializedDoubleCheckedLockingSingleton",
    "input": "public class LazilyInitializedDoubleCheckedLockingSingletonExample5 {\n\n    public LazilyInitializedDoubleCheckedLockingSingletonExample5() {}\n\n}",
    "output": "public class LazilyInitializedDoubleCheckedLockingSingletonExample5 {\n\n    private static volatile LazilyInitializedDoubleCheckedLockingSingletonExample5 instance;\n\n    private LazilyInitializedDoubleCheckedLockingSingletonExample5() {}\n\n    public static LazilyInitializedDoubleCheckedLockingSingletonExample5 getInstance() {\n        if(instance == null) {\n            synchronized (LazilyInitializedDoubleCheckedLockingSingletonExample5.class) {\n                if(instance == null) {\n                    instance = new LazilyInitializedDoubleCheckedLockingSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazilyInitializedInnerClassSingleton",
    "input": "public class LazilyInitializedInnerClassSingletonExample1 {\n\n    public LazilyInitializedInnerClassSingletonExample1() {}\n\n}",
    "output": "public class LazilyInitializedInnerClassSingletonExample1 {\n\n    private LazilyInitializedInnerClassSingletonExample1() {}\n\n    private static class InnerSingletonInitializer {\n        private static final LazilyInitializedInnerClassSingletonExample1 INSTANCE = new LazilyInitializedInnerClassSingletonExample1();\n    }\n\n    public static LazilyInitializedInnerClassSingletonExample1 getInstance() {\n        return InnerSingletonInitializer.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "LazilyInitializedInnerClassSingleton",
    "input": "public class LazilyInitializedInnerClassSingletonExample2 {\n\n    public LazilyInitializedInnerClassSingletonExample2() {}\n\n}",
    "output": "public class LazilyInitializedInnerClassSingletonExample2 {\n\n    private LazilyInitializedInnerClassSingletonExample2() {}\n\n    private static class InnerSingletonInitializer {\n        private static final LazilyInitializedInnerClassSingletonExample2 INSTANCE = new LazilyInitializedInnerClassSingletonExample2();\n    }\n\n    public static LazilyInitializedInnerClassSingletonExample2 getInstance() {\n        return InnerSingletonInitializer.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "LazilyInitializedInnerClassSingleton",
    "input": "public class LazilyInitializedInnerClassSingletonExample3 {\n\n    public LazilyInitializedInnerClassSingletonExample3() {}\n\n}",
    "output": "public class LazilyInitializedInnerClassSingletonExample3 {\n\n    private LazilyInitializedInnerClassSingletonExample3() {}\n\n    private static class InnerSingletonInitializer {\n        private static final LazilyInitializedInnerClassSingletonExample3 INSTANCE = new LazilyInitializedInnerClassSingletonExample3();\n    }\n\n    public static LazilyInitializedInnerClassSingletonExample3 getInstance() {\n        return InnerSingletonInitializer.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "LazilyInitializedInnerClassSingleton",
    "input": "public class LazilyInitializedInnerClassSingletonExample4 {\n\n    public LazilyInitializedInnerClassSingletonExample4() {}\n\n}",
    "output": "public class LazilyInitializedInnerClassSingletonExample4 {\n\n    private LazilyInitializedInnerClassSingletonExample4() {}\n\n    private static class InnerSingletonInitializer {\n        private static final LazilyInitializedInnerClassSingletonExample4 INSTANCE = new LazilyInitializedInnerClassSingletonExample4();\n    }\n\n    public static LazilyInitializedInnerClassSingletonExample4 getInstance() {\n        return InnerSingletonInitializer.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "LazilyInitializedInnerClassSingleton",
    "input": "public class LazilyInitializedInnerClassSingletonExample5 {\n\n    public LazilyInitializedInnerClassSingletonExample5() {}\n\n}",
    "output": "public class LazilyInitializedInnerClassSingletonExample5 {\n\n    private LazilyInitializedInnerClassSingletonExample5() {}\n\n    private static class InnerSingletonInitializer {\n        private static final LazilyInitializedInnerClassSingletonExample5 INSTANCE = new LazilyInitializedInnerClassSingletonExample5();\n    }\n\n    public static LazilyInitializedInnerClassSingletonExample5 getInstance() {\n        return InnerSingletonInitializer.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingletonExample1 {\n\n    public LazilyInitializedSingletonExample1() {}\n\n}",
    "output": "public class LazilyInitializedSingletonExample1 {\n\n    private static LazilyInitializedSingletonExample1 instance;\n\n    private LazilyInitializedSingletonExample1() {}\n\n    public static synchronized LazilyInitializedSingletonExample1 getInstance() {\n        if(instance == null) {\n            instance = new LazilyInitializedSingletonExample1();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingletonExample2 {\n\n    public LazilyInitializedSingletonExample2() {}\n\n}",
    "output": "public class LazilyInitializedSingletonExample2 {\n\n    private static LazilyInitializedSingletonExample2 instance;\n\n    private LazilyInitializedSingletonExample2() {}\n\n    public static synchronized LazilyInitializedSingletonExample2 getInstance() {\n        if(instance == null) {\n            instance = new LazilyInitializedSingletonExample2();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingletonExample3 {\n\n    public LazilyInitializedSingletonExample3() {}\n\n}",
    "output": "public class LazilyInitializedSingletonExample3 {\n\n    private static LazilyInitializedSingletonExample3 instance;\n\n    private LazilyInitializedSingletonExample3() {}\n\n    public static synchronized LazilyInitializedSingletonExample3 getInstance() {\n        if(instance == null) {\n            instance = new LazilyInitializedSingletonExample3();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingletonExample4 {\n\n    public LazilyInitializedSingletonExample4() {}\n\n}",
    "output": "public class LazilyInitializedSingletonExample4 {\n\n    private static LazilyInitializedSingletonExample4 instance;\n\n    private LazilyInitializedSingletonExample4() {}\n\n    public static synchronized LazilyInitializedSingletonExample4 getInstance() {\n        if(instance == null) {\n            instance = new LazilyInitializedSingletonExample4();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingletonExample5 {\n\n    public LazilyInitializedSingletonExample5() {}\n\n}",
    "output": "public class LazilyInitializedSingletonExample5 {\n\n    private static LazilyInitializedSingletonExample5 instance;\n\n    private LazilyInitializedSingletonExample5() {}\n\n    public static synchronized LazilyInitializedSingletonExample5 getInstance() {\n        if(instance == null) {\n            instance = new LazilyInitializedSingletonExample5();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ProtectionAgainstReflectionSingleton",
    "input": "public class ProtectionAgainstReflectionSingletonExample1 {\n\n    public ProtectionAgainstReflectionSingletonExample1() {}\n\n}",
    "output": "public class ProtectionAgainstReflectionSingletonExample1 {\n\n    private ProtectionAgainstReflectionSingletonExample1() {\n        if(instance != null) {\n            throw new IllegalStateException(\"Singleton already initialized\");\n        }\n    }\n\n    private static final ProtectionAgainstReflectionSingletonExample1 instance = new ProtectionAgainstReflectionSingletonExample1();\n\n    public static ProtectionAgainstReflectionSingletonExample1 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ProtectionAgainstReflectionSingleton",
    "input": "public class ProtectionAgainstReflectionSingletonExample2 {\n\n    public ProtectionAgainstReflectionSingletonExample2() {}\n\n}",
    "output": "public class ProtectionAgainstReflectionSingletonExample2 {\n\n    private ProtectionAgainstReflectionSingletonExample2() {\n        if(instance != null) {\n            throw new IllegalStateException(\"Singleton already initialized\");\n        }\n    }\n\n    private static final ProtectionAgainstReflectionSingletonExample2 instance = new ProtectionAgainstReflectionSingletonExample2();\n\n    public static ProtectionAgainstReflectionSingletonExample2 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ProtectionAgainstReflectionSingleton",
    "input": "public class ProtectionAgainstReflectionSingletonExample3 {\n\n    public ProtectionAgainstReflectionSingletonExample3() {}\n\n}",
    "output": "public class ProtectionAgainstReflectionSingletonExample3 {\n\n    private ProtectionAgainstReflectionSingletonExample3() {\n        if(instance != null) {\n            throw new IllegalStateException(\"Singleton already initialized\");\n        }\n    }\n\n    private static final ProtectionAgainstReflectionSingletonExample3 instance = new ProtectionAgainstReflectionSingletonExample3();\n\n    public static ProtectionAgainstReflectionSingletonExample3 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ProtectionAgainstReflectionSingleton",
    "input": "public class ProtectionAgainstReflectionSingletonExample4 {\n\n    public ProtectionAgainstReflectionSingletonExample4() {}\n\n}",
    "output": "public class ProtectionAgainstReflectionSingletonExample4 {\n\n    private ProtectionAgainstReflectionSingletonExample4() {\n        if(instance != null) {\n            throw new IllegalStateException(\"Singleton already initialized\");\n        }\n    }\n\n    private static final ProtectionAgainstReflectionSingletonExample4 instance = new ProtectionAgainstReflectionSingletonExample4();\n\n    public static ProtectionAgainstReflectionSingletonExample4 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ProtectionAgainstReflectionSingleton",
    "input": "public class ProtectionAgainstReflectionSingletonExample5 {\n\n    public ProtectionAgainstReflectionSingletonExample5() {}\n\n}",
    "output": "public class ProtectionAgainstReflectionSingletonExample5 {\n\n    private ProtectionAgainstReflectionSingletonExample5() {\n        if(instance != null) {\n            throw new IllegalStateException(\"Singleton already initialized\");\n        }\n    }\n\n    private static final ProtectionAgainstReflectionSingletonExample5 instance = new ProtectionAgainstReflectionSingletonExample5();\n\n    public static ProtectionAgainstReflectionSingletonExample5 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SerializableSingleton",
    "input": "public class SerializableSingletonExample1 {\n\n    public SerializableSingletonExample1() {}\n\n}",
    "output": "public class SerializableSingletonExample1 implements Serializable {\n\n    private static final long serialVersionUID = -6265755052204900542L;\n\n    private static SerializableSingletonExample1 instance;\n\n    private SerializableSingletonExample1() {}\n\n    public static synchronized SerializableSingletonExample1 getInstance() {\n        if(instance == null) {\n            instance = new SerializableSingletonExample1();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SerializableSingleton",
    "input": "public class SerializableSingletonExample2 {\n\n    public SerializableSingletonExample2() {}\n\n}",
    "output": "public class SerializableSingletonExample2 implements Serializable {\n\n    private static final long serialVersionUID = -6265755052204900542L;\n\n    private static SerializableSingletonExample2 instance;\n\n    private SerializableSingletonExample2() {}\n\n    public static synchronized SerializableSingletonExample2 getInstance() {\n        if(instance == null) {\n            instance = new SerializableSingletonExample2();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SerializableSingleton",
    "input": "public class SerializableSingletonExample3 {\n\n    public SerializableSingletonExample3() {}\n\n}",
    "output": "public class SerializableSingletonExample3 implements Serializable {\n\n    private static final long serialVersionUID = -6265755052204900542L;\n\n    private static SerializableSingletonExample3 instance;\n\n    private SerializableSingletonExample3() {}\n\n    public static synchronized SerializableSingletonExample3 getInstance() {\n        if(instance == null) {\n            instance = new SerializableSingletonExample3();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SerializableSingleton",
    "input": "public class SerializableSingletonExample4 {\n\n    public SerializableSingletonExample4() {}\n\n}",
    "output": "public class SerializableSingletonExample4 implements Serializable {\n\n    private static final long serialVersionUID = -6265755052204900542L;\n\n    private static SerializableSingletonExample4 instance;\n\n    private SerializableSingletonExample4() {}\n\n    public static synchronized SerializableSingletonExample4 getInstance() {\n        if(instance == null) {\n            instance = new SerializableSingletonExample4();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SerializableSingleton",
    "input": "public class SerializableSingletonExample5 {\n\n    public SerializableSingletonExample5() {}\n\n}",
    "output": "public class SerializableSingletonExample5 implements Serializable {\n\n    private static final long serialVersionUID = -6265755052204900542L;\n\n    private static SerializableSingletonExample5 instance;\n\n    private SerializableSingletonExample5() {}\n\n    public static synchronized SerializableSingletonExample5 getInstance() {\n        if(instance == null) {\n            instance = new SerializableSingletonExample5();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SerializableWithReadResolveSingleton",
    "input": "public class SerializableWithReadResolveSingletonExample1 {\n\n    public SerializableWithReadResolveSingletonExample1() {}\n\n}",
    "output": "public class SerializableWithReadResolveSingletonExample1 implements Serializable {\n\n    private static final long serialVersionUID = 1911904003687931976L;\n\n    private static SerializableWithReadResolveSingletonExample1 instance;\n\n    private SerializableWithReadResolveSingletonExample1() {}\n\n    protected Object readResolve() {\n        return instance;\n    }\n\n    public static synchronized SerializableWithReadResolveSingletonExample1 getInstance() {\n        if(instance == null) {\n            instance = new SerializableWithReadResolveSingletonExample1();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SerializableWithReadResolveSingleton",
    "input": "public class SerializableWithReadResolveSingletonExample2 {\n\n    public SerializableWithReadResolveSingletonExample2() {}\n\n}",
    "output": "public class SerializableWithReadResolveSingletonExample2 implements Serializable {\n\n    private static final long serialVersionUID = 1911904003687931976L;\n\n    private static SerializableWithReadResolveSingletonExample2 instance;\n\n    private SerializableWithReadResolveSingletonExample2() {}\n\n    protected Object readResolve() {\n        return instance;\n    }\n\n    public static synchronized SerializableWithReadResolveSingletonExample2 getInstance() {\n        if(instance == null) {\n            instance = new SerializableWithReadResolveSingletonExample2();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SerializableWithReadResolveSingleton",
    "input": "public class SerializableWithReadResolveSingletonExample3 {\n\n    public SerializableWithReadResolveSingletonExample3() {}\n\n}",
    "output": "public class SerializableWithReadResolveSingletonExample3 implements Serializable {\n\n    private static final long serialVersionUID = 1911904003687931976L;\n\n    private static SerializableWithReadResolveSingletonExample3 instance;\n\n    private SerializableWithReadResolveSingletonExample3() {}\n\n    protected Object readResolve() {\n        return instance;\n    }\n\n    public static synchronized SerializableWithReadResolveSingletonExample3 getInstance() {\n        if(instance == null) {\n            instance = new SerializableWithReadResolveSingletonExample3();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SerializableWithReadResolveSingleton",
    "input": "public class SerializableWithReadResolveSingletonExample4 {\n\n    public SerializableWithReadResolveSingletonExample4() {}\n\n}",
    "output": "public class SerializableWithReadResolveSingletonExample4 implements Serializable {\n\n    private static final long serialVersionUID = 1911904003687931976L;\n\n    private static SerializableWithReadResolveSingletonExample4 instance;\n\n    private SerializableWithReadResolveSingletonExample4() {}\n\n    protected Object readResolve() {\n        return instance;\n    }\n\n    public static synchronized SerializableWithReadResolveSingletonExample4 getInstance() {\n        if(instance == null) {\n            instance = new SerializableWithReadResolveSingletonExample4();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SerializableWithReadResolveSingleton",
    "input": "public class SerializableWithReadResolveSingletonExample5 {\n\n    public SerializableWithReadResolveSingletonExample5() {}\n\n}",
    "output": "public class SerializableWithReadResolveSingletonExample5 implements Serializable {\n\n    private static final long serialVersionUID = 1911904003687931976L;\n\n    private static SerializableWithReadResolveSingletonExample5 instance;\n\n    private SerializableWithReadResolveSingletonExample5() {}\n\n    protected Object readResolve() {\n        return instance;\n    }\n\n    public static synchronized SerializableWithReadResolveSingletonExample5 getInstance() {\n        if(instance == null) {\n            instance = new SerializableWithReadResolveSingletonExample5();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingletonExample1 {\n\n    public LazilyInitializedSingletonExample1() {}\n\n}",
    "output": "public class LazilyInitializedSingletonExample1 {\n    private static LazilyInitializedSingletonExample1 instance;\n\n    private String name;\n    private int numberOfGalaxies;\n\n    private LazilyInitializedSingletonExample1(String name, int numberOfGalaxies) {\n        this.name = name;\n        this.numberOfGalaxies = numberOfGalaxies;\n    }\n\n    public static LazilyInitializedSingletonExample1 getInstance(String name, int numberOfGalaxies) {\n        if (instance == null) {\n            instance = new LazilyInitializedSingletonExample1(name, numberOfGalaxies);\n        }\n        return instance;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public int getNumberOfGalaxies() {\n        return this.numberOfGalaxies;\n    }\n\n    public void setName(String aNewName) {\n        this.name = aNewName;\n    }\n}\n\npublic class BigBang {\n    public BigBang() {}\n\n    public LazilyInitializedSingletonExample1 makeLazilyInitializedSingletonExample1(String name, int numberOfGalaxies) {\n        return LazilyInitializedSingletonExample1.getInstance(name, numberOfGalaxies);\n    }\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingletonExample2 {\n\n    public LazilyInitializedSingletonExample2() {}\n\n}",
    "output": "public class LazilyInitializedSingletonExample2 {\n    private static LazilyInitializedSingletonExample2 instance;\n\n    private String name;\n    private int numberOfGalaxies;\n\n    private LazilyInitializedSingletonExample2(String name, int numberOfGalaxies) {\n        this.name = name;\n        this.numberOfGalaxies = numberOfGalaxies;\n    }\n\n    public static LazilyInitializedSingletonExample2 getInstance(String name, int numberOfGalaxies) {\n        if (instance == null) {\n            instance = new LazilyInitializedSingletonExample2(name, numberOfGalaxies);\n        }\n        return instance;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public int getNumberOfGalaxies() {\n        return this.numberOfGalaxies;\n    }\n\n    public void setName(String aNewName) {\n        this.name = aNewName;\n    }\n}\n\npublic class BigBang {\n    public BigBang() {}\n\n    public LazilyInitializedSingletonExample2 makeLazilyInitializedSingletonExample2(String name, int numberOfGalaxies) {\n        return LazilyInitializedSingletonExample2.getInstance(name, numberOfGalaxies);\n    }\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingletonExample3 {\n\n    public LazilyInitializedSingletonExample3() {}\n\n}",
    "output": "public class LazilyInitializedSingletonExample3 {\n    private static LazilyInitializedSingletonExample3 instance;\n\n    private String name;\n    private int numberOfGalaxies;\n\n    private LazilyInitializedSingletonExample3(String name, int numberOfGalaxies) {\n        this.name = name;\n        this.numberOfGalaxies = numberOfGalaxies;\n    }\n\n    public static LazilyInitializedSingletonExample3 getInstance(String name, int numberOfGalaxies) {\n        if (instance == null) {\n            instance = new LazilyInitializedSingletonExample3(name, numberOfGalaxies);\n        }\n        return instance;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public int getNumberOfGalaxies() {\n        return this.numberOfGalaxies;\n    }\n\n    public void setName(String aNewName) {\n        this.name = aNewName;\n    }\n}\n\npublic class BigBang {\n    public BigBang() {}\n\n    public LazilyInitializedSingletonExample3 makeLazilyInitializedSingletonExample3(String name, int numberOfGalaxies) {\n        return LazilyInitializedSingletonExample3.getInstance(name, numberOfGalaxies);\n    }\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingletonExample4 {\n\n    public LazilyInitializedSingletonExample4() {}\n\n}",
    "output": "public class LazilyInitializedSingletonExample4 {\n    private static LazilyInitializedSingletonExample4 instance;\n\n    private String name;\n    private int numberOfGalaxies;\n\n    private LazilyInitializedSingletonExample4(String name, int numberOfGalaxies) {\n        this.name = name;\n        this.numberOfGalaxies = numberOfGalaxies;\n    }\n\n    public static LazilyInitializedSingletonExample4 getInstance(String name, int numberOfGalaxies) {\n        if (instance == null) {\n            instance = new LazilyInitializedSingletonExample4(name, numberOfGalaxies);\n        }\n        return instance;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public int getNumberOfGalaxies() {\n        return this.numberOfGalaxies;\n    }\n\n    public void setName(String aNewName) {\n        this.name = aNewName;\n    }\n}\n\npublic class BigBang {\n    public BigBang() {}\n\n    public LazilyInitializedSingletonExample4 makeLazilyInitializedSingletonExample4(String name, int numberOfGalaxies) {\n        return LazilyInitializedSingletonExample4.getInstance(name, numberOfGalaxies);\n    }\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingletonExample5 {\n\n    public LazilyInitializedSingletonExample5() {}\n\n}",
    "output": "public class LazilyInitializedSingletonExample5 {\n    private static LazilyInitializedSingletonExample5 instance;\n\n    private String name;\n    private int numberOfGalaxies;\n\n    private LazilyInitializedSingletonExample5(String name, int numberOfGalaxies) {\n        this.name = name;\n        this.numberOfGalaxies = numberOfGalaxies;\n    }\n\n    public static LazilyInitializedSingletonExample5 getInstance(String name, int numberOfGalaxies) {\n        if (instance == null) {\n            instance = new LazilyInitializedSingletonExample5(name, numberOfGalaxies);\n        }\n        return instance;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public int getNumberOfGalaxies() {\n        return this.numberOfGalaxies;\n    }\n\n    public void setName(String aNewName) {\n        this.name = aNewName;\n    }\n}\n\npublic class BigBang {\n    public BigBang() {}\n\n    public LazilyInitializedSingletonExample5 makeLazilyInitializedSingletonExample5(String name, int numberOfGalaxies) {\n        return LazilyInitializedSingletonExample5.getInstance(name, numberOfGalaxies);\n    }\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingletonExample1 {\n\n    public LazilyInitializedSingletonExample1() {}\n\n}",
    "output": "public class LazilyInitializedSingletonExample1 {\n    private static LazilyInitializedSingletonExample1 _captain;\n\n    private LazilyInitializedSingletonExample1() {}\n\n    public static LazilyInitializedSingletonExample1 getCaptain() {\n        if (_captain == null) {\n            _captain = new LazilyInitializedSingletonExample1();\n            System.out.println(\"Izabran novi kapiten\");\n        } else {\n            System.out.println(\"Vec postoji kapiten\");\n        }\n        return _captain;\n    }\n\n    public static void main(String[] args) {\n        LazilyInitializedSingletonExample1 c1 = LazilyInitializedSingletonExample1.getCaptain();\n        LazilyInitializedSingletonExample1 c2 = LazilyInitializedSingletonExample1.getCaptain();\n\n        if (c1 == c2) {\n            System.out.println(\"c1 i c2 su iste instance\");\n        }\n    }\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingletonExample2 {\n\n    public LazilyInitializedSingletonExample2() {}\n\n}",
    "output": "public class LazilyInitializedSingletonExample2 {\n    private static LazilyInitializedSingletonExample2 _captain;\n\n    private LazilyInitializedSingletonExample2() {}\n\n    public static LazilyInitializedSingletonExample2 getCaptain() {\n        if (_captain == null) {\n            _captain = new LazilyInitializedSingletonExample2();\n            System.out.println(\"Izabran novi kapiten\");\n        } else {\n            System.out.println(\"Vec postoji kapiten\");\n        }\n        return _captain;\n    }\n\n    public static void main(String[] args) {\n        LazilyInitializedSingletonExample2 c1 = LazilyInitializedSingletonExample2.getCaptain();\n        LazilyInitializedSingletonExample2 c2 = LazilyInitializedSingletonExample2.getCaptain();\n\n        if (c1 == c2) {\n            System.out.println(\"c1 i c2 su iste instance\");\n        }\n    }\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingletonExample3 {\n\n    public LazilyInitializedSingletonExample3() {}\n\n}",
    "output": "public class LazilyInitializedSingletonExample3 {\n    private static LazilyInitializedSingletonExample3 _captain;\n\n    private LazilyInitializedSingletonExample3() {}\n\n    public static LazilyInitializedSingletonExample3 getCaptain() {\n        if (_captain == null) {\n            _captain = new LazilyInitializedSingletonExample3();\n            System.out.println(\"Izabran novi kapiten\");\n        } else {\n            System.out.println(\"Vec postoji kapiten\");\n        }\n        return _captain;\n    }\n\n    public static void main(String[] args) {\n        LazilyInitializedSingletonExample3 c1 = LazilyInitializedSingletonExample3.getCaptain();\n        LazilyInitializedSingletonExample3 c2 = LazilyInitializedSingletonExample3.getCaptain();\n\n        if (c1 == c2) {\n            System.out.println(\"c1 i c2 su iste instance\");\n        }\n    }\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingletonExample4 {\n\n    public LazilyInitializedSingletonExample4() {}\n\n}",
    "output": "public class LazilyInitializedSingletonExample4 {\n    private static LazilyInitializedSingletonExample4 _captain;\n\n    private LazilyInitializedSingletonExample4() {}\n\n    public static LazilyInitializedSingletonExample4 getCaptain() {\n        if (_captain == null) {\n            _captain = new LazilyInitializedSingletonExample4();\n            System.out.println(\"Izabran novi kapiten\");\n        } else {\n            System.out.println(\"Vec postoji kapiten\");\n        }\n        return _captain;\n    }\n\n    public static void main(String[] args) {\n        LazilyInitializedSingletonExample4 c1 = LazilyInitializedSingletonExample4.getCaptain();\n        LazilyInitializedSingletonExample4 c2 = LazilyInitializedSingletonExample4.getCaptain();\n\n        if (c1 == c2) {\n            System.out.println(\"c1 i c2 su iste instance\");\n        }\n    }\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingletonExample5 {\n\n    public LazilyInitializedSingletonExample5() {}\n\n}",
    "output": "public class LazilyInitializedSingletonExample5 {\n    private static LazilyInitializedSingletonExample5 _captain;\n\n    private LazilyInitializedSingletonExample5() {}\n\n    public static LazilyInitializedSingletonExample5 getCaptain() {\n        if (_captain == null) {\n            _captain = new LazilyInitializedSingletonExample5();\n            System.out.println(\"Izabran novi kapiten\");\n        } else {\n            System.out.println(\"Vec postoji kapiten\");\n        }\n        return _captain;\n    }\n\n    public static void main(String[] args) {\n        LazilyInitializedSingletonExample5 c1 = LazilyInitializedSingletonExample5.getCaptain();\n        LazilyInitializedSingletonExample5 c2 = LazilyInitializedSingletonExample5.getCaptain();\n\n        if (c1 == c2) {\n            System.out.println(\"c1 i c2 su iste instance\");\n        }\n    }\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample1 {\n\n    public DoubleCheckedLockingSingletonExample1() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample1 {\n  private static volatile DoubleCheckedLockingSingletonExample1 publicPrinter;\n  private static volatile Connection connection;\n\n  private DoubleCheckedLockingSingletonExample1() {\n    if (publicPrinter != null) {\n      throw new RuntimeException(\"please use publicPrinter\");\n    }\n  }\n\n  public static DoubleCheckedLockingSingletonExample1 getPublicPrinter() {\n    if (publicPrinter == null) {\n      synchronized (DoubleCheckedLockingSingletonExample1.class) {\n        if (publicPrinter == null) {\n          publicPrinter = new DoubleCheckedLockingSingletonExample1();\n        }\n      }\n    }\n    return publicPrinter;\n  }\n\n  public Connection getConnection() {\n    if (connection == null) {\n      synchronized (DoubleCheckedLockingSingletonExample1.class) {\n        if (connection == null) {\n          String url = \"jdbc:derby:memory:sample;create=true\";\n          try {\n            connection = DriverManager.getConnection(url);\n          } catch (SQLException e) {\n            e.printStackTrace();\n          }\n        }\n      }\n    }\n    return connection;\n  }\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample2 {\n\n    public DoubleCheckedLockingSingletonExample2() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample2 {\n  private static volatile DoubleCheckedLockingSingletonExample2 publicPrinter;\n  private static volatile Connection connection;\n\n  private DoubleCheckedLockingSingletonExample2() {\n    if (publicPrinter != null) {\n      throw new RuntimeException(\"please use publicPrinter\");\n    }\n  }\n\n  public static DoubleCheckedLockingSingletonExample2 getPublicPrinter() {\n    if (publicPrinter == null) {\n      synchronized (DoubleCheckedLockingSingletonExample2.class) {\n        if (publicPrinter == null) {\n          publicPrinter = new DoubleCheckedLockingSingletonExample2();\n        }\n      }\n    }\n    return publicPrinter;\n  }\n\n  public Connection getConnection() {\n    if (connection == null) {\n      synchronized (DoubleCheckedLockingSingletonExample2.class) {\n        if (connection == null) {\n          String url = \"jdbc:derby:memory:sample;create=true\";\n          try {\n            connection = DriverManager.getConnection(url);\n          } catch (SQLException e) {\n            e.printStackTrace();\n          }\n        }\n      }\n    }\n    return connection;\n  }\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample3 {\n\n    public DoubleCheckedLockingSingletonExample3() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample3 {\n  private static volatile DoubleCheckedLockingSingletonExample3 publicPrinter;\n  private static volatile Connection connection;\n\n  private DoubleCheckedLockingSingletonExample3() {\n    if (publicPrinter != null) {\n      throw new RuntimeException(\"please use publicPrinter\");\n    }\n  }\n\n  public static DoubleCheckedLockingSingletonExample3 getPublicPrinter() {\n    if (publicPrinter == null) {\n      synchronized (DoubleCheckedLockingSingletonExample3.class) {\n        if (publicPrinter == null) {\n          publicPrinter = new DoubleCheckedLockingSingletonExample3();\n        }\n      }\n    }\n    return publicPrinter;\n  }\n\n  public Connection getConnection() {\n    if (connection == null) {\n      synchronized (DoubleCheckedLockingSingletonExample3.class) {\n        if (connection == null) {\n          String url = \"jdbc:derby:memory:sample;create=true\";\n          try {\n            connection = DriverManager.getConnection(url);\n          } catch (SQLException e) {\n            e.printStackTrace();\n          }\n        }\n      }\n    }\n    return connection;\n  }\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample4 {\n\n    public DoubleCheckedLockingSingletonExample4() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample4 {\n  private static volatile DoubleCheckedLockingSingletonExample4 publicPrinter;\n  private static volatile Connection connection;\n\n  private DoubleCheckedLockingSingletonExample4() {\n    if (publicPrinter != null) {\n      throw new RuntimeException(\"please use publicPrinter\");\n    }\n  }\n\n  public static DoubleCheckedLockingSingletonExample4 getPublicPrinter() {\n    if (publicPrinter == null) {\n      synchronized (DoubleCheckedLockingSingletonExample4.class) {\n        if (publicPrinter == null) {\n          publicPrinter = new DoubleCheckedLockingSingletonExample4();\n        }\n      }\n    }\n    return publicPrinter;\n  }\n\n  public Connection getConnection() {\n    if (connection == null) {\n      synchronized (DoubleCheckedLockingSingletonExample4.class) {\n        if (connection == null) {\n          String url = \"jdbc:derby:memory:sample;create=true\";\n          try {\n            connection = DriverManager.getConnection(url);\n          } catch (SQLException e) {\n            e.printStackTrace();\n          }\n        }\n      }\n    }\n    return connection;\n  }\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample5 {\n\n    public DoubleCheckedLockingSingletonExample5() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample5 {\n  private static volatile DoubleCheckedLockingSingletonExample5 publicPrinter;\n  private static volatile Connection connection;\n\n  private DoubleCheckedLockingSingletonExample5() {\n    if (publicPrinter != null) {\n      throw new RuntimeException(\"please use publicPrinter\");\n    }\n  }\n\n  public static DoubleCheckedLockingSingletonExample5 getPublicPrinter() {\n    if (publicPrinter == null) {\n      synchronized (DoubleCheckedLockingSingletonExample5.class) {\n        if (publicPrinter == null) {\n          publicPrinter = new DoubleCheckedLockingSingletonExample5();\n        }\n      }\n    }\n    return publicPrinter;\n  }\n\n  public Connection getConnection() {\n    if (connection == null) {\n      synchronized (DoubleCheckedLockingSingletonExample5.class) {\n        if (connection == null) {\n          String url = \"jdbc:derby:memory:sample;create=true\";\n          try {\n            connection = DriverManager.getConnection(url);\n          } catch (SQLException e) {\n            e.printStackTrace();\n          }\n        }\n      }\n    }\n    return connection;\n  }\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingletonExample1 {\n\n    public LazilyInitializedSingletonExample1() {}\n\n}",
    "output": "public class LazilyInitializedSingletonExample1 {\n\n    public String str;\n\n    private LazilyInitializedSingletonExample1() {\n        str = \"This is a string of singleton\";\n    }\n\n    private static LazilyInitializedSingletonExample1 singleInstance = null;\n\n    public static LazilyInitializedSingletonExample1 getInstance() {\n        if (singleInstance == null) {\n            singleInstance = new LazilyInitializedSingletonExample1();\n        }\n        return singleInstance;\n    }\n\n    public static void main(String[] args) {\n        LazilyInitializedSingletonExample1 s = LazilyInitializedSingletonExample1.getInstance();\n\n        LazilyInitializedSingletonExample1 t = LazilyInitializedSingletonExample1.getInstance();\n\n        LazilyInitializedSingletonExample1 u = LazilyInitializedSingletonExample1.getInstance();\n\n        t.str = t.str.toUpperCase();\n\n        System.out.println(\"For Instance of 's': \" + s.str);\n        System.out.println(\"For Instance of 't': \" + t.str);\n        System.out.println(\"For Instance of 'u': \" + u.str);\n    }\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingletonExample2 {\n\n    public LazilyInitializedSingletonExample2() {}\n\n}",
    "output": "public class LazilyInitializedSingletonExample2 {\n\n    public String str;\n\n    private LazilyInitializedSingletonExample2() {\n        str = \"This is a string of singleton\";\n    }\n\n    private static LazilyInitializedSingletonExample2 singleInstance = null;\n\n    public static LazilyInitializedSingletonExample2 getInstance() {\n        if (singleInstance == null) {\n            singleInstance = new LazilyInitializedSingletonExample2();\n        }\n        return singleInstance;\n    }\n\n    public static void main(String[] args) {\n        LazilyInitializedSingletonExample2 s = LazilyInitializedSingletonExample2.getInstance();\n\n        LazilyInitializedSingletonExample2 t = LazilyInitializedSingletonExample2.getInstance();\n\n        LazilyInitializedSingletonExample2 u = LazilyInitializedSingletonExample2.getInstance();\n\n        t.str = t.str.toUpperCase();\n\n        System.out.println(\"For Instance of 's': \" + s.str);\n        System.out.println(\"For Instance of 't': \" + t.str);\n        System.out.println(\"For Instance of 'u': \" + u.str);\n    }\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingletonExample3 {\n\n    public LazilyInitializedSingletonExample3() {}\n\n}",
    "output": "public class LazilyInitializedSingletonExample3 {\n\n    public String str;\n\n    private LazilyInitializedSingletonExample3() {\n        str = \"This is a string of singleton\";\n    }\n\n    private static LazilyInitializedSingletonExample3 singleInstance = null;\n\n    public static LazilyInitializedSingletonExample3 getInstance() {\n        if (singleInstance == null) {\n            singleInstance = new LazilyInitializedSingletonExample3();\n        }\n        return singleInstance;\n    }\n\n    public static void main(String[] args) {\n        LazilyInitializedSingletonExample3 s = LazilyInitializedSingletonExample3.getInstance();\n\n        LazilyInitializedSingletonExample3 t = LazilyInitializedSingletonExample3.getInstance();\n\n        LazilyInitializedSingletonExample3 u = LazilyInitializedSingletonExample3.getInstance();\n\n        t.str = t.str.toUpperCase();\n\n        System.out.println(\"For Instance of 's': \" + s.str);\n        System.out.println(\"For Instance of 't': \" + t.str);\n        System.out.println(\"For Instance of 'u': \" + u.str);\n    }\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingletonExample4 {\n\n    public LazilyInitializedSingletonExample4() {}\n\n}",
    "output": "public class LazilyInitializedSingletonExample4 {\n\n    public String str;\n\n    private LazilyInitializedSingletonExample4() {\n        str = \"This is a string of singleton\";\n    }\n\n    private static LazilyInitializedSingletonExample4 singleInstance = null;\n\n    public static LazilyInitializedSingletonExample4 getInstance() {\n        if (singleInstance == null) {\n            singleInstance = new LazilyInitializedSingletonExample4();\n        }\n        return singleInstance;\n    }\n\n    public static void main(String[] args) {\n        LazilyInitializedSingletonExample4 s = LazilyInitializedSingletonExample4.getInstance();\n\n        LazilyInitializedSingletonExample4 t = LazilyInitializedSingletonExample4.getInstance();\n\n        LazilyInitializedSingletonExample4 u = LazilyInitializedSingletonExample4.getInstance();\n\n        t.str = t.str.toUpperCase();\n\n        System.out.println(\"For Instance of 's': \" + s.str);\n        System.out.println(\"For Instance of 't': \" + t.str);\n        System.out.println(\"For Instance of 'u': \" + u.str);\n    }\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingletonExample5 {\n\n    public LazilyInitializedSingletonExample5() {}\n\n}",
    "output": "public class LazilyInitializedSingletonExample5 {\n\n    public String str;\n\n    private LazilyInitializedSingletonExample5() {\n        str = \"This is a string of singleton\";\n    }\n\n    private static LazilyInitializedSingletonExample5 singleInstance = null;\n\n    public static LazilyInitializedSingletonExample5 getInstance() {\n        if (singleInstance == null) {\n            singleInstance = new LazilyInitializedSingletonExample5();\n        }\n        return singleInstance;\n    }\n\n    public static void main(String[] args) {\n        LazilyInitializedSingletonExample5 s = LazilyInitializedSingletonExample5.getInstance();\n\n        LazilyInitializedSingletonExample5 t = LazilyInitializedSingletonExample5.getInstance();\n\n        LazilyInitializedSingletonExample5 u = LazilyInitializedSingletonExample5.getInstance();\n\n        t.str = t.str.toUpperCase();\n\n        System.out.println(\"For Instance of 's': \" + s.str);\n        System.out.println(\"For Instance of 't': \" + t.str);\n        System.out.println(\"For Instance of 'u': \" + u.str);\n    }\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample1 {\n\n    public DoubleCheckedLockingSingletonExample1() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample1 {\n    private static volatile DoubleCheckedLockingSingletonExample1 instance = null;\n\n    private DoubleCheckedLockingSingletonExample1() {\n        // private constructor\n    }\n\n    public static DoubleCheckedLockingSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample2 {\n\n    public DoubleCheckedLockingSingletonExample2() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample2 {\n    private static volatile DoubleCheckedLockingSingletonExample2 instance = null;\n\n    private DoubleCheckedLockingSingletonExample2() {\n        // private constructor\n    }\n\n    public static DoubleCheckedLockingSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample3 {\n\n    public DoubleCheckedLockingSingletonExample3() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample3 {\n    private static volatile DoubleCheckedLockingSingletonExample3 instance = null;\n\n    private DoubleCheckedLockingSingletonExample3() {\n        // private constructor\n    }\n\n    public static DoubleCheckedLockingSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample4 {\n\n    public DoubleCheckedLockingSingletonExample4() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample4 {\n    private static volatile DoubleCheckedLockingSingletonExample4 instance = null;\n\n    private DoubleCheckedLockingSingletonExample4() {\n        // private constructor\n    }\n\n    public static DoubleCheckedLockingSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample5 {\n\n    public DoubleCheckedLockingSingletonExample5() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample5 {\n    private static volatile DoubleCheckedLockingSingletonExample5 instance = null;\n\n    private DoubleCheckedLockingSingletonExample5() {\n        // private constructor\n    }\n\n    public static DoubleCheckedLockingSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "EagerSingleton",
    "input": "public class EagerSingletonExample1 {\n\n    public EagerSingletonExample1() {}\n\n}",
    "output": "public class EagerSingletonExample1 {\n    private static final EagerSingletonExample1 instance = new EagerSingletonExample1();\n\n    private EagerSingletonExample1() {\n        // private constructor\n    }\n\n    public static EagerSingletonExample1 getInstance() {\n        return instance;\n    }\n}"
  },
  {
    "type": "EagerSingleton",
    "input": "public class EagerSingletonExample2 {\n\n    public EagerSingletonExample2() {}\n\n}",
    "output": "public class EagerSingletonExample2 {\n    private static final EagerSingletonExample2 instance = new EagerSingletonExample2();\n\n    private EagerSingletonExample2() {\n        // private constructor\n    }\n\n    public static EagerSingletonExample2 getInstance() {\n        return instance;\n    }\n}"
  },
  {
    "type": "EagerSingleton",
    "input": "public class EagerSingletonExample3 {\n\n    public EagerSingletonExample3() {}\n\n}",
    "output": "public class EagerSingletonExample3 {\n    private static final EagerSingletonExample3 instance = new EagerSingletonExample3();\n\n    private EagerSingletonExample3() {\n        // private constructor\n    }\n\n    public static EagerSingletonExample3 getInstance() {\n        return instance;\n    }\n}"
  },
  {
    "type": "EagerSingleton",
    "input": "public class EagerSingletonExample4 {\n\n    public EagerSingletonExample4() {}\n\n}",
    "output": "public class EagerSingletonExample4 {\n    private static final EagerSingletonExample4 instance = new EagerSingletonExample4();\n\n    private EagerSingletonExample4() {\n        // private constructor\n    }\n\n    public static EagerSingletonExample4 getInstance() {\n        return instance;\n    }\n}"
  },
  {
    "type": "EagerSingleton",
    "input": "public class EagerSingletonExample5 {\n\n    public EagerSingletonExample5() {}\n\n}",
    "output": "public class EagerSingletonExample5 {\n    private static final EagerSingletonExample5 instance = new EagerSingletonExample5();\n\n    private EagerSingletonExample5() {\n        // private constructor\n    }\n\n    public static EagerSingletonExample5 getInstance() {\n        return instance;\n    }\n}"
  },
  {
    "type": "EnumSingleton",
    "input": "public class EnumSingletonExample1 {\n\n    public EnumSingletonExample1() {}\n\n}",
    "output": "public enum EnumSingletonExample1 {\n\n    INSTANCE(\"property want to initialize at once\");\n\n    private String info;\n\n    private EnumSingletonExample1(String info) {\n        this.info = info;\n    }\n\n    public EnumSingletonExample1 getInstance() {\n        return INSTANCE;\n    }\n}"
  },
  {
    "type": "EnumSingleton",
    "input": "public class EnumSingletonExample2 {\n\n    public EnumSingletonExample2() {}\n\n}",
    "output": "public enum EnumSingletonExample2 {\n\n    INSTANCE(\"property want to initialize at once\");\n\n    private String info;\n\n    private EnumSingletonExample2(String info) {\n        this.info = info;\n    }\n\n    public EnumSingletonExample2 getInstance() {\n        return INSTANCE;\n    }\n}"
  },
  {
    "type": "EnumSingleton",
    "input": "public class EnumSingletonExample3 {\n\n    public EnumSingletonExample3() {}\n\n}",
    "output": "public enum EnumSingletonExample3 {\n\n    INSTANCE(\"property want to initialize at once\");\n\n    private String info;\n\n    private EnumSingletonExample3(String info) {\n        this.info = info;\n    }\n\n    public EnumSingletonExample3 getInstance() {\n        return INSTANCE;\n    }\n}"
  },
  {
    "type": "EnumSingleton",
    "input": "public class EnumSingletonExample4 {\n\n    public EnumSingletonExample4() {}\n\n}",
    "output": "public enum EnumSingletonExample4 {\n\n    INSTANCE(\"property want to initialize at once\");\n\n    private String info;\n\n    private EnumSingletonExample4(String info) {\n        this.info = info;\n    }\n\n    public EnumSingletonExample4 getInstance() {\n        return INSTANCE;\n    }\n}"
  },
  {
    "type": "EnumSingleton",
    "input": "public class EnumSingletonExample5 {\n\n    public EnumSingletonExample5() {}\n\n}",
    "output": "public enum EnumSingletonExample5 {\n\n    INSTANCE(\"property want to initialize at once\");\n\n    private String info;\n\n    private EnumSingletonExample5(String info) {\n        this.info = info;\n    }\n\n    public EnumSingletonExample5 getInstance() {\n        return INSTANCE;\n    }\n}"
  },
  {
    "type": "LazySingleton",
    "input": "public class LazySingletonExample1 {\n\n    public LazySingletonExample1() {}\n\n}",
    "output": "public class LazySingletonExample1 {\n    private static LazySingletonExample1 instance;\n\n    private LazySingletonExample1() {\n        // private constructor\n    }\n\n    public static LazySingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonExample1();\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "LazySingleton",
    "input": "public class LazySingletonExample2 {\n\n    public LazySingletonExample2() {}\n\n}",
    "output": "public class LazySingletonExample2 {\n    private static LazySingletonExample2 instance;\n\n    private LazySingletonExample2() {\n        // private constructor\n    }\n\n    public static LazySingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonExample2();\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "LazySingleton",
    "input": "public class LazySingletonExample3 {\n\n    public LazySingletonExample3() {}\n\n}",
    "output": "public class LazySingletonExample3 {\n    private static LazySingletonExample3 instance;\n\n    private LazySingletonExample3() {\n        // private constructor\n    }\n\n    public static LazySingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonExample3();\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "LazySingleton",
    "input": "public class LazySingletonExample4 {\n\n    public LazySingletonExample4() {}\n\n}",
    "output": "public class LazySingletonExample4 {\n    private static LazySingletonExample4 instance;\n\n    private LazySingletonExample4() {\n        // private constructor\n    }\n\n    public static LazySingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonExample4();\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "LazySingleton",
    "input": "public class LazySingletonExample5 {\n\n    public LazySingletonExample5() {}\n\n}",
    "output": "public class LazySingletonExample5 {\n    private static LazySingletonExample5 instance;\n\n    private LazySingletonExample5() {\n        // private constructor\n    }\n\n    public static LazySingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonExample5();\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingletonExample1 {\n\n    public BillPughSingletonExample1() {}\n\n}",
    "output": "public class BillPughSingletonExample1 {\n\n    private BillPughSingletonExample1() {\n    }\n\n    private static class BillPughSingletonExample1Helper {\n        private static final BillPughSingletonExample1 INSTANCE = new BillPughSingletonExample1();\n    }\n\n    public static BillPughSingletonExample1 getInstance() {\n        return BillPughSingletonExample1Helper.INSTANCE;\n    }\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingletonExample2 {\n\n    public BillPughSingletonExample2() {}\n\n}",
    "output": "public class BillPughSingletonExample2 {\n\n    private BillPughSingletonExample2() {\n    }\n\n    private static class BillPughSingletonExample2Helper {\n        private static final BillPughSingletonExample2 INSTANCE = new BillPughSingletonExample2();\n    }\n\n    public static BillPughSingletonExample2 getInstance() {\n        return BillPughSingletonExample2Helper.INSTANCE;\n    }\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingletonExample3 {\n\n    public BillPughSingletonExample3() {}\n\n}",
    "output": "public class BillPughSingletonExample3 {\n\n    private BillPughSingletonExample3() {\n    }\n\n    private static class BillPughSingletonExample3Helper {\n        private static final BillPughSingletonExample3 INSTANCE = new BillPughSingletonExample3();\n    }\n\n    public static BillPughSingletonExample3 getInstance() {\n        return BillPughSingletonExample3Helper.INSTANCE;\n    }\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingletonExample4 {\n\n    public BillPughSingletonExample4() {}\n\n}",
    "output": "public class BillPughSingletonExample4 {\n\n    private BillPughSingletonExample4() {\n    }\n\n    private static class BillPughSingletonExample4Helper {\n        private static final BillPughSingletonExample4 INSTANCE = new BillPughSingletonExample4();\n    }\n\n    public static BillPughSingletonExample4 getInstance() {\n        return BillPughSingletonExample4Helper.INSTANCE;\n    }\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingletonExample5 {\n\n    public BillPughSingletonExample5() {}\n\n}",
    "output": "public class BillPughSingletonExample5 {\n\n    private BillPughSingletonExample5() {\n    }\n\n    private static class BillPughSingletonExample5Helper {\n        private static final BillPughSingletonExample5 INSTANCE = new BillPughSingletonExample5();\n    }\n\n    public static BillPughSingletonExample5 getInstance() {\n        return BillPughSingletonExample5Helper.INSTANCE;\n    }\n}"
  },
  {
    "type": "StaticBlockSingleton",
    "input": "public class StaticBlockSingletonExample1 {\n\n    public StaticBlockSingletonExample1() {}\n\n}",
    "output": "public class StaticBlockSingletonExample1 {\n    public static StaticBlockSingletonExample1 instance;\n\n    private StaticBlockSingletonExample1() {\n        // private constructor\n    }\n\n    static {\n        instance = new StaticBlockSingletonExample1();\n    }\n}"
  },
  {
    "type": "StaticBlockSingleton",
    "input": "public class StaticBlockSingletonExample2 {\n\n    public StaticBlockSingletonExample2() {}\n\n}",
    "output": "public class StaticBlockSingletonExample2 {\n    public static StaticBlockSingletonExample2 instance;\n\n    private StaticBlockSingletonExample2() {\n        // private constructor\n    }\n\n    static {\n        instance = new StaticBlockSingletonExample2();\n    }\n}"
  },
  {
    "type": "StaticBlockSingleton",
    "input": "public class StaticBlockSingletonExample3 {\n\n    public StaticBlockSingletonExample3() {}\n\n}",
    "output": "public class StaticBlockSingletonExample3 {\n    public static StaticBlockSingletonExample3 instance;\n\n    private StaticBlockSingletonExample3() {\n        // private constructor\n    }\n\n    static {\n        instance = new StaticBlockSingletonExample3();\n    }\n}"
  },
  {
    "type": "StaticBlockSingleton",
    "input": "public class StaticBlockSingletonExample4 {\n\n    public StaticBlockSingletonExample4() {}\n\n}",
    "output": "public class StaticBlockSingletonExample4 {\n    public static StaticBlockSingletonExample4 instance;\n\n    private StaticBlockSingletonExample4() {\n        // private constructor\n    }\n\n    static {\n        instance = new StaticBlockSingletonExample4();\n    }\n}"
  },
  {
    "type": "StaticBlockSingleton",
    "input": "public class StaticBlockSingletonExample5 {\n\n    public StaticBlockSingletonExample5() {}\n\n}",
    "output": "public class StaticBlockSingletonExample5 {\n    public static StaticBlockSingletonExample5 instance;\n\n    private StaticBlockSingletonExample5() {\n        // private constructor\n    }\n\n    static {\n        instance = new StaticBlockSingletonExample5();\n    }\n}"
  },
  {
    "type": "ThreadSafeDoubleCheckedLockingSingleton",
    "input": "public class ThreadSafeDoubleCheckedLockingSingletonExample1 {\n\n    public ThreadSafeDoubleCheckedLockingSingletonExample1() {}\n\n}",
    "output": "public class ThreadSafeDoubleCheckedLockingSingletonExample1 {\n    private static volatile ThreadSafeDoubleCheckedLockingSingletonExample1 instance = null;\n\n    private ThreadSafeDoubleCheckedLockingSingletonExample1() {}\n\n    public static ThreadSafeDoubleCheckedLockingSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (ThreadSafeDoubleCheckedLockingSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new ThreadSafeDoubleCheckedLockingSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "ThreadSafeDoubleCheckedLockingSingleton",
    "input": "public class ThreadSafeDoubleCheckedLockingSingletonExample2 {\n\n    public ThreadSafeDoubleCheckedLockingSingletonExample2() {}\n\n}",
    "output": "public class ThreadSafeDoubleCheckedLockingSingletonExample2 {\n    private static volatile ThreadSafeDoubleCheckedLockingSingletonExample2 instance = null;\n\n    private ThreadSafeDoubleCheckedLockingSingletonExample2() {}\n\n    public static ThreadSafeDoubleCheckedLockingSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (ThreadSafeDoubleCheckedLockingSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new ThreadSafeDoubleCheckedLockingSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "ThreadSafeDoubleCheckedLockingSingleton",
    "input": "public class ThreadSafeDoubleCheckedLockingSingletonExample3 {\n\n    public ThreadSafeDoubleCheckedLockingSingletonExample3() {}\n\n}",
    "output": "public class ThreadSafeDoubleCheckedLockingSingletonExample3 {\n    private static volatile ThreadSafeDoubleCheckedLockingSingletonExample3 instance = null;\n\n    private ThreadSafeDoubleCheckedLockingSingletonExample3() {}\n\n    public static ThreadSafeDoubleCheckedLockingSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (ThreadSafeDoubleCheckedLockingSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new ThreadSafeDoubleCheckedLockingSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "ThreadSafeDoubleCheckedLockingSingleton",
    "input": "public class ThreadSafeDoubleCheckedLockingSingletonExample4 {\n\n    public ThreadSafeDoubleCheckedLockingSingletonExample4() {}\n\n}",
    "output": "public class ThreadSafeDoubleCheckedLockingSingletonExample4 {\n    private static volatile ThreadSafeDoubleCheckedLockingSingletonExample4 instance = null;\n\n    private ThreadSafeDoubleCheckedLockingSingletonExample4() {}\n\n    public static ThreadSafeDoubleCheckedLockingSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (ThreadSafeDoubleCheckedLockingSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new ThreadSafeDoubleCheckedLockingSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "ThreadSafeDoubleCheckedLockingSingleton",
    "input": "public class ThreadSafeDoubleCheckedLockingSingletonExample5 {\n\n    public ThreadSafeDoubleCheckedLockingSingletonExample5() {}\n\n}",
    "output": "public class ThreadSafeDoubleCheckedLockingSingletonExample5 {\n    private static volatile ThreadSafeDoubleCheckedLockingSingletonExample5 instance = null;\n\n    private ThreadSafeDoubleCheckedLockingSingletonExample5() {}\n\n    public static ThreadSafeDoubleCheckedLockingSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (ThreadSafeDoubleCheckedLockingSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new ThreadSafeDoubleCheckedLockingSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "OptimizedLazySingleton",
    "input": "public class OptimizedLazySingletonExample1 {\n\n    public OptimizedLazySingletonExample1() {}\n\n}",
    "output": "public class OptimizedLazySingletonExample1 {\n\n    private static final Object lock = new Object();\n    private static volatile OptimizedLazySingletonExample1 instance;\n\n    public static OptimizedLazySingletonExample1 getInstance() {\n        OptimizedLazySingletonExample1 r = instance;\n        if (r == null) {\n            synchronized (lock) {\n                r = instance;\n                if (r == null) {\n                    r = new OptimizedLazySingletonExample1();\n                    instance = r;\n                }\n            }\n        }\n        return r;\n    }\n}"
  },
  {
    "type": "OptimizedLazySingleton",
    "input": "public class OptimizedLazySingletonExample2 {\n\n    public OptimizedLazySingletonExample2() {}\n\n}",
    "output": "public class OptimizedLazySingletonExample2 {\n\n    private static final Object lock = new Object();\n    private static volatile OptimizedLazySingletonExample2 instance;\n\n    public static OptimizedLazySingletonExample2 getInstance() {\n        OptimizedLazySingletonExample2 r = instance;\n        if (r == null) {\n            synchronized (lock) {\n                r = instance;\n                if (r == null) {\n                    r = new OptimizedLazySingletonExample2();\n                    instance = r;\n                }\n            }\n        }\n        return r;\n    }\n}"
  },
  {
    "type": "OptimizedLazySingleton",
    "input": "public class OptimizedLazySingletonExample3 {\n\n    public OptimizedLazySingletonExample3() {}\n\n}",
    "output": "public class OptimizedLazySingletonExample3 {\n\n    private static final Object lock = new Object();\n    private static volatile OptimizedLazySingletonExample3 instance;\n\n    public static OptimizedLazySingletonExample3 getInstance() {\n        OptimizedLazySingletonExample3 r = instance;\n        if (r == null) {\n            synchronized (lock) {\n                r = instance;\n                if (r == null) {\n                    r = new OptimizedLazySingletonExample3();\n                    instance = r;\n                }\n            }\n        }\n        return r;\n    }\n}"
  },
  {
    "type": "OptimizedLazySingleton",
    "input": "public class OptimizedLazySingletonExample4 {\n\n    public OptimizedLazySingletonExample4() {}\n\n}",
    "output": "public class OptimizedLazySingletonExample4 {\n\n    private static final Object lock = new Object();\n    private static volatile OptimizedLazySingletonExample4 instance;\n\n    public static OptimizedLazySingletonExample4 getInstance() {\n        OptimizedLazySingletonExample4 r = instance;\n        if (r == null) {\n            synchronized (lock) {\n                r = instance;\n                if (r == null) {\n                    r = new OptimizedLazySingletonExample4();\n                    instance = r;\n                }\n            }\n        }\n        return r;\n    }\n}"
  },
  {
    "type": "OptimizedLazySingleton",
    "input": "public class OptimizedLazySingletonExample5 {\n\n    public OptimizedLazySingletonExample5() {}\n\n}",
    "output": "public class OptimizedLazySingletonExample5 {\n\n    private static final Object lock = new Object();\n    private static volatile OptimizedLazySingletonExample5 instance;\n\n    public static OptimizedLazySingletonExample5 getInstance() {\n        OptimizedLazySingletonExample5 r = instance;\n        if (r == null) {\n            synchronized (lock) {\n                r = instance;\n                if (r == null) {\n                    r = new OptimizedLazySingletonExample5();\n                    instance = r;\n                }\n            }\n        }\n        return r;\n    }\n}"
  },
  {
    "type": "LazySingleton",
    "input": "public class LazySingletonExample1 {\n\n    public LazySingletonExample1() {}\n\n}",
    "output": "public class LazySingletonExample1 {\n    \n    private static LazySingletonExample1 instanciaUnica;\n\n    private LazySingletonExample1() {\n        // private constructor\n    }\n\n    public static LazySingletonExample1 getInstancia() {\n        if (instanciaUnica == null) {\n            instanciaUnica = new LazySingletonExample1();\n        }\n        return instanciaUnica;\n    }\n\n    public void mostrarMensagem() {\n        System.out.println(\"Exemplo de LazySingletonExample1!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        LazySingletonExample1 instancia = LazySingletonExample1.getInstancia();\n        instancia.mostrarMensagem();\n    }\n}"
  },
  {
    "type": "LazySingleton",
    "input": "public class LazySingletonExample2 {\n\n    public LazySingletonExample2() {}\n\n}",
    "output": "public class LazySingletonExample2 {\n    \n    private static LazySingletonExample2 instanciaUnica;\n\n    private LazySingletonExample2() {\n        // private constructor\n    }\n\n    public static LazySingletonExample2 getInstancia() {\n        if (instanciaUnica == null) {\n            instanciaUnica = new LazySingletonExample2();\n        }\n        return instanciaUnica;\n    }\n\n    public void mostrarMensagem() {\n        System.out.println(\"Exemplo de LazySingletonExample2!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        LazySingletonExample2 instancia = LazySingletonExample2.getInstancia();\n        instancia.mostrarMensagem();\n    }\n}"
  },
  {
    "type": "LazySingleton",
    "input": "public class LazySingletonExample3 {\n\n    public LazySingletonExample3() {}\n\n}",
    "output": "public class LazySingletonExample3 {\n    \n    private static LazySingletonExample3 instanciaUnica;\n\n    private LazySingletonExample3() {\n        // private constructor\n    }\n\n    public static LazySingletonExample3 getInstancia() {\n        if (instanciaUnica == null) {\n            instanciaUnica = new LazySingletonExample3();\n        }\n        return instanciaUnica;\n    }\n\n    public void mostrarMensagem() {\n        System.out.println(\"Exemplo de LazySingletonExample3!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        LazySingletonExample3 instancia = LazySingletonExample3.getInstancia();\n        instancia.mostrarMensagem();\n    }\n}"
  },
  {
    "type": "LazySingleton",
    "input": "public class LazySingletonExample4 {\n\n    public LazySingletonExample4() {}\n\n}",
    "output": "public class LazySingletonExample4 {\n    \n    private static LazySingletonExample4 instanciaUnica;\n\n    private LazySingletonExample4() {\n        // private constructor\n    }\n\n    public static LazySingletonExample4 getInstancia() {\n        if (instanciaUnica == null) {\n            instanciaUnica = new LazySingletonExample4();\n        }\n        return instanciaUnica;\n    }\n\n    public void mostrarMensagem() {\n        System.out.println(\"Exemplo de LazySingletonExample4!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        LazySingletonExample4 instancia = LazySingletonExample4.getInstancia();\n        instancia.mostrarMensagem();\n    }\n}"
  },
  {
    "type": "LazySingleton",
    "input": "public class LazySingletonExample5 {\n\n    public LazySingletonExample5() {}\n\n}",
    "output": "public class LazySingletonExample5 {\n    \n    private static LazySingletonExample5 instanciaUnica;\n\n    private LazySingletonExample5() {\n        // private constructor\n    }\n\n    public static LazySingletonExample5 getInstancia() {\n        if (instanciaUnica == null) {\n            instanciaUnica = new LazySingletonExample5();\n        }\n        return instanciaUnica;\n    }\n\n    public void mostrarMensagem() {\n        System.out.println(\"Exemplo de LazySingletonExample5!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        LazySingletonExample5 instancia = LazySingletonExample5.getInstancia();\n        instancia.mostrarMensagem();\n    }\n}"
  },
  {
    "type": "ThreadSafeSingletonWithInitializationOnDemand",
    "input": "public class ThreadSafeSingletonWithInitializationOnDemandExample1 {\n\n    public ThreadSafeSingletonWithInitializationOnDemandExample1() {}\n\n}",
    "output": "public class ThreadSafeSingletonWithInitializationOnDemandExample1 {\n\n    private ThreadSafeSingletonWithInitializationOnDemandExample1() {}\n\n    private static class SingletonHelper {\n        private static final ThreadSafeSingletonWithInitializationOnDemandExample1 INSTANCE = new ThreadSafeSingletonWithInitializationOnDemandExample1();\n    }\n\n    public static ThreadSafeSingletonWithInitializationOnDemandExample1 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithInitializationOnDemand",
    "input": "public class ThreadSafeSingletonWithInitializationOnDemandExample2 {\n\n    public ThreadSafeSingletonWithInitializationOnDemandExample2() {}\n\n}",
    "output": "public class ThreadSafeSingletonWithInitializationOnDemandExample2 {\n\n    private ThreadSafeSingletonWithInitializationOnDemandExample2() {}\n\n    private static class SingletonHelper {\n        private static final ThreadSafeSingletonWithInitializationOnDemandExample2 INSTANCE = new ThreadSafeSingletonWithInitializationOnDemandExample2();\n    }\n\n    public static ThreadSafeSingletonWithInitializationOnDemandExample2 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithInitializationOnDemand",
    "input": "public class ThreadSafeSingletonWithInitializationOnDemandExample3 {\n\n    public ThreadSafeSingletonWithInitializationOnDemandExample3() {}\n\n}",
    "output": "public class ThreadSafeSingletonWithInitializationOnDemandExample3 {\n\n    private ThreadSafeSingletonWithInitializationOnDemandExample3() {}\n\n    private static class SingletonHelper {\n        private static final ThreadSafeSingletonWithInitializationOnDemandExample3 INSTANCE = new ThreadSafeSingletonWithInitializationOnDemandExample3();\n    }\n\n    public static ThreadSafeSingletonWithInitializationOnDemandExample3 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithInitializationOnDemand",
    "input": "public class ThreadSafeSingletonWithInitializationOnDemandExample4 {\n\n    public ThreadSafeSingletonWithInitializationOnDemandExample4() {}\n\n}",
    "output": "public class ThreadSafeSingletonWithInitializationOnDemandExample4 {\n\n    private ThreadSafeSingletonWithInitializationOnDemandExample4() {}\n\n    private static class SingletonHelper {\n        private static final ThreadSafeSingletonWithInitializationOnDemandExample4 INSTANCE = new ThreadSafeSingletonWithInitializationOnDemandExample4();\n    }\n\n    public static ThreadSafeSingletonWithInitializationOnDemandExample4 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithInitializationOnDemand",
    "input": "public class ThreadSafeSingletonWithInitializationOnDemandExample5 {\n\n    public ThreadSafeSingletonWithInitializationOnDemandExample5() {}\n\n}",
    "output": "public class ThreadSafeSingletonWithInitializationOnDemandExample5 {\n\n    private ThreadSafeSingletonWithInitializationOnDemandExample5() {}\n\n    private static class SingletonHelper {\n        private static final ThreadSafeSingletonWithInitializationOnDemandExample5 INSTANCE = new ThreadSafeSingletonWithInitializationOnDemandExample5();\n    }\n\n    public static ThreadSafeSingletonWithInitializationOnDemandExample5 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "SynchronizedSingleton",
    "input": "public class SynchronizedSingletonExample1 {\n\n    public SynchronizedSingletonExample1() {}\n\n}",
    "output": "public class SynchronizedSingletonExample1 {\n\n    private static SynchronizedSingletonExample1 instance;\n\n    private SynchronizedSingletonExample1() {}\n\n    public static synchronized SynchronizedSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new SynchronizedSingletonExample1();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedSingleton",
    "input": "public class SynchronizedSingletonExample2 {\n\n    public SynchronizedSingletonExample2() {}\n\n}",
    "output": "public class SynchronizedSingletonExample2 {\n\n    private static SynchronizedSingletonExample2 instance;\n\n    private SynchronizedSingletonExample2() {}\n\n    public static synchronized SynchronizedSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new SynchronizedSingletonExample2();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedSingleton",
    "input": "public class SynchronizedSingletonExample3 {\n\n    public SynchronizedSingletonExample3() {}\n\n}",
    "output": "public class SynchronizedSingletonExample3 {\n\n    private static SynchronizedSingletonExample3 instance;\n\n    private SynchronizedSingletonExample3() {}\n\n    public static synchronized SynchronizedSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new SynchronizedSingletonExample3();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedSingleton",
    "input": "public class SynchronizedSingletonExample4 {\n\n    public SynchronizedSingletonExample4() {}\n\n}",
    "output": "public class SynchronizedSingletonExample4 {\n\n    private static SynchronizedSingletonExample4 instance;\n\n    private SynchronizedSingletonExample4() {}\n\n    public static synchronized SynchronizedSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new SynchronizedSingletonExample4();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedSingleton",
    "input": "public class SynchronizedSingletonExample5 {\n\n    public SynchronizedSingletonExample5() {}\n\n}",
    "output": "public class SynchronizedSingletonExample5 {\n\n    private static SynchronizedSingletonExample5 instance;\n\n    private SynchronizedSingletonExample5() {}\n\n    public static synchronized SynchronizedSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new SynchronizedSingletonExample5();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithCounter",
    "input": "public class LazySingletonWithCounterExample1 {\n\n    public LazySingletonWithCounterExample1() {}\n\n}",
    "output": "public class LazySingletonWithCounterExample1 {\n\n    private static LazySingletonWithCounterExample1 instance;\n    private static int counter;\n\n    private LazySingletonWithCounterExample1() {\n        counter++;\n    }\n\n    public static LazySingletonWithCounterExample1 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithCounterExample1();\n        }\n        return instance;\n    }\n\n    public int getInstanceCount() {\n        return counter;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithCounter",
    "input": "public class LazySingletonWithCounterExample2 {\n\n    public LazySingletonWithCounterExample2() {}\n\n}",
    "output": "public class LazySingletonWithCounterExample2 {\n\n    private static LazySingletonWithCounterExample2 instance;\n    private static int counter;\n\n    private LazySingletonWithCounterExample2() {\n        counter++;\n    }\n\n    public static LazySingletonWithCounterExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithCounterExample2();\n        }\n        return instance;\n    }\n\n    public int getInstanceCount() {\n        return counter;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithCounter",
    "input": "public class LazySingletonWithCounterExample3 {\n\n    public LazySingletonWithCounterExample3() {}\n\n}",
    "output": "public class LazySingletonWithCounterExample3 {\n\n    private static LazySingletonWithCounterExample3 instance;\n    private static int counter;\n\n    private LazySingletonWithCounterExample3() {\n        counter++;\n    }\n\n    public static LazySingletonWithCounterExample3 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithCounterExample3();\n        }\n        return instance;\n    }\n\n    public int getInstanceCount() {\n        return counter;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithCounter",
    "input": "public class LazySingletonWithCounterExample4 {\n\n    public LazySingletonWithCounterExample4() {}\n\n}",
    "output": "public class LazySingletonWithCounterExample4 {\n\n    private static LazySingletonWithCounterExample4 instance;\n    private static int counter;\n\n    private LazySingletonWithCounterExample4() {\n        counter++;\n    }\n\n    public static LazySingletonWithCounterExample4 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithCounterExample4();\n        }\n        return instance;\n    }\n\n    public int getInstanceCount() {\n        return counter;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithCounter",
    "input": "public class LazySingletonWithCounterExample5 {\n\n    public LazySingletonWithCounterExample5() {}\n\n}",
    "output": "public class LazySingletonWithCounterExample5 {\n\n    private static LazySingletonWithCounterExample5 instance;\n    private static int counter;\n\n    private LazySingletonWithCounterExample5() {\n        counter++;\n    }\n\n    public static LazySingletonWithCounterExample5 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithCounterExample5();\n        }\n        return instance;\n    }\n\n    public int getInstanceCount() {\n        return counter;\n    }\n\n}"
  },
  {
    "type": "EagerSingletonWithLogging",
    "input": "public class EagerSingletonWithLoggingExample1 {\n\n    public EagerSingletonWithLoggingExample1() {}\n\n}",
    "output": "public class EagerSingletonWithLoggingExample1 {\n\n    private static final EagerSingletonWithLoggingExample1 instance = new EagerSingletonWithLoggingExample1();\n\n    private EagerSingletonWithLoggingExample1() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    public static EagerSingletonWithLoggingExample1 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EagerSingletonWithLogging",
    "input": "public class EagerSingletonWithLoggingExample2 {\n\n    public EagerSingletonWithLoggingExample2() {}\n\n}",
    "output": "public class EagerSingletonWithLoggingExample2 {\n\n    private static final EagerSingletonWithLoggingExample2 instance = new EagerSingletonWithLoggingExample2();\n\n    private EagerSingletonWithLoggingExample2() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    public static EagerSingletonWithLoggingExample2 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EagerSingletonWithLogging",
    "input": "public class EagerSingletonWithLoggingExample3 {\n\n    public EagerSingletonWithLoggingExample3() {}\n\n}",
    "output": "public class EagerSingletonWithLoggingExample3 {\n\n    private static final EagerSingletonWithLoggingExample3 instance = new EagerSingletonWithLoggingExample3();\n\n    private EagerSingletonWithLoggingExample3() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    public static EagerSingletonWithLoggingExample3 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EagerSingletonWithLogging",
    "input": "public class EagerSingletonWithLoggingExample4 {\n\n    public EagerSingletonWithLoggingExample4() {}\n\n}",
    "output": "public class EagerSingletonWithLoggingExample4 {\n\n    private static final EagerSingletonWithLoggingExample4 instance = new EagerSingletonWithLoggingExample4();\n\n    private EagerSingletonWithLoggingExample4() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    public static EagerSingletonWithLoggingExample4 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EagerSingletonWithLogging",
    "input": "public class EagerSingletonWithLoggingExample5 {\n\n    public EagerSingletonWithLoggingExample5() {}\n\n}",
    "output": "public class EagerSingletonWithLoggingExample5 {\n\n    private static final EagerSingletonWithLoggingExample5 instance = new EagerSingletonWithLoggingExample5();\n\n    private EagerSingletonWithLoggingExample5() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    public static EagerSingletonWithLoggingExample5 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EnumSingletonWithData",
    "input": "public class EnumSingletonWithDataExample1 {\n\n    public EnumSingletonWithDataExample1() {}\n\n}",
    "output": "public enum EnumSingletonWithDataExample1 {\n\n    INSTANCE(\"default\");\n\n    private String data;\n\n    private EnumSingletonWithDataExample1(String data) {\n        this.data = data;\n    }\n\n    public String getData() {\n        return data;\n    }\n\n    public void setData(String data) {\n        this.data = data;\n    }\n\n}"
  },
  {
    "type": "EnumSingletonWithData",
    "input": "public class EnumSingletonWithDataExample2 {\n\n    public EnumSingletonWithDataExample2() {}\n\n}",
    "output": "public enum EnumSingletonWithDataExample2 {\n\n    INSTANCE(\"default\");\n\n    private String data;\n\n    private EnumSingletonWithDataExample2(String data) {\n        this.data = data;\n    }\n\n    public String getData() {\n        return data;\n    }\n\n    public void setData(String data) {\n        this.data = data;\n    }\n\n}"
  },
  {
    "type": "EnumSingletonWithData",
    "input": "public class EnumSingletonWithDataExample3 {\n\n    public EnumSingletonWithDataExample3() {}\n\n}",
    "output": "public enum EnumSingletonWithDataExample3 {\n\n    INSTANCE(\"default\");\n\n    private String data;\n\n    private EnumSingletonWithDataExample3(String data) {\n        this.data = data;\n    }\n\n    public String getData() {\n        return data;\n    }\n\n    public void setData(String data) {\n        this.data = data;\n    }\n\n}"
  },
  {
    "type": "EnumSingletonWithData",
    "input": "public class EnumSingletonWithDataExample4 {\n\n    public EnumSingletonWithDataExample4() {}\n\n}",
    "output": "public enum EnumSingletonWithDataExample4 {\n\n    INSTANCE(\"default\");\n\n    private String data;\n\n    private EnumSingletonWithDataExample4(String data) {\n        this.data = data;\n    }\n\n    public String getData() {\n        return data;\n    }\n\n    public void setData(String data) {\n        this.data = data;\n    }\n\n}"
  },
  {
    "type": "EnumSingletonWithData",
    "input": "public class EnumSingletonWithDataExample5 {\n\n    public EnumSingletonWithDataExample5() {}\n\n}",
    "output": "public enum EnumSingletonWithDataExample5 {\n\n    INSTANCE(\"default\");\n\n    private String data;\n\n    private EnumSingletonWithDataExample5(String data) {\n        this.data = data;\n    }\n\n    public String getData() {\n        return data;\n    }\n\n    public void setData(String data) {\n        this.data = data;\n    }\n\n}"
  },
  {
    "type": "StaticBlockSingletonWithErrorHandling",
    "input": "public class StaticBlockSingletonWithErrorHandlingExample1 {\n\n    public StaticBlockSingletonWithErrorHandlingExample1() {}\n\n}",
    "output": "public class StaticBlockSingletonWithErrorHandlingExample1 {\n\n    private static StaticBlockSingletonWithErrorHandlingExample1 instance;\n\n    private StaticBlockSingletonWithErrorHandlingExample1() {}\n\n    static {\n        try {\n            instance = new StaticBlockSingletonWithErrorHandlingExample1();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error creating singleton instance\", e);\n        }\n    }\n\n    public static StaticBlockSingletonWithErrorHandlingExample1 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "StaticBlockSingletonWithErrorHandling",
    "input": "public class StaticBlockSingletonWithErrorHandlingExample2 {\n\n    public StaticBlockSingletonWithErrorHandlingExample2() {}\n\n}",
    "output": "public class StaticBlockSingletonWithErrorHandlingExample2 {\n\n    private static StaticBlockSingletonWithErrorHandlingExample2 instance;\n\n    private StaticBlockSingletonWithErrorHandlingExample2() {}\n\n    static {\n        try {\n            instance = new StaticBlockSingletonWithErrorHandlingExample2();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error creating singleton instance\", e);\n        }\n    }\n\n    public static StaticBlockSingletonWithErrorHandlingExample2 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "StaticBlockSingletonWithErrorHandling",
    "input": "public class StaticBlockSingletonWithErrorHandlingExample3 {\n\n    public StaticBlockSingletonWithErrorHandlingExample3() {}\n\n}",
    "output": "public class StaticBlockSingletonWithErrorHandlingExample3 {\n\n    private static StaticBlockSingletonWithErrorHandlingExample3 instance;\n\n    private StaticBlockSingletonWithErrorHandlingExample3() {}\n\n    static {\n        try {\n            instance = new StaticBlockSingletonWithErrorHandlingExample3();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error creating singleton instance\", e);\n        }\n    }\n\n    public static StaticBlockSingletonWithErrorHandlingExample3 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "StaticBlockSingletonWithErrorHandling",
    "input": "public class StaticBlockSingletonWithErrorHandlingExample4 {\n\n    public StaticBlockSingletonWithErrorHandlingExample4() {}\n\n}",
    "output": "public class StaticBlockSingletonWithErrorHandlingExample4 {\n\n    private static StaticBlockSingletonWithErrorHandlingExample4 instance;\n\n    private StaticBlockSingletonWithErrorHandlingExample4() {}\n\n    static {\n        try {\n            instance = new StaticBlockSingletonWithErrorHandlingExample4();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error creating singleton instance\", e);\n        }\n    }\n\n    public static StaticBlockSingletonWithErrorHandlingExample4 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "StaticBlockSingletonWithErrorHandling",
    "input": "public class StaticBlockSingletonWithErrorHandlingExample5 {\n\n    public StaticBlockSingletonWithErrorHandlingExample5() {}\n\n}",
    "output": "public class StaticBlockSingletonWithErrorHandlingExample5 {\n\n    private static StaticBlockSingletonWithErrorHandlingExample5 instance;\n\n    private StaticBlockSingletonWithErrorHandlingExample5() {}\n\n    static {\n        try {\n            instance = new StaticBlockSingletonWithErrorHandlingExample5();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error creating singleton instance\", e);\n        }\n    }\n\n    public static StaticBlockSingletonWithErrorHandlingExample5 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithReadResolve",
    "input": "public class LazySingletonWithReadResolveExample1 {\n\n    public LazySingletonWithReadResolveExample1() {}\n\n}",
    "output": "public class LazySingletonWithReadResolveExample1 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static LazySingletonWithReadResolveExample1 instance;\n\n    private LazySingletonWithReadResolveExample1() {}\n\n    public static LazySingletonWithReadResolveExample1 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithReadResolveExample1();\n        }\n        return instance;\n    }\n\n    protected Object readResolve() {\n        return getInstance();\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithReadResolve",
    "input": "public class LazySingletonWithReadResolveExample2 {\n\n    public LazySingletonWithReadResolveExample2() {}\n\n}",
    "output": "public class LazySingletonWithReadResolveExample2 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static LazySingletonWithReadResolveExample2 instance;\n\n    private LazySingletonWithReadResolveExample2() {}\n\n    public static LazySingletonWithReadResolveExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithReadResolveExample2();\n        }\n        return instance;\n    }\n\n    protected Object readResolve() {\n        return getInstance();\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithReadResolve",
    "input": "public class LazySingletonWithReadResolveExample3 {\n\n    public LazySingletonWithReadResolveExample3() {}\n\n}",
    "output": "public class LazySingletonWithReadResolveExample3 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static LazySingletonWithReadResolveExample3 instance;\n\n    private LazySingletonWithReadResolveExample3() {}\n\n    public static LazySingletonWithReadResolveExample3 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithReadResolveExample3();\n        }\n        return instance;\n    }\n\n    protected Object readResolve() {\n        return getInstance();\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithReadResolve",
    "input": "public class LazySingletonWithReadResolveExample4 {\n\n    public LazySingletonWithReadResolveExample4() {}\n\n}",
    "output": "public class LazySingletonWithReadResolveExample4 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static LazySingletonWithReadResolveExample4 instance;\n\n    private LazySingletonWithReadResolveExample4() {}\n\n    public static LazySingletonWithReadResolveExample4 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithReadResolveExample4();\n        }\n        return instance;\n    }\n\n    protected Object readResolve() {\n        return getInstance();\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithReadResolve",
    "input": "public class LazySingletonWithReadResolveExample5 {\n\n    public LazySingletonWithReadResolveExample5() {}\n\n}",
    "output": "public class LazySingletonWithReadResolveExample5 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static LazySingletonWithReadResolveExample5 instance;\n\n    private LazySingletonWithReadResolveExample5() {}\n\n    public static LazySingletonWithReadResolveExample5 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithReadResolveExample5();\n        }\n        return instance;\n    }\n\n    protected Object readResolve() {\n        return getInstance();\n    }\n\n}"
  },
  {
    "type": "SingletonWithEnumAndMethod",
    "input": "public class SingletonWithEnumAndMethodExample1 {\n\n    public SingletonWithEnumAndMethodExample1() {}\n\n}",
    "output": "public enum SingletonWithEnumAndMethodExample1 {\n\n    INSTANCE;\n\n    public void performAction() {\n        System.out.println(\"Action performed by SingletonWithEnumAndMethodExample1\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithEnumAndMethod",
    "input": "public class SingletonWithEnumAndMethodExample2 {\n\n    public SingletonWithEnumAndMethodExample2() {}\n\n}",
    "output": "public enum SingletonWithEnumAndMethodExample2 {\n\n    INSTANCE;\n\n    public void performAction() {\n        System.out.println(\"Action performed by SingletonWithEnumAndMethodExample2\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithEnumAndMethod",
    "input": "public class SingletonWithEnumAndMethodExample3 {\n\n    public SingletonWithEnumAndMethodExample3() {}\n\n}",
    "output": "public enum SingletonWithEnumAndMethodExample3 {\n\n    INSTANCE;\n\n    public void performAction() {\n        System.out.println(\"Action performed by SingletonWithEnumAndMethodExample3\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithEnumAndMethod",
    "input": "public class SingletonWithEnumAndMethodExample4 {\n\n    public SingletonWithEnumAndMethodExample4() {}\n\n}",
    "output": "public enum SingletonWithEnumAndMethodExample4 {\n\n    INSTANCE;\n\n    public void performAction() {\n        System.out.println(\"Action performed by SingletonWithEnumAndMethodExample4\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithEnumAndMethod",
    "input": "public class SingletonWithEnumAndMethodExample5 {\n\n    public SingletonWithEnumAndMethodExample5() {}\n\n}",
    "output": "public enum SingletonWithEnumAndMethodExample5 {\n\n    INSTANCE;\n\n    public void performAction() {\n        System.out.println(\"Action performed by SingletonWithEnumAndMethodExample5\");\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample1 {\n\n    public ThreadLocalSingletonExample1() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample1 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample1> instance = ThreadLocal.withInitial(ThreadLocalSingletonExample1::new);\n\n    private ThreadLocalSingletonExample1() {}\n\n    public static ThreadLocalSingletonExample1 getInstance() {\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample2 {\n\n    public ThreadLocalSingletonExample2() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample2 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample2> instance = ThreadLocal.withInitial(ThreadLocalSingletonExample2::new);\n\n    private ThreadLocalSingletonExample2() {}\n\n    public static ThreadLocalSingletonExample2 getInstance() {\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample3 {\n\n    public ThreadLocalSingletonExample3() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample3 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample3> instance = ThreadLocal.withInitial(ThreadLocalSingletonExample3::new);\n\n    private ThreadLocalSingletonExample3() {}\n\n    public static ThreadLocalSingletonExample3 getInstance() {\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample4 {\n\n    public ThreadLocalSingletonExample4() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample4 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample4> instance = ThreadLocal.withInitial(ThreadLocalSingletonExample4::new);\n\n    private ThreadLocalSingletonExample4() {}\n\n    public static ThreadLocalSingletonExample4 getInstance() {\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample5 {\n\n    public ThreadLocalSingletonExample5() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample5 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample5> instance = ThreadLocal.withInitial(ThreadLocalSingletonExample5::new);\n\n    private ThreadLocalSingletonExample5() {}\n\n    public static ThreadLocalSingletonExample5 getInstance() {\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "ParameterizedLazySingleton",
    "input": "public class ParameterizedLazySingletonExample1 {\n\n    public ParameterizedLazySingletonExample1() {}\n\n}",
    "output": "public class ParameterizedLazySingletonExample1 {\n\n    private static ParameterizedLazySingletonExample1 instance;\n    private String param;\n\n    private ParameterizedLazySingletonExample1(String param) {\n        this.param = param;\n    }\n\n    public static synchronized ParameterizedLazySingletonExample1 getInstance(String param) {\n        if (instance == null) {\n            instance = new ParameterizedLazySingletonExample1(param);\n        }\n        return instance;\n    }\n\n    public String getParam() {\n        return param;\n    }\n\n}"
  },
  {
    "type": "ParameterizedLazySingleton",
    "input": "public class ParameterizedLazySingletonExample2 {\n\n    public ParameterizedLazySingletonExample2() {}\n\n}",
    "output": "public class ParameterizedLazySingletonExample2 {\n\n    private static ParameterizedLazySingletonExample2 instance;\n    private String param;\n\n    private ParameterizedLazySingletonExample2(String param) {\n        this.param = param;\n    }\n\n    public static synchronized ParameterizedLazySingletonExample2 getInstance(String param) {\n        if (instance == null) {\n            instance = new ParameterizedLazySingletonExample2(param);\n        }\n        return instance;\n    }\n\n    public String getParam() {\n        return param;\n    }\n\n}"
  },
  {
    "type": "ParameterizedLazySingleton",
    "input": "public class ParameterizedLazySingletonExample3 {\n\n    public ParameterizedLazySingletonExample3() {}\n\n}",
    "output": "public class ParameterizedLazySingletonExample3 {\n\n    private static ParameterizedLazySingletonExample3 instance;\n    private String param;\n\n    private ParameterizedLazySingletonExample3(String param) {\n        this.param = param;\n    }\n\n    public static synchronized ParameterizedLazySingletonExample3 getInstance(String param) {\n        if (instance == null) {\n            instance = new ParameterizedLazySingletonExample3(param);\n        }\n        return instance;\n    }\n\n    public String getParam() {\n        return param;\n    }\n\n}"
  },
  {
    "type": "ParameterizedLazySingleton",
    "input": "public class ParameterizedLazySingletonExample4 {\n\n    public ParameterizedLazySingletonExample4() {}\n\n}",
    "output": "public class ParameterizedLazySingletonExample4 {\n\n    private static ParameterizedLazySingletonExample4 instance;\n    private String param;\n\n    private ParameterizedLazySingletonExample4(String param) {\n        this.param = param;\n    }\n\n    public static synchronized ParameterizedLazySingletonExample4 getInstance(String param) {\n        if (instance == null) {\n            instance = new ParameterizedLazySingletonExample4(param);\n        }\n        return instance;\n    }\n\n    public String getParam() {\n        return param;\n    }\n\n}"
  },
  {
    "type": "ParameterizedLazySingleton",
    "input": "public class ParameterizedLazySingletonExample5 {\n\n    public ParameterizedLazySingletonExample5() {}\n\n}",
    "output": "public class ParameterizedLazySingletonExample5 {\n\n    private static ParameterizedLazySingletonExample5 instance;\n    private String param;\n\n    private ParameterizedLazySingletonExample5(String param) {\n        this.param = param;\n    }\n\n    public static synchronized ParameterizedLazySingletonExample5 getInstance(String param) {\n        if (instance == null) {\n            instance = new ParameterizedLazySingletonExample5(param);\n        }\n        return instance;\n    }\n\n    public String getParam() {\n        return param;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithInitializationCount",
    "input": "public class LazySingletonWithInitializationCountExample1 {\n\n    public LazySingletonWithInitializationCountExample1() {}\n\n}",
    "output": "public class LazySingletonWithInitializationCountExample1 {\n\n    private static LazySingletonWithInitializationCountExample1 instance;\n    private static int initializationCount = 0;\n\n    private LazySingletonWithInitializationCountExample1() {\n        initializationCount++;\n    }\n\n    public static LazySingletonWithInitializationCountExample1 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithInitializationCountExample1();\n        }\n        return instance;\n    }\n\n    public static int getInitializationCount() {\n        return initializationCount;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithInitializationCount",
    "input": "public class LazySingletonWithInitializationCountExample2 {\n\n    public LazySingletonWithInitializationCountExample2() {}\n\n}",
    "output": "public class LazySingletonWithInitializationCountExample2 {\n\n    private static LazySingletonWithInitializationCountExample2 instance;\n    private static int initializationCount = 0;\n\n    private LazySingletonWithInitializationCountExample2() {\n        initializationCount++;\n    }\n\n    public static LazySingletonWithInitializationCountExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithInitializationCountExample2();\n        }\n        return instance;\n    }\n\n    public static int getInitializationCount() {\n        return initializationCount;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithInitializationCount",
    "input": "public class LazySingletonWithInitializationCountExample3 {\n\n    public LazySingletonWithInitializationCountExample3() {}\n\n}",
    "output": "public class LazySingletonWithInitializationCountExample3 {\n\n    private static LazySingletonWithInitializationCountExample3 instance;\n    private static int initializationCount = 0;\n\n    private LazySingletonWithInitializationCountExample3() {\n        initializationCount++;\n    }\n\n    public static LazySingletonWithInitializationCountExample3 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithInitializationCountExample3();\n        }\n        return instance;\n    }\n\n    public static int getInitializationCount() {\n        return initializationCount;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithInitializationCount",
    "input": "public class LazySingletonWithInitializationCountExample4 {\n\n    public LazySingletonWithInitializationCountExample4() {}\n\n}",
    "output": "public class LazySingletonWithInitializationCountExample4 {\n\n    private static LazySingletonWithInitializationCountExample4 instance;\n    private static int initializationCount = 0;\n\n    private LazySingletonWithInitializationCountExample4() {\n        initializationCount++;\n    }\n\n    public static LazySingletonWithInitializationCountExample4 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithInitializationCountExample4();\n        }\n        return instance;\n    }\n\n    public static int getInitializationCount() {\n        return initializationCount;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithInitializationCount",
    "input": "public class LazySingletonWithInitializationCountExample5 {\n\n    public LazySingletonWithInitializationCountExample5() {}\n\n}",
    "output": "public class LazySingletonWithInitializationCountExample5 {\n\n    private static LazySingletonWithInitializationCountExample5 instance;\n    private static int initializationCount = 0;\n\n    private LazySingletonWithInitializationCountExample5() {\n        initializationCount++;\n    }\n\n    public static LazySingletonWithInitializationCountExample5 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithInitializationCountExample5();\n        }\n        return instance;\n    }\n\n    public static int getInitializationCount() {\n        return initializationCount;\n    }\n\n}"
  },
  {
    "type": "MultithreadedLazySingleton",
    "input": "public class MultithreadedLazySingletonExample1 {\n\n    public MultithreadedLazySingletonExample1() {}\n\n}",
    "output": "public class MultithreadedLazySingletonExample1 {\n\n    private static MultithreadedLazySingletonExample1 instance;\n\n    private MultithreadedLazySingletonExample1() {}\n\n    public static MultithreadedLazySingletonExample1 getInstance() {\n        synchronized (MultithreadedLazySingletonExample1.class) {\n            if (instance == null) {\n                instance = new MultithreadedLazySingletonExample1();\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "MultithreadedLazySingleton",
    "input": "public class MultithreadedLazySingletonExample2 {\n\n    public MultithreadedLazySingletonExample2() {}\n\n}",
    "output": "public class MultithreadedLazySingletonExample2 {\n\n    private static MultithreadedLazySingletonExample2 instance;\n\n    private MultithreadedLazySingletonExample2() {}\n\n    public static MultithreadedLazySingletonExample2 getInstance() {\n        synchronized (MultithreadedLazySingletonExample2.class) {\n            if (instance == null) {\n                instance = new MultithreadedLazySingletonExample2();\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "MultithreadedLazySingleton",
    "input": "public class MultithreadedLazySingletonExample3 {\n\n    public MultithreadedLazySingletonExample3() {}\n\n}",
    "output": "public class MultithreadedLazySingletonExample3 {\n\n    private static MultithreadedLazySingletonExample3 instance;\n\n    private MultithreadedLazySingletonExample3() {}\n\n    public static MultithreadedLazySingletonExample3 getInstance() {\n        synchronized (MultithreadedLazySingletonExample3.class) {\n            if (instance == null) {\n                instance = new MultithreadedLazySingletonExample3();\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "MultithreadedLazySingleton",
    "input": "public class MultithreadedLazySingletonExample4 {\n\n    public MultithreadedLazySingletonExample4() {}\n\n}",
    "output": "public class MultithreadedLazySingletonExample4 {\n\n    private static MultithreadedLazySingletonExample4 instance;\n\n    private MultithreadedLazySingletonExample4() {}\n\n    public static MultithreadedLazySingletonExample4 getInstance() {\n        synchronized (MultithreadedLazySingletonExample4.class) {\n            if (instance == null) {\n                instance = new MultithreadedLazySingletonExample4();\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "MultithreadedLazySingleton",
    "input": "public class MultithreadedLazySingletonExample5 {\n\n    public MultithreadedLazySingletonExample5() {}\n\n}",
    "output": "public class MultithreadedLazySingletonExample5 {\n\n    private static MultithreadedLazySingletonExample5 instance;\n\n    private MultithreadedLazySingletonExample5() {}\n\n    public static MultithreadedLazySingletonExample5 getInstance() {\n        synchronized (MultithreadedLazySingletonExample5.class) {\n            if (instance == null) {\n                instance = new MultithreadedLazySingletonExample5();\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithOptionalInstance",
    "input": "public class LazySingletonWithOptionalInstanceExample1 {\n\n    public LazySingletonWithOptionalInstanceExample1() {}\n\n}",
    "output": "import java.util.Optional;\n\npublic class LazySingletonWithOptionalInstanceExample1 {\n\n    private static LazySingletonWithOptionalInstanceExample1 instance;\n\n    private LazySingletonWithOptionalInstanceExample1() {}\n\n    public static Optional<LazySingletonWithOptionalInstanceExample1> getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithOptionalInstanceExample1();\n        }\n        return Optional.of(instance);\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithOptionalInstance",
    "input": "public class LazySingletonWithOptionalInstanceExample2 {\n\n    public LazySingletonWithOptionalInstanceExample2() {}\n\n}",
    "output": "import java.util.Optional;\n\npublic class LazySingletonWithOptionalInstanceExample2 {\n\n    private static LazySingletonWithOptionalInstanceExample2 instance;\n\n    private LazySingletonWithOptionalInstanceExample2() {}\n\n    public static Optional<LazySingletonWithOptionalInstanceExample2> getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithOptionalInstanceExample2();\n        }\n        return Optional.of(instance);\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithOptionalInstance",
    "input": "public class LazySingletonWithOptionalInstanceExample3 {\n\n    public LazySingletonWithOptionalInstanceExample3() {}\n\n}",
    "output": "import java.util.Optional;\n\npublic class LazySingletonWithOptionalInstanceExample3 {\n\n    private static LazySingletonWithOptionalInstanceExample3 instance;\n\n    private LazySingletonWithOptionalInstanceExample3() {}\n\n    public static Optional<LazySingletonWithOptionalInstanceExample3> getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithOptionalInstanceExample3();\n        }\n        return Optional.of(instance);\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithOptionalInstance",
    "input": "public class LazySingletonWithOptionalInstanceExample4 {\n\n    public LazySingletonWithOptionalInstanceExample4() {}\n\n}",
    "output": "import java.util.Optional;\n\npublic class LazySingletonWithOptionalInstanceExample4 {\n\n    private static LazySingletonWithOptionalInstanceExample4 instance;\n\n    private LazySingletonWithOptionalInstanceExample4() {}\n\n    public static Optional<LazySingletonWithOptionalInstanceExample4> getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithOptionalInstanceExample4();\n        }\n        return Optional.of(instance);\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithOptionalInstance",
    "input": "public class LazySingletonWithOptionalInstanceExample5 {\n\n    public LazySingletonWithOptionalInstanceExample5() {}\n\n}",
    "output": "import java.util.Optional;\n\npublic class LazySingletonWithOptionalInstanceExample5 {\n\n    private static LazySingletonWithOptionalInstanceExample5 instance;\n\n    private LazySingletonWithOptionalInstanceExample5() {}\n\n    public static Optional<LazySingletonWithOptionalInstanceExample5> getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithOptionalInstanceExample5();\n        }\n        return Optional.of(instance);\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithDynamicConfig",
    "input": "public class LazySingletonWithDynamicConfigExample1 {\n\n    public LazySingletonWithDynamicConfigExample1() {}\n\n}",
    "output": "public class LazySingletonWithDynamicConfigExample1 {\n\n    private static LazySingletonWithDynamicConfigExample1 instance;\n    private String config;\n\n    private LazySingletonWithDynamicConfigExample1(String config) {\n        this.config = config;\n    }\n\n    public static LazySingletonWithDynamicConfigExample1 getInstance(String config) {\n        if (instance == null) {\n            instance = new LazySingletonWithDynamicConfigExample1(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithDynamicConfig",
    "input": "public class LazySingletonWithDynamicConfigExample2 {\n\n    public LazySingletonWithDynamicConfigExample2() {}\n\n}",
    "output": "public class LazySingletonWithDynamicConfigExample2 {\n\n    private static LazySingletonWithDynamicConfigExample2 instance;\n    private String config;\n\n    private LazySingletonWithDynamicConfigExample2(String config) {\n        this.config = config;\n    }\n\n    public static LazySingletonWithDynamicConfigExample2 getInstance(String config) {\n        if (instance == null) {\n            instance = new LazySingletonWithDynamicConfigExample2(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithDynamicConfig",
    "input": "public class LazySingletonWithDynamicConfigExample3 {\n\n    public LazySingletonWithDynamicConfigExample3() {}\n\n}",
    "output": "public class LazySingletonWithDynamicConfigExample3 {\n\n    private static LazySingletonWithDynamicConfigExample3 instance;\n    private String config;\n\n    private LazySingletonWithDynamicConfigExample3(String config) {\n        this.config = config;\n    }\n\n    public static LazySingletonWithDynamicConfigExample3 getInstance(String config) {\n        if (instance == null) {\n            instance = new LazySingletonWithDynamicConfigExample3(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithDynamicConfig",
    "input": "public class LazySingletonWithDynamicConfigExample4 {\n\n    public LazySingletonWithDynamicConfigExample4() {}\n\n}",
    "output": "public class LazySingletonWithDynamicConfigExample4 {\n\n    private static LazySingletonWithDynamicConfigExample4 instance;\n    private String config;\n\n    private LazySingletonWithDynamicConfigExample4(String config) {\n        this.config = config;\n    }\n\n    public static LazySingletonWithDynamicConfigExample4 getInstance(String config) {\n        if (instance == null) {\n            instance = new LazySingletonWithDynamicConfigExample4(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithDynamicConfig",
    "input": "public class LazySingletonWithDynamicConfigExample5 {\n\n    public LazySingletonWithDynamicConfigExample5() {}\n\n}",
    "output": "public class LazySingletonWithDynamicConfigExample5 {\n\n    private static LazySingletonWithDynamicConfigExample5 instance;\n    private String config;\n\n    private LazySingletonWithDynamicConfigExample5(String config) {\n        this.config = config;\n    }\n\n    public static LazySingletonWithDynamicConfigExample5 getInstance(String config) {\n        if (instance == null) {\n            instance = new LazySingletonWithDynamicConfigExample5(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "EagerSingletonWithStartupLogging",
    "input": "public class EagerSingletonWithStartupLoggingExample1 {\n\n    public EagerSingletonWithStartupLoggingExample1() {}\n\n}",
    "output": "public class EagerSingletonWithStartupLoggingExample1 {\n\n    private static final EagerSingletonWithStartupLoggingExample1 instance = new EagerSingletonWithStartupLoggingExample1();\n\n    private EagerSingletonWithStartupLoggingExample1() {\n        System.out.println(\"Singleton initialized during class loading\");\n    }\n\n    public static EagerSingletonWithStartupLoggingExample1 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EagerSingletonWithStartupLogging",
    "input": "public class EagerSingletonWithStartupLoggingExample2 {\n\n    public EagerSingletonWithStartupLoggingExample2() {}\n\n}",
    "output": "public class EagerSingletonWithStartupLoggingExample2 {\n\n    private static final EagerSingletonWithStartupLoggingExample2 instance = new EagerSingletonWithStartupLoggingExample2();\n\n    private EagerSingletonWithStartupLoggingExample2() {\n        System.out.println(\"Singleton initialized during class loading\");\n    }\n\n    public static EagerSingletonWithStartupLoggingExample2 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EagerSingletonWithStartupLogging",
    "input": "public class EagerSingletonWithStartupLoggingExample3 {\n\n    public EagerSingletonWithStartupLoggingExample3() {}\n\n}",
    "output": "public class EagerSingletonWithStartupLoggingExample3 {\n\n    private static final EagerSingletonWithStartupLoggingExample3 instance = new EagerSingletonWithStartupLoggingExample3();\n\n    private EagerSingletonWithStartupLoggingExample3() {\n        System.out.println(\"Singleton initialized during class loading\");\n    }\n\n    public static EagerSingletonWithStartupLoggingExample3 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EagerSingletonWithStartupLogging",
    "input": "public class EagerSingletonWithStartupLoggingExample4 {\n\n    public EagerSingletonWithStartupLoggingExample4() {}\n\n}",
    "output": "public class EagerSingletonWithStartupLoggingExample4 {\n\n    private static final EagerSingletonWithStartupLoggingExample4 instance = new EagerSingletonWithStartupLoggingExample4();\n\n    private EagerSingletonWithStartupLoggingExample4() {\n        System.out.println(\"Singleton initialized during class loading\");\n    }\n\n    public static EagerSingletonWithStartupLoggingExample4 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EagerSingletonWithStartupLogging",
    "input": "public class EagerSingletonWithStartupLoggingExample5 {\n\n    public EagerSingletonWithStartupLoggingExample5() {}\n\n}",
    "output": "public class EagerSingletonWithStartupLoggingExample5 {\n\n    private static final EagerSingletonWithStartupLoggingExample5 instance = new EagerSingletonWithStartupLoggingExample5();\n\n    private EagerSingletonWithStartupLoggingExample5() {\n        System.out.println(\"Singleton initialized during class loading\");\n    }\n\n    public static EagerSingletonWithStartupLoggingExample5 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "DoubleCheckedLockingWithLazyInitialization",
    "input": "public class DoubleCheckedLockingWithLazyInitializationExample1 {\n\n    public DoubleCheckedLockingWithLazyInitializationExample1() {}\n\n}",
    "output": "public class DoubleCheckedLockingWithLazyInitializationExample1 {\n\n    private static volatile DoubleCheckedLockingWithLazyInitializationExample1 instance;\n\n    private DoubleCheckedLockingWithLazyInitializationExample1() {}\n\n    public static DoubleCheckedLockingWithLazyInitializationExample1 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingWithLazyInitializationExample1.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingWithLazyInitializationExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "DoubleCheckedLockingWithLazyInitialization",
    "input": "public class DoubleCheckedLockingWithLazyInitializationExample2 {\n\n    public DoubleCheckedLockingWithLazyInitializationExample2() {}\n\n}",
    "output": "public class DoubleCheckedLockingWithLazyInitializationExample2 {\n\n    private static volatile DoubleCheckedLockingWithLazyInitializationExample2 instance;\n\n    private DoubleCheckedLockingWithLazyInitializationExample2() {}\n\n    public static DoubleCheckedLockingWithLazyInitializationExample2 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingWithLazyInitializationExample2.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingWithLazyInitializationExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "DoubleCheckedLockingWithLazyInitialization",
    "input": "public class DoubleCheckedLockingWithLazyInitializationExample3 {\n\n    public DoubleCheckedLockingWithLazyInitializationExample3() {}\n\n}",
    "output": "public class DoubleCheckedLockingWithLazyInitializationExample3 {\n\n    private static volatile DoubleCheckedLockingWithLazyInitializationExample3 instance;\n\n    private DoubleCheckedLockingWithLazyInitializationExample3() {}\n\n    public static DoubleCheckedLockingWithLazyInitializationExample3 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingWithLazyInitializationExample3.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingWithLazyInitializationExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "DoubleCheckedLockingWithLazyInitialization",
    "input": "public class DoubleCheckedLockingWithLazyInitializationExample4 {\n\n    public DoubleCheckedLockingWithLazyInitializationExample4() {}\n\n}",
    "output": "public class DoubleCheckedLockingWithLazyInitializationExample4 {\n\n    private static volatile DoubleCheckedLockingWithLazyInitializationExample4 instance;\n\n    private DoubleCheckedLockingWithLazyInitializationExample4() {}\n\n    public static DoubleCheckedLockingWithLazyInitializationExample4 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingWithLazyInitializationExample4.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingWithLazyInitializationExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "DoubleCheckedLockingWithLazyInitialization",
    "input": "public class DoubleCheckedLockingWithLazyInitializationExample5 {\n\n    public DoubleCheckedLockingWithLazyInitializationExample5() {}\n\n}",
    "output": "public class DoubleCheckedLockingWithLazyInitializationExample5 {\n\n    private static volatile DoubleCheckedLockingWithLazyInitializationExample5 instance;\n\n    private DoubleCheckedLockingWithLazyInitializationExample5() {}\n\n    public static DoubleCheckedLockingWithLazyInitializationExample5 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingWithLazyInitializationExample5.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingWithLazyInitializationExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithWeakReference",
    "input": "public class SingletonWithWeakReferenceExample1 {\n\n    public SingletonWithWeakReferenceExample1() {}\n\n}",
    "output": "import java.lang.ref.WeakReference;\n\npublic class SingletonWithWeakReferenceExample1 {\n\n    private static WeakReference<SingletonWithWeakReferenceExample1> instance;\n\n    private SingletonWithWeakReferenceExample1() {}\n\n    public static SingletonWithWeakReferenceExample1 getInstance() {\n        if (instance == null || instance.get() == null) {\n            instance = new WeakReference<>(new SingletonWithWeakReferenceExample1());\n        }\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "SingletonWithWeakReference",
    "input": "public class SingletonWithWeakReferenceExample2 {\n\n    public SingletonWithWeakReferenceExample2() {}\n\n}",
    "output": "import java.lang.ref.WeakReference;\n\npublic class SingletonWithWeakReferenceExample2 {\n\n    private static WeakReference<SingletonWithWeakReferenceExample2> instance;\n\n    private SingletonWithWeakReferenceExample2() {}\n\n    public static SingletonWithWeakReferenceExample2 getInstance() {\n        if (instance == null || instance.get() == null) {\n            instance = new WeakReference<>(new SingletonWithWeakReferenceExample2());\n        }\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "SingletonWithWeakReference",
    "input": "public class SingletonWithWeakReferenceExample3 {\n\n    public SingletonWithWeakReferenceExample3() {}\n\n}",
    "output": "import java.lang.ref.WeakReference;\n\npublic class SingletonWithWeakReferenceExample3 {\n\n    private static WeakReference<SingletonWithWeakReferenceExample3> instance;\n\n    private SingletonWithWeakReferenceExample3() {}\n\n    public static SingletonWithWeakReferenceExample3 getInstance() {\n        if (instance == null || instance.get() == null) {\n            instance = new WeakReference<>(new SingletonWithWeakReferenceExample3());\n        }\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "SingletonWithWeakReference",
    "input": "public class SingletonWithWeakReferenceExample4 {\n\n    public SingletonWithWeakReferenceExample4() {}\n\n}",
    "output": "import java.lang.ref.WeakReference;\n\npublic class SingletonWithWeakReferenceExample4 {\n\n    private static WeakReference<SingletonWithWeakReferenceExample4> instance;\n\n    private SingletonWithWeakReferenceExample4() {}\n\n    public static SingletonWithWeakReferenceExample4 getInstance() {\n        if (instance == null || instance.get() == null) {\n            instance = new WeakReference<>(new SingletonWithWeakReferenceExample4());\n        }\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "SingletonWithWeakReference",
    "input": "public class SingletonWithWeakReferenceExample5 {\n\n    public SingletonWithWeakReferenceExample5() {}\n\n}",
    "output": "import java.lang.ref.WeakReference;\n\npublic class SingletonWithWeakReferenceExample5 {\n\n    private static WeakReference<SingletonWithWeakReferenceExample5> instance;\n\n    private SingletonWithWeakReferenceExample5() {}\n\n    public static SingletonWithWeakReferenceExample5 getInstance() {\n        if (instance == null || instance.get() == null) {\n            instance = new WeakReference<>(new SingletonWithWeakReferenceExample5());\n        }\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "StaticBlockWithInstanceValidation",
    "input": "public class StaticBlockWithInstanceValidationExample1 {\n\n    public StaticBlockWithInstanceValidationExample1() {}\n\n}",
    "output": "public class StaticBlockWithInstanceValidationExample1 {\n\n    private static StaticBlockWithInstanceValidationExample1 instance;\n\n    private StaticBlockWithInstanceValidationExample1() {}\n\n    static {\n        try {\n            instance = new StaticBlockWithInstanceValidationExample1();\n        } catch (Exception e) {\n            System.err.println(\"Error during instance initialization: \" + e.getMessage());\n        }\n    }\n\n    public static StaticBlockWithInstanceValidationExample1 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "StaticBlockWithInstanceValidation",
    "input": "public class StaticBlockWithInstanceValidationExample2 {\n\n    public StaticBlockWithInstanceValidationExample2() {}\n\n}",
    "output": "public class StaticBlockWithInstanceValidationExample2 {\n\n    private static StaticBlockWithInstanceValidationExample2 instance;\n\n    private StaticBlockWithInstanceValidationExample2() {}\n\n    static {\n        try {\n            instance = new StaticBlockWithInstanceValidationExample2();\n        } catch (Exception e) {\n            System.err.println(\"Error during instance initialization: \" + e.getMessage());\n        }\n    }\n\n    public static StaticBlockWithInstanceValidationExample2 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "StaticBlockWithInstanceValidation",
    "input": "public class StaticBlockWithInstanceValidationExample3 {\n\n    public StaticBlockWithInstanceValidationExample3() {}\n\n}",
    "output": "public class StaticBlockWithInstanceValidationExample3 {\n\n    private static StaticBlockWithInstanceValidationExample3 instance;\n\n    private StaticBlockWithInstanceValidationExample3() {}\n\n    static {\n        try {\n            instance = new StaticBlockWithInstanceValidationExample3();\n        } catch (Exception e) {\n            System.err.println(\"Error during instance initialization: \" + e.getMessage());\n        }\n    }\n\n    public static StaticBlockWithInstanceValidationExample3 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "StaticBlockWithInstanceValidation",
    "input": "public class StaticBlockWithInstanceValidationExample4 {\n\n    public StaticBlockWithInstanceValidationExample4() {}\n\n}",
    "output": "public class StaticBlockWithInstanceValidationExample4 {\n\n    private static StaticBlockWithInstanceValidationExample4 instance;\n\n    private StaticBlockWithInstanceValidationExample4() {}\n\n    static {\n        try {\n            instance = new StaticBlockWithInstanceValidationExample4();\n        } catch (Exception e) {\n            System.err.println(\"Error during instance initialization: \" + e.getMessage());\n        }\n    }\n\n    public static StaticBlockWithInstanceValidationExample4 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "StaticBlockWithInstanceValidation",
    "input": "public class StaticBlockWithInstanceValidationExample5 {\n\n    public StaticBlockWithInstanceValidationExample5() {}\n\n}",
    "output": "public class StaticBlockWithInstanceValidationExample5 {\n\n    private static StaticBlockWithInstanceValidationExample5 instance;\n\n    private StaticBlockWithInstanceValidationExample5() {}\n\n    static {\n        try {\n            instance = new StaticBlockWithInstanceValidationExample5();\n        } catch (Exception e) {\n            System.err.println(\"Error during instance initialization: \" + e.getMessage());\n        }\n    }\n\n    public static StaticBlockWithInstanceValidationExample5 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithPropertiesFile",
    "input": "public class LazySingletonWithPropertiesFileExample1 {\n\n    public LazySingletonWithPropertiesFileExample1() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class LazySingletonWithPropertiesFileExample1 {\n\n    private static LazySingletonWithPropertiesFileExample1 instance;\n    private Properties properties;\n\n    private LazySingletonWithPropertiesFileExample1() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LazySingletonWithPropertiesFileExample1 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithPropertiesFileExample1();\n        }\n        return instance;\n    }\n\n    public Properties getProperties() {\n        return properties;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithPropertiesFile",
    "input": "public class LazySingletonWithPropertiesFileExample2 {\n\n    public LazySingletonWithPropertiesFileExample2() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class LazySingletonWithPropertiesFileExample2 {\n\n    private static LazySingletonWithPropertiesFileExample2 instance;\n    private Properties properties;\n\n    private LazySingletonWithPropertiesFileExample2() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LazySingletonWithPropertiesFileExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithPropertiesFileExample2();\n        }\n        return instance;\n    }\n\n    public Properties getProperties() {\n        return properties;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithPropertiesFile",
    "input": "public class LazySingletonWithPropertiesFileExample3 {\n\n    public LazySingletonWithPropertiesFileExample3() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class LazySingletonWithPropertiesFileExample3 {\n\n    private static LazySingletonWithPropertiesFileExample3 instance;\n    private Properties properties;\n\n    private LazySingletonWithPropertiesFileExample3() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LazySingletonWithPropertiesFileExample3 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithPropertiesFileExample3();\n        }\n        return instance;\n    }\n\n    public Properties getProperties() {\n        return properties;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithPropertiesFile",
    "input": "public class LazySingletonWithPropertiesFileExample4 {\n\n    public LazySingletonWithPropertiesFileExample4() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class LazySingletonWithPropertiesFileExample4 {\n\n    private static LazySingletonWithPropertiesFileExample4 instance;\n    private Properties properties;\n\n    private LazySingletonWithPropertiesFileExample4() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LazySingletonWithPropertiesFileExample4 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithPropertiesFileExample4();\n        }\n        return instance;\n    }\n\n    public Properties getProperties() {\n        return properties;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithPropertiesFile",
    "input": "public class LazySingletonWithPropertiesFileExample5 {\n\n    public LazySingletonWithPropertiesFileExample5() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class LazySingletonWithPropertiesFileExample5 {\n\n    private static LazySingletonWithPropertiesFileExample5 instance;\n    private Properties properties;\n\n    private LazySingletonWithPropertiesFileExample5() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LazySingletonWithPropertiesFileExample5 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithPropertiesFileExample5();\n        }\n        return instance;\n    }\n\n    public Properties getProperties() {\n        return properties;\n    }\n\n}"
  },
  {
    "type": "SingletonWithCache",
    "input": "public class SingletonWithCacheExample1 {\n\n    public SingletonWithCacheExample1() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithCacheExample1 {\n\n    private static SingletonWithCacheExample1 instance;\n    private Map<String, String> cache;\n\n    private SingletonWithCacheExample1() {\n        cache = new HashMap<>();\n    }\n\n    public static SingletonWithCacheExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCacheExample1();\n        }\n        return instance;\n    }\n\n    public void putInCache(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String getFromCache(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "SingletonWithCache",
    "input": "public class SingletonWithCacheExample2 {\n\n    public SingletonWithCacheExample2() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithCacheExample2 {\n\n    private static SingletonWithCacheExample2 instance;\n    private Map<String, String> cache;\n\n    private SingletonWithCacheExample2() {\n        cache = new HashMap<>();\n    }\n\n    public static SingletonWithCacheExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCacheExample2();\n        }\n        return instance;\n    }\n\n    public void putInCache(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String getFromCache(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "SingletonWithCache",
    "input": "public class SingletonWithCacheExample3 {\n\n    public SingletonWithCacheExample3() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithCacheExample3 {\n\n    private static SingletonWithCacheExample3 instance;\n    private Map<String, String> cache;\n\n    private SingletonWithCacheExample3() {\n        cache = new HashMap<>();\n    }\n\n    public static SingletonWithCacheExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCacheExample3();\n        }\n        return instance;\n    }\n\n    public void putInCache(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String getFromCache(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "SingletonWithCache",
    "input": "public class SingletonWithCacheExample4 {\n\n    public SingletonWithCacheExample4() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithCacheExample4 {\n\n    private static SingletonWithCacheExample4 instance;\n    private Map<String, String> cache;\n\n    private SingletonWithCacheExample4() {\n        cache = new HashMap<>();\n    }\n\n    public static SingletonWithCacheExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCacheExample4();\n        }\n        return instance;\n    }\n\n    public void putInCache(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String getFromCache(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "SingletonWithCache",
    "input": "public class SingletonWithCacheExample5 {\n\n    public SingletonWithCacheExample5() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithCacheExample5 {\n\n    private static SingletonWithCacheExample5 instance;\n    private Map<String, String> cache;\n\n    private SingletonWithCacheExample5() {\n        cache = new HashMap<>();\n    }\n\n    public static SingletonWithCacheExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCacheExample5();\n        }\n        return instance;\n    }\n\n    public void putInCache(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String getFromCache(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "SingletonWithImmutableData",
    "input": "public class SingletonWithImmutableDataExample1 {\n\n    public SingletonWithImmutableDataExample1() {}\n\n}",
    "output": "public class SingletonWithImmutableDataExample1 {\n\n    private static SingletonWithImmutableDataExample1 instance;\n    private final String data;\n\n    private SingletonWithImmutableDataExample1(String data) {\n        this.data = data;\n    }\n\n    public static SingletonWithImmutableDataExample1 getInstance(String data) {\n        if (instance == null) {\n            instance = new SingletonWithImmutableDataExample1(data);\n        }\n        return instance;\n    }\n\n    public String getData() {\n        return data;\n    }\n\n}"
  },
  {
    "type": "SingletonWithImmutableData",
    "input": "public class SingletonWithImmutableDataExample2 {\n\n    public SingletonWithImmutableDataExample2() {}\n\n}",
    "output": "public class SingletonWithImmutableDataExample2 {\n\n    private static SingletonWithImmutableDataExample2 instance;\n    private final String data;\n\n    private SingletonWithImmutableDataExample2(String data) {\n        this.data = data;\n    }\n\n    public static SingletonWithImmutableDataExample2 getInstance(String data) {\n        if (instance == null) {\n            instance = new SingletonWithImmutableDataExample2(data);\n        }\n        return instance;\n    }\n\n    public String getData() {\n        return data;\n    }\n\n}"
  },
  {
    "type": "SingletonWithImmutableData",
    "input": "public class SingletonWithImmutableDataExample3 {\n\n    public SingletonWithImmutableDataExample3() {}\n\n}",
    "output": "public class SingletonWithImmutableDataExample3 {\n\n    private static SingletonWithImmutableDataExample3 instance;\n    private final String data;\n\n    private SingletonWithImmutableDataExample3(String data) {\n        this.data = data;\n    }\n\n    public static SingletonWithImmutableDataExample3 getInstance(String data) {\n        if (instance == null) {\n            instance = new SingletonWithImmutableDataExample3(data);\n        }\n        return instance;\n    }\n\n    public String getData() {\n        return data;\n    }\n\n}"
  },
  {
    "type": "SingletonWithImmutableData",
    "input": "public class SingletonWithImmutableDataExample4 {\n\n    public SingletonWithImmutableDataExample4() {}\n\n}",
    "output": "public class SingletonWithImmutableDataExample4 {\n\n    private static SingletonWithImmutableDataExample4 instance;\n    private final String data;\n\n    private SingletonWithImmutableDataExample4(String data) {\n        this.data = data;\n    }\n\n    public static SingletonWithImmutableDataExample4 getInstance(String data) {\n        if (instance == null) {\n            instance = new SingletonWithImmutableDataExample4(data);\n        }\n        return instance;\n    }\n\n    public String getData() {\n        return data;\n    }\n\n}"
  },
  {
    "type": "SingletonWithImmutableData",
    "input": "public class SingletonWithImmutableDataExample5 {\n\n    public SingletonWithImmutableDataExample5() {}\n\n}",
    "output": "public class SingletonWithImmutableDataExample5 {\n\n    private static SingletonWithImmutableDataExample5 instance;\n    private final String data;\n\n    private SingletonWithImmutableDataExample5(String data) {\n        this.data = data;\n    }\n\n    public static SingletonWithImmutableDataExample5 getInstance(String data) {\n        if (instance == null) {\n            instance = new SingletonWithImmutableDataExample5(data);\n        }\n        return instance;\n    }\n\n    public String getData() {\n        return data;\n    }\n\n}"
  },
  {
    "type": "SingletonWithBackgroundTask",
    "input": "public class SingletonWithBackgroundTaskExample1 {\n\n    public SingletonWithBackgroundTaskExample1() {}\n\n}",
    "output": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingletonWithBackgroundTaskExample1 {\n\n    private static SingletonWithBackgroundTaskExample1 instance;\n    private ExecutorService executorService;\n\n    private SingletonWithBackgroundTaskExample1() {\n        executorService = Executors.newSingleThreadExecutor();\n    }\n\n    public static SingletonWithBackgroundTaskExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithBackgroundTaskExample1();\n        }\n        return instance;\n    }\n\n    public void runTask(Runnable task) {\n        executorService.submit(task);\n    }\n\n}"
  },
  {
    "type": "SingletonWithBackgroundTask",
    "input": "public class SingletonWithBackgroundTaskExample2 {\n\n    public SingletonWithBackgroundTaskExample2() {}\n\n}",
    "output": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingletonWithBackgroundTaskExample2 {\n\n    private static SingletonWithBackgroundTaskExample2 instance;\n    private ExecutorService executorService;\n\n    private SingletonWithBackgroundTaskExample2() {\n        executorService = Executors.newSingleThreadExecutor();\n    }\n\n    public static SingletonWithBackgroundTaskExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithBackgroundTaskExample2();\n        }\n        return instance;\n    }\n\n    public void runTask(Runnable task) {\n        executorService.submit(task);\n    }\n\n}"
  },
  {
    "type": "SingletonWithBackgroundTask",
    "input": "public class SingletonWithBackgroundTaskExample3 {\n\n    public SingletonWithBackgroundTaskExample3() {}\n\n}",
    "output": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingletonWithBackgroundTaskExample3 {\n\n    private static SingletonWithBackgroundTaskExample3 instance;\n    private ExecutorService executorService;\n\n    private SingletonWithBackgroundTaskExample3() {\n        executorService = Executors.newSingleThreadExecutor();\n    }\n\n    public static SingletonWithBackgroundTaskExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithBackgroundTaskExample3();\n        }\n        return instance;\n    }\n\n    public void runTask(Runnable task) {\n        executorService.submit(task);\n    }\n\n}"
  },
  {
    "type": "SingletonWithBackgroundTask",
    "input": "public class SingletonWithBackgroundTaskExample4 {\n\n    public SingletonWithBackgroundTaskExample4() {}\n\n}",
    "output": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingletonWithBackgroundTaskExample4 {\n\n    private static SingletonWithBackgroundTaskExample4 instance;\n    private ExecutorService executorService;\n\n    private SingletonWithBackgroundTaskExample4() {\n        executorService = Executors.newSingleThreadExecutor();\n    }\n\n    public static SingletonWithBackgroundTaskExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithBackgroundTaskExample4();\n        }\n        return instance;\n    }\n\n    public void runTask(Runnable task) {\n        executorService.submit(task);\n    }\n\n}"
  },
  {
    "type": "SingletonWithBackgroundTask",
    "input": "public class SingletonWithBackgroundTaskExample5 {\n\n    public SingletonWithBackgroundTaskExample5() {}\n\n}",
    "output": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingletonWithBackgroundTaskExample5 {\n\n    private static SingletonWithBackgroundTaskExample5 instance;\n    private ExecutorService executorService;\n\n    private SingletonWithBackgroundTaskExample5() {\n        executorService = Executors.newSingleThreadExecutor();\n    }\n\n    public static SingletonWithBackgroundTaskExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithBackgroundTaskExample5();\n        }\n        return instance;\n    }\n\n    public void runTask(Runnable task) {\n        executorService.submit(task);\n    }\n\n}"
  },
  {
    "type": "ClusteredSingleton",
    "input": "public class ClusteredSingletonExample1 {\n\n    public ClusteredSingletonExample1() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class ClusteredSingletonExample1 {\n\n    private static final ConcurrentMap<String, ClusteredSingletonExample1> instances = new ConcurrentHashMap<>();\n\n    private ClusteredSingletonExample1() {}\n\n    public static ClusteredSingletonExample1 getInstance(String clusterKey) {\n        return instances.computeIfAbsent(clusterKey, key -> new ClusteredSingletonExample1());\n    }\n\n}"
  },
  {
    "type": "ClusteredSingleton",
    "input": "public class ClusteredSingletonExample2 {\n\n    public ClusteredSingletonExample2() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class ClusteredSingletonExample2 {\n\n    private static final ConcurrentMap<String, ClusteredSingletonExample2> instances = new ConcurrentHashMap<>();\n\n    private ClusteredSingletonExample2() {}\n\n    public static ClusteredSingletonExample2 getInstance(String clusterKey) {\n        return instances.computeIfAbsent(clusterKey, key -> new ClusteredSingletonExample2());\n    }\n\n}"
  },
  {
    "type": "ClusteredSingleton",
    "input": "public class ClusteredSingletonExample3 {\n\n    public ClusteredSingletonExample3() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class ClusteredSingletonExample3 {\n\n    private static final ConcurrentMap<String, ClusteredSingletonExample3> instances = new ConcurrentHashMap<>();\n\n    private ClusteredSingletonExample3() {}\n\n    public static ClusteredSingletonExample3 getInstance(String clusterKey) {\n        return instances.computeIfAbsent(clusterKey, key -> new ClusteredSingletonExample3());\n    }\n\n}"
  },
  {
    "type": "ClusteredSingleton",
    "input": "public class ClusteredSingletonExample4 {\n\n    public ClusteredSingletonExample4() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class ClusteredSingletonExample4 {\n\n    private static final ConcurrentMap<String, ClusteredSingletonExample4> instances = new ConcurrentHashMap<>();\n\n    private ClusteredSingletonExample4() {}\n\n    public static ClusteredSingletonExample4 getInstance(String clusterKey) {\n        return instances.computeIfAbsent(clusterKey, key -> new ClusteredSingletonExample4());\n    }\n\n}"
  },
  {
    "type": "ClusteredSingleton",
    "input": "public class ClusteredSingletonExample5 {\n\n    public ClusteredSingletonExample5() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class ClusteredSingletonExample5 {\n\n    private static final ConcurrentMap<String, ClusteredSingletonExample5> instances = new ConcurrentHashMap<>();\n\n    private ClusteredSingletonExample5() {}\n\n    public static ClusteredSingletonExample5 getInstance(String clusterKey) {\n        return instances.computeIfAbsent(clusterKey, key -> new ClusteredSingletonExample5());\n    }\n\n}"
  },
  {
    "type": "SingletonWithStateTracking",
    "input": "public class SingletonWithStateTrackingExample1 {\n\n    public SingletonWithStateTrackingExample1() {}\n\n}",
    "output": "public class SingletonWithStateTrackingExample1 {\n\n    private static SingletonWithStateTrackingExample1 instance;\n    private int state;\n\n    private SingletonWithStateTrackingExample1() {\n        state = 0;\n    }\n\n    public static SingletonWithStateTrackingExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithStateTrackingExample1();\n        }\n        return instance;\n    }\n\n    public void incrementState() {\n        state++;\n    }\n\n    public int getState() {\n        return state;\n    }\n\n}"
  },
  {
    "type": "SingletonWithStateTracking",
    "input": "public class SingletonWithStateTrackingExample2 {\n\n    public SingletonWithStateTrackingExample2() {}\n\n}",
    "output": "public class SingletonWithStateTrackingExample2 {\n\n    private static SingletonWithStateTrackingExample2 instance;\n    private int state;\n\n    private SingletonWithStateTrackingExample2() {\n        state = 0;\n    }\n\n    public static SingletonWithStateTrackingExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithStateTrackingExample2();\n        }\n        return instance;\n    }\n\n    public void incrementState() {\n        state++;\n    }\n\n    public int getState() {\n        return state;\n    }\n\n}"
  },
  {
    "type": "SingletonWithStateTracking",
    "input": "public class SingletonWithStateTrackingExample3 {\n\n    public SingletonWithStateTrackingExample3() {}\n\n}",
    "output": "public class SingletonWithStateTrackingExample3 {\n\n    private static SingletonWithStateTrackingExample3 instance;\n    private int state;\n\n    private SingletonWithStateTrackingExample3() {\n        state = 0;\n    }\n\n    public static SingletonWithStateTrackingExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithStateTrackingExample3();\n        }\n        return instance;\n    }\n\n    public void incrementState() {\n        state++;\n    }\n\n    public int getState() {\n        return state;\n    }\n\n}"
  },
  {
    "type": "SingletonWithStateTracking",
    "input": "public class SingletonWithStateTrackingExample4 {\n\n    public SingletonWithStateTrackingExample4() {}\n\n}",
    "output": "public class SingletonWithStateTrackingExample4 {\n\n    private static SingletonWithStateTrackingExample4 instance;\n    private int state;\n\n    private SingletonWithStateTrackingExample4() {\n        state = 0;\n    }\n\n    public static SingletonWithStateTrackingExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithStateTrackingExample4();\n        }\n        return instance;\n    }\n\n    public void incrementState() {\n        state++;\n    }\n\n    public int getState() {\n        return state;\n    }\n\n}"
  },
  {
    "type": "SingletonWithStateTracking",
    "input": "public class SingletonWithStateTrackingExample5 {\n\n    public SingletonWithStateTrackingExample5() {}\n\n}",
    "output": "public class SingletonWithStateTrackingExample5 {\n\n    private static SingletonWithStateTrackingExample5 instance;\n    private int state;\n\n    private SingletonWithStateTrackingExample5() {\n        state = 0;\n    }\n\n    public static SingletonWithStateTrackingExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithStateTrackingExample5();\n        }\n        return instance;\n    }\n\n    public void incrementState() {\n        state++;\n    }\n\n    public int getState() {\n        return state;\n    }\n\n}"
  },
  {
    "type": "EnvironmentBasedSingleton",
    "input": "public class EnvironmentBasedSingletonExample1 {\n\n    public EnvironmentBasedSingletonExample1() {}\n\n}",
    "output": "public class EnvironmentBasedSingletonExample1 {\n\n    private static EnvironmentBasedSingletonExample1 instance;\n    private String environment;\n\n    private EnvironmentBasedSingletonExample1(String environment) {\n        this.environment = environment;\n    }\n\n    public static EnvironmentBasedSingletonExample1 getInstance(String environment) {\n        if (instance == null) {\n            instance = new EnvironmentBasedSingletonExample1(environment);\n        }\n        return instance;\n    }\n\n    public String getEnvironment() {\n        return environment;\n    }\n\n}"
  },
  {
    "type": "EnvironmentBasedSingleton",
    "input": "public class EnvironmentBasedSingletonExample2 {\n\n    public EnvironmentBasedSingletonExample2() {}\n\n}",
    "output": "public class EnvironmentBasedSingletonExample2 {\n\n    private static EnvironmentBasedSingletonExample2 instance;\n    private String environment;\n\n    private EnvironmentBasedSingletonExample2(String environment) {\n        this.environment = environment;\n    }\n\n    public static EnvironmentBasedSingletonExample2 getInstance(String environment) {\n        if (instance == null) {\n            instance = new EnvironmentBasedSingletonExample2(environment);\n        }\n        return instance;\n    }\n\n    public String getEnvironment() {\n        return environment;\n    }\n\n}"
  },
  {
    "type": "EnvironmentBasedSingleton",
    "input": "public class EnvironmentBasedSingletonExample3 {\n\n    public EnvironmentBasedSingletonExample3() {}\n\n}",
    "output": "public class EnvironmentBasedSingletonExample3 {\n\n    private static EnvironmentBasedSingletonExample3 instance;\n    private String environment;\n\n    private EnvironmentBasedSingletonExample3(String environment) {\n        this.environment = environment;\n    }\n\n    public static EnvironmentBasedSingletonExample3 getInstance(String environment) {\n        if (instance == null) {\n            instance = new EnvironmentBasedSingletonExample3(environment);\n        }\n        return instance;\n    }\n\n    public String getEnvironment() {\n        return environment;\n    }\n\n}"
  },
  {
    "type": "EnvironmentBasedSingleton",
    "input": "public class EnvironmentBasedSingletonExample4 {\n\n    public EnvironmentBasedSingletonExample4() {}\n\n}",
    "output": "public class EnvironmentBasedSingletonExample4 {\n\n    private static EnvironmentBasedSingletonExample4 instance;\n    private String environment;\n\n    private EnvironmentBasedSingletonExample4(String environment) {\n        this.environment = environment;\n    }\n\n    public static EnvironmentBasedSingletonExample4 getInstance(String environment) {\n        if (instance == null) {\n            instance = new EnvironmentBasedSingletonExample4(environment);\n        }\n        return instance;\n    }\n\n    public String getEnvironment() {\n        return environment;\n    }\n\n}"
  },
  {
    "type": "EnvironmentBasedSingleton",
    "input": "public class EnvironmentBasedSingletonExample5 {\n\n    public EnvironmentBasedSingletonExample5() {}\n\n}",
    "output": "public class EnvironmentBasedSingletonExample5 {\n\n    private static EnvironmentBasedSingletonExample5 instance;\n    private String environment;\n\n    private EnvironmentBasedSingletonExample5(String environment) {\n        this.environment = environment;\n    }\n\n    public static EnvironmentBasedSingletonExample5 getInstance(String environment) {\n        if (instance == null) {\n            instance = new EnvironmentBasedSingletonExample5(environment);\n        }\n        return instance;\n    }\n\n    public String getEnvironment() {\n        return environment;\n    }\n\n}"
  },
  {
    "type": "SingletonWithThreadPool",
    "input": "public class SingletonWithThreadPoolExample1 {\n\n    public SingletonWithThreadPoolExample1() {}\n\n}",
    "output": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingletonWithThreadPoolExample1 {\n\n    private static SingletonWithThreadPoolExample1 instance;\n    private ExecutorService threadPool;\n\n    private SingletonWithThreadPoolExample1() {\n        threadPool = Executors.newFixedThreadPool(5);\n    }\n\n    public static SingletonWithThreadPoolExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithThreadPoolExample1();\n        }\n        return instance;\n    }\n\n    public ExecutorService getThreadPool() {\n        return threadPool;\n    }\n\n}"
  },
  {
    "type": "SingletonWithThreadPool",
    "input": "public class SingletonWithThreadPoolExample2 {\n\n    public SingletonWithThreadPoolExample2() {}\n\n}",
    "output": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingletonWithThreadPoolExample2 {\n\n    private static SingletonWithThreadPoolExample2 instance;\n    private ExecutorService threadPool;\n\n    private SingletonWithThreadPoolExample2() {\n        threadPool = Executors.newFixedThreadPool(5);\n    }\n\n    public static SingletonWithThreadPoolExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithThreadPoolExample2();\n        }\n        return instance;\n    }\n\n    public ExecutorService getThreadPool() {\n        return threadPool;\n    }\n\n}"
  },
  {
    "type": "SingletonWithThreadPool",
    "input": "public class SingletonWithThreadPoolExample3 {\n\n    public SingletonWithThreadPoolExample3() {}\n\n}",
    "output": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingletonWithThreadPoolExample3 {\n\n    private static SingletonWithThreadPoolExample3 instance;\n    private ExecutorService threadPool;\n\n    private SingletonWithThreadPoolExample3() {\n        threadPool = Executors.newFixedThreadPool(5);\n    }\n\n    public static SingletonWithThreadPoolExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithThreadPoolExample3();\n        }\n        return instance;\n    }\n\n    public ExecutorService getThreadPool() {\n        return threadPool;\n    }\n\n}"
  },
  {
    "type": "SingletonWithThreadPool",
    "input": "public class SingletonWithThreadPoolExample4 {\n\n    public SingletonWithThreadPoolExample4() {}\n\n}",
    "output": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingletonWithThreadPoolExample4 {\n\n    private static SingletonWithThreadPoolExample4 instance;\n    private ExecutorService threadPool;\n\n    private SingletonWithThreadPoolExample4() {\n        threadPool = Executors.newFixedThreadPool(5);\n    }\n\n    public static SingletonWithThreadPoolExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithThreadPoolExample4();\n        }\n        return instance;\n    }\n\n    public ExecutorService getThreadPool() {\n        return threadPool;\n    }\n\n}"
  },
  {
    "type": "SingletonWithThreadPool",
    "input": "public class SingletonWithThreadPoolExample5 {\n\n    public SingletonWithThreadPoolExample5() {}\n\n}",
    "output": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingletonWithThreadPoolExample5 {\n\n    private static SingletonWithThreadPoolExample5 instance;\n    private ExecutorService threadPool;\n\n    private SingletonWithThreadPoolExample5() {\n        threadPool = Executors.newFixedThreadPool(5);\n    }\n\n    public static SingletonWithThreadPoolExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithThreadPoolExample5();\n        }\n        return instance;\n    }\n\n    public ExecutorService getThreadPool() {\n        return threadPool;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMultitonSupport",
    "input": "public class SingletonWithMultitonSupportExample1 {\n\n    public SingletonWithMultitonSupportExample1() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithMultitonSupportExample1 {\n\n    private static Map<String, SingletonWithMultitonSupportExample1> instances = new HashMap<>();\n\n    private SingletonWithMultitonSupportExample1() {}\n\n    public static SingletonWithMultitonSupportExample1 getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new SingletonWithMultitonSupportExample1());\n    }\n\n}"
  },
  {
    "type": "SingletonWithMultitonSupport",
    "input": "public class SingletonWithMultitonSupportExample2 {\n\n    public SingletonWithMultitonSupportExample2() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithMultitonSupportExample2 {\n\n    private static Map<String, SingletonWithMultitonSupportExample2> instances = new HashMap<>();\n\n    private SingletonWithMultitonSupportExample2() {}\n\n    public static SingletonWithMultitonSupportExample2 getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new SingletonWithMultitonSupportExample2());\n    }\n\n}"
  },
  {
    "type": "SingletonWithMultitonSupport",
    "input": "public class SingletonWithMultitonSupportExample3 {\n\n    public SingletonWithMultitonSupportExample3() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithMultitonSupportExample3 {\n\n    private static Map<String, SingletonWithMultitonSupportExample3> instances = new HashMap<>();\n\n    private SingletonWithMultitonSupportExample3() {}\n\n    public static SingletonWithMultitonSupportExample3 getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new SingletonWithMultitonSupportExample3());\n    }\n\n}"
  },
  {
    "type": "SingletonWithMultitonSupport",
    "input": "public class SingletonWithMultitonSupportExample4 {\n\n    public SingletonWithMultitonSupportExample4() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithMultitonSupportExample4 {\n\n    private static Map<String, SingletonWithMultitonSupportExample4> instances = new HashMap<>();\n\n    private SingletonWithMultitonSupportExample4() {}\n\n    public static SingletonWithMultitonSupportExample4 getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new SingletonWithMultitonSupportExample4());\n    }\n\n}"
  },
  {
    "type": "SingletonWithMultitonSupport",
    "input": "public class SingletonWithMultitonSupportExample5 {\n\n    public SingletonWithMultitonSupportExample5() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithMultitonSupportExample5 {\n\n    private static Map<String, SingletonWithMultitonSupportExample5> instances = new HashMap<>();\n\n    private SingletonWithMultitonSupportExample5() {}\n\n    public static SingletonWithMultitonSupportExample5 getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new SingletonWithMultitonSupportExample5());\n    }\n\n}"
  },
  {
    "type": "SingletonWithObserverPattern",
    "input": "public class SingletonWithObserverPatternExample1 {\n\n    public SingletonWithObserverPatternExample1() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithObserverPatternExample1 {\n\n    private static SingletonWithObserverPatternExample1 instance;\n    private List<Observer> observers;\n\n    private SingletonWithObserverPatternExample1() {\n        observers = new ArrayList<>();\n    }\n\n    public static SingletonWithObserverPatternExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithObserverPatternExample1();\n        }\n        return instance;\n    }\n\n    public void addObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyObservers() {\n        for (Observer observer : observers) {\n            observer.update();\n        }\n    }\n\n}\n\ninterface Observer {\n    void update();\n}"
  },
  {
    "type": "SingletonWithObserverPattern",
    "input": "public class SingletonWithObserverPatternExample2 {\n\n    public SingletonWithObserverPatternExample2() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithObserverPatternExample2 {\n\n    private static SingletonWithObserverPatternExample2 instance;\n    private List<Observer> observers;\n\n    private SingletonWithObserverPatternExample2() {\n        observers = new ArrayList<>();\n    }\n\n    public static SingletonWithObserverPatternExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithObserverPatternExample2();\n        }\n        return instance;\n    }\n\n    public void addObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyObservers() {\n        for (Observer observer : observers) {\n            observer.update();\n        }\n    }\n\n}\n\ninterface Observer {\n    void update();\n}"
  },
  {
    "type": "SingletonWithObserverPattern",
    "input": "public class SingletonWithObserverPatternExample3 {\n\n    public SingletonWithObserverPatternExample3() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithObserverPatternExample3 {\n\n    private static SingletonWithObserverPatternExample3 instance;\n    private List<Observer> observers;\n\n    private SingletonWithObserverPatternExample3() {\n        observers = new ArrayList<>();\n    }\n\n    public static SingletonWithObserverPatternExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithObserverPatternExample3();\n        }\n        return instance;\n    }\n\n    public void addObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyObservers() {\n        for (Observer observer : observers) {\n            observer.update();\n        }\n    }\n\n}\n\ninterface Observer {\n    void update();\n}"
  },
  {
    "type": "SingletonWithObserverPattern",
    "input": "public class SingletonWithObserverPatternExample4 {\n\n    public SingletonWithObserverPatternExample4() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithObserverPatternExample4 {\n\n    private static SingletonWithObserverPatternExample4 instance;\n    private List<Observer> observers;\n\n    private SingletonWithObserverPatternExample4() {\n        observers = new ArrayList<>();\n    }\n\n    public static SingletonWithObserverPatternExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithObserverPatternExample4();\n        }\n        return instance;\n    }\n\n    public void addObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyObservers() {\n        for (Observer observer : observers) {\n            observer.update();\n        }\n    }\n\n}\n\ninterface Observer {\n    void update();\n}"
  },
  {
    "type": "SingletonWithObserverPattern",
    "input": "public class SingletonWithObserverPatternExample5 {\n\n    public SingletonWithObserverPatternExample5() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithObserverPatternExample5 {\n\n    private static SingletonWithObserverPatternExample5 instance;\n    private List<Observer> observers;\n\n    private SingletonWithObserverPatternExample5() {\n        observers = new ArrayList<>();\n    }\n\n    public static SingletonWithObserverPatternExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithObserverPatternExample5();\n        }\n        return instance;\n    }\n\n    public void addObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyObservers() {\n        for (Observer observer : observers) {\n            observer.update();\n        }\n    }\n\n}\n\ninterface Observer {\n    void update();\n}"
  },
  {
    "type": "SingletonWithLifecycleCallbacks",
    "input": "public class SingletonWithLifecycleCallbacksExample1 {\n\n    public SingletonWithLifecycleCallbacksExample1() {}\n\n}",
    "output": "public class SingletonWithLifecycleCallbacksExample1 {\n\n    private static SingletonWithLifecycleCallbacksExample1 instance;\n\n    private SingletonWithLifecycleCallbacksExample1() {}\n\n    public static SingletonWithLifecycleCallbacksExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithLifecycleCallbacksExample1();\n            onCreate();\n        }\n        return instance;\n    }\n\n    public static void onCreate() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    public static void onDestroy() {\n        System.out.println(\"Singleton instance destroyed\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithLifecycleCallbacks",
    "input": "public class SingletonWithLifecycleCallbacksExample2 {\n\n    public SingletonWithLifecycleCallbacksExample2() {}\n\n}",
    "output": "public class SingletonWithLifecycleCallbacksExample2 {\n\n    private static SingletonWithLifecycleCallbacksExample2 instance;\n\n    private SingletonWithLifecycleCallbacksExample2() {}\n\n    public static SingletonWithLifecycleCallbacksExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithLifecycleCallbacksExample2();\n            onCreate();\n        }\n        return instance;\n    }\n\n    public static void onCreate() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    public static void onDestroy() {\n        System.out.println(\"Singleton instance destroyed\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithLifecycleCallbacks",
    "input": "public class SingletonWithLifecycleCallbacksExample3 {\n\n    public SingletonWithLifecycleCallbacksExample3() {}\n\n}",
    "output": "public class SingletonWithLifecycleCallbacksExample3 {\n\n    private static SingletonWithLifecycleCallbacksExample3 instance;\n\n    private SingletonWithLifecycleCallbacksExample3() {}\n\n    public static SingletonWithLifecycleCallbacksExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithLifecycleCallbacksExample3();\n            onCreate();\n        }\n        return instance;\n    }\n\n    public static void onCreate() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    public static void onDestroy() {\n        System.out.println(\"Singleton instance destroyed\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithLifecycleCallbacks",
    "input": "public class SingletonWithLifecycleCallbacksExample4 {\n\n    public SingletonWithLifecycleCallbacksExample4() {}\n\n}",
    "output": "public class SingletonWithLifecycleCallbacksExample4 {\n\n    private static SingletonWithLifecycleCallbacksExample4 instance;\n\n    private SingletonWithLifecycleCallbacksExample4() {}\n\n    public static SingletonWithLifecycleCallbacksExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithLifecycleCallbacksExample4();\n            onCreate();\n        }\n        return instance;\n    }\n\n    public static void onCreate() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    public static void onDestroy() {\n        System.out.println(\"Singleton instance destroyed\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithLifecycleCallbacks",
    "input": "public class SingletonWithLifecycleCallbacksExample5 {\n\n    public SingletonWithLifecycleCallbacksExample5() {}\n\n}",
    "output": "public class SingletonWithLifecycleCallbacksExample5 {\n\n    private static SingletonWithLifecycleCallbacksExample5 instance;\n\n    private SingletonWithLifecycleCallbacksExample5() {}\n\n    public static SingletonWithLifecycleCallbacksExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithLifecycleCallbacksExample5();\n            onCreate();\n        }\n        return instance;\n    }\n\n    public static void onCreate() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    public static void onDestroy() {\n        System.out.println(\"Singleton instance destroyed\");\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionSingleton",
    "input": "public class DatabaseConnectionSingletonExample1 {\n\n    public DatabaseConnectionSingletonExample1() {}\n\n}",
    "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class DatabaseConnectionSingletonExample1 {\n\n    private static DatabaseConnectionSingletonExample1 instance;\n    private Connection connection;\n\n    private DatabaseConnectionSingletonExample1() {\n        try {\n            connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db\", \"user\", \"password\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static DatabaseConnectionSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionSingletonExample1();\n        }\n        return instance;\n    }\n\n    public Connection getConnection() {\n        return connection;\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionSingleton",
    "input": "public class DatabaseConnectionSingletonExample2 {\n\n    public DatabaseConnectionSingletonExample2() {}\n\n}",
    "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class DatabaseConnectionSingletonExample2 {\n\n    private static DatabaseConnectionSingletonExample2 instance;\n    private Connection connection;\n\n    private DatabaseConnectionSingletonExample2() {\n        try {\n            connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db\", \"user\", \"password\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static DatabaseConnectionSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionSingletonExample2();\n        }\n        return instance;\n    }\n\n    public Connection getConnection() {\n        return connection;\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionSingleton",
    "input": "public class DatabaseConnectionSingletonExample3 {\n\n    public DatabaseConnectionSingletonExample3() {}\n\n}",
    "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class DatabaseConnectionSingletonExample3 {\n\n    private static DatabaseConnectionSingletonExample3 instance;\n    private Connection connection;\n\n    private DatabaseConnectionSingletonExample3() {\n        try {\n            connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db\", \"user\", \"password\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static DatabaseConnectionSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionSingletonExample3();\n        }\n        return instance;\n    }\n\n    public Connection getConnection() {\n        return connection;\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionSingleton",
    "input": "public class DatabaseConnectionSingletonExample4 {\n\n    public DatabaseConnectionSingletonExample4() {}\n\n}",
    "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class DatabaseConnectionSingletonExample4 {\n\n    private static DatabaseConnectionSingletonExample4 instance;\n    private Connection connection;\n\n    private DatabaseConnectionSingletonExample4() {\n        try {\n            connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db\", \"user\", \"password\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static DatabaseConnectionSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionSingletonExample4();\n        }\n        return instance;\n    }\n\n    public Connection getConnection() {\n        return connection;\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionSingleton",
    "input": "public class DatabaseConnectionSingletonExample5 {\n\n    public DatabaseConnectionSingletonExample5() {}\n\n}",
    "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class DatabaseConnectionSingletonExample5 {\n\n    private static DatabaseConnectionSingletonExample5 instance;\n    private Connection connection;\n\n    private DatabaseConnectionSingletonExample5() {\n        try {\n            connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db\", \"user\", \"password\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static DatabaseConnectionSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionSingletonExample5();\n        }\n        return instance;\n    }\n\n    public Connection getConnection() {\n        return connection;\n    }\n\n}"
  },
  {
    "type": "LoggingSingleton",
    "input": "public class LoggingSingletonExample1 {\n\n    public LoggingSingletonExample1() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggingSingletonExample1 {\n\n    private static LoggingSingletonExample1 instance;\n    private FileWriter fileWriter;\n\n    private LoggingSingletonExample1() {\n        try {\n            fileWriter = new FileWriter(\"app.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggingSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new LoggingSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "LoggingSingleton",
    "input": "public class LoggingSingletonExample2 {\n\n    public LoggingSingletonExample2() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggingSingletonExample2 {\n\n    private static LoggingSingletonExample2 instance;\n    private FileWriter fileWriter;\n\n    private LoggingSingletonExample2() {\n        try {\n            fileWriter = new FileWriter(\"app.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggingSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new LoggingSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "LoggingSingleton",
    "input": "public class LoggingSingletonExample3 {\n\n    public LoggingSingletonExample3() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggingSingletonExample3 {\n\n    private static LoggingSingletonExample3 instance;\n    private FileWriter fileWriter;\n\n    private LoggingSingletonExample3() {\n        try {\n            fileWriter = new FileWriter(\"app.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggingSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new LoggingSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "LoggingSingleton",
    "input": "public class LoggingSingletonExample4 {\n\n    public LoggingSingletonExample4() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggingSingletonExample4 {\n\n    private static LoggingSingletonExample4 instance;\n    private FileWriter fileWriter;\n\n    private LoggingSingletonExample4() {\n        try {\n            fileWriter = new FileWriter(\"app.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggingSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new LoggingSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "LoggingSingleton",
    "input": "public class LoggingSingletonExample5 {\n\n    public LoggingSingletonExample5() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggingSingletonExample5 {\n\n    private static LoggingSingletonExample5 instance;\n    private FileWriter fileWriter;\n\n    private LoggingSingletonExample5() {\n        try {\n            fileWriter = new FileWriter(\"app.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggingSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new LoggingSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "ConfigurationSingleton",
    "input": "public class ConfigurationSingletonExample1 {\n\n    public ConfigurationSingletonExample1() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationSingletonExample1 {\n\n    private static ConfigurationSingletonExample1 instance;\n    private Properties properties;\n\n    private ConfigurationSingletonExample1() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationSingletonExample1();\n        }\n        return instance;\n    }\n\n    public String getConfig(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ConfigurationSingleton",
    "input": "public class ConfigurationSingletonExample2 {\n\n    public ConfigurationSingletonExample2() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationSingletonExample2 {\n\n    private static ConfigurationSingletonExample2 instance;\n    private Properties properties;\n\n    private ConfigurationSingletonExample2() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationSingletonExample2();\n        }\n        return instance;\n    }\n\n    public String getConfig(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ConfigurationSingleton",
    "input": "public class ConfigurationSingletonExample3 {\n\n    public ConfigurationSingletonExample3() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationSingletonExample3 {\n\n    private static ConfigurationSingletonExample3 instance;\n    private Properties properties;\n\n    private ConfigurationSingletonExample3() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationSingletonExample3();\n        }\n        return instance;\n    }\n\n    public String getConfig(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ConfigurationSingleton",
    "input": "public class ConfigurationSingletonExample4 {\n\n    public ConfigurationSingletonExample4() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationSingletonExample4 {\n\n    private static ConfigurationSingletonExample4 instance;\n    private Properties properties;\n\n    private ConfigurationSingletonExample4() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationSingletonExample4();\n        }\n        return instance;\n    }\n\n    public String getConfig(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ConfigurationSingleton",
    "input": "public class ConfigurationSingletonExample5 {\n\n    public ConfigurationSingletonExample5() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationSingletonExample5 {\n\n    private static ConfigurationSingletonExample5 instance;\n    private Properties properties;\n\n    private ConfigurationSingletonExample5() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationSingletonExample5();\n        }\n        return instance;\n    }\n\n    public String getConfig(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample1 {\n\n    public ThreadLocalSingletonExample1() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample1 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample1> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample1::new);\n\n    private ThreadLocalSingletonExample1() {}\n\n    public static ThreadLocalSingletonExample1 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample2 {\n\n    public ThreadLocalSingletonExample2() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample2 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample2> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample2::new);\n\n    private ThreadLocalSingletonExample2() {}\n\n    public static ThreadLocalSingletonExample2 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample3 {\n\n    public ThreadLocalSingletonExample3() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample3 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample3> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample3::new);\n\n    private ThreadLocalSingletonExample3() {}\n\n    public static ThreadLocalSingletonExample3 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample4 {\n\n    public ThreadLocalSingletonExample4() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample4 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample4> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample4::new);\n\n    private ThreadLocalSingletonExample4() {}\n\n    public static ThreadLocalSingletonExample4 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample5 {\n\n    public ThreadLocalSingletonExample5() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample5 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample5> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample5::new);\n\n    private ThreadLocalSingletonExample5() {}\n\n    public static ThreadLocalSingletonExample5 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "MultitonSingleton",
    "input": "public class MultitonSingletonExample1 {\n\n    public MultitonSingletonExample1() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class MultitonSingletonExample1 {\n\n    private static final Map<String, MultitonSingletonExample1> instances = new HashMap<>();\n\n    private MultitonSingletonExample1() {}\n\n    public static MultitonSingletonExample1 getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new MultitonSingletonExample1());\n    }\n\n}"
  },
  {
    "type": "MultitonSingleton",
    "input": "public class MultitonSingletonExample2 {\n\n    public MultitonSingletonExample2() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class MultitonSingletonExample2 {\n\n    private static final Map<String, MultitonSingletonExample2> instances = new HashMap<>();\n\n    private MultitonSingletonExample2() {}\n\n    public static MultitonSingletonExample2 getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new MultitonSingletonExample2());\n    }\n\n}"
  },
  {
    "type": "MultitonSingleton",
    "input": "public class MultitonSingletonExample3 {\n\n    public MultitonSingletonExample3() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class MultitonSingletonExample3 {\n\n    private static final Map<String, MultitonSingletonExample3> instances = new HashMap<>();\n\n    private MultitonSingletonExample3() {}\n\n    public static MultitonSingletonExample3 getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new MultitonSingletonExample3());\n    }\n\n}"
  },
  {
    "type": "MultitonSingleton",
    "input": "public class MultitonSingletonExample4 {\n\n    public MultitonSingletonExample4() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class MultitonSingletonExample4 {\n\n    private static final Map<String, MultitonSingletonExample4> instances = new HashMap<>();\n\n    private MultitonSingletonExample4() {}\n\n    public static MultitonSingletonExample4 getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new MultitonSingletonExample4());\n    }\n\n}"
  },
  {
    "type": "MultitonSingleton",
    "input": "public class MultitonSingletonExample5 {\n\n    public MultitonSingletonExample5() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class MultitonSingletonExample5 {\n\n    private static final Map<String, MultitonSingletonExample5> instances = new HashMap<>();\n\n    private MultitonSingletonExample5() {}\n\n    public static MultitonSingletonExample5 getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new MultitonSingletonExample5());\n    }\n\n}"
  },
  {
    "type": "SingletonWithSerialization",
    "input": "public class SingletonWithSerializationExample1 {\n\n    public SingletonWithSerializationExample1() {}\n\n}",
    "output": "import java.io.Serializable;\n\npublic class SingletonWithSerializationExample1 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static SingletonWithSerializationExample1 instance;\n\n    private SingletonWithSerializationExample1() {}\n\n    public static SingletonWithSerializationExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithSerializationExample1();\n        }\n        return instance;\n    }\n\n    protected Object readResolve() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithSerialization",
    "input": "public class SingletonWithSerializationExample2 {\n\n    public SingletonWithSerializationExample2() {}\n\n}",
    "output": "import java.io.Serializable;\n\npublic class SingletonWithSerializationExample2 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static SingletonWithSerializationExample2 instance;\n\n    private SingletonWithSerializationExample2() {}\n\n    public static SingletonWithSerializationExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithSerializationExample2();\n        }\n        return instance;\n    }\n\n    protected Object readResolve() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithSerialization",
    "input": "public class SingletonWithSerializationExample3 {\n\n    public SingletonWithSerializationExample3() {}\n\n}",
    "output": "import java.io.Serializable;\n\npublic class SingletonWithSerializationExample3 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static SingletonWithSerializationExample3 instance;\n\n    private SingletonWithSerializationExample3() {}\n\n    public static SingletonWithSerializationExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithSerializationExample3();\n        }\n        return instance;\n    }\n\n    protected Object readResolve() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithSerialization",
    "input": "public class SingletonWithSerializationExample4 {\n\n    public SingletonWithSerializationExample4() {}\n\n}",
    "output": "import java.io.Serializable;\n\npublic class SingletonWithSerializationExample4 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static SingletonWithSerializationExample4 instance;\n\n    private SingletonWithSerializationExample4() {}\n\n    public static SingletonWithSerializationExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithSerializationExample4();\n        }\n        return instance;\n    }\n\n    protected Object readResolve() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithSerialization",
    "input": "public class SingletonWithSerializationExample5 {\n\n    public SingletonWithSerializationExample5() {}\n\n}",
    "output": "import java.io.Serializable;\n\npublic class SingletonWithSerializationExample5 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static SingletonWithSerializationExample5 instance;\n\n    private SingletonWithSerializationExample5() {}\n\n    public static SingletonWithSerializationExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithSerializationExample5();\n        }\n        return instance;\n    }\n\n    protected Object readResolve() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazyLoadingSingleton",
    "input": "public class LazyLoadingSingletonExample1 {\n\n    public LazyLoadingSingletonExample1() {}\n\n}",
    "output": "public class LazyLoadingSingletonExample1 {\n\n    private LazyLoadingSingletonExample1() {}\n\n    private static class Holder {\n        private static final LazyLoadingSingletonExample1 INSTANCE = new LazyLoadingSingletonExample1();\n    }\n\n    public static LazyLoadingSingletonExample1 getInstance() {\n        return Holder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "LazyLoadingSingleton",
    "input": "public class LazyLoadingSingletonExample2 {\n\n    public LazyLoadingSingletonExample2() {}\n\n}",
    "output": "public class LazyLoadingSingletonExample2 {\n\n    private LazyLoadingSingletonExample2() {}\n\n    private static class Holder {\n        private static final LazyLoadingSingletonExample2 INSTANCE = new LazyLoadingSingletonExample2();\n    }\n\n    public static LazyLoadingSingletonExample2 getInstance() {\n        return Holder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "LazyLoadingSingleton",
    "input": "public class LazyLoadingSingletonExample3 {\n\n    public LazyLoadingSingletonExample3() {}\n\n}",
    "output": "public class LazyLoadingSingletonExample3 {\n\n    private LazyLoadingSingletonExample3() {}\n\n    private static class Holder {\n        private static final LazyLoadingSingletonExample3 INSTANCE = new LazyLoadingSingletonExample3();\n    }\n\n    public static LazyLoadingSingletonExample3 getInstance() {\n        return Holder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "LazyLoadingSingleton",
    "input": "public class LazyLoadingSingletonExample4 {\n\n    public LazyLoadingSingletonExample4() {}\n\n}",
    "output": "public class LazyLoadingSingletonExample4 {\n\n    private LazyLoadingSingletonExample4() {}\n\n    private static class Holder {\n        private static final LazyLoadingSingletonExample4 INSTANCE = new LazyLoadingSingletonExample4();\n    }\n\n    public static LazyLoadingSingletonExample4 getInstance() {\n        return Holder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "LazyLoadingSingleton",
    "input": "public class LazyLoadingSingletonExample5 {\n\n    public LazyLoadingSingletonExample5() {}\n\n}",
    "output": "public class LazyLoadingSingletonExample5 {\n\n    private LazyLoadingSingletonExample5() {}\n\n    private static class Holder {\n        private static final LazyLoadingSingletonExample5 INSTANCE = new LazyLoadingSingletonExample5();\n    }\n\n    public static LazyLoadingSingletonExample5 getInstance() {\n        return Holder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "SingletonWithObserverPattern",
    "input": "public class SingletonWithObserverPatternExample1 {\n\n    public SingletonWithObserverPatternExample1() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithObserverPatternExample1 {\n\n    private static SingletonWithObserverPatternExample1 instance;\n    private List<Observer> observers;\n\n    private SingletonWithObserverPatternExample1() {\n        observers = new ArrayList<>();\n    }\n\n    public static SingletonWithObserverPatternExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithObserverPatternExample1();\n        }\n        return instance;\n    }\n\n    public void addObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyObservers(String message) {\n        for (Observer observer : observers) {\n            observer.update(message);\n        }\n    }\n\n}\n\ninterface Observer {\n    void update(String message);\n}"
  },
  {
    "type": "SingletonWithObserverPattern",
    "input": "public class SingletonWithObserverPatternExample2 {\n\n    public SingletonWithObserverPatternExample2() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithObserverPatternExample2 {\n\n    private static SingletonWithObserverPatternExample2 instance;\n    private List<Observer> observers;\n\n    private SingletonWithObserverPatternExample2() {\n        observers = new ArrayList<>();\n    }\n\n    public static SingletonWithObserverPatternExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithObserverPatternExample2();\n        }\n        return instance;\n    }\n\n    public void addObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyObservers(String message) {\n        for (Observer observer : observers) {\n            observer.update(message);\n        }\n    }\n\n}\n\ninterface Observer {\n    void update(String message);\n}"
  },
  {
    "type": "SingletonWithObserverPattern",
    "input": "public class SingletonWithObserverPatternExample3 {\n\n    public SingletonWithObserverPatternExample3() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithObserverPatternExample3 {\n\n    private static SingletonWithObserverPatternExample3 instance;\n    private List<Observer> observers;\n\n    private SingletonWithObserverPatternExample3() {\n        observers = new ArrayList<>();\n    }\n\n    public static SingletonWithObserverPatternExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithObserverPatternExample3();\n        }\n        return instance;\n    }\n\n    public void addObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyObservers(String message) {\n        for (Observer observer : observers) {\n            observer.update(message);\n        }\n    }\n\n}\n\ninterface Observer {\n    void update(String message);\n}"
  },
  {
    "type": "SingletonWithObserverPattern",
    "input": "public class SingletonWithObserverPatternExample4 {\n\n    public SingletonWithObserverPatternExample4() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithObserverPatternExample4 {\n\n    private static SingletonWithObserverPatternExample4 instance;\n    private List<Observer> observers;\n\n    private SingletonWithObserverPatternExample4() {\n        observers = new ArrayList<>();\n    }\n\n    public static SingletonWithObserverPatternExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithObserverPatternExample4();\n        }\n        return instance;\n    }\n\n    public void addObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyObservers(String message) {\n        for (Observer observer : observers) {\n            observer.update(message);\n        }\n    }\n\n}\n\ninterface Observer {\n    void update(String message);\n}"
  },
  {
    "type": "SingletonWithObserverPattern",
    "input": "public class SingletonWithObserverPatternExample5 {\n\n    public SingletonWithObserverPatternExample5() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithObserverPatternExample5 {\n\n    private static SingletonWithObserverPatternExample5 instance;\n    private List<Observer> observers;\n\n    private SingletonWithObserverPatternExample5() {\n        observers = new ArrayList<>();\n    }\n\n    public static SingletonWithObserverPatternExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithObserverPatternExample5();\n        }\n        return instance;\n    }\n\n    public void addObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyObservers(String message) {\n        for (Observer observer : observers) {\n            observer.update(message);\n        }\n    }\n\n}\n\ninterface Observer {\n    void update(String message);\n}"
  },
  {
    "type": "SingletonWithStateTracking",
    "input": "public class SingletonWithStateTrackingExample1 {\n\n    public SingletonWithStateTrackingExample1() {}\n\n}",
    "output": "public class SingletonWithStateTrackingExample1 {\n\n    private static SingletonWithStateTrackingExample1 instance;\n    private int state;\n\n    private SingletonWithStateTrackingExample1() {\n        state = 0;\n    }\n\n    public static SingletonWithStateTrackingExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithStateTrackingExample1();\n        }\n        return instance;\n    }\n\n    public void incrementState() {\n        state++;\n    }\n\n    public int getState() {\n        return state;\n    }\n\n}"
  },
  {
    "type": "SingletonWithStateTracking",
    "input": "public class SingletonWithStateTrackingExample2 {\n\n    public SingletonWithStateTrackingExample2() {}\n\n}",
    "output": "public class SingletonWithStateTrackingExample2 {\n\n    private static SingletonWithStateTrackingExample2 instance;\n    private int state;\n\n    private SingletonWithStateTrackingExample2() {\n        state = 0;\n    }\n\n    public static SingletonWithStateTrackingExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithStateTrackingExample2();\n        }\n        return instance;\n    }\n\n    public void incrementState() {\n        state++;\n    }\n\n    public int getState() {\n        return state;\n    }\n\n}"
  },
  {
    "type": "SingletonWithStateTracking",
    "input": "public class SingletonWithStateTrackingExample3 {\n\n    public SingletonWithStateTrackingExample3() {}\n\n}",
    "output": "public class SingletonWithStateTrackingExample3 {\n\n    private static SingletonWithStateTrackingExample3 instance;\n    private int state;\n\n    private SingletonWithStateTrackingExample3() {\n        state = 0;\n    }\n\n    public static SingletonWithStateTrackingExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithStateTrackingExample3();\n        }\n        return instance;\n    }\n\n    public void incrementState() {\n        state++;\n    }\n\n    public int getState() {\n        return state;\n    }\n\n}"
  },
  {
    "type": "SingletonWithStateTracking",
    "input": "public class SingletonWithStateTrackingExample4 {\n\n    public SingletonWithStateTrackingExample4() {}\n\n}",
    "output": "public class SingletonWithStateTrackingExample4 {\n\n    private static SingletonWithStateTrackingExample4 instance;\n    private int state;\n\n    private SingletonWithStateTrackingExample4() {\n        state = 0;\n    }\n\n    public static SingletonWithStateTrackingExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithStateTrackingExample4();\n        }\n        return instance;\n    }\n\n    public void incrementState() {\n        state++;\n    }\n\n    public int getState() {\n        return state;\n    }\n\n}"
  },
  {
    "type": "SingletonWithStateTracking",
    "input": "public class SingletonWithStateTrackingExample5 {\n\n    public SingletonWithStateTrackingExample5() {}\n\n}",
    "output": "public class SingletonWithStateTrackingExample5 {\n\n    private static SingletonWithStateTrackingExample5 instance;\n    private int state;\n\n    private SingletonWithStateTrackingExample5() {\n        state = 0;\n    }\n\n    public static SingletonWithStateTrackingExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithStateTrackingExample5();\n        }\n        return instance;\n    }\n\n    public void incrementState() {\n        state++;\n    }\n\n    public int getState() {\n        return state;\n    }\n\n}"
  },
  {
    "type": "SingletonWithDynamicConfiguration",
    "input": "public class SingletonWithDynamicConfigurationExample1 {\n\n    public SingletonWithDynamicConfigurationExample1() {}\n\n}",
    "output": "public class SingletonWithDynamicConfigurationExample1 {\n\n    private static SingletonWithDynamicConfigurationExample1 instance;\n    private String config;\n\n    private SingletonWithDynamicConfigurationExample1(String config) {\n        this.config = config;\n    }\n\n    public static SingletonWithDynamicConfigurationExample1 getInstance(String config) {\n        if (instance == null) {\n            instance = new SingletonWithDynamicConfigurationExample1(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "SingletonWithDynamicConfiguration",
    "input": "public class SingletonWithDynamicConfigurationExample2 {\n\n    public SingletonWithDynamicConfigurationExample2() {}\n\n}",
    "output": "public class SingletonWithDynamicConfigurationExample2 {\n\n    private static SingletonWithDynamicConfigurationExample2 instance;\n    private String config;\n\n    private SingletonWithDynamicConfigurationExample2(String config) {\n        this.config = config;\n    }\n\n    public static SingletonWithDynamicConfigurationExample2 getInstance(String config) {\n        if (instance == null) {\n            instance = new SingletonWithDynamicConfigurationExample2(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "SingletonWithDynamicConfiguration",
    "input": "public class SingletonWithDynamicConfigurationExample3 {\n\n    public SingletonWithDynamicConfigurationExample3() {}\n\n}",
    "output": "public class SingletonWithDynamicConfigurationExample3 {\n\n    private static SingletonWithDynamicConfigurationExample3 instance;\n    private String config;\n\n    private SingletonWithDynamicConfigurationExample3(String config) {\n        this.config = config;\n    }\n\n    public static SingletonWithDynamicConfigurationExample3 getInstance(String config) {\n        if (instance == null) {\n            instance = new SingletonWithDynamicConfigurationExample3(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "SingletonWithDynamicConfiguration",
    "input": "public class SingletonWithDynamicConfigurationExample4 {\n\n    public SingletonWithDynamicConfigurationExample4() {}\n\n}",
    "output": "public class SingletonWithDynamicConfigurationExample4 {\n\n    private static SingletonWithDynamicConfigurationExample4 instance;\n    private String config;\n\n    private SingletonWithDynamicConfigurationExample4(String config) {\n        this.config = config;\n    }\n\n    public static SingletonWithDynamicConfigurationExample4 getInstance(String config) {\n        if (instance == null) {\n            instance = new SingletonWithDynamicConfigurationExample4(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "SingletonWithDynamicConfiguration",
    "input": "public class SingletonWithDynamicConfigurationExample5 {\n\n    public SingletonWithDynamicConfigurationExample5() {}\n\n}",
    "output": "public class SingletonWithDynamicConfigurationExample5 {\n\n    private static SingletonWithDynamicConfigurationExample5 instance;\n    private String config;\n\n    private SingletonWithDynamicConfigurationExample5(String config) {\n        this.config = config;\n    }\n\n    public static SingletonWithDynamicConfigurationExample5 getInstance(String config) {\n        if (instance == null) {\n            instance = new SingletonWithDynamicConfigurationExample5(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "EventDrivenSingleton",
    "input": "public class EventDrivenSingletonExample1 {\n\n    public EventDrivenSingletonExample1() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EventDrivenSingletonExample1 {\n\n    private static EventDrivenSingletonExample1 instance;\n    private List<String> eventQueue;\n\n    private EventDrivenSingletonExample1() {\n        eventQueue = new ArrayList<>();\n    }\n\n    public static EventDrivenSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new EventDrivenSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void handleEvent(String event) {\n        eventQueue.add(event);\n        System.out.println(\"Event handled: \" + event);\n    }\n\n    public List<String> getEventQueue() {\n        return eventQueue;\n    }\n\n}"
  },
  {
    "type": "EventDrivenSingleton",
    "input": "public class EventDrivenSingletonExample2 {\n\n    public EventDrivenSingletonExample2() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EventDrivenSingletonExample2 {\n\n    private static EventDrivenSingletonExample2 instance;\n    private List<String> eventQueue;\n\n    private EventDrivenSingletonExample2() {\n        eventQueue = new ArrayList<>();\n    }\n\n    public static EventDrivenSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new EventDrivenSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void handleEvent(String event) {\n        eventQueue.add(event);\n        System.out.println(\"Event handled: \" + event);\n    }\n\n    public List<String> getEventQueue() {\n        return eventQueue;\n    }\n\n}"
  },
  {
    "type": "EventDrivenSingleton",
    "input": "public class EventDrivenSingletonExample3 {\n\n    public EventDrivenSingletonExample3() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EventDrivenSingletonExample3 {\n\n    private static EventDrivenSingletonExample3 instance;\n    private List<String> eventQueue;\n\n    private EventDrivenSingletonExample3() {\n        eventQueue = new ArrayList<>();\n    }\n\n    public static EventDrivenSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new EventDrivenSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void handleEvent(String event) {\n        eventQueue.add(event);\n        System.out.println(\"Event handled: \" + event);\n    }\n\n    public List<String> getEventQueue() {\n        return eventQueue;\n    }\n\n}"
  },
  {
    "type": "EventDrivenSingleton",
    "input": "public class EventDrivenSingletonExample4 {\n\n    public EventDrivenSingletonExample4() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EventDrivenSingletonExample4 {\n\n    private static EventDrivenSingletonExample4 instance;\n    private List<String> eventQueue;\n\n    private EventDrivenSingletonExample4() {\n        eventQueue = new ArrayList<>();\n    }\n\n    public static EventDrivenSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new EventDrivenSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void handleEvent(String event) {\n        eventQueue.add(event);\n        System.out.println(\"Event handled: \" + event);\n    }\n\n    public List<String> getEventQueue() {\n        return eventQueue;\n    }\n\n}"
  },
  {
    "type": "EventDrivenSingleton",
    "input": "public class EventDrivenSingletonExample5 {\n\n    public EventDrivenSingletonExample5() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EventDrivenSingletonExample5 {\n\n    private static EventDrivenSingletonExample5 instance;\n    private List<String> eventQueue;\n\n    private EventDrivenSingletonExample5() {\n        eventQueue = new ArrayList<>();\n    }\n\n    public static EventDrivenSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new EventDrivenSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void handleEvent(String event) {\n        eventQueue.add(event);\n        System.out.println(\"Event handled: \" + event);\n    }\n\n    public List<String> getEventQueue() {\n        return eventQueue;\n    }\n\n}"
  },
  {
    "type": "SessionManagerSingleton",
    "input": "public class SessionManagerSingletonExample1 {\n\n    public SessionManagerSingletonExample1() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SessionManagerSingletonExample1 {\n\n    private static SessionManagerSingletonExample1 instance;\n    private Map<String, String> activeSessions;\n\n    private SessionManagerSingletonExample1() {\n        activeSessions = new HashMap<>();\n    }\n\n    public static SessionManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new SessionManagerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        activeSessions.put(user, \"SessionActive\");\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return activeSessions.containsKey(user);\n    }\n\n}"
  },
  {
    "type": "SessionManagerSingleton",
    "input": "public class SessionManagerSingletonExample2 {\n\n    public SessionManagerSingletonExample2() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SessionManagerSingletonExample2 {\n\n    private static SessionManagerSingletonExample2 instance;\n    private Map<String, String> activeSessions;\n\n    private SessionManagerSingletonExample2() {\n        activeSessions = new HashMap<>();\n    }\n\n    public static SessionManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new SessionManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        activeSessions.put(user, \"SessionActive\");\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return activeSessions.containsKey(user);\n    }\n\n}"
  },
  {
    "type": "SessionManagerSingleton",
    "input": "public class SessionManagerSingletonExample3 {\n\n    public SessionManagerSingletonExample3() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SessionManagerSingletonExample3 {\n\n    private static SessionManagerSingletonExample3 instance;\n    private Map<String, String> activeSessions;\n\n    private SessionManagerSingletonExample3() {\n        activeSessions = new HashMap<>();\n    }\n\n    public static SessionManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new SessionManagerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        activeSessions.put(user, \"SessionActive\");\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return activeSessions.containsKey(user);\n    }\n\n}"
  },
  {
    "type": "SessionManagerSingleton",
    "input": "public class SessionManagerSingletonExample4 {\n\n    public SessionManagerSingletonExample4() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SessionManagerSingletonExample4 {\n\n    private static SessionManagerSingletonExample4 instance;\n    private Map<String, String> activeSessions;\n\n    private SessionManagerSingletonExample4() {\n        activeSessions = new HashMap<>();\n    }\n\n    public static SessionManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new SessionManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        activeSessions.put(user, \"SessionActive\");\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return activeSessions.containsKey(user);\n    }\n\n}"
  },
  {
    "type": "SessionManagerSingleton",
    "input": "public class SessionManagerSingletonExample5 {\n\n    public SessionManagerSingletonExample5() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SessionManagerSingletonExample5 {\n\n    private static SessionManagerSingletonExample5 instance;\n    private Map<String, String> activeSessions;\n\n    private SessionManagerSingletonExample5() {\n        activeSessions = new HashMap<>();\n    }\n\n    public static SessionManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new SessionManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        activeSessions.put(user, \"SessionActive\");\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return activeSessions.containsKey(user);\n    }\n\n}"
  },
  {
    "type": "ConfigurationManagerSingleton",
    "input": "public class ConfigurationManagerSingletonExample1 {\n\n    public ConfigurationManagerSingletonExample1() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationManagerSingletonExample1 {\n\n    private static ConfigurationManagerSingletonExample1 instance;\n    private Properties properties;\n\n    private ConfigurationManagerSingletonExample1() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"app_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationManagerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public String getConfigValue(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ConfigurationManagerSingleton",
    "input": "public class ConfigurationManagerSingletonExample2 {\n\n    public ConfigurationManagerSingletonExample2() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationManagerSingletonExample2 {\n\n    private static ConfigurationManagerSingletonExample2 instance;\n    private Properties properties;\n\n    private ConfigurationManagerSingletonExample2() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"app_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public String getConfigValue(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ConfigurationManagerSingleton",
    "input": "public class ConfigurationManagerSingletonExample3 {\n\n    public ConfigurationManagerSingletonExample3() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationManagerSingletonExample3 {\n\n    private static ConfigurationManagerSingletonExample3 instance;\n    private Properties properties;\n\n    private ConfigurationManagerSingletonExample3() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"app_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationManagerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public String getConfigValue(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ConfigurationManagerSingleton",
    "input": "public class ConfigurationManagerSingletonExample4 {\n\n    public ConfigurationManagerSingletonExample4() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationManagerSingletonExample4 {\n\n    private static ConfigurationManagerSingletonExample4 instance;\n    private Properties properties;\n\n    private ConfigurationManagerSingletonExample4() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"app_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public String getConfigValue(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ConfigurationManagerSingleton",
    "input": "public class ConfigurationManagerSingletonExample5 {\n\n    public ConfigurationManagerSingletonExample5() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationManagerSingletonExample5 {\n\n    private static ConfigurationManagerSingletonExample5 instance;\n    private Properties properties;\n\n    private ConfigurationManagerSingletonExample5() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"app_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public String getConfigValue(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ResourcePoolSingleton",
    "input": "public class ResourcePoolSingletonExample1 {\n\n    public ResourcePoolSingletonExample1() {}\n\n}",
    "output": "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class ResourcePoolSingletonExample1 {\n\n    private static ResourcePoolSingletonExample1 instance;\n    private Queue<String> availableResources;\n\n    private ResourcePoolSingletonExample1() {\n        availableResources = new LinkedList<>();\n        availableResources.add(\"Resource1\");\n        availableResources.add(\"Resource2\");\n    }\n\n    public static ResourcePoolSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new ResourcePoolSingletonExample1();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return availableResources.poll();\n    }\n\n    public void releaseResource(String resource) {\n        availableResources.add(resource);\n    }\n\n}"
  },
  {
    "type": "ResourcePoolSingleton",
    "input": "public class ResourcePoolSingletonExample2 {\n\n    public ResourcePoolSingletonExample2() {}\n\n}",
    "output": "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class ResourcePoolSingletonExample2 {\n\n    private static ResourcePoolSingletonExample2 instance;\n    private Queue<String> availableResources;\n\n    private ResourcePoolSingletonExample2() {\n        availableResources = new LinkedList<>();\n        availableResources.add(\"Resource1\");\n        availableResources.add(\"Resource2\");\n    }\n\n    public static ResourcePoolSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new ResourcePoolSingletonExample2();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return availableResources.poll();\n    }\n\n    public void releaseResource(String resource) {\n        availableResources.add(resource);\n    }\n\n}"
  },
  {
    "type": "ResourcePoolSingleton",
    "input": "public class ResourcePoolSingletonExample3 {\n\n    public ResourcePoolSingletonExample3() {}\n\n}",
    "output": "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class ResourcePoolSingletonExample3 {\n\n    private static ResourcePoolSingletonExample3 instance;\n    private Queue<String> availableResources;\n\n    private ResourcePoolSingletonExample3() {\n        availableResources = new LinkedList<>();\n        availableResources.add(\"Resource1\");\n        availableResources.add(\"Resource2\");\n    }\n\n    public static ResourcePoolSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new ResourcePoolSingletonExample3();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return availableResources.poll();\n    }\n\n    public void releaseResource(String resource) {\n        availableResources.add(resource);\n    }\n\n}"
  },
  {
    "type": "ResourcePoolSingleton",
    "input": "public class ResourcePoolSingletonExample4 {\n\n    public ResourcePoolSingletonExample4() {}\n\n}",
    "output": "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class ResourcePoolSingletonExample4 {\n\n    private static ResourcePoolSingletonExample4 instance;\n    private Queue<String> availableResources;\n\n    private ResourcePoolSingletonExample4() {\n        availableResources = new LinkedList<>();\n        availableResources.add(\"Resource1\");\n        availableResources.add(\"Resource2\");\n    }\n\n    public static ResourcePoolSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new ResourcePoolSingletonExample4();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return availableResources.poll();\n    }\n\n    public void releaseResource(String resource) {\n        availableResources.add(resource);\n    }\n\n}"
  },
  {
    "type": "ResourcePoolSingleton",
    "input": "public class ResourcePoolSingletonExample5 {\n\n    public ResourcePoolSingletonExample5() {}\n\n}",
    "output": "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class ResourcePoolSingletonExample5 {\n\n    private static ResourcePoolSingletonExample5 instance;\n    private Queue<String> availableResources;\n\n    private ResourcePoolSingletonExample5() {\n        availableResources = new LinkedList<>();\n        availableResources.add(\"Resource1\");\n        availableResources.add(\"Resource2\");\n    }\n\n    public static ResourcePoolSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new ResourcePoolSingletonExample5();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return availableResources.poll();\n    }\n\n    public void releaseResource(String resource) {\n        availableResources.add(resource);\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample1 {\n\n    public SingletonWithMetricsCollectionExample1() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample1 {\n\n    private static SingletonWithMetricsCollectionExample1 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample1() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample1();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n    }\n\n    public List<String> getMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample2 {\n\n    public SingletonWithMetricsCollectionExample2() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample2 {\n\n    private static SingletonWithMetricsCollectionExample2 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample2() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample2();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n    }\n\n    public List<String> getMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample3 {\n\n    public SingletonWithMetricsCollectionExample3() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample3 {\n\n    private static SingletonWithMetricsCollectionExample3 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample3() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample3();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n    }\n\n    public List<String> getMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample4 {\n\n    public SingletonWithMetricsCollectionExample4() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample4 {\n\n    private static SingletonWithMetricsCollectionExample4 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample4() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample4();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n    }\n\n    public List<String> getMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample5 {\n\n    public SingletonWithMetricsCollectionExample5() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample5 {\n\n    private static SingletonWithMetricsCollectionExample5 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample5() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample5();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n    }\n\n    public List<String> getMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "LazyLoadedSingletonWithLogging",
    "input": "public class LazyLoadedSingletonWithLoggingExample1 {\n\n    public LazyLoadedSingletonWithLoggingExample1() {}\n\n}",
    "output": "public class LazyLoadedSingletonWithLoggingExample1 {\n\n    private LazyLoadedSingletonWithLoggingExample1() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    private static class SingletonHolder {\n        private static final LazyLoadedSingletonWithLoggingExample1 INSTANCE = new LazyLoadedSingletonWithLoggingExample1();\n    }\n\n    public static LazyLoadedSingletonWithLoggingExample1 getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "LazyLoadedSingletonWithLogging",
    "input": "public class LazyLoadedSingletonWithLoggingExample2 {\n\n    public LazyLoadedSingletonWithLoggingExample2() {}\n\n}",
    "output": "public class LazyLoadedSingletonWithLoggingExample2 {\n\n    private LazyLoadedSingletonWithLoggingExample2() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    private static class SingletonHolder {\n        private static final LazyLoadedSingletonWithLoggingExample2 INSTANCE = new LazyLoadedSingletonWithLoggingExample2();\n    }\n\n    public static LazyLoadedSingletonWithLoggingExample2 getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "LazyLoadedSingletonWithLogging",
    "input": "public class LazyLoadedSingletonWithLoggingExample3 {\n\n    public LazyLoadedSingletonWithLoggingExample3() {}\n\n}",
    "output": "public class LazyLoadedSingletonWithLoggingExample3 {\n\n    private LazyLoadedSingletonWithLoggingExample3() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    private static class SingletonHolder {\n        private static final LazyLoadedSingletonWithLoggingExample3 INSTANCE = new LazyLoadedSingletonWithLoggingExample3();\n    }\n\n    public static LazyLoadedSingletonWithLoggingExample3 getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "LazyLoadedSingletonWithLogging",
    "input": "public class LazyLoadedSingletonWithLoggingExample4 {\n\n    public LazyLoadedSingletonWithLoggingExample4() {}\n\n}",
    "output": "public class LazyLoadedSingletonWithLoggingExample4 {\n\n    private LazyLoadedSingletonWithLoggingExample4() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    private static class SingletonHolder {\n        private static final LazyLoadedSingletonWithLoggingExample4 INSTANCE = new LazyLoadedSingletonWithLoggingExample4();\n    }\n\n    public static LazyLoadedSingletonWithLoggingExample4 getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "LazyLoadedSingletonWithLogging",
    "input": "public class LazyLoadedSingletonWithLoggingExample5 {\n\n    public LazyLoadedSingletonWithLoggingExample5() {}\n\n}",
    "output": "public class LazyLoadedSingletonWithLoggingExample5 {\n\n    private LazyLoadedSingletonWithLoggingExample5() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    private static class SingletonHolder {\n        private static final LazyLoadedSingletonWithLoggingExample5 INSTANCE = new LazyLoadedSingletonWithLoggingExample5();\n    }\n\n    public static LazyLoadedSingletonWithLoggingExample5 getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "PriorityBasedSingleton",
    "input": "public class PriorityBasedSingletonExample1 {\n\n    public PriorityBasedSingletonExample1() {}\n\n}",
    "output": "import java.util.PriorityQueue;\n\npublic class PriorityBasedSingletonExample1 {\n\n    private static PriorityBasedSingletonExample1 instance;\n    private PriorityQueue<Integer> priorityQueue;\n\n    private PriorityBasedSingletonExample1() {\n        priorityQueue = new PriorityQueue<>();\n    }\n\n    public static PriorityBasedSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new PriorityBasedSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void addPriority(int priority) {\n        priorityQueue.add(priority);\n    }\n\n    public int getHighestPriority() {\n        return priorityQueue.poll();\n    }\n\n}"
  },
  {
    "type": "PriorityBasedSingleton",
    "input": "public class PriorityBasedSingletonExample2 {\n\n    public PriorityBasedSingletonExample2() {}\n\n}",
    "output": "import java.util.PriorityQueue;\n\npublic class PriorityBasedSingletonExample2 {\n\n    private static PriorityBasedSingletonExample2 instance;\n    private PriorityQueue<Integer> priorityQueue;\n\n    private PriorityBasedSingletonExample2() {\n        priorityQueue = new PriorityQueue<>();\n    }\n\n    public static PriorityBasedSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new PriorityBasedSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void addPriority(int priority) {\n        priorityQueue.add(priority);\n    }\n\n    public int getHighestPriority() {\n        return priorityQueue.poll();\n    }\n\n}"
  },
  {
    "type": "PriorityBasedSingleton",
    "input": "public class PriorityBasedSingletonExample3 {\n\n    public PriorityBasedSingletonExample3() {}\n\n}",
    "output": "import java.util.PriorityQueue;\n\npublic class PriorityBasedSingletonExample3 {\n\n    private static PriorityBasedSingletonExample3 instance;\n    private PriorityQueue<Integer> priorityQueue;\n\n    private PriorityBasedSingletonExample3() {\n        priorityQueue = new PriorityQueue<>();\n    }\n\n    public static PriorityBasedSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new PriorityBasedSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void addPriority(int priority) {\n        priorityQueue.add(priority);\n    }\n\n    public int getHighestPriority() {\n        return priorityQueue.poll();\n    }\n\n}"
  },
  {
    "type": "PriorityBasedSingleton",
    "input": "public class PriorityBasedSingletonExample4 {\n\n    public PriorityBasedSingletonExample4() {}\n\n}",
    "output": "import java.util.PriorityQueue;\n\npublic class PriorityBasedSingletonExample4 {\n\n    private static PriorityBasedSingletonExample4 instance;\n    private PriorityQueue<Integer> priorityQueue;\n\n    private PriorityBasedSingletonExample4() {\n        priorityQueue = new PriorityQueue<>();\n    }\n\n    public static PriorityBasedSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new PriorityBasedSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void addPriority(int priority) {\n        priorityQueue.add(priority);\n    }\n\n    public int getHighestPriority() {\n        return priorityQueue.poll();\n    }\n\n}"
  },
  {
    "type": "PriorityBasedSingleton",
    "input": "public class PriorityBasedSingletonExample5 {\n\n    public PriorityBasedSingletonExample5() {}\n\n}",
    "output": "import java.util.PriorityQueue;\n\npublic class PriorityBasedSingletonExample5 {\n\n    private static PriorityBasedSingletonExample5 instance;\n    private PriorityQueue<Integer> priorityQueue;\n\n    private PriorityBasedSingletonExample5() {\n        priorityQueue = new PriorityQueue<>();\n    }\n\n    public static PriorityBasedSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new PriorityBasedSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void addPriority(int priority) {\n        priorityQueue.add(priority);\n    }\n\n    public int getHighestPriority() {\n        return priorityQueue.poll();\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithOnDemandInitialization",
    "input": "public class LazySingletonWithOnDemandInitializationExample1 {\n\n    public LazySingletonWithOnDemandInitializationExample1() {}\n\n}",
    "output": "public class LazySingletonWithOnDemandInitializationExample1 {\n\n    private static LazySingletonWithOnDemandInitializationExample1 instance;\n\n    private LazySingletonWithOnDemandInitializationExample1() {}\n\n    public static LazySingletonWithOnDemandInitializationExample1 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithOnDemandInitializationExample1();\n        }\n        return instance;\n    }\n\n    public String fetchData() {\n        return \"Fetched on-demand data\";\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithOnDemandInitialization",
    "input": "public class LazySingletonWithOnDemandInitializationExample2 {\n\n    public LazySingletonWithOnDemandInitializationExample2() {}\n\n}",
    "output": "public class LazySingletonWithOnDemandInitializationExample2 {\n\n    private static LazySingletonWithOnDemandInitializationExample2 instance;\n\n    private LazySingletonWithOnDemandInitializationExample2() {}\n\n    public static LazySingletonWithOnDemandInitializationExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithOnDemandInitializationExample2();\n        }\n        return instance;\n    }\n\n    public String fetchData() {\n        return \"Fetched on-demand data\";\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithOnDemandInitialization",
    "input": "public class LazySingletonWithOnDemandInitializationExample3 {\n\n    public LazySingletonWithOnDemandInitializationExample3() {}\n\n}",
    "output": "public class LazySingletonWithOnDemandInitializationExample3 {\n\n    private static LazySingletonWithOnDemandInitializationExample3 instance;\n\n    private LazySingletonWithOnDemandInitializationExample3() {}\n\n    public static LazySingletonWithOnDemandInitializationExample3 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithOnDemandInitializationExample3();\n        }\n        return instance;\n    }\n\n    public String fetchData() {\n        return \"Fetched on-demand data\";\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithOnDemandInitialization",
    "input": "public class LazySingletonWithOnDemandInitializationExample4 {\n\n    public LazySingletonWithOnDemandInitializationExample4() {}\n\n}",
    "output": "public class LazySingletonWithOnDemandInitializationExample4 {\n\n    private static LazySingletonWithOnDemandInitializationExample4 instance;\n\n    private LazySingletonWithOnDemandInitializationExample4() {}\n\n    public static LazySingletonWithOnDemandInitializationExample4 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithOnDemandInitializationExample4();\n        }\n        return instance;\n    }\n\n    public String fetchData() {\n        return \"Fetched on-demand data\";\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithOnDemandInitialization",
    "input": "public class LazySingletonWithOnDemandInitializationExample5 {\n\n    public LazySingletonWithOnDemandInitializationExample5() {}\n\n}",
    "output": "public class LazySingletonWithOnDemandInitializationExample5 {\n\n    private static LazySingletonWithOnDemandInitializationExample5 instance;\n\n    private LazySingletonWithOnDemandInitializationExample5() {}\n\n    public static LazySingletonWithOnDemandInitializationExample5 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithOnDemandInitializationExample5();\n        }\n        return instance;\n    }\n\n    public String fetchData() {\n        return \"Fetched on-demand data\";\n    }\n\n}"
  },
  {
    "type": "SingletonWithLifecycleHooks",
    "input": "public class SingletonWithLifecycleHooksExample1 {\n\n    public SingletonWithLifecycleHooksExample1() {}\n\n}",
    "output": "public class SingletonWithLifecycleHooksExample1 {\n\n    private static SingletonWithLifecycleHooksExample1 instance;\n\n    private SingletonWithLifecycleHooksExample1() {\n        onCreate();\n    }\n\n    public static SingletonWithLifecycleHooksExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithLifecycleHooksExample1();\n        }\n        return instance;\n    }\n\n    private void onCreate() {\n        System.out.println(\"SingletonWithLifecycleHooksExample1 created\");\n    }\n\n    public void onDestroy() {\n        System.out.println(\"SingletonWithLifecycleHooksExample1 destroyed\");\n        instance = null;\n    }\n\n}"
  },
  {
    "type": "SingletonWithLifecycleHooks",
    "input": "public class SingletonWithLifecycleHooksExample2 {\n\n    public SingletonWithLifecycleHooksExample2() {}\n\n}",
    "output": "public class SingletonWithLifecycleHooksExample2 {\n\n    private static SingletonWithLifecycleHooksExample2 instance;\n\n    private SingletonWithLifecycleHooksExample2() {\n        onCreate();\n    }\n\n    public static SingletonWithLifecycleHooksExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithLifecycleHooksExample2();\n        }\n        return instance;\n    }\n\n    private void onCreate() {\n        System.out.println(\"SingletonWithLifecycleHooksExample2 created\");\n    }\n\n    public void onDestroy() {\n        System.out.println(\"SingletonWithLifecycleHooksExample2 destroyed\");\n        instance = null;\n    }\n\n}"
  },
  {
    "type": "SingletonWithLifecycleHooks",
    "input": "public class SingletonWithLifecycleHooksExample3 {\n\n    public SingletonWithLifecycleHooksExample3() {}\n\n}",
    "output": "public class SingletonWithLifecycleHooksExample3 {\n\n    private static SingletonWithLifecycleHooksExample3 instance;\n\n    private SingletonWithLifecycleHooksExample3() {\n        onCreate();\n    }\n\n    public static SingletonWithLifecycleHooksExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithLifecycleHooksExample3();\n        }\n        return instance;\n    }\n\n    private void onCreate() {\n        System.out.println(\"SingletonWithLifecycleHooksExample3 created\");\n    }\n\n    public void onDestroy() {\n        System.out.println(\"SingletonWithLifecycleHooksExample3 destroyed\");\n        instance = null;\n    }\n\n}"
  },
  {
    "type": "SingletonWithLifecycleHooks",
    "input": "public class SingletonWithLifecycleHooksExample4 {\n\n    public SingletonWithLifecycleHooksExample4() {}\n\n}",
    "output": "public class SingletonWithLifecycleHooksExample4 {\n\n    private static SingletonWithLifecycleHooksExample4 instance;\n\n    private SingletonWithLifecycleHooksExample4() {\n        onCreate();\n    }\n\n    public static SingletonWithLifecycleHooksExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithLifecycleHooksExample4();\n        }\n        return instance;\n    }\n\n    private void onCreate() {\n        System.out.println(\"SingletonWithLifecycleHooksExample4 created\");\n    }\n\n    public void onDestroy() {\n        System.out.println(\"SingletonWithLifecycleHooksExample4 destroyed\");\n        instance = null;\n    }\n\n}"
  },
  {
    "type": "SingletonWithLifecycleHooks",
    "input": "public class SingletonWithLifecycleHooksExample5 {\n\n    public SingletonWithLifecycleHooksExample5() {}\n\n}",
    "output": "public class SingletonWithLifecycleHooksExample5 {\n\n    private static SingletonWithLifecycleHooksExample5 instance;\n\n    private SingletonWithLifecycleHooksExample5() {\n        onCreate();\n    }\n\n    public static SingletonWithLifecycleHooksExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithLifecycleHooksExample5();\n        }\n        return instance;\n    }\n\n    private void onCreate() {\n        System.out.println(\"SingletonWithLifecycleHooksExample5 created\");\n    }\n\n    public void onDestroy() {\n        System.out.println(\"SingletonWithLifecycleHooksExample5 destroyed\");\n        instance = null;\n    }\n\n}"
  },
  {
    "type": "LoggingManagerSingleton",
    "input": "public class LoggingManagerSingletonExample1 {\n\n    public LoggingManagerSingletonExample1() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggingManagerSingletonExample1 {\n\n    private static LoggingManagerSingletonExample1 instance;\n    private FileWriter fileWriter;\n\n    private LoggingManagerSingletonExample1() {\n        try {\n            fileWriter = new FileWriter(\"logfile.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggingManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new LoggingManagerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void logMessage(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "LoggingManagerSingleton",
    "input": "public class LoggingManagerSingletonExample2 {\n\n    public LoggingManagerSingletonExample2() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggingManagerSingletonExample2 {\n\n    private static LoggingManagerSingletonExample2 instance;\n    private FileWriter fileWriter;\n\n    private LoggingManagerSingletonExample2() {\n        try {\n            fileWriter = new FileWriter(\"logfile.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggingManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new LoggingManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void logMessage(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "LoggingManagerSingleton",
    "input": "public class LoggingManagerSingletonExample3 {\n\n    public LoggingManagerSingletonExample3() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggingManagerSingletonExample3 {\n\n    private static LoggingManagerSingletonExample3 instance;\n    private FileWriter fileWriter;\n\n    private LoggingManagerSingletonExample3() {\n        try {\n            fileWriter = new FileWriter(\"logfile.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggingManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new LoggingManagerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void logMessage(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "LoggingManagerSingleton",
    "input": "public class LoggingManagerSingletonExample4 {\n\n    public LoggingManagerSingletonExample4() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggingManagerSingletonExample4 {\n\n    private static LoggingManagerSingletonExample4 instance;\n    private FileWriter fileWriter;\n\n    private LoggingManagerSingletonExample4() {\n        try {\n            fileWriter = new FileWriter(\"logfile.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggingManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new LoggingManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void logMessage(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "LoggingManagerSingleton",
    "input": "public class LoggingManagerSingletonExample5 {\n\n    public LoggingManagerSingletonExample5() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggingManagerSingletonExample5 {\n\n    private static LoggingManagerSingletonExample5 instance;\n    private FileWriter fileWriter;\n\n    private LoggingManagerSingletonExample5() {\n        try {\n            fileWriter = new FileWriter(\"logfile.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggingManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new LoggingManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void logMessage(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "ResourceTrackerSingleton",
    "input": "public class ResourceTrackerSingletonExample1 {\n\n    public ResourceTrackerSingletonExample1() {}\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class ResourceTrackerSingletonExample1 {\n\n    private static ResourceTrackerSingletonExample1 instance;\n    private Set<String> trackedResources;\n\n    private ResourceTrackerSingletonExample1() {\n        trackedResources = new HashSet<>();\n    }\n\n    public static ResourceTrackerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new ResourceTrackerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void track(String resource) {\n        trackedResources.add(resource);\n        System.out.println(\"Tracking: \" + resource);\n    }\n\n    public boolean isTracked(String resource) {\n        return trackedResources.contains(resource);\n    }\n\n}"
  },
  {
    "type": "ResourceTrackerSingleton",
    "input": "public class ResourceTrackerSingletonExample2 {\n\n    public ResourceTrackerSingletonExample2() {}\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class ResourceTrackerSingletonExample2 {\n\n    private static ResourceTrackerSingletonExample2 instance;\n    private Set<String> trackedResources;\n\n    private ResourceTrackerSingletonExample2() {\n        trackedResources = new HashSet<>();\n    }\n\n    public static ResourceTrackerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new ResourceTrackerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void track(String resource) {\n        trackedResources.add(resource);\n        System.out.println(\"Tracking: \" + resource);\n    }\n\n    public boolean isTracked(String resource) {\n        return trackedResources.contains(resource);\n    }\n\n}"
  },
  {
    "type": "ResourceTrackerSingleton",
    "input": "public class ResourceTrackerSingletonExample3 {\n\n    public ResourceTrackerSingletonExample3() {}\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class ResourceTrackerSingletonExample3 {\n\n    private static ResourceTrackerSingletonExample3 instance;\n    private Set<String> trackedResources;\n\n    private ResourceTrackerSingletonExample3() {\n        trackedResources = new HashSet<>();\n    }\n\n    public static ResourceTrackerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new ResourceTrackerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void track(String resource) {\n        trackedResources.add(resource);\n        System.out.println(\"Tracking: \" + resource);\n    }\n\n    public boolean isTracked(String resource) {\n        return trackedResources.contains(resource);\n    }\n\n}"
  },
  {
    "type": "ResourceTrackerSingleton",
    "input": "public class ResourceTrackerSingletonExample4 {\n\n    public ResourceTrackerSingletonExample4() {}\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class ResourceTrackerSingletonExample4 {\n\n    private static ResourceTrackerSingletonExample4 instance;\n    private Set<String> trackedResources;\n\n    private ResourceTrackerSingletonExample4() {\n        trackedResources = new HashSet<>();\n    }\n\n    public static ResourceTrackerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new ResourceTrackerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void track(String resource) {\n        trackedResources.add(resource);\n        System.out.println(\"Tracking: \" + resource);\n    }\n\n    public boolean isTracked(String resource) {\n        return trackedResources.contains(resource);\n    }\n\n}"
  },
  {
    "type": "ResourceTrackerSingleton",
    "input": "public class ResourceTrackerSingletonExample5 {\n\n    public ResourceTrackerSingletonExample5() {}\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class ResourceTrackerSingletonExample5 {\n\n    private static ResourceTrackerSingletonExample5 instance;\n    private Set<String> trackedResources;\n\n    private ResourceTrackerSingletonExample5() {\n        trackedResources = new HashSet<>();\n    }\n\n    public static ResourceTrackerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new ResourceTrackerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void track(String resource) {\n        trackedResources.add(resource);\n        System.out.println(\"Tracking: \" + resource);\n    }\n\n    public boolean isTracked(String resource) {\n        return trackedResources.contains(resource);\n    }\n\n}"
  },
  {
    "type": "TaskQueueSingleton",
    "input": "public class TaskQueueSingletonExample1 {\n\n    public TaskQueueSingletonExample1() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class TaskQueueSingletonExample1 {\n\n    private static TaskQueueSingletonExample1 instance;\n    private Queue<String> tasks;\n\n    private TaskQueueSingletonExample1() {\n        tasks = new LinkedList<>();\n    }\n\n    public static TaskQueueSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new TaskQueueSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        tasks.add(task);\n    }\n\n    public String getNextTask() {\n        return tasks.poll();\n    }\n\n}"
  },
  {
    "type": "TaskQueueSingleton",
    "input": "public class TaskQueueSingletonExample2 {\n\n    public TaskQueueSingletonExample2() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class TaskQueueSingletonExample2 {\n\n    private static TaskQueueSingletonExample2 instance;\n    private Queue<String> tasks;\n\n    private TaskQueueSingletonExample2() {\n        tasks = new LinkedList<>();\n    }\n\n    public static TaskQueueSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new TaskQueueSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        tasks.add(task);\n    }\n\n    public String getNextTask() {\n        return tasks.poll();\n    }\n\n}"
  },
  {
    "type": "TaskQueueSingleton",
    "input": "public class TaskQueueSingletonExample3 {\n\n    public TaskQueueSingletonExample3() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class TaskQueueSingletonExample3 {\n\n    private static TaskQueueSingletonExample3 instance;\n    private Queue<String> tasks;\n\n    private TaskQueueSingletonExample3() {\n        tasks = new LinkedList<>();\n    }\n\n    public static TaskQueueSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new TaskQueueSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        tasks.add(task);\n    }\n\n    public String getNextTask() {\n        return tasks.poll();\n    }\n\n}"
  },
  {
    "type": "TaskQueueSingleton",
    "input": "public class TaskQueueSingletonExample4 {\n\n    public TaskQueueSingletonExample4() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class TaskQueueSingletonExample4 {\n\n    private static TaskQueueSingletonExample4 instance;\n    private Queue<String> tasks;\n\n    private TaskQueueSingletonExample4() {\n        tasks = new LinkedList<>();\n    }\n\n    public static TaskQueueSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new TaskQueueSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        tasks.add(task);\n    }\n\n    public String getNextTask() {\n        return tasks.poll();\n    }\n\n}"
  },
  {
    "type": "TaskQueueSingleton",
    "input": "public class TaskQueueSingletonExample5 {\n\n    public TaskQueueSingletonExample5() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class TaskQueueSingletonExample5 {\n\n    private static TaskQueueSingletonExample5 instance;\n    private Queue<String> tasks;\n\n    private TaskQueueSingletonExample5() {\n        tasks = new LinkedList<>();\n    }\n\n    public static TaskQueueSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new TaskQueueSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        tasks.add(task);\n    }\n\n    public String getNextTask() {\n        return tasks.poll();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalLoggerSingleton",
    "input": "public class ThreadLocalLoggerSingletonExample1 {\n\n    public ThreadLocalLoggerSingletonExample1() {}\n\n}",
    "output": "public class ThreadLocalLoggerSingletonExample1 {\n\n    private static final ThreadLocal<ThreadLocalLoggerSingletonExample1> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalLoggerSingletonExample1::new);\n\n    private ThreadLocalLoggerSingletonExample1() {}\n\n    public static ThreadLocalLoggerSingletonExample1 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public void log(String message) {\n        System.out.println(Thread.currentThread().getName() + \": \" + message);\n    }\n\n}"
  },
  {
    "type": "ThreadLocalLoggerSingleton",
    "input": "public class ThreadLocalLoggerSingletonExample2 {\n\n    public ThreadLocalLoggerSingletonExample2() {}\n\n}",
    "output": "public class ThreadLocalLoggerSingletonExample2 {\n\n    private static final ThreadLocal<ThreadLocalLoggerSingletonExample2> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalLoggerSingletonExample2::new);\n\n    private ThreadLocalLoggerSingletonExample2() {}\n\n    public static ThreadLocalLoggerSingletonExample2 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public void log(String message) {\n        System.out.println(Thread.currentThread().getName() + \": \" + message);\n    }\n\n}"
  },
  {
    "type": "ThreadLocalLoggerSingleton",
    "input": "public class ThreadLocalLoggerSingletonExample3 {\n\n    public ThreadLocalLoggerSingletonExample3() {}\n\n}",
    "output": "public class ThreadLocalLoggerSingletonExample3 {\n\n    private static final ThreadLocal<ThreadLocalLoggerSingletonExample3> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalLoggerSingletonExample3::new);\n\n    private ThreadLocalLoggerSingletonExample3() {}\n\n    public static ThreadLocalLoggerSingletonExample3 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public void log(String message) {\n        System.out.println(Thread.currentThread().getName() + \": \" + message);\n    }\n\n}"
  },
  {
    "type": "ThreadLocalLoggerSingleton",
    "input": "public class ThreadLocalLoggerSingletonExample4 {\n\n    public ThreadLocalLoggerSingletonExample4() {}\n\n}",
    "output": "public class ThreadLocalLoggerSingletonExample4 {\n\n    private static final ThreadLocal<ThreadLocalLoggerSingletonExample4> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalLoggerSingletonExample4::new);\n\n    private ThreadLocalLoggerSingletonExample4() {}\n\n    public static ThreadLocalLoggerSingletonExample4 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public void log(String message) {\n        System.out.println(Thread.currentThread().getName() + \": \" + message);\n    }\n\n}"
  },
  {
    "type": "ThreadLocalLoggerSingleton",
    "input": "public class ThreadLocalLoggerSingletonExample5 {\n\n    public ThreadLocalLoggerSingletonExample5() {}\n\n}",
    "output": "public class ThreadLocalLoggerSingletonExample5 {\n\n    private static final ThreadLocal<ThreadLocalLoggerSingletonExample5> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalLoggerSingletonExample5::new);\n\n    private ThreadLocalLoggerSingletonExample5() {}\n\n    public static ThreadLocalLoggerSingletonExample5 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public void log(String message) {\n        System.out.println(Thread.currentThread().getName() + \": \" + message);\n    }\n\n}"
  },
  {
    "type": "ConfigurationCacheSingleton",
    "input": "public class ConfigurationCacheSingletonExample1 {\n\n    public ConfigurationCacheSingletonExample1() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ConfigurationCacheSingletonExample1 {\n\n    private static ConfigurationCacheSingletonExample1 instance;\n    private Map<String, String> cache;\n\n    private ConfigurationCacheSingletonExample1() {\n        cache = new HashMap<>();\n    }\n\n    public static ConfigurationCacheSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationCacheSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "ConfigurationCacheSingleton",
    "input": "public class ConfigurationCacheSingletonExample2 {\n\n    public ConfigurationCacheSingletonExample2() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ConfigurationCacheSingletonExample2 {\n\n    private static ConfigurationCacheSingletonExample2 instance;\n    private Map<String, String> cache;\n\n    private ConfigurationCacheSingletonExample2() {\n        cache = new HashMap<>();\n    }\n\n    public static ConfigurationCacheSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationCacheSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "ConfigurationCacheSingleton",
    "input": "public class ConfigurationCacheSingletonExample3 {\n\n    public ConfigurationCacheSingletonExample3() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ConfigurationCacheSingletonExample3 {\n\n    private static ConfigurationCacheSingletonExample3 instance;\n    private Map<String, String> cache;\n\n    private ConfigurationCacheSingletonExample3() {\n        cache = new HashMap<>();\n    }\n\n    public static ConfigurationCacheSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationCacheSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "ConfigurationCacheSingleton",
    "input": "public class ConfigurationCacheSingletonExample4 {\n\n    public ConfigurationCacheSingletonExample4() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ConfigurationCacheSingletonExample4 {\n\n    private static ConfigurationCacheSingletonExample4 instance;\n    private Map<String, String> cache;\n\n    private ConfigurationCacheSingletonExample4() {\n        cache = new HashMap<>();\n    }\n\n    public static ConfigurationCacheSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationCacheSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "ConfigurationCacheSingleton",
    "input": "public class ConfigurationCacheSingletonExample5 {\n\n    public ConfigurationCacheSingletonExample5() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ConfigurationCacheSingletonExample5 {\n\n    private static ConfigurationCacheSingletonExample5 instance;\n    private Map<String, String> cache;\n\n    private ConfigurationCacheSingletonExample5() {\n        cache = new HashMap<>();\n    }\n\n    public static ConfigurationCacheSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationCacheSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "EventDispatcherSingleton",
    "input": "public class EventDispatcherSingletonExample1 {\n\n    public EventDispatcherSingletonExample1() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EventDispatcherSingletonExample1 {\n\n    private static EventDispatcherSingletonExample1 instance;\n    private List<String> events;\n\n    private EventDispatcherSingletonExample1() {\n        events = new ArrayList<>();\n    }\n\n    public static EventDispatcherSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new EventDispatcherSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void dispatch(String event) {\n        events.add(event);\n        System.out.println(\"Event dispatched: \" + event);\n    }\n\n    public List<String> getDispatchedEvents() {\n        return events;\n    }\n\n}"
  },
  {
    "type": "EventDispatcherSingleton",
    "input": "public class EventDispatcherSingletonExample2 {\n\n    public EventDispatcherSingletonExample2() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EventDispatcherSingletonExample2 {\n\n    private static EventDispatcherSingletonExample2 instance;\n    private List<String> events;\n\n    private EventDispatcherSingletonExample2() {\n        events = new ArrayList<>();\n    }\n\n    public static EventDispatcherSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new EventDispatcherSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void dispatch(String event) {\n        events.add(event);\n        System.out.println(\"Event dispatched: \" + event);\n    }\n\n    public List<String> getDispatchedEvents() {\n        return events;\n    }\n\n}"
  },
  {
    "type": "EventDispatcherSingleton",
    "input": "public class EventDispatcherSingletonExample3 {\n\n    public EventDispatcherSingletonExample3() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EventDispatcherSingletonExample3 {\n\n    private static EventDispatcherSingletonExample3 instance;\n    private List<String> events;\n\n    private EventDispatcherSingletonExample3() {\n        events = new ArrayList<>();\n    }\n\n    public static EventDispatcherSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new EventDispatcherSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void dispatch(String event) {\n        events.add(event);\n        System.out.println(\"Event dispatched: \" + event);\n    }\n\n    public List<String> getDispatchedEvents() {\n        return events;\n    }\n\n}"
  },
  {
    "type": "EventDispatcherSingleton",
    "input": "public class EventDispatcherSingletonExample4 {\n\n    public EventDispatcherSingletonExample4() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EventDispatcherSingletonExample4 {\n\n    private static EventDispatcherSingletonExample4 instance;\n    private List<String> events;\n\n    private EventDispatcherSingletonExample4() {\n        events = new ArrayList<>();\n    }\n\n    public static EventDispatcherSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new EventDispatcherSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void dispatch(String event) {\n        events.add(event);\n        System.out.println(\"Event dispatched: \" + event);\n    }\n\n    public List<String> getDispatchedEvents() {\n        return events;\n    }\n\n}"
  },
  {
    "type": "EventDispatcherSingleton",
    "input": "public class EventDispatcherSingletonExample5 {\n\n    public EventDispatcherSingletonExample5() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EventDispatcherSingletonExample5 {\n\n    private static EventDispatcherSingletonExample5 instance;\n    private List<String> events;\n\n    private EventDispatcherSingletonExample5() {\n        events = new ArrayList<>();\n    }\n\n    public static EventDispatcherSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new EventDispatcherSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void dispatch(String event) {\n        events.add(event);\n        System.out.println(\"Event dispatched: \" + event);\n    }\n\n    public List<String> getDispatchedEvents() {\n        return events;\n    }\n\n}"
  },
  {
    "type": "UserManagerSingleton",
    "input": "public class UserManagerSingletonExample1 {\n\n    public UserManagerSingletonExample1() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class UserManagerSingletonExample1 {\n\n    private static UserManagerSingletonExample1 instance;\n    private Map<String, String> users;\n\n    private UserManagerSingletonExample1() {\n        users = new HashMap<>();\n    }\n\n    public static UserManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new UserManagerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void addUser(String id, String name) {\n        users.put(id, name);\n    }\n\n    public String getUser(String id) {\n        return users.get(id);\n    }\n\n}"
  },
  {
    "type": "UserManagerSingleton",
    "input": "public class UserManagerSingletonExample2 {\n\n    public UserManagerSingletonExample2() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class UserManagerSingletonExample2 {\n\n    private static UserManagerSingletonExample2 instance;\n    private Map<String, String> users;\n\n    private UserManagerSingletonExample2() {\n        users = new HashMap<>();\n    }\n\n    public static UserManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new UserManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void addUser(String id, String name) {\n        users.put(id, name);\n    }\n\n    public String getUser(String id) {\n        return users.get(id);\n    }\n\n}"
  },
  {
    "type": "UserManagerSingleton",
    "input": "public class UserManagerSingletonExample3 {\n\n    public UserManagerSingletonExample3() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class UserManagerSingletonExample3 {\n\n    private static UserManagerSingletonExample3 instance;\n    private Map<String, String> users;\n\n    private UserManagerSingletonExample3() {\n        users = new HashMap<>();\n    }\n\n    public static UserManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new UserManagerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void addUser(String id, String name) {\n        users.put(id, name);\n    }\n\n    public String getUser(String id) {\n        return users.get(id);\n    }\n\n}"
  },
  {
    "type": "UserManagerSingleton",
    "input": "public class UserManagerSingletonExample4 {\n\n    public UserManagerSingletonExample4() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class UserManagerSingletonExample4 {\n\n    private static UserManagerSingletonExample4 instance;\n    private Map<String, String> users;\n\n    private UserManagerSingletonExample4() {\n        users = new HashMap<>();\n    }\n\n    public static UserManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new UserManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void addUser(String id, String name) {\n        users.put(id, name);\n    }\n\n    public String getUser(String id) {\n        return users.get(id);\n    }\n\n}"
  },
  {
    "type": "UserManagerSingleton",
    "input": "public class UserManagerSingletonExample5 {\n\n    public UserManagerSingletonExample5() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class UserManagerSingletonExample5 {\n\n    private static UserManagerSingletonExample5 instance;\n    private Map<String, String> users;\n\n    private UserManagerSingletonExample5() {\n        users = new HashMap<>();\n    }\n\n    public static UserManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new UserManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void addUser(String id, String name) {\n        users.put(id, name);\n    }\n\n    public String getUser(String id) {\n        return users.get(id);\n    }\n\n}"
  },
  {
    "type": "StatefulLoggerSingleton",
    "input": "public class StatefulLoggerSingletonExample1 {\n\n    public StatefulLoggerSingletonExample1() {}\n\n}",
    "output": "public class StatefulLoggerSingletonExample1 {\n\n    private static StatefulLoggerSingletonExample1 instance;\n    private int logCount;\n\n    private StatefulLoggerSingletonExample1() {\n        logCount = 0;\n    }\n\n    public static StatefulLoggerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new StatefulLoggerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        logCount++;\n        System.out.println(logCount + \": \" + message);\n    }\n\n    public int getLogCount() {\n        return logCount;\n    }\n\n}"
  },
  {
    "type": "StatefulLoggerSingleton",
    "input": "public class StatefulLoggerSingletonExample2 {\n\n    public StatefulLoggerSingletonExample2() {}\n\n}",
    "output": "public class StatefulLoggerSingletonExample2 {\n\n    private static StatefulLoggerSingletonExample2 instance;\n    private int logCount;\n\n    private StatefulLoggerSingletonExample2() {\n        logCount = 0;\n    }\n\n    public static StatefulLoggerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new StatefulLoggerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        logCount++;\n        System.out.println(logCount + \": \" + message);\n    }\n\n    public int getLogCount() {\n        return logCount;\n    }\n\n}"
  },
  {
    "type": "StatefulLoggerSingleton",
    "input": "public class StatefulLoggerSingletonExample3 {\n\n    public StatefulLoggerSingletonExample3() {}\n\n}",
    "output": "public class StatefulLoggerSingletonExample3 {\n\n    private static StatefulLoggerSingletonExample3 instance;\n    private int logCount;\n\n    private StatefulLoggerSingletonExample3() {\n        logCount = 0;\n    }\n\n    public static StatefulLoggerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new StatefulLoggerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        logCount++;\n        System.out.println(logCount + \": \" + message);\n    }\n\n    public int getLogCount() {\n        return logCount;\n    }\n\n}"
  },
  {
    "type": "StatefulLoggerSingleton",
    "input": "public class StatefulLoggerSingletonExample4 {\n\n    public StatefulLoggerSingletonExample4() {}\n\n}",
    "output": "public class StatefulLoggerSingletonExample4 {\n\n    private static StatefulLoggerSingletonExample4 instance;\n    private int logCount;\n\n    private StatefulLoggerSingletonExample4() {\n        logCount = 0;\n    }\n\n    public static StatefulLoggerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new StatefulLoggerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        logCount++;\n        System.out.println(logCount + \": \" + message);\n    }\n\n    public int getLogCount() {\n        return logCount;\n    }\n\n}"
  },
  {
    "type": "StatefulLoggerSingleton",
    "input": "public class StatefulLoggerSingletonExample5 {\n\n    public StatefulLoggerSingletonExample5() {}\n\n}",
    "output": "public class StatefulLoggerSingletonExample5 {\n\n    private static StatefulLoggerSingletonExample5 instance;\n    private int logCount;\n\n    private StatefulLoggerSingletonExample5() {\n        logCount = 0;\n    }\n\n    public static StatefulLoggerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new StatefulLoggerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        logCount++;\n        System.out.println(logCount + \": \" + message);\n    }\n\n    public int getLogCount() {\n        return logCount;\n    }\n\n}"
  },
  {
    "type": "NotificationManagerSingleton",
    "input": "public class NotificationManagerSingletonExample1 {\n\n    public NotificationManagerSingletonExample1() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationManagerSingletonExample1 {\n\n    private static NotificationManagerSingletonExample1 instance;\n    private List<String> notifications;\n\n    private NotificationManagerSingletonExample1() {\n        notifications = new ArrayList<>();\n    }\n\n    public static NotificationManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new NotificationManagerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void notify(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}"
  },
  {
    "type": "NotificationManagerSingleton",
    "input": "public class NotificationManagerSingletonExample2 {\n\n    public NotificationManagerSingletonExample2() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationManagerSingletonExample2 {\n\n    private static NotificationManagerSingletonExample2 instance;\n    private List<String> notifications;\n\n    private NotificationManagerSingletonExample2() {\n        notifications = new ArrayList<>();\n    }\n\n    public static NotificationManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new NotificationManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void notify(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}"
  },
  {
    "type": "NotificationManagerSingleton",
    "input": "public class NotificationManagerSingletonExample3 {\n\n    public NotificationManagerSingletonExample3() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationManagerSingletonExample3 {\n\n    private static NotificationManagerSingletonExample3 instance;\n    private List<String> notifications;\n\n    private NotificationManagerSingletonExample3() {\n        notifications = new ArrayList<>();\n    }\n\n    public static NotificationManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new NotificationManagerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void notify(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}"
  },
  {
    "type": "NotificationManagerSingleton",
    "input": "public class NotificationManagerSingletonExample4 {\n\n    public NotificationManagerSingletonExample4() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationManagerSingletonExample4 {\n\n    private static NotificationManagerSingletonExample4 instance;\n    private List<String> notifications;\n\n    private NotificationManagerSingletonExample4() {\n        notifications = new ArrayList<>();\n    }\n\n    public static NotificationManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new NotificationManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void notify(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}"
  },
  {
    "type": "NotificationManagerSingleton",
    "input": "public class NotificationManagerSingletonExample5 {\n\n    public NotificationManagerSingletonExample5() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationManagerSingletonExample5 {\n\n    private static NotificationManagerSingletonExample5 instance;\n    private List<String> notifications;\n\n    private NotificationManagerSingletonExample5() {\n        notifications = new ArrayList<>();\n    }\n\n    public static NotificationManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new NotificationManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void notify(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithRetry",
    "input": "public class LazySingletonWithRetryExample1 {\n\n    public LazySingletonWithRetryExample1() {}\n\n}",
    "output": "public class LazySingletonWithRetryExample1 {\n\n    private static LazySingletonWithRetryExample1 instance;\n    private int retryCount;\n\n    private LazySingletonWithRetryExample1() {\n        retryCount = 0;\n    }\n\n    public static LazySingletonWithRetryExample1 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithRetryExample1();\n        }\n        return instance;\n    }\n\n    public void retry(String task) {\n        retryCount++;\n        System.out.println(\"Retrying task: \" + task + \" - Retry Count: \" + retryCount);\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithRetry",
    "input": "public class LazySingletonWithRetryExample2 {\n\n    public LazySingletonWithRetryExample2() {}\n\n}",
    "output": "public class LazySingletonWithRetryExample2 {\n\n    private static LazySingletonWithRetryExample2 instance;\n    private int retryCount;\n\n    private LazySingletonWithRetryExample2() {\n        retryCount = 0;\n    }\n\n    public static LazySingletonWithRetryExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithRetryExample2();\n        }\n        return instance;\n    }\n\n    public void retry(String task) {\n        retryCount++;\n        System.out.println(\"Retrying task: \" + task + \" - Retry Count: \" + retryCount);\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithRetry",
    "input": "public class LazySingletonWithRetryExample3 {\n\n    public LazySingletonWithRetryExample3() {}\n\n}",
    "output": "public class LazySingletonWithRetryExample3 {\n\n    private static LazySingletonWithRetryExample3 instance;\n    private int retryCount;\n\n    private LazySingletonWithRetryExample3() {\n        retryCount = 0;\n    }\n\n    public static LazySingletonWithRetryExample3 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithRetryExample3();\n        }\n        return instance;\n    }\n\n    public void retry(String task) {\n        retryCount++;\n        System.out.println(\"Retrying task: \" + task + \" - Retry Count: \" + retryCount);\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithRetry",
    "input": "public class LazySingletonWithRetryExample4 {\n\n    public LazySingletonWithRetryExample4() {}\n\n}",
    "output": "public class LazySingletonWithRetryExample4 {\n\n    private static LazySingletonWithRetryExample4 instance;\n    private int retryCount;\n\n    private LazySingletonWithRetryExample4() {\n        retryCount = 0;\n    }\n\n    public static LazySingletonWithRetryExample4 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithRetryExample4();\n        }\n        return instance;\n    }\n\n    public void retry(String task) {\n        retryCount++;\n        System.out.println(\"Retrying task: \" + task + \" - Retry Count: \" + retryCount);\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithRetry",
    "input": "public class LazySingletonWithRetryExample5 {\n\n    public LazySingletonWithRetryExample5() {}\n\n}",
    "output": "public class LazySingletonWithRetryExample5 {\n\n    private static LazySingletonWithRetryExample5 instance;\n    private int retryCount;\n\n    private LazySingletonWithRetryExample5() {\n        retryCount = 0;\n    }\n\n    public static LazySingletonWithRetryExample5 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithRetryExample5();\n        }\n        return instance;\n    }\n\n    public void retry(String task) {\n        retryCount++;\n        System.out.println(\"Retrying task: \" + task + \" - Retry Count: \" + retryCount);\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionPoolSingleton",
    "input": "public class DatabaseConnectionPoolSingletonExample1 {\n\n    public DatabaseConnectionPoolSingletonExample1() {}\n\n}",
    "output": "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class DatabaseConnectionPoolSingletonExample1 {\n\n    private static DatabaseConnectionPoolSingletonExample1 instance;\n    private Queue<String> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample1() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static DatabaseConnectionPoolSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionPoolSingletonExample1();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionPoolSingleton",
    "input": "public class DatabaseConnectionPoolSingletonExample2 {\n\n    public DatabaseConnectionPoolSingletonExample2() {}\n\n}",
    "output": "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class DatabaseConnectionPoolSingletonExample2 {\n\n    private static DatabaseConnectionPoolSingletonExample2 instance;\n    private Queue<String> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample2() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static DatabaseConnectionPoolSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionPoolSingletonExample2();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionPoolSingleton",
    "input": "public class DatabaseConnectionPoolSingletonExample3 {\n\n    public DatabaseConnectionPoolSingletonExample3() {}\n\n}",
    "output": "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class DatabaseConnectionPoolSingletonExample3 {\n\n    private static DatabaseConnectionPoolSingletonExample3 instance;\n    private Queue<String> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample3() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static DatabaseConnectionPoolSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionPoolSingletonExample3();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionPoolSingleton",
    "input": "public class DatabaseConnectionPoolSingletonExample4 {\n\n    public DatabaseConnectionPoolSingletonExample4() {}\n\n}",
    "output": "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class DatabaseConnectionPoolSingletonExample4 {\n\n    private static DatabaseConnectionPoolSingletonExample4 instance;\n    private Queue<String> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample4() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static DatabaseConnectionPoolSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionPoolSingletonExample4();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionPoolSingleton",
    "input": "public class DatabaseConnectionPoolSingletonExample5 {\n\n    public DatabaseConnectionPoolSingletonExample5() {}\n\n}",
    "output": "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class DatabaseConnectionPoolSingletonExample5 {\n\n    private static DatabaseConnectionPoolSingletonExample5 instance;\n    private Queue<String> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample5() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static DatabaseConnectionPoolSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionPoolSingletonExample5();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}"
  },
  {
    "type": "CacheManagerSingleton",
    "input": "public class CacheManagerSingletonExample1 {\n\n    public CacheManagerSingletonExample1() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class CacheManagerSingletonExample1 {\n\n    private static CacheManagerSingletonExample1 instance;\n    private Map<String, String> cache;\n\n    private CacheManagerSingletonExample1() {\n        cache = new HashMap<>();\n    }\n\n    public static CacheManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new CacheManagerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "CacheManagerSingleton",
    "input": "public class CacheManagerSingletonExample2 {\n\n    public CacheManagerSingletonExample2() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class CacheManagerSingletonExample2 {\n\n    private static CacheManagerSingletonExample2 instance;\n    private Map<String, String> cache;\n\n    private CacheManagerSingletonExample2() {\n        cache = new HashMap<>();\n    }\n\n    public static CacheManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new CacheManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "CacheManagerSingleton",
    "input": "public class CacheManagerSingletonExample3 {\n\n    public CacheManagerSingletonExample3() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class CacheManagerSingletonExample3 {\n\n    private static CacheManagerSingletonExample3 instance;\n    private Map<String, String> cache;\n\n    private CacheManagerSingletonExample3() {\n        cache = new HashMap<>();\n    }\n\n    public static CacheManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new CacheManagerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "CacheManagerSingleton",
    "input": "public class CacheManagerSingletonExample4 {\n\n    public CacheManagerSingletonExample4() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class CacheManagerSingletonExample4 {\n\n    private static CacheManagerSingletonExample4 instance;\n    private Map<String, String> cache;\n\n    private CacheManagerSingletonExample4() {\n        cache = new HashMap<>();\n    }\n\n    public static CacheManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new CacheManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "CacheManagerSingleton",
    "input": "public class CacheManagerSingletonExample5 {\n\n    public CacheManagerSingletonExample5() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class CacheManagerSingletonExample5 {\n\n    private static CacheManagerSingletonExample5 instance;\n    private Map<String, String> cache;\n\n    private CacheManagerSingletonExample5() {\n        cache = new HashMap<>();\n    }\n\n    public static CacheManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new CacheManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "MultithreadedTaskManagerSingleton",
    "input": "public class MultithreadedTaskManagerSingletonExample1 {\n\n    public MultithreadedTaskManagerSingletonExample1() {}\n\n}",
    "output": "import java.util.Queue;\nimport java.util.concurrent.ConcurrentLinkedQueue;\n\npublic class MultithreadedTaskManagerSingletonExample1 {\n\n    private static MultithreadedTaskManagerSingletonExample1 instance;\n    private Queue<String> taskQueue;\n\n    private MultithreadedTaskManagerSingletonExample1() {\n        taskQueue = new ConcurrentLinkedQueue<>();\n    }\n\n    public static synchronized MultithreadedTaskManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new MultithreadedTaskManagerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        taskQueue.add(task);\n    }\n\n    public String getTask() {\n        return taskQueue.poll();\n    }\n\n}"
  },
  {
    "type": "MultithreadedTaskManagerSingleton",
    "input": "public class MultithreadedTaskManagerSingletonExample2 {\n\n    public MultithreadedTaskManagerSingletonExample2() {}\n\n}",
    "output": "import java.util.Queue;\nimport java.util.concurrent.ConcurrentLinkedQueue;\n\npublic class MultithreadedTaskManagerSingletonExample2 {\n\n    private static MultithreadedTaskManagerSingletonExample2 instance;\n    private Queue<String> taskQueue;\n\n    private MultithreadedTaskManagerSingletonExample2() {\n        taskQueue = new ConcurrentLinkedQueue<>();\n    }\n\n    public static synchronized MultithreadedTaskManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new MultithreadedTaskManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        taskQueue.add(task);\n    }\n\n    public String getTask() {\n        return taskQueue.poll();\n    }\n\n}"
  },
  {
    "type": "MultithreadedTaskManagerSingleton",
    "input": "public class MultithreadedTaskManagerSingletonExample3 {\n\n    public MultithreadedTaskManagerSingletonExample3() {}\n\n}",
    "output": "import java.util.Queue;\nimport java.util.concurrent.ConcurrentLinkedQueue;\n\npublic class MultithreadedTaskManagerSingletonExample3 {\n\n    private static MultithreadedTaskManagerSingletonExample3 instance;\n    private Queue<String> taskQueue;\n\n    private MultithreadedTaskManagerSingletonExample3() {\n        taskQueue = new ConcurrentLinkedQueue<>();\n    }\n\n    public static synchronized MultithreadedTaskManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new MultithreadedTaskManagerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        taskQueue.add(task);\n    }\n\n    public String getTask() {\n        return taskQueue.poll();\n    }\n\n}"
  },
  {
    "type": "MultithreadedTaskManagerSingleton",
    "input": "public class MultithreadedTaskManagerSingletonExample4 {\n\n    public MultithreadedTaskManagerSingletonExample4() {}\n\n}",
    "output": "import java.util.Queue;\nimport java.util.concurrent.ConcurrentLinkedQueue;\n\npublic class MultithreadedTaskManagerSingletonExample4 {\n\n    private static MultithreadedTaskManagerSingletonExample4 instance;\n    private Queue<String> taskQueue;\n\n    private MultithreadedTaskManagerSingletonExample4() {\n        taskQueue = new ConcurrentLinkedQueue<>();\n    }\n\n    public static synchronized MultithreadedTaskManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new MultithreadedTaskManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        taskQueue.add(task);\n    }\n\n    public String getTask() {\n        return taskQueue.poll();\n    }\n\n}"
  },
  {
    "type": "MultithreadedTaskManagerSingleton",
    "input": "public class MultithreadedTaskManagerSingletonExample5 {\n\n    public MultithreadedTaskManagerSingletonExample5() {}\n\n}",
    "output": "import java.util.Queue;\nimport java.util.concurrent.ConcurrentLinkedQueue;\n\npublic class MultithreadedTaskManagerSingletonExample5 {\n\n    private static MultithreadedTaskManagerSingletonExample5 instance;\n    private Queue<String> taskQueue;\n\n    private MultithreadedTaskManagerSingletonExample5() {\n        taskQueue = new ConcurrentLinkedQueue<>();\n    }\n\n    public static synchronized MultithreadedTaskManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new MultithreadedTaskManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        taskQueue.add(task);\n    }\n\n    public String getTask() {\n        return taskQueue.poll();\n    }\n\n}"
  },
  {
    "type": "ThreadSafeConfigManagerSingleton",
    "input": "public class ThreadSafeConfigManagerSingletonExample1 {\n\n    public ThreadSafeConfigManagerSingletonExample1() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.Map;\n\npublic class ThreadSafeConfigManagerSingletonExample1 {\n\n    private static volatile ThreadSafeConfigManagerSingletonExample1 instance;\n    private Map<String, String> config;\n\n    private ThreadSafeConfigManagerSingletonExample1() {\n        config = new ConcurrentHashMap<>();\n    }\n\n    public static ThreadSafeConfigManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (ThreadSafeConfigManagerSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new ThreadSafeConfigManagerSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void setConfig(String key, String value) {\n        config.put(key, value);\n    }\n\n    public String getConfig(String key) {\n        return config.get(key);\n    }\n\n}"
  },
  {
    "type": "ThreadSafeConfigManagerSingleton",
    "input": "public class ThreadSafeConfigManagerSingletonExample2 {\n\n    public ThreadSafeConfigManagerSingletonExample2() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.Map;\n\npublic class ThreadSafeConfigManagerSingletonExample2 {\n\n    private static volatile ThreadSafeConfigManagerSingletonExample2 instance;\n    private Map<String, String> config;\n\n    private ThreadSafeConfigManagerSingletonExample2() {\n        config = new ConcurrentHashMap<>();\n    }\n\n    public static ThreadSafeConfigManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (ThreadSafeConfigManagerSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new ThreadSafeConfigManagerSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void setConfig(String key, String value) {\n        config.put(key, value);\n    }\n\n    public String getConfig(String key) {\n        return config.get(key);\n    }\n\n}"
  },
  {
    "type": "ThreadSafeConfigManagerSingleton",
    "input": "public class ThreadSafeConfigManagerSingletonExample3 {\n\n    public ThreadSafeConfigManagerSingletonExample3() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.Map;\n\npublic class ThreadSafeConfigManagerSingletonExample3 {\n\n    private static volatile ThreadSafeConfigManagerSingletonExample3 instance;\n    private Map<String, String> config;\n\n    private ThreadSafeConfigManagerSingletonExample3() {\n        config = new ConcurrentHashMap<>();\n    }\n\n    public static ThreadSafeConfigManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (ThreadSafeConfigManagerSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new ThreadSafeConfigManagerSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void setConfig(String key, String value) {\n        config.put(key, value);\n    }\n\n    public String getConfig(String key) {\n        return config.get(key);\n    }\n\n}"
  },
  {
    "type": "ThreadSafeConfigManagerSingleton",
    "input": "public class ThreadSafeConfigManagerSingletonExample4 {\n\n    public ThreadSafeConfigManagerSingletonExample4() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.Map;\n\npublic class ThreadSafeConfigManagerSingletonExample4 {\n\n    private static volatile ThreadSafeConfigManagerSingletonExample4 instance;\n    private Map<String, String> config;\n\n    private ThreadSafeConfigManagerSingletonExample4() {\n        config = new ConcurrentHashMap<>();\n    }\n\n    public static ThreadSafeConfigManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (ThreadSafeConfigManagerSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new ThreadSafeConfigManagerSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void setConfig(String key, String value) {\n        config.put(key, value);\n    }\n\n    public String getConfig(String key) {\n        return config.get(key);\n    }\n\n}"
  },
  {
    "type": "ThreadSafeConfigManagerSingleton",
    "input": "public class ThreadSafeConfigManagerSingletonExample5 {\n\n    public ThreadSafeConfigManagerSingletonExample5() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.Map;\n\npublic class ThreadSafeConfigManagerSingletonExample5 {\n\n    private static volatile ThreadSafeConfigManagerSingletonExample5 instance;\n    private Map<String, String> config;\n\n    private ThreadSafeConfigManagerSingletonExample5() {\n        config = new ConcurrentHashMap<>();\n    }\n\n    public static ThreadSafeConfigManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (ThreadSafeConfigManagerSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new ThreadSafeConfigManagerSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void setConfig(String key, String value) {\n        config.put(key, value);\n    }\n\n    public String getConfig(String key) {\n        return config.get(key);\n    }\n\n}"
  },
  {
    "type": "TokenBucketRateLimiterSingleton",
    "input": "public class TokenBucketRateLimiterSingletonExample1 {\n\n    public TokenBucketRateLimiterSingletonExample1() {}\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class TokenBucketRateLimiterSingletonExample1 {\n\n    private static TokenBucketRateLimiterSingletonExample1 instance;\n    private AtomicInteger tokens;\n    private static final int MAX_TOKENS = 10;\n\n    private TokenBucketRateLimiterSingletonExample1() {\n        tokens = new AtomicInteger(MAX_TOKENS);\n    }\n\n    public static TokenBucketRateLimiterSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new TokenBucketRateLimiterSingletonExample1();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest() {\n        if (tokens.get() > 0) {\n            tokens.decrementAndGet();\n            return true;\n        } else {\n            System.out.println(\"Request denied: Rate limit exceeded\");\n            return false;\n        }\n    }\n\n    public void refillTokens() {\n        tokens.set(MAX_TOKENS);\n    }\n\n}"
  },
  {
    "type": "TokenBucketRateLimiterSingleton",
    "input": "public class TokenBucketRateLimiterSingletonExample2 {\n\n    public TokenBucketRateLimiterSingletonExample2() {}\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class TokenBucketRateLimiterSingletonExample2 {\n\n    private static TokenBucketRateLimiterSingletonExample2 instance;\n    private AtomicInteger tokens;\n    private static final int MAX_TOKENS = 10;\n\n    private TokenBucketRateLimiterSingletonExample2() {\n        tokens = new AtomicInteger(MAX_TOKENS);\n    }\n\n    public static TokenBucketRateLimiterSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new TokenBucketRateLimiterSingletonExample2();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest() {\n        if (tokens.get() > 0) {\n            tokens.decrementAndGet();\n            return true;\n        } else {\n            System.out.println(\"Request denied: Rate limit exceeded\");\n            return false;\n        }\n    }\n\n    public void refillTokens() {\n        tokens.set(MAX_TOKENS);\n    }\n\n}"
  },
  {
    "type": "TokenBucketRateLimiterSingleton",
    "input": "public class TokenBucketRateLimiterSingletonExample3 {\n\n    public TokenBucketRateLimiterSingletonExample3() {}\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class TokenBucketRateLimiterSingletonExample3 {\n\n    private static TokenBucketRateLimiterSingletonExample3 instance;\n    private AtomicInteger tokens;\n    private static final int MAX_TOKENS = 10;\n\n    private TokenBucketRateLimiterSingletonExample3() {\n        tokens = new AtomicInteger(MAX_TOKENS);\n    }\n\n    public static TokenBucketRateLimiterSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new TokenBucketRateLimiterSingletonExample3();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest() {\n        if (tokens.get() > 0) {\n            tokens.decrementAndGet();\n            return true;\n        } else {\n            System.out.println(\"Request denied: Rate limit exceeded\");\n            return false;\n        }\n    }\n\n    public void refillTokens() {\n        tokens.set(MAX_TOKENS);\n    }\n\n}"
  },
  {
    "type": "TokenBucketRateLimiterSingleton",
    "input": "public class TokenBucketRateLimiterSingletonExample4 {\n\n    public TokenBucketRateLimiterSingletonExample4() {}\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class TokenBucketRateLimiterSingletonExample4 {\n\n    private static TokenBucketRateLimiterSingletonExample4 instance;\n    private AtomicInteger tokens;\n    private static final int MAX_TOKENS = 10;\n\n    private TokenBucketRateLimiterSingletonExample4() {\n        tokens = new AtomicInteger(MAX_TOKENS);\n    }\n\n    public static TokenBucketRateLimiterSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new TokenBucketRateLimiterSingletonExample4();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest() {\n        if (tokens.get() > 0) {\n            tokens.decrementAndGet();\n            return true;\n        } else {\n            System.out.println(\"Request denied: Rate limit exceeded\");\n            return false;\n        }\n    }\n\n    public void refillTokens() {\n        tokens.set(MAX_TOKENS);\n    }\n\n}"
  },
  {
    "type": "TokenBucketRateLimiterSingleton",
    "input": "public class TokenBucketRateLimiterSingletonExample5 {\n\n    public TokenBucketRateLimiterSingletonExample5() {}\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class TokenBucketRateLimiterSingletonExample5 {\n\n    private static TokenBucketRateLimiterSingletonExample5 instance;\n    private AtomicInteger tokens;\n    private static final int MAX_TOKENS = 10;\n\n    private TokenBucketRateLimiterSingletonExample5() {\n        tokens = new AtomicInteger(MAX_TOKENS);\n    }\n\n    public static TokenBucketRateLimiterSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new TokenBucketRateLimiterSingletonExample5();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest() {\n        if (tokens.get() > 0) {\n            tokens.decrementAndGet();\n            return true;\n        } else {\n            System.out.println(\"Request denied: Rate limit exceeded\");\n            return false;\n        }\n    }\n\n    public void refillTokens() {\n        tokens.set(MAX_TOKENS);\n    }\n\n}"
  },
  {
    "type": "GlobalIdGeneratorSingleton",
    "input": "public class GlobalIdGeneratorSingletonExample1 {\n\n    public GlobalIdGeneratorSingletonExample1() {}\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class GlobalIdGeneratorSingletonExample1 {\n\n    private static GlobalIdGeneratorSingletonExample1 instance;\n    private AtomicInteger counter;\n\n    private GlobalIdGeneratorSingletonExample1() {\n        counter = new AtomicInteger(0);\n    }\n\n    public static GlobalIdGeneratorSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new GlobalIdGeneratorSingletonExample1();\n        }\n        return instance;\n    }\n\n    public int generate() {\n        return counter.incrementAndGet();\n    }\n\n}"
  },
  {
    "type": "GlobalIdGeneratorSingleton",
    "input": "public class GlobalIdGeneratorSingletonExample2 {\n\n    public GlobalIdGeneratorSingletonExample2() {}\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class GlobalIdGeneratorSingletonExample2 {\n\n    private static GlobalIdGeneratorSingletonExample2 instance;\n    private AtomicInteger counter;\n\n    private GlobalIdGeneratorSingletonExample2() {\n        counter = new AtomicInteger(0);\n    }\n\n    public static GlobalIdGeneratorSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new GlobalIdGeneratorSingletonExample2();\n        }\n        return instance;\n    }\n\n    public int generate() {\n        return counter.incrementAndGet();\n    }\n\n}"
  },
  {
    "type": "GlobalIdGeneratorSingleton",
    "input": "public class GlobalIdGeneratorSingletonExample3 {\n\n    public GlobalIdGeneratorSingletonExample3() {}\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class GlobalIdGeneratorSingletonExample3 {\n\n    private static GlobalIdGeneratorSingletonExample3 instance;\n    private AtomicInteger counter;\n\n    private GlobalIdGeneratorSingletonExample3() {\n        counter = new AtomicInteger(0);\n    }\n\n    public static GlobalIdGeneratorSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new GlobalIdGeneratorSingletonExample3();\n        }\n        return instance;\n    }\n\n    public int generate() {\n        return counter.incrementAndGet();\n    }\n\n}"
  },
  {
    "type": "GlobalIdGeneratorSingleton",
    "input": "public class GlobalIdGeneratorSingletonExample4 {\n\n    public GlobalIdGeneratorSingletonExample4() {}\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class GlobalIdGeneratorSingletonExample4 {\n\n    private static GlobalIdGeneratorSingletonExample4 instance;\n    private AtomicInteger counter;\n\n    private GlobalIdGeneratorSingletonExample4() {\n        counter = new AtomicInteger(0);\n    }\n\n    public static GlobalIdGeneratorSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new GlobalIdGeneratorSingletonExample4();\n        }\n        return instance;\n    }\n\n    public int generate() {\n        return counter.incrementAndGet();\n    }\n\n}"
  },
  {
    "type": "GlobalIdGeneratorSingleton",
    "input": "public class GlobalIdGeneratorSingletonExample5 {\n\n    public GlobalIdGeneratorSingletonExample5() {}\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class GlobalIdGeneratorSingletonExample5 {\n\n    private static GlobalIdGeneratorSingletonExample5 instance;\n    private AtomicInteger counter;\n\n    private GlobalIdGeneratorSingletonExample5() {\n        counter = new AtomicInteger(0);\n    }\n\n    public static GlobalIdGeneratorSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new GlobalIdGeneratorSingletonExample5();\n        }\n        return instance;\n    }\n\n    public int generate() {\n        return counter.incrementAndGet();\n    }\n\n}"
  },
  {
    "type": "DistributedLockManagerSingleton",
    "input": "public class DistributedLockManagerSingletonExample1 {\n\n    public DistributedLockManagerSingletonExample1() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedLockManagerSingletonExample1 {\n\n    private static DistributedLockManagerSingletonExample1 instance;\n    private ConcurrentHashMap<String, Boolean> locks;\n\n    private DistributedLockManagerSingletonExample1() {\n        locks = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedLockManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new DistributedLockManagerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public boolean acquireLock(String key) {\n        return locks.putIfAbsent(key, true) == null;\n    }\n\n    public void releaseLock(String key) {\n        locks.remove(key);\n    }\n\n}"
  },
  {
    "type": "DistributedLockManagerSingleton",
    "input": "public class DistributedLockManagerSingletonExample2 {\n\n    public DistributedLockManagerSingletonExample2() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedLockManagerSingletonExample2 {\n\n    private static DistributedLockManagerSingletonExample2 instance;\n    private ConcurrentHashMap<String, Boolean> locks;\n\n    private DistributedLockManagerSingletonExample2() {\n        locks = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedLockManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new DistributedLockManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public boolean acquireLock(String key) {\n        return locks.putIfAbsent(key, true) == null;\n    }\n\n    public void releaseLock(String key) {\n        locks.remove(key);\n    }\n\n}"
  },
  {
    "type": "DistributedLockManagerSingleton",
    "input": "public class DistributedLockManagerSingletonExample3 {\n\n    public DistributedLockManagerSingletonExample3() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedLockManagerSingletonExample3 {\n\n    private static DistributedLockManagerSingletonExample3 instance;\n    private ConcurrentHashMap<String, Boolean> locks;\n\n    private DistributedLockManagerSingletonExample3() {\n        locks = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedLockManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new DistributedLockManagerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public boolean acquireLock(String key) {\n        return locks.putIfAbsent(key, true) == null;\n    }\n\n    public void releaseLock(String key) {\n        locks.remove(key);\n    }\n\n}"
  },
  {
    "type": "DistributedLockManagerSingleton",
    "input": "public class DistributedLockManagerSingletonExample4 {\n\n    public DistributedLockManagerSingletonExample4() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedLockManagerSingletonExample4 {\n\n    private static DistributedLockManagerSingletonExample4 instance;\n    private ConcurrentHashMap<String, Boolean> locks;\n\n    private DistributedLockManagerSingletonExample4() {\n        locks = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedLockManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new DistributedLockManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public boolean acquireLock(String key) {\n        return locks.putIfAbsent(key, true) == null;\n    }\n\n    public void releaseLock(String key) {\n        locks.remove(key);\n    }\n\n}"
  },
  {
    "type": "DistributedLockManagerSingleton",
    "input": "public class DistributedLockManagerSingletonExample5 {\n\n    public DistributedLockManagerSingletonExample5() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedLockManagerSingletonExample5 {\n\n    private static DistributedLockManagerSingletonExample5 instance;\n    private ConcurrentHashMap<String, Boolean> locks;\n\n    private DistributedLockManagerSingletonExample5() {\n        locks = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedLockManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new DistributedLockManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public boolean acquireLock(String key) {\n        return locks.putIfAbsent(key, true) == null;\n    }\n\n    public void releaseLock(String key) {\n        locks.remove(key);\n    }\n\n}"
  },
  {
    "type": "RealTimeEventPublisherSingleton",
    "input": "public class RealTimeEventPublisherSingletonExample1 {\n\n    public RealTimeEventPublisherSingletonExample1() {}\n\n}",
    "output": "import java.util.concurrent.CopyOnWriteArrayList;\n\npublic class RealTimeEventPublisherSingletonExample1 {\n\n    private static RealTimeEventPublisherSingletonExample1 instance;\n    private CopyOnWriteArrayList<String> eventListeners;\n\n    private RealTimeEventPublisherSingletonExample1() {\n        eventListeners = new CopyOnWriteArrayList<>();\n    }\n\n    public static RealTimeEventPublisherSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new RealTimeEventPublisherSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void addListener(String listener) {\n        eventListeners.add(listener);\n    }\n\n    public void publishEvent(String event) {\n        for (String listener : eventListeners) {\n            System.out.println(\"Notifying listener: \" + listener + \" of event: \" + event);\n        }\n    }\n\n}"
  },
  {
    "type": "RealTimeEventPublisherSingleton",
    "input": "public class RealTimeEventPublisherSingletonExample2 {\n\n    public RealTimeEventPublisherSingletonExample2() {}\n\n}",
    "output": "import java.util.concurrent.CopyOnWriteArrayList;\n\npublic class RealTimeEventPublisherSingletonExample2 {\n\n    private static RealTimeEventPublisherSingletonExample2 instance;\n    private CopyOnWriteArrayList<String> eventListeners;\n\n    private RealTimeEventPublisherSingletonExample2() {\n        eventListeners = new CopyOnWriteArrayList<>();\n    }\n\n    public static RealTimeEventPublisherSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new RealTimeEventPublisherSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void addListener(String listener) {\n        eventListeners.add(listener);\n    }\n\n    public void publishEvent(String event) {\n        for (String listener : eventListeners) {\n            System.out.println(\"Notifying listener: \" + listener + \" of event: \" + event);\n        }\n    }\n\n}"
  },
  {
    "type": "RealTimeEventPublisherSingleton",
    "input": "public class RealTimeEventPublisherSingletonExample3 {\n\n    public RealTimeEventPublisherSingletonExample3() {}\n\n}",
    "output": "import java.util.concurrent.CopyOnWriteArrayList;\n\npublic class RealTimeEventPublisherSingletonExample3 {\n\n    private static RealTimeEventPublisherSingletonExample3 instance;\n    private CopyOnWriteArrayList<String> eventListeners;\n\n    private RealTimeEventPublisherSingletonExample3() {\n        eventListeners = new CopyOnWriteArrayList<>();\n    }\n\n    public static RealTimeEventPublisherSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new RealTimeEventPublisherSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void addListener(String listener) {\n        eventListeners.add(listener);\n    }\n\n    public void publishEvent(String event) {\n        for (String listener : eventListeners) {\n            System.out.println(\"Notifying listener: \" + listener + \" of event: \" + event);\n        }\n    }\n\n}"
  },
  {
    "type": "RealTimeEventPublisherSingleton",
    "input": "public class RealTimeEventPublisherSingletonExample4 {\n\n    public RealTimeEventPublisherSingletonExample4() {}\n\n}",
    "output": "import java.util.concurrent.CopyOnWriteArrayList;\n\npublic class RealTimeEventPublisherSingletonExample4 {\n\n    private static RealTimeEventPublisherSingletonExample4 instance;\n    private CopyOnWriteArrayList<String> eventListeners;\n\n    private RealTimeEventPublisherSingletonExample4() {\n        eventListeners = new CopyOnWriteArrayList<>();\n    }\n\n    public static RealTimeEventPublisherSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new RealTimeEventPublisherSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void addListener(String listener) {\n        eventListeners.add(listener);\n    }\n\n    public void publishEvent(String event) {\n        for (String listener : eventListeners) {\n            System.out.println(\"Notifying listener: \" + listener + \" of event: \" + event);\n        }\n    }\n\n}"
  },
  {
    "type": "RealTimeEventPublisherSingleton",
    "input": "public class RealTimeEventPublisherSingletonExample5 {\n\n    public RealTimeEventPublisherSingletonExample5() {}\n\n}",
    "output": "import java.util.concurrent.CopyOnWriteArrayList;\n\npublic class RealTimeEventPublisherSingletonExample5 {\n\n    private static RealTimeEventPublisherSingletonExample5 instance;\n    private CopyOnWriteArrayList<String> eventListeners;\n\n    private RealTimeEventPublisherSingletonExample5() {\n        eventListeners = new CopyOnWriteArrayList<>();\n    }\n\n    public static RealTimeEventPublisherSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new RealTimeEventPublisherSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void addListener(String listener) {\n        eventListeners.add(listener);\n    }\n\n    public void publishEvent(String event) {\n        for (String listener : eventListeners) {\n            System.out.println(\"Notifying listener: \" + listener + \" of event: \" + event);\n        }\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample1 {\n\n    public SingletonWithMetricsCollectionExample1() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample1 {\n\n    private static SingletonWithMetricsCollectionExample1 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample1() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample1();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample2 {\n\n    public SingletonWithMetricsCollectionExample2() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample2 {\n\n    private static SingletonWithMetricsCollectionExample2 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample2() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample2();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample3 {\n\n    public SingletonWithMetricsCollectionExample3() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample3 {\n\n    private static SingletonWithMetricsCollectionExample3 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample3() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample3();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample4 {\n\n    public SingletonWithMetricsCollectionExample4() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample4 {\n\n    private static SingletonWithMetricsCollectionExample4 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample4() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample4();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample5 {\n\n    public SingletonWithMetricsCollectionExample5() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample5 {\n\n    private static SingletonWithMetricsCollectionExample5 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample5() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample5();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample1 {\n\n    public SingletonWithMetricsCollectionExample1() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample1 {\n\n    private static SingletonWithMetricsCollectionExample1 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample1() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample1();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample2 {\n\n    public SingletonWithMetricsCollectionExample2() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample2 {\n\n    private static SingletonWithMetricsCollectionExample2 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample2() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample2();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample3 {\n\n    public SingletonWithMetricsCollectionExample3() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample3 {\n\n    private static SingletonWithMetricsCollectionExample3 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample3() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample3();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample4 {\n\n    public SingletonWithMetricsCollectionExample4() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample4 {\n\n    private static SingletonWithMetricsCollectionExample4 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample4() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample4();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample5 {\n\n    public SingletonWithMetricsCollectionExample5() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample5 {\n\n    private static SingletonWithMetricsCollectionExample5 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample5() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample5();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample1 {\n\n    public SingletonWithMetricsCollectionExample1() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample1 {\n\n    private static SingletonWithMetricsCollectionExample1 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample1() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample1();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample2 {\n\n    public SingletonWithMetricsCollectionExample2() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample2 {\n\n    private static SingletonWithMetricsCollectionExample2 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample2() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample2();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample3 {\n\n    public SingletonWithMetricsCollectionExample3() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample3 {\n\n    private static SingletonWithMetricsCollectionExample3 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample3() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample3();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample4 {\n\n    public SingletonWithMetricsCollectionExample4() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample4 {\n\n    private static SingletonWithMetricsCollectionExample4 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample4() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample4();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample5 {\n\n    public SingletonWithMetricsCollectionExample5() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample5 {\n\n    private static SingletonWithMetricsCollectionExample5 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample5() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample5();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample1 {\n\n    public SingletonWithMetricsCollectionExample1() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample1 {\n\n    private static SingletonWithMetricsCollectionExample1 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample1() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample1();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample2 {\n\n    public SingletonWithMetricsCollectionExample2() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample2 {\n\n    private static SingletonWithMetricsCollectionExample2 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample2() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample2();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample3 {\n\n    public SingletonWithMetricsCollectionExample3() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample3 {\n\n    private static SingletonWithMetricsCollectionExample3 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample3() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample3();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample4 {\n\n    public SingletonWithMetricsCollectionExample4() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample4 {\n\n    private static SingletonWithMetricsCollectionExample4 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample4() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample4();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample5 {\n\n    public SingletonWithMetricsCollectionExample5() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample5 {\n\n    private static SingletonWithMetricsCollectionExample5 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample5() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample5();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample1 {\n\n    public SingletonWithMetricsCollectionExample1() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample1 {\n\n    private static SingletonWithMetricsCollectionExample1 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample1() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample1();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample2 {\n\n    public SingletonWithMetricsCollectionExample2() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample2 {\n\n    private static SingletonWithMetricsCollectionExample2 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample2() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample2();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample3 {\n\n    public SingletonWithMetricsCollectionExample3() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample3 {\n\n    private static SingletonWithMetricsCollectionExample3 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample3() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample3();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample4 {\n\n    public SingletonWithMetricsCollectionExample4() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample4 {\n\n    private static SingletonWithMetricsCollectionExample4 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample4() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample4();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample5 {\n\n    public SingletonWithMetricsCollectionExample5() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample5 {\n\n    private static SingletonWithMetricsCollectionExample5 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample5() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample5();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample1 {\n\n    public SingletonWithMetricsCollectionExample1() {}\n\n}",
    "output": "import java.util.ArrayList;\n   private static SingletonWithMetricsCollectionExample1 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample1() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample1();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample2 {\n\n    public SingletonWithMetricsCollectionExample2() {}\n\n}",
    "output": "import java.util.ArrayList;\n   private static SingletonWithMetricsCollectionExample2 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample2() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample2();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample3 {\n\n    public SingletonWithMetricsCollectionExample3() {}\n\n}",
    "output": "import java.util.ArrayList;\n   private static SingletonWithMetricsCollectionExample3 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample3() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample3();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample4 {\n\n    public SingletonWithMetricsCollectionExample4() {}\n\n}",
    "output": "import java.util.ArrayList;\n   private static SingletonWithMetricsCollectionExample4 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample4() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample4();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class SingletonWithMetricsCollectionExample5 {\n\n    public SingletonWithMetricsCollectionExample5() {}\n\n}",
    "output": "import java.util.ArrayList;\n   private static SingletonWithMetricsCollectionExample5 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample5() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample5();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "DatabasePoolSingleton",
    "input": "public class DatabasePoolSingletonExample1 {\n\n    public DatabasePoolSingletonExample1() {}\n\n}",
    "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class DatabasePoolSingletonExample1 {\n    private static DatabasePoolSingletonExample1 instance;\n    private BlockingQueue<Connection> connectionPool;\n\n    private DatabasePoolSingletonExample1() {\n        connectionPool = new ArrayBlockingQueue<>(5);\n        try {\n            for (int i = 0; i < 5; i++) {\n                connectionPool.add(DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db\", \"user\", \"password\"));\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized DatabasePoolSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new DatabasePoolSingletonExample1();\n        }\n        return instance;\n    }\n\n    public Connection getConnection() {\n        try {\n            return connectionPool.take();\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"No connections available\");\n        }\n    }\n\n    public void releaseConnection(Connection connection) {\n        connectionPool.offer(connection);\n    }\n}"
  },
  {
    "type": "DatabasePoolSingleton",
    "input": "public class DatabasePoolSingletonExample2 {\n\n    public DatabasePoolSingletonExample2() {}\n\n}",
    "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class DatabasePoolSingletonExample2 {\n    private static DatabasePoolSingletonExample2 instance;\n    private BlockingQueue<Connection> connectionPool;\n\n    private DatabasePoolSingletonExample2() {\n        connectionPool = new ArrayBlockingQueue<>(5);\n        try {\n            for (int i = 0; i < 5; i++) {\n                connectionPool.add(DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db\", \"user\", \"password\"));\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized DatabasePoolSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new DatabasePoolSingletonExample2();\n        }\n        return instance;\n    }\n\n    public Connection getConnection() {\n        try {\n            return connectionPool.take();\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"No connections available\");\n        }\n    }\n\n    public void releaseConnection(Connection connection) {\n        connectionPool.offer(connection);\n    }\n}"
  },
  {
    "type": "DatabasePoolSingleton",
    "input": "public class DatabasePoolSingletonExample3 {\n\n    public DatabasePoolSingletonExample3() {}\n\n}",
    "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class DatabasePoolSingletonExample3 {\n    private static DatabasePoolSingletonExample3 instance;\n    private BlockingQueue<Connection> connectionPool;\n\n    private DatabasePoolSingletonExample3() {\n        connectionPool = new ArrayBlockingQueue<>(5);\n        try {\n            for (int i = 0; i < 5; i++) {\n                connectionPool.add(DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db\", \"user\", \"password\"));\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized DatabasePoolSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new DatabasePoolSingletonExample3();\n        }\n        return instance;\n    }\n\n    public Connection getConnection() {\n        try {\n            return connectionPool.take();\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"No connections available\");\n        }\n    }\n\n    public void releaseConnection(Connection connection) {\n        connectionPool.offer(connection);\n    }\n}"
  },
  {
    "type": "DatabasePoolSingleton",
    "input": "public class DatabasePoolSingletonExample4 {\n\n    public DatabasePoolSingletonExample4() {}\n\n}",
    "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class DatabasePoolSingletonExample4 {\n    private static DatabasePoolSingletonExample4 instance;\n    private BlockingQueue<Connection> connectionPool;\n\n    private DatabasePoolSingletonExample4() {\n        connectionPool = new ArrayBlockingQueue<>(5);\n        try {\n            for (int i = 0; i < 5; i++) {\n                connectionPool.add(DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db\", \"user\", \"password\"));\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized DatabasePoolSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new DatabasePoolSingletonExample4();\n        }\n        return instance;\n    }\n\n    public Connection getConnection() {\n        try {\n            return connectionPool.take();\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"No connections available\");\n        }\n    }\n\n    public void releaseConnection(Connection connection) {\n        connectionPool.offer(connection);\n    }\n}"
  },
  {
    "type": "DatabasePoolSingleton",
    "input": "public class DatabasePoolSingletonExample5 {\n\n    public DatabasePoolSingletonExample5() {}\n\n}",
    "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class DatabasePoolSingletonExample5 {\n    private static DatabasePoolSingletonExample5 instance;\n    private BlockingQueue<Connection> connectionPool;\n\n    private DatabasePoolSingletonExample5() {\n        connectionPool = new ArrayBlockingQueue<>(5);\n        try {\n            for (int i = 0; i < 5; i++) {\n                connectionPool.add(DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db\", \"user\", \"password\"));\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized DatabasePoolSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new DatabasePoolSingletonExample5();\n        }\n        return instance;\n    }\n\n    public Connection getConnection() {\n        try {\n            return connectionPool.take();\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"No connections available\");\n        }\n    }\n\n    public void releaseConnection(Connection connection) {\n        connectionPool.offer(connection);\n    }\n}"
  },
  {
    "type": "LoggerSingleton",
    "input": "public class LoggerSingletonExample1 {\n\n    public LoggerSingletonExample1() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample1 {\n    private static LoggerSingletonExample1 instance;\n    private FileWriter fileWriter;\n\n    private LoggerSingletonExample1() {\n        try {\n            fileWriter = new FileWriter(\"application.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggerSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (LoggerSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new LoggerSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public synchronized void log(String level, String message) {\n        try {\n            fileWriter.write(level + \": \" + message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "type": "LoggerSingleton",
    "input": "public class LoggerSingletonExample2 {\n\n    public LoggerSingletonExample2() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample2 {\n    private static LoggerSingletonExample2 instance;\n    private FileWriter fileWriter;\n\n    private LoggerSingletonExample2() {\n        try {\n            fileWriter = new FileWriter(\"application.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggerSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (LoggerSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new LoggerSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public synchronized void log(String level, String message) {\n        try {\n            fileWriter.write(level + \": \" + message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "type": "LoggerSingleton",
    "input": "public class LoggerSingletonExample3 {\n\n    public LoggerSingletonExample3() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample3 {\n    private static LoggerSingletonExample3 instance;\n    private FileWriter fileWriter;\n\n    private LoggerSingletonExample3() {\n        try {\n            fileWriter = new FileWriter(\"application.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggerSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (LoggerSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new LoggerSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public synchronized void log(String level, String message) {\n        try {\n            fileWriter.write(level + \": \" + message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "type": "LoggerSingleton",
    "input": "public class LoggerSingletonExample4 {\n\n    public LoggerSingletonExample4() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample4 {\n    private static LoggerSingletonExample4 instance;\n    private FileWriter fileWriter;\n\n    private LoggerSingletonExample4() {\n        try {\n            fileWriter = new FileWriter(\"application.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggerSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (LoggerSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new LoggerSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public synchronized void log(String level, String message) {\n        try {\n            fileWriter.write(level + \": \" + message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "type": "LoggerSingleton",
    "input": "public class LoggerSingletonExample5 {\n\n    public LoggerSingletonExample5() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample5 {\n    private static LoggerSingletonExample5 instance;\n    private FileWriter fileWriter;\n\n    private LoggerSingletonExample5() {\n        try {\n            fileWriter = new FileWriter(\"application.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggerSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (LoggerSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new LoggerSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public synchronized void log(String level, String message) {\n        try {\n            fileWriter.write(level + \": \" + message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "type": "ConfigurationManager",
    "input": "public class ConfigurationManagerExample1 {\n\n    public ConfigurationManagerExample1() {}\n\n}",
    "output": "public enum ConfigurationManagerExample1 {\n    INSTANCE;\n\n    private Map<String, String> config;\n\n    ConfigurationManagerExample1() {\n        config = new HashMap<>();\n        config.put(\"url\", \"http://example.com\");\n        config.put(\"timeout\", \"5000\");\n    }\n\n    public String getConfig(String key) {\n        return config.get(key);\n    }\n\n    public void setConfig(String key, String value) {\n        config.put(key, value);\n    }\n}"
  },
  {
    "type": "ConfigurationManager",
    "input": "public class ConfigurationManagerExample2 {\n\n    public ConfigurationManagerExample2() {}\n\n}",
    "output": "public enum ConfigurationManagerExample2 {\n    INSTANCE;\n\n    private Map<String, String> config;\n\n    ConfigurationManagerExample2() {\n        config = new HashMap<>();\n        config.put(\"url\", \"http://example.com\");\n        config.put(\"timeout\", \"5000\");\n    }\n\n    public String getConfig(String key) {\n        return config.get(key);\n    }\n\n    public void setConfig(String key, String value) {\n        config.put(key, value);\n    }\n}"
  },
  {
    "type": "ConfigurationManager",
    "input": "public class ConfigurationManagerExample3 {\n\n    public ConfigurationManagerExample3() {}\n\n}",
    "output": "public enum ConfigurationManagerExample3 {\n    INSTANCE;\n\n    private Map<String, String> config;\n\n    ConfigurationManagerExample3() {\n        config = new HashMap<>();\n        config.put(\"url\", \"http://example.com\");\n        config.put(\"timeout\", \"5000\");\n    }\n\n    public String getConfig(String key) {\n        return config.get(key);\n    }\n\n    public void setConfig(String key, String value) {\n        config.put(key, value);\n    }\n}"
  },
  {
    "type": "ConfigurationManager",
    "input": "public class ConfigurationManagerExample4 {\n\n    public ConfigurationManagerExample4() {}\n\n}",
    "output": "public enum ConfigurationManagerExample4 {\n    INSTANCE;\n\n    private Map<String, String> config;\n\n    ConfigurationManagerExample4() {\n        config = new HashMap<>();\n        config.put(\"url\", \"http://example.com\");\n        config.put(\"timeout\", \"5000\");\n    }\n\n    public String getConfig(String key) {\n        return config.get(key);\n    }\n\n    public void setConfig(String key, String value) {\n        config.put(key, value);\n    }\n}"
  },
  {
    "type": "ConfigurationManager",
    "input": "public class ConfigurationManagerExample5 {\n\n    public ConfigurationManagerExample5() {}\n\n}",
    "output": "public enum ConfigurationManagerExample5 {\n    INSTANCE;\n\n    private Map<String, String> config;\n\n    ConfigurationManagerExample5() {\n        config = new HashMap<>();\n        config.put(\"url\", \"http://example.com\");\n        config.put(\"timeout\", \"5000\");\n    }\n\n    public String getConfig(String key) {\n        return config.get(key);\n    }\n\n    public void setConfig(String key, String value) {\n        config.put(key, value);\n    }\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample1 {\n\n    public DoubleCheckedLockingSingletonExample1() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample1 {\n    private static volatile DoubleCheckedLockingSingletonExample1 instance;\n\n    private DoubleCheckedLockingSingletonExample1() {\n    }\n\n    public static DoubleCheckedLockingSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample2 {\n\n    public DoubleCheckedLockingSingletonExample2() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample2 {\n    private static volatile DoubleCheckedLockingSingletonExample2 instance;\n\n    private DoubleCheckedLockingSingletonExample2() {\n    }\n\n    public static DoubleCheckedLockingSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample3 {\n\n    public DoubleCheckedLockingSingletonExample3() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample3 {\n    private static volatile DoubleCheckedLockingSingletonExample3 instance;\n\n    private DoubleCheckedLockingSingletonExample3() {\n    }\n\n    public static DoubleCheckedLockingSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample4 {\n\n    public DoubleCheckedLockingSingletonExample4() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample4 {\n    private static volatile DoubleCheckedLockingSingletonExample4 instance;\n\n    private DoubleCheckedLockingSingletonExample4() {\n    }\n\n    public static DoubleCheckedLockingSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample5 {\n\n    public DoubleCheckedLockingSingletonExample5() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample5 {\n    private static volatile DoubleCheckedLockingSingletonExample5 instance;\n\n    private DoubleCheckedLockingSingletonExample5() {\n    }\n\n    public static DoubleCheckedLockingSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample1 {\n\n    public ThreadLocalSingletonExample1() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample1 {\n    private static final ThreadLocal<ThreadLocalSingletonExample1> threadLocalInstance =\n            ThreadLocal.withInitial(ThreadLocalSingletonExample1::new);\n\n    private ThreadLocalSingletonExample1() {\n    }\n\n    public static ThreadLocalSingletonExample1 getInstance() {\n        return threadLocalInstance.get();\n    }\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample2 {\n\n    public ThreadLocalSingletonExample2() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample2 {\n    private static final ThreadLocal<ThreadLocalSingletonExample2> threadLocalInstance =\n            ThreadLocal.withInitial(ThreadLocalSingletonExample2::new);\n\n    private ThreadLocalSingletonExample2() {\n    }\n\n    public static ThreadLocalSingletonExample2 getInstance() {\n        return threadLocalInstance.get();\n    }\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample3 {\n\n    public ThreadLocalSingletonExample3() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample3 {\n    private static final ThreadLocal<ThreadLocalSingletonExample3> threadLocalInstance =\n            ThreadLocal.withInitial(ThreadLocalSingletonExample3::new);\n\n    private ThreadLocalSingletonExample3() {\n    }\n\n    public static ThreadLocalSingletonExample3 getInstance() {\n        return threadLocalInstance.get();\n    }\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample4 {\n\n    public ThreadLocalSingletonExample4() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample4 {\n    private static final ThreadLocal<ThreadLocalSingletonExample4> threadLocalInstance =\n            ThreadLocal.withInitial(ThreadLocalSingletonExample4::new);\n\n    private ThreadLocalSingletonExample4() {\n    }\n\n    public static ThreadLocalSingletonExample4 getInstance() {\n        return threadLocalInstance.get();\n    }\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample5 {\n\n    public ThreadLocalSingletonExample5() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample5 {\n    private static final ThreadLocal<ThreadLocalSingletonExample5> threadLocalInstance =\n            ThreadLocal.withInitial(ThreadLocalSingletonExample5::new);\n\n    private ThreadLocalSingletonExample5() {\n    }\n\n    public static ThreadLocalSingletonExample5 getInstance() {\n        return threadLocalInstance.get();\n    }\n}"
  },
  {
    "type": "ExpiringSingleton",
    "input": "public class ExpiringSingletonExample1 {\n\n    public ExpiringSingletonExample1() {}\n\n}",
    "output": "import java.time.Instant;\n\npublic class ExpiringSingletonExample1 {\n    private static ExpiringSingletonExample1 instance;\n    private Instant creationTime;\n\n    private ExpiringSingletonExample1() {\n        creationTime = Instant.now();\n    }\n\n    public static ExpiringSingletonExample1 getInstance() {\n        if (instance == null || Instant.now().isAfter(instance.creationTime.plusSeconds(60))) {\n            synchronized (ExpiringSingletonExample1.class) {\n                if (instance == null || Instant.now().isAfter(instance.creationTime.plusSeconds(60))) {\n                    instance = new ExpiringSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public String getCreationTime() {\n        return creationTime.toString();\n    }\n}"
  },
  {
    "type": "ExpiringSingleton",
    "input": "public class ExpiringSingletonExample2 {\n\n    public ExpiringSingletonExample2() {}\n\n}",
    "output": "import java.time.Instant;\n\npublic class ExpiringSingletonExample2 {\n    private static ExpiringSingletonExample2 instance;\n    private Instant creationTime;\n\n    private ExpiringSingletonExample2() {\n        creationTime = Instant.now();\n    }\n\n    public static ExpiringSingletonExample2 getInstance() {\n        if (instance == null || Instant.now().isAfter(instance.creationTime.plusSeconds(60))) {\n            synchronized (ExpiringSingletonExample2.class) {\n                if (instance == null || Instant.now().isAfter(instance.creationTime.plusSeconds(60))) {\n                    instance = new ExpiringSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public String getCreationTime() {\n        return creationTime.toString();\n    }\n}"
  },
  {
    "type": "ExpiringSingleton",
    "input": "public class ExpiringSingletonExample3 {\n\n    public ExpiringSingletonExample3() {}\n\n}",
    "output": "import java.time.Instant;\n\npublic class ExpiringSingletonExample3 {\n    private static ExpiringSingletonExample3 instance;\n    private Instant creationTime;\n\n    private ExpiringSingletonExample3() {\n        creationTime = Instant.now();\n    }\n\n    public static ExpiringSingletonExample3 getInstance() {\n        if (instance == null || Instant.now().isAfter(instance.creationTime.plusSeconds(60))) {\n            synchronized (ExpiringSingletonExample3.class) {\n                if (instance == null || Instant.now().isAfter(instance.creationTime.plusSeconds(60))) {\n                    instance = new ExpiringSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public String getCreationTime() {\n        return creationTime.toString();\n    }\n}"
  },
  {
    "type": "ExpiringSingleton",
    "input": "public class ExpiringSingletonExample4 {\n\n    public ExpiringSingletonExample4() {}\n\n}",
    "output": "import java.time.Instant;\n\npublic class ExpiringSingletonExample4 {\n    private static ExpiringSingletonExample4 instance;\n    private Instant creationTime;\n\n    private ExpiringSingletonExample4() {\n        creationTime = Instant.now();\n    }\n\n    public static ExpiringSingletonExample4 getInstance() {\n        if (instance == null || Instant.now().isAfter(instance.creationTime.plusSeconds(60))) {\n            synchronized (ExpiringSingletonExample4.class) {\n                if (instance == null || Instant.now().isAfter(instance.creationTime.plusSeconds(60))) {\n                    instance = new ExpiringSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public String getCreationTime() {\n        return creationTime.toString();\n    }\n}"
  },
  {
    "type": "ExpiringSingleton",
    "input": "public class ExpiringSingletonExample5 {\n\n    public ExpiringSingletonExample5() {}\n\n}",
    "output": "import java.time.Instant;\n\npublic class ExpiringSingletonExample5 {\n    private static ExpiringSingletonExample5 instance;\n    private Instant creationTime;\n\n    private ExpiringSingletonExample5() {\n        creationTime = Instant.now();\n    }\n\n    public static ExpiringSingletonExample5 getInstance() {\n        if (instance == null || Instant.now().isAfter(instance.creationTime.plusSeconds(60))) {\n            synchronized (ExpiringSingletonExample5.class) {\n                if (instance == null || Instant.now().isAfter(instance.creationTime.plusSeconds(60))) {\n                    instance = new ExpiringSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public String getCreationTime() {\n        return creationTime.toString();\n    }\n}"
  },
  {
    "type": "CurrencyConverterSingleton",
    "input": "public class CurrencyConverterSingletonExample1 {\n\n    public CurrencyConverterSingletonExample1() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class CurrencyConverterSingletonExample1 {\n\n    private static CurrencyConverterSingletonExample1 instance;\n    private Map<String, Double> exchangeRates;\n\n    private CurrencyConverterSingletonExample1() {\n        exchangeRates = new HashMap<>();\n        exchangeRates.put(\"USD_EUR\", 0.85);\n        exchangeRates.put(\"EUR_USD\", 1.18);\n    }\n\n    public static CurrencyConverterSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (CurrencyConverterSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new CurrencyConverterSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public double convert(String from, String to, double amount) {\n        String key = from + \"_\" + to;\n        return amount * exchangeRates.getOrDefault(key, 1.0);\n    }\n\n}"
  },
  {
    "type": "CurrencyConverterSingleton",
    "input": "public class CurrencyConverterSingletonExample2 {\n\n    public CurrencyConverterSingletonExample2() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class CurrencyConverterSingletonExample2 {\n\n    private static CurrencyConverterSingletonExample2 instance;\n    private Map<String, Double> exchangeRates;\n\n    private CurrencyConverterSingletonExample2() {\n        exchangeRates = new HashMap<>();\n        exchangeRates.put(\"USD_EUR\", 0.85);\n        exchangeRates.put(\"EUR_USD\", 1.18);\n    }\n\n    public static CurrencyConverterSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (CurrencyConverterSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new CurrencyConverterSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public double convert(String from, String to, double amount) {\n        String key = from + \"_\" + to;\n        return amount * exchangeRates.getOrDefault(key, 1.0);\n    }\n\n}"
  },
  {
    "type": "CurrencyConverterSingleton",
    "input": "public class CurrencyConverterSingletonExample3 {\n\n    public CurrencyConverterSingletonExample3() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class CurrencyConverterSingletonExample3 {\n\n    private static CurrencyConverterSingletonExample3 instance;\n    private Map<String, Double> exchangeRates;\n\n    private CurrencyConverterSingletonExample3() {\n        exchangeRates = new HashMap<>();\n        exchangeRates.put(\"USD_EUR\", 0.85);\n        exchangeRates.put(\"EUR_USD\", 1.18);\n    }\n\n    public static CurrencyConverterSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (CurrencyConverterSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new CurrencyConverterSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public double convert(String from, String to, double amount) {\n        String key = from + \"_\" + to;\n        return amount * exchangeRates.getOrDefault(key, 1.0);\n    }\n\n}"
  },
  {
    "type": "CurrencyConverterSingleton",
    "input": "public class CurrencyConverterSingletonExample4 {\n\n    public CurrencyConverterSingletonExample4() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class CurrencyConverterSingletonExample4 {\n\n    private static CurrencyConverterSingletonExample4 instance;\n    private Map<String, Double> exchangeRates;\n\n    private CurrencyConverterSingletonExample4() {\n        exchangeRates = new HashMap<>();\n        exchangeRates.put(\"USD_EUR\", 0.85);\n        exchangeRates.put(\"EUR_USD\", 1.18);\n    }\n\n    public static CurrencyConverterSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (CurrencyConverterSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new CurrencyConverterSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public double convert(String from, String to, double amount) {\n        String key = from + \"_\" + to;\n        return amount * exchangeRates.getOrDefault(key, 1.0);\n    }\n\n}"
  },
  {
    "type": "CurrencyConverterSingleton",
    "input": "public class CurrencyConverterSingletonExample5 {\n\n    public CurrencyConverterSingletonExample5() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class CurrencyConverterSingletonExample5 {\n\n    private static CurrencyConverterSingletonExample5 instance;\n    private Map<String, Double> exchangeRates;\n\n    private CurrencyConverterSingletonExample5() {\n        exchangeRates = new HashMap<>();\n        exchangeRates.put(\"USD_EUR\", 0.85);\n        exchangeRates.put(\"EUR_USD\", 1.18);\n    }\n\n    public static CurrencyConverterSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (CurrencyConverterSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new CurrencyConverterSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public double convert(String from, String to, double amount) {\n        String key = from + \"_\" + to;\n        return amount * exchangeRates.getOrDefault(key, 1.0);\n    }\n\n}"
  },
  {
    "type": "FileSystemCacheSingleton",
    "input": "public class FileSystemCacheSingletonExample1 {\n\n    public FileSystemCacheSingletonExample1() {}\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class FileSystemCacheSingletonExample1 {\n\n    private static FileSystemCacheSingletonExample1 instance;\n    private Set<String> cachedFiles;\n\n    private FileSystemCacheSingletonExample1() {\n        cachedFiles = new HashSet<>();\n    }\n\n    public static synchronized FileSystemCacheSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new FileSystemCacheSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void cacheFile(String path) {\n        cachedFiles.add(path);\n        System.out.println(\"Caching file: \" + path);\n    }\n\n    public boolean isFileCached(String path) {\n        return cachedFiles.contains(path);\n    }\n\n}"
  },
  {
    "type": "FileSystemCacheSingleton",
    "input": "public class FileSystemCacheSingletonExample2 {\n\n    public FileSystemCacheSingletonExample2() {}\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class FileSystemCacheSingletonExample2 {\n\n    private static FileSystemCacheSingletonExample2 instance;\n    private Set<String> cachedFiles;\n\n    private FileSystemCacheSingletonExample2() {\n        cachedFiles = new HashSet<>();\n    }\n\n    public static synchronized FileSystemCacheSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new FileSystemCacheSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void cacheFile(String path) {\n        cachedFiles.add(path);\n        System.out.println(\"Caching file: \" + path);\n    }\n\n    public boolean isFileCached(String path) {\n        return cachedFiles.contains(path);\n    }\n\n}"
  },
  {
    "type": "FileSystemCacheSingleton",
    "input": "public class FileSystemCacheSingletonExample3 {\n\n    public FileSystemCacheSingletonExample3() {}\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class FileSystemCacheSingletonExample3 {\n\n    private static FileSystemCacheSingletonExample3 instance;\n    private Set<String> cachedFiles;\n\n    private FileSystemCacheSingletonExample3() {\n        cachedFiles = new HashSet<>();\n    }\n\n    public static synchronized FileSystemCacheSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new FileSystemCacheSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void cacheFile(String path) {\n        cachedFiles.add(path);\n        System.out.println(\"Caching file: \" + path);\n    }\n\n    public boolean isFileCached(String path) {\n        return cachedFiles.contains(path);\n    }\n\n}"
  },
  {
    "type": "FileSystemCacheSingleton",
    "input": "public class FileSystemCacheSingletonExample4 {\n\n    public FileSystemCacheSingletonExample4() {}\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class FileSystemCacheSingletonExample4 {\n\n    private static FileSystemCacheSingletonExample4 instance;\n    private Set<String> cachedFiles;\n\n    private FileSystemCacheSingletonExample4() {\n        cachedFiles = new HashSet<>();\n    }\n\n    public static synchronized FileSystemCacheSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new FileSystemCacheSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void cacheFile(String path) {\n        cachedFiles.add(path);\n        System.out.println(\"Caching file: \" + path);\n    }\n\n    public boolean isFileCached(String path) {\n        return cachedFiles.contains(path);\n    }\n\n}"
  },
  {
    "type": "FileSystemCacheSingleton",
    "input": "public class FileSystemCacheSingletonExample5 {\n\n    public FileSystemCacheSingletonExample5() {}\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class FileSystemCacheSingletonExample5 {\n\n    private static FileSystemCacheSingletonExample5 instance;\n    private Set<String> cachedFiles;\n\n    private FileSystemCacheSingletonExample5() {\n        cachedFiles = new HashSet<>();\n    }\n\n    public static synchronized FileSystemCacheSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new FileSystemCacheSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void cacheFile(String path) {\n        cachedFiles.add(path);\n        System.out.println(\"Caching file: \" + path);\n    }\n\n    public boolean isFileCached(String path) {\n        return cachedFiles.contains(path);\n    }\n\n}"
  },
  {
    "type": "NotificationServiceSingleton",
    "input": "public class NotificationServiceSingletonExample1 {\n\n    public NotificationServiceSingletonExample1() {}\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class NotificationServiceSingletonExample1 {\n\n    private static NotificationServiceSingletonExample1 instance;\n    private Set<String> registeredUsers;\n\n    private NotificationServiceSingletonExample1() {\n        registeredUsers = new HashSet<>();\n    }\n\n    public static synchronized NotificationServiceSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new NotificationServiceSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void registerUser(String user) {\n        registeredUsers.add(user);\n    }\n\n    public void sendNotification(String user, String message) {\n        if (registeredUsers.contains(user)) {\n            System.out.println(\"Notification sent to \" + user + \": \" + message);\n        } else {\n            System.out.println(\"User not registered: \" + user);\n        }\n    }\n\n}"
  },
  {
    "type": "NotificationServiceSingleton",
    "input": "public class NotificationServiceSingletonExample2 {\n\n    public NotificationServiceSingletonExample2() {}\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class NotificationServiceSingletonExample2 {\n\n    private static NotificationServiceSingletonExample2 instance;\n    private Set<String> registeredUsers;\n\n    private NotificationServiceSingletonExample2() {\n        registeredUsers = new HashSet<>();\n    }\n\n    public static synchronized NotificationServiceSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new NotificationServiceSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void registerUser(String user) {\n        registeredUsers.add(user);\n    }\n\n    public void sendNotification(String user, String message) {\n        if (registeredUsers.contains(user)) {\n            System.out.println(\"Notification sent to \" + user + \": \" + message);\n        } else {\n            System.out.println(\"User not registered: \" + user);\n        }\n    }\n\n}"
  },
  {
    "type": "NotificationServiceSingleton",
    "input": "public class NotificationServiceSingletonExample3 {\n\n    public NotificationServiceSingletonExample3() {}\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class NotificationServiceSingletonExample3 {\n\n    private static NotificationServiceSingletonExample3 instance;\n    private Set<String> registeredUsers;\n\n    private NotificationServiceSingletonExample3() {\n        registeredUsers = new HashSet<>();\n    }\n\n    public static synchronized NotificationServiceSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new NotificationServiceSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void registerUser(String user) {\n        registeredUsers.add(user);\n    }\n\n    public void sendNotification(String user, String message) {\n        if (registeredUsers.contains(user)) {\n            System.out.println(\"Notification sent to \" + user + \": \" + message);\n        } else {\n            System.out.println(\"User not registered: \" + user);\n        }\n    }\n\n}"
  },
  {
    "type": "NotificationServiceSingleton",
    "input": "public class NotificationServiceSingletonExample4 {\n\n    public NotificationServiceSingletonExample4() {}\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class NotificationServiceSingletonExample4 {\n\n    private static NotificationServiceSingletonExample4 instance;\n    private Set<String> registeredUsers;\n\n    private NotificationServiceSingletonExample4() {\n        registeredUsers = new HashSet<>();\n    }\n\n    public static synchronized NotificationServiceSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new NotificationServiceSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void registerUser(String user) {\n        registeredUsers.add(user);\n    }\n\n    public void sendNotification(String user, String message) {\n        if (registeredUsers.contains(user)) {\n            System.out.println(\"Notification sent to \" + user + \": \" + message);\n        } else {\n            System.out.println(\"User not registered: \" + user);\n        }\n    }\n\n}"
  },
  {
    "type": "NotificationServiceSingleton",
    "input": "public class NotificationServiceSingletonExample5 {\n\n    public NotificationServiceSingletonExample5() {}\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class NotificationServiceSingletonExample5 {\n\n    private static NotificationServiceSingletonExample5 instance;\n    private Set<String> registeredUsers;\n\n    private NotificationServiceSingletonExample5() {\n        registeredUsers = new HashSet<>();\n    }\n\n    public static synchronized NotificationServiceSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new NotificationServiceSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void registerUser(String user) {\n        registeredUsers.add(user);\n    }\n\n    public void sendNotification(String user, String message) {\n        if (registeredUsers.contains(user)) {\n            System.out.println(\"Notification sent to \" + user + \": \" + message);\n        } else {\n            System.out.println(\"User not registered: \" + user);\n        }\n    }\n\n}"
  },
  {
    "type": "SessionManagerSingleton",
    "input": "public class SessionManagerSingletonExample1 {\n\n    public SessionManagerSingletonExample1() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SessionManagerSingletonExample1 {\n\n    private static SessionManagerSingletonExample1 instance;\n    private Map<String, String> sessions;\n\n    private SessionManagerSingletonExample1() {\n        sessions = new HashMap<>();\n    }\n\n    public static SessionManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (SessionManagerSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new SessionManagerSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        sessions.put(user, \"Active\");\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return sessions.containsKey(user);\n    }\n\n}"
  },
  {
    "type": "SessionManagerSingleton",
    "input": "public class SessionManagerSingletonExample2 {\n\n    public SessionManagerSingletonExample2() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SessionManagerSingletonExample2 {\n\n    private static SessionManagerSingletonExample2 instance;\n    private Map<String, String> sessions;\n\n    private SessionManagerSingletonExample2() {\n        sessions = new HashMap<>();\n    }\n\n    public static SessionManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (SessionManagerSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new SessionManagerSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        sessions.put(user, \"Active\");\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return sessions.containsKey(user);\n    }\n\n}"
  },
  {
    "type": "SessionManagerSingleton",
    "input": "public class SessionManagerSingletonExample3 {\n\n    public SessionManagerSingletonExample3() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SessionManagerSingletonExample3 {\n\n    private static SessionManagerSingletonExample3 instance;\n    private Map<String, String> sessions;\n\n    private SessionManagerSingletonExample3() {\n        sessions = new HashMap<>();\n    }\n\n    public static SessionManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (SessionManagerSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new SessionManagerSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        sessions.put(user, \"Active\");\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return sessions.containsKey(user);\n    }\n\n}"
  },
  {
    "type": "SessionManagerSingleton",
    "input": "public class SessionManagerSingletonExample4 {\n\n    public SessionManagerSingletonExample4() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SessionManagerSingletonExample4 {\n\n    private static SessionManagerSingletonExample4 instance;\n    private Map<String, String> sessions;\n\n    private SessionManagerSingletonExample4() {\n        sessions = new HashMap<>();\n    }\n\n    public static SessionManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (SessionManagerSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new SessionManagerSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        sessions.put(user, \"Active\");\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return sessions.containsKey(user);\n    }\n\n}"
  },
  {
    "type": "SessionManagerSingleton",
    "input": "public class SessionManagerSingletonExample5 {\n\n    public SessionManagerSingletonExample5() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SessionManagerSingletonExample5 {\n\n    private static SessionManagerSingletonExample5 instance;\n    private Map<String, String> sessions;\n\n    private SessionManagerSingletonExample5() {\n        sessions = new HashMap<>();\n    }\n\n    public static SessionManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (SessionManagerSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new SessionManagerSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        sessions.put(user, \"Active\");\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return sessions.containsKey(user);\n    }\n\n}"
  },
  {
    "type": "ApplicationSettingsSingleton",
    "input": "public class ApplicationSettingsSingletonExample1 {\n\n    public ApplicationSettingsSingletonExample1() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ApplicationSettingsSingletonExample1 {\n\n    private static ApplicationSettingsSingletonExample1 instance;\n    private Properties properties;\n\n    private ApplicationSettingsSingletonExample1() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"appsettings.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized ApplicationSettingsSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new ApplicationSettingsSingletonExample1();\n        }\n        return instance;\n    }\n\n    public String getSetting(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ApplicationSettingsSingleton",
    "input": "public class ApplicationSettingsSingletonExample2 {\n\n    public ApplicationSettingsSingletonExample2() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ApplicationSettingsSingletonExample2 {\n\n    private static ApplicationSettingsSingletonExample2 instance;\n    private Properties properties;\n\n    private ApplicationSettingsSingletonExample2() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"appsettings.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized ApplicationSettingsSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new ApplicationSettingsSingletonExample2();\n        }\n        return instance;\n    }\n\n    public String getSetting(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ApplicationSettingsSingleton",
    "input": "public class ApplicationSettingsSingletonExample3 {\n\n    public ApplicationSettingsSingletonExample3() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ApplicationSettingsSingletonExample3 {\n\n    private static ApplicationSettingsSingletonExample3 instance;\n    private Properties properties;\n\n    private ApplicationSettingsSingletonExample3() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"appsettings.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized ApplicationSettingsSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new ApplicationSettingsSingletonExample3();\n        }\n        return instance;\n    }\n\n    public String getSetting(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ApplicationSettingsSingleton",
    "input": "public class ApplicationSettingsSingletonExample4 {\n\n    public ApplicationSettingsSingletonExample4() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ApplicationSettingsSingletonExample4 {\n\n    private static ApplicationSettingsSingletonExample4 instance;\n    private Properties properties;\n\n    private ApplicationSettingsSingletonExample4() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"appsettings.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized ApplicationSettingsSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new ApplicationSettingsSingletonExample4();\n        }\n        return instance;\n    }\n\n    public String getSetting(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ApplicationSettingsSingleton",
    "input": "public class ApplicationSettingsSingletonExample5 {\n\n    public ApplicationSettingsSingletonExample5() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ApplicationSettingsSingletonExample5 {\n\n    private static ApplicationSettingsSingletonExample5 instance;\n    private Properties properties;\n\n    private ApplicationSettingsSingletonExample5() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"appsettings.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized ApplicationSettingsSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new ApplicationSettingsSingletonExample5();\n        }\n        return instance;\n    }\n\n    public String getSetting(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "LoggerSingleton",
    "input": "public class LoggerSingletonExample1 {\n\n    public LoggerSingletonExample1() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample1 {\n\n    private static LoggerSingletonExample1 instance;\n    private FileWriter fileWriter;\n\n    private LoggerSingletonExample1() {\n        try {\n            fileWriter = new FileWriter(\"log.txt\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized LoggerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new LoggerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "LoggerSingleton",
    "input": "public class LoggerSingletonExample2 {\n\n    public LoggerSingletonExample2() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample2 {\n\n    private static LoggerSingletonExample2 instance;\n    private FileWriter fileWriter;\n\n    private LoggerSingletonExample2() {\n        try {\n            fileWriter = new FileWriter(\"log.txt\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized LoggerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new LoggerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "LoggerSingleton",
    "input": "public class LoggerSingletonExample3 {\n\n    public LoggerSingletonExample3() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample3 {\n\n    private static LoggerSingletonExample3 instance;\n    private FileWriter fileWriter;\n\n    private LoggerSingletonExample3() {\n        try {\n            fileWriter = new FileWriter(\"log.txt\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized LoggerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new LoggerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "LoggerSingleton",
    "input": "public class LoggerSingletonExample4 {\n\n    public LoggerSingletonExample4() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample4 {\n\n    private static LoggerSingletonExample4 instance;\n    private FileWriter fileWriter;\n\n    private LoggerSingletonExample4() {\n        try {\n            fileWriter = new FileWriter(\"log.txt\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized LoggerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new LoggerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "LoggerSingleton",
    "input": "public class LoggerSingletonExample5 {\n\n    public LoggerSingletonExample5() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample5 {\n\n    private static LoggerSingletonExample5 instance;\n    private FileWriter fileWriter;\n\n    private LoggerSingletonExample5() {\n        try {\n            fileWriter = new FileWriter(\"log.txt\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized LoggerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new LoggerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionPoolSingleton",
    "input": "public class DatabaseConnectionPoolSingletonExample1 {\n\n    public DatabaseConnectionPoolSingletonExample1() {}\n\n}",
    "output": "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class DatabaseConnectionPoolSingletonExample1 {\n\n    private static DatabaseConnectionPoolSingletonExample1 instance;\n    private Queue<String> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample1() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static synchronized DatabaseConnectionPoolSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionPoolSingletonExample1();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionPoolSingleton",
    "input": "public class DatabaseConnectionPoolSingletonExample2 {\n\n    public DatabaseConnectionPoolSingletonExample2() {}\n\n}",
    "output": "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class DatabaseConnectionPoolSingletonExample2 {\n\n    private static DatabaseConnectionPoolSingletonExample2 instance;\n    private Queue<String> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample2() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static synchronized DatabaseConnectionPoolSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionPoolSingletonExample2();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionPoolSingleton",
    "input": "public class DatabaseConnectionPoolSingletonExample3 {\n\n    public DatabaseConnectionPoolSingletonExample3() {}\n\n}",
    "output": "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class DatabaseConnectionPoolSingletonExample3 {\n\n    private static DatabaseConnectionPoolSingletonExample3 instance;\n    private Queue<String> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample3() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static synchronized DatabaseConnectionPoolSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionPoolSingletonExample3();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionPoolSingleton",
    "input": "public class DatabaseConnectionPoolSingletonExample4 {\n\n    public DatabaseConnectionPoolSingletonExample4() {}\n\n}",
    "output": "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class DatabaseConnectionPoolSingletonExample4 {\n\n    private static DatabaseConnectionPoolSingletonExample4 instance;\n    private Queue<String> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample4() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static synchronized DatabaseConnectionPoolSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionPoolSingletonExample4();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionPoolSingleton",
    "input": "public class DatabaseConnectionPoolSingletonExample5 {\n\n    public DatabaseConnectionPoolSingletonExample5() {}\n\n}",
    "output": "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class DatabaseConnectionPoolSingletonExample5 {\n\n    private static DatabaseConnectionPoolSingletonExample5 instance;\n    private Queue<String> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample5() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static synchronized DatabaseConnectionPoolSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionPoolSingletonExample5();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}"
  },
  {
    "type": "APIRequestRateLimiterSingleton",
    "input": "public class APIRequestRateLimiterSingletonExample1 {\n\n    public APIRequestRateLimiterSingletonExample1() {}\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class APIRequestRateLimiterSingletonExample1 {\n\n    private static APIRequestRateLimiterSingletonExample1 instance;\n    private AtomicInteger tokenCount;\n    private static final int MAX_TOKENS = 100;\n\n    private APIRequestRateLimiterSingletonExample1() {\n        tokenCount = new AtomicInteger(MAX_TOKENS);\n    }\n\n    public static synchronized APIRequestRateLimiterSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new APIRequestRateLimiterSingletonExample1();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest() {\n        if (tokenCount.get() > 0) {\n            tokenCount.decrementAndGet();\n            return true;\n        }\n        return false;\n    }\n\n    public void refillTokens() {\n        tokenCount.set(MAX_TOKENS);\n    }\n\n}"
  },
  {
    "type": "APIRequestRateLimiterSingleton",
    "input": "public class APIRequestRateLimiterSingletonExample2 {\n\n    public APIRequestRateLimiterSingletonExample2() {}\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class APIRequestRateLimiterSingletonExample2 {\n\n    private static APIRequestRateLimiterSingletonExample2 instance;\n    private AtomicInteger tokenCount;\n    private static final int MAX_TOKENS = 100;\n\n    private APIRequestRateLimiterSingletonExample2() {\n        tokenCount = new AtomicInteger(MAX_TOKENS);\n    }\n\n    public static synchronized APIRequestRateLimiterSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new APIRequestRateLimiterSingletonExample2();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest() {\n        if (tokenCount.get() > 0) {\n            tokenCount.decrementAndGet();\n            return true;\n        }\n        return false;\n    }\n\n    public void refillTokens() {\n        tokenCount.set(MAX_TOKENS);\n    }\n\n}"
  },
  {
    "type": "APIRequestRateLimiterSingleton",
    "input": "public class APIRequestRateLimiterSingletonExample3 {\n\n    public APIRequestRateLimiterSingletonExample3() {}\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class APIRequestRateLimiterSingletonExample3 {\n\n    private static APIRequestRateLimiterSingletonExample3 instance;\n    private AtomicInteger tokenCount;\n    private static final int MAX_TOKENS = 100;\n\n    private APIRequestRateLimiterSingletonExample3() {\n        tokenCount = new AtomicInteger(MAX_TOKENS);\n    }\n\n    public static synchronized APIRequestRateLimiterSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new APIRequestRateLimiterSingletonExample3();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest() {\n        if (tokenCount.get() > 0) {\n            tokenCount.decrementAndGet();\n            return true;\n        }\n        return false;\n    }\n\n    public void refillTokens() {\n        tokenCount.set(MAX_TOKENS);\n    }\n\n}"
  },
  {
    "type": "APIRequestRateLimiterSingleton",
    "input": "public class APIRequestRateLimiterSingletonExample4 {\n\n    public APIRequestRateLimiterSingletonExample4() {}\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class APIRequestRateLimiterSingletonExample4 {\n\n    private static APIRequestRateLimiterSingletonExample4 instance;\n    private AtomicInteger tokenCount;\n    private static final int MAX_TOKENS = 100;\n\n    private APIRequestRateLimiterSingletonExample4() {\n        tokenCount = new AtomicInteger(MAX_TOKENS);\n    }\n\n    public static synchronized APIRequestRateLimiterSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new APIRequestRateLimiterSingletonExample4();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest() {\n        if (tokenCount.get() > 0) {\n            tokenCount.decrementAndGet();\n            return true;\n        }\n        return false;\n    }\n\n    public void refillTokens() {\n        tokenCount.set(MAX_TOKENS);\n    }\n\n}"
  },
  {
    "type": "APIRequestRateLimiterSingleton",
    "input": "public class APIRequestRateLimiterSingletonExample5 {\n\n    public APIRequestRateLimiterSingletonExample5() {}\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class APIRequestRateLimiterSingletonExample5 {\n\n    private static APIRequestRateLimiterSingletonExample5 instance;\n    private AtomicInteger tokenCount;\n    private static final int MAX_TOKENS = 100;\n\n    private APIRequestRateLimiterSingletonExample5() {\n        tokenCount = new AtomicInteger(MAX_TOKENS);\n    }\n\n    public static synchronized APIRequestRateLimiterSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new APIRequestRateLimiterSingletonExample5();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest() {\n        if (tokenCount.get() > 0) {\n            tokenCount.decrementAndGet();\n            return true;\n        }\n        return false;\n    }\n\n    public void refillTokens() {\n        tokenCount.set(MAX_TOKENS);\n    }\n\n}"
  },
  {
    "type": "ConfigurationCacheSingleton",
    "input": "public class ConfigurationCacheSingletonExample1 {\n\n    public ConfigurationCacheSingletonExample1() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ConfigurationCacheSingletonExample1 {\n\n    private static ConfigurationCacheSingletonExample1 instance;\n    private Map<String, String> cache;\n\n    private ConfigurationCacheSingletonExample1() {\n        cache = new HashMap<>();\n    }\n\n    public static synchronized ConfigurationCacheSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationCacheSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "ConfigurationCacheSingleton",
    "input": "public class ConfigurationCacheSingletonExample2 {\n\n    public ConfigurationCacheSingletonExample2() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ConfigurationCacheSingletonExample2 {\n\n    private static ConfigurationCacheSingletonExample2 instance;\n    private Map<String, String> cache;\n\n    private ConfigurationCacheSingletonExample2() {\n        cache = new HashMap<>();\n    }\n\n    public static synchronized ConfigurationCacheSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationCacheSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "ConfigurationCacheSingleton",
    "input": "public class ConfigurationCacheSingletonExample3 {\n\n    public ConfigurationCacheSingletonExample3() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ConfigurationCacheSingletonExample3 {\n\n    private static ConfigurationCacheSingletonExample3 instance;\n    private Map<String, String> cache;\n\n    private ConfigurationCacheSingletonExample3() {\n        cache = new HashMap<>();\n    }\n\n    public static synchronized ConfigurationCacheSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationCacheSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "ConfigurationCacheSingleton",
    "input": "public class ConfigurationCacheSingletonExample4 {\n\n    public ConfigurationCacheSingletonExample4() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ConfigurationCacheSingletonExample4 {\n\n    private static ConfigurationCacheSingletonExample4 instance;\n    private Map<String, String> cache;\n\n    private ConfigurationCacheSingletonExample4() {\n        cache = new HashMap<>();\n    }\n\n    public static synchronized ConfigurationCacheSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationCacheSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "ConfigurationCacheSingleton",
    "input": "public class ConfigurationCacheSingletonExample5 {\n\n    public ConfigurationCacheSingletonExample5() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ConfigurationCacheSingletonExample5 {\n\n    private static ConfigurationCacheSingletonExample5 instance;\n    private Map<String, String> cache;\n\n    private ConfigurationCacheSingletonExample5() {\n        cache = new HashMap<>();\n    }\n\n    public static synchronized ConfigurationCacheSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationCacheSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "TaskSchedulerSingleton",
    "input": "public class TaskSchedulerSingletonExample1 {\n\n    public TaskSchedulerSingletonExample1() {}\n\n}",
    "output": "import java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class TaskSchedulerSingletonExample1 {\n\n    private static TaskSchedulerSingletonExample1 instance;\n    private ScheduledExecutorService scheduler;\n\n    private TaskSchedulerSingletonExample1() {\n        scheduler = Executors.newScheduledThreadPool(1);\n    }\n\n    public static synchronized TaskSchedulerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new TaskSchedulerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void scheduleTask(Runnable task, long delay, TimeUnit unit) {\n        scheduler.schedule(task, delay, unit);\n    }\n\n}"
  },
  {
    "type": "TaskSchedulerSingleton",
    "input": "public class TaskSchedulerSingletonExample2 {\n\n    public TaskSchedulerSingletonExample2() {}\n\n}",
    "output": "import java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class TaskSchedulerSingletonExample2 {\n\n    private static TaskSchedulerSingletonExample2 instance;\n    private ScheduledExecutorService scheduler;\n\n    private TaskSchedulerSingletonExample2() {\n        scheduler = Executors.newScheduledThreadPool(1);\n    }\n\n    public static synchronized TaskSchedulerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new TaskSchedulerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void scheduleTask(Runnable task, long delay, TimeUnit unit) {\n        scheduler.schedule(task, delay, unit);\n    }\n\n}"
  },
  {
    "type": "TaskSchedulerSingleton",
    "input": "public class TaskSchedulerSingletonExample3 {\n\n    public TaskSchedulerSingletonExample3() {}\n\n}",
    "output": "import java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class TaskSchedulerSingletonExample3 {\n\n    private static TaskSchedulerSingletonExample3 instance;\n    private ScheduledExecutorService scheduler;\n\n    private TaskSchedulerSingletonExample3() {\n        scheduler = Executors.newScheduledThreadPool(1);\n    }\n\n    public static synchronized TaskSchedulerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new TaskSchedulerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void scheduleTask(Runnable task, long delay, TimeUnit unit) {\n        scheduler.schedule(task, delay, unit);\n    }\n\n}"
  },
  {
    "type": "TaskSchedulerSingleton",
    "input": "public class TaskSchedulerSingletonExample4 {\n\n    public TaskSchedulerSingletonExample4() {}\n\n}",
    "output": "import java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class TaskSchedulerSingletonExample4 {\n\n    private static TaskSchedulerSingletonExample4 instance;\n    private ScheduledExecutorService scheduler;\n\n    private TaskSchedulerSingletonExample4() {\n        scheduler = Executors.newScheduledThreadPool(1);\n    }\n\n    public static synchronized TaskSchedulerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new TaskSchedulerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void scheduleTask(Runnable task, long delay, TimeUnit unit) {\n        scheduler.schedule(task, delay, unit);\n    }\n\n}"
  },
  {
    "type": "TaskSchedulerSingleton",
    "input": "public class TaskSchedulerSingletonExample5 {\n\n    public TaskSchedulerSingletonExample5() {}\n\n}",
    "output": "import java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class TaskSchedulerSingletonExample5 {\n\n    private static TaskSchedulerSingletonExample5 instance;\n    private ScheduledExecutorService scheduler;\n\n    private TaskSchedulerSingletonExample5() {\n        scheduler = Executors.newScheduledThreadPool(1);\n    }\n\n    public static synchronized TaskSchedulerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new TaskSchedulerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void scheduleTask(Runnable task, long delay, TimeUnit unit) {\n        scheduler.schedule(task, delay, unit);\n    }\n\n}"
  },
  {
    "type": "AuthenticationManagerSingleton",
    "input": "public class AuthenticationManagerSingletonExample1 {\n\n    public AuthenticationManagerSingletonExample1() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class AuthenticationManagerSingletonExample1 {\n\n    private static AuthenticationManagerSingletonExample1 instance;\n    private Map<String, String> userDatabase;\n\n    private AuthenticationManagerSingletonExample1() {\n        userDatabase = new HashMap<>();\n        userDatabase.put(\"admin\", \"password123\");\n        userDatabase.put(\"user\", \"pass\");\n    }\n\n    public static synchronized AuthenticationManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new AuthenticationManagerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public boolean authenticate(String user, String password) {\n        return password.equals(userDatabase.get(user));\n    }\n\n}"
  },
  {
    "type": "AuthenticationManagerSingleton",
    "input": "public class AuthenticationManagerSingletonExample2 {\n\n    public AuthenticationManagerSingletonExample2() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class AuthenticationManagerSingletonExample2 {\n\n    private static AuthenticationManagerSingletonExample2 instance;\n    private Map<String, String> userDatabase;\n\n    private AuthenticationManagerSingletonExample2() {\n        userDatabase = new HashMap<>();\n        userDatabase.put(\"admin\", \"password123\");\n        userDatabase.put(\"user\", \"pass\");\n    }\n\n    public static synchronized AuthenticationManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new AuthenticationManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public boolean authenticate(String user, String password) {\n        return password.equals(userDatabase.get(user));\n    }\n\n}"
  },
  {
    "type": "AuthenticationManagerSingleton",
    "input": "public class AuthenticationManagerSingletonExample3 {\n\n    public AuthenticationManagerSingletonExample3() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class AuthenticationManagerSingletonExample3 {\n\n    private static AuthenticationManagerSingletonExample3 instance;\n    private Map<String, String> userDatabase;\n\n    private AuthenticationManagerSingletonExample3() {\n        userDatabase = new HashMap<>();\n        userDatabase.put(\"admin\", \"password123\");\n        userDatabase.put(\"user\", \"pass\");\n    }\n\n    public static synchronized AuthenticationManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new AuthenticationManagerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public boolean authenticate(String user, String password) {\n        return password.equals(userDatabase.get(user));\n    }\n\n}"
  },
  {
    "type": "AuthenticationManagerSingleton",
    "input": "public class AuthenticationManagerSingletonExample4 {\n\n    public AuthenticationManagerSingletonExample4() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class AuthenticationManagerSingletonExample4 {\n\n    private static AuthenticationManagerSingletonExample4 instance;\n    private Map<String, String> userDatabase;\n\n    private AuthenticationManagerSingletonExample4() {\n        userDatabase = new HashMap<>();\n        userDatabase.put(\"admin\", \"password123\");\n        userDatabase.put(\"user\", \"pass\");\n    }\n\n    public static synchronized AuthenticationManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new AuthenticationManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public boolean authenticate(String user, String password) {\n        return password.equals(userDatabase.get(user));\n    }\n\n}"
  },
  {
    "type": "AuthenticationManagerSingleton",
    "input": "public class AuthenticationManagerSingletonExample5 {\n\n    public AuthenticationManagerSingletonExample5() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class AuthenticationManagerSingletonExample5 {\n\n    private static AuthenticationManagerSingletonExample5 instance;\n    private Map<String, String> userDatabase;\n\n    private AuthenticationManagerSingletonExample5() {\n        userDatabase = new HashMap<>();\n        userDatabase.put(\"admin\", \"password123\");\n        userDatabase.put(\"user\", \"pass\");\n    }\n\n    public static synchronized AuthenticationManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new AuthenticationManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public boolean authenticate(String user, String password) {\n        return password.equals(userDatabase.get(user));\n    }\n\n}"
  },
  {
    "type": "EmailSenderSingleton",
    "input": "public class EmailSenderSingletonExample1 {\n\n    public EmailSenderSingletonExample1() {}\n\n}",
    "output": "public class EmailSenderSingletonExample1 {\n\n    private static EmailSenderSingletonExample1 instance;\n\n    private EmailSenderSingletonExample1() {}\n\n    public static synchronized EmailSenderSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new EmailSenderSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void sendEmail(String recipient, String subject, String body) {\n        System.out.println(\"Email sent to: \" + recipient + \" | Subject: \" + subject);\n    }\n\n}"
  },
  {
    "type": "EmailSenderSingleton",
    "input": "public class EmailSenderSingletonExample2 {\n\n    public EmailSenderSingletonExample2() {}\n\n}",
    "output": "public class EmailSenderSingletonExample2 {\n\n    private static EmailSenderSingletonExample2 instance;\n\n    private EmailSenderSingletonExample2() {}\n\n    public static synchronized EmailSenderSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new EmailSenderSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void sendEmail(String recipient, String subject, String body) {\n        System.out.println(\"Email sent to: \" + recipient + \" | Subject: \" + subject);\n    }\n\n}"
  },
  {
    "type": "EmailSenderSingleton",
    "input": "public class EmailSenderSingletonExample3 {\n\n    public EmailSenderSingletonExample3() {}\n\n}",
    "output": "public class EmailSenderSingletonExample3 {\n\n    private static EmailSenderSingletonExample3 instance;\n\n    private EmailSenderSingletonExample3() {}\n\n    public static synchronized EmailSenderSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new EmailSenderSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void sendEmail(String recipient, String subject, String body) {\n        System.out.println(\"Email sent to: \" + recipient + \" | Subject: \" + subject);\n    }\n\n}"
  },
  {
    "type": "EmailSenderSingleton",
    "input": "public class EmailSenderSingletonExample4 {\n\n    public EmailSenderSingletonExample4() {}\n\n}",
    "output": "public class EmailSenderSingletonExample4 {\n\n    private static EmailSenderSingletonExample4 instance;\n\n    private EmailSenderSingletonExample4() {}\n\n    public static synchronized EmailSenderSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new EmailSenderSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void sendEmail(String recipient, String subject, String body) {\n        System.out.println(\"Email sent to: \" + recipient + \" | Subject: \" + subject);\n    }\n\n}"
  },
  {
    "type": "EmailSenderSingleton",
    "input": "public class EmailSenderSingletonExample5 {\n\n    public EmailSenderSingletonExample5() {}\n\n}",
    "output": "public class EmailSenderSingletonExample5 {\n\n    private static EmailSenderSingletonExample5 instance;\n\n    private EmailSenderSingletonExample5() {}\n\n    public static synchronized EmailSenderSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new EmailSenderSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void sendEmail(String recipient, String subject, String body) {\n        System.out.println(\"Email sent to: \" + recipient + \" | Subject: \" + subject);\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSessionManagerSingleton",
    "input": "public class ThreadLocalSessionManagerSingletonExample1 {\n\n    public ThreadLocalSessionManagerSingletonExample1() {}\n\n}",
    "output": "public class ThreadLocalSessionManagerSingletonExample1 {\n\n    private static final ThreadLocal<ThreadLocalSessionManagerSingletonExample1> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSessionManagerSingletonExample1::new);\n\n    private ThreadLocalSessionManagerSingletonExample1() {}\n\n    public static ThreadLocalSessionManagerSingletonExample1 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public void createSession(String sessionId) {\n        System.out.println(Thread.currentThread().getName() + \" - Session Created: \" + sessionId);\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSessionManagerSingleton",
    "input": "public class ThreadLocalSessionManagerSingletonExample2 {\n\n    public ThreadLocalSessionManagerSingletonExample2() {}\n\n}",
    "output": "public class ThreadLocalSessionManagerSingletonExample2 {\n\n    private static final ThreadLocal<ThreadLocalSessionManagerSingletonExample2> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSessionManagerSingletonExample2::new);\n\n    private ThreadLocalSessionManagerSingletonExample2() {}\n\n    public static ThreadLocalSessionManagerSingletonExample2 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public void createSession(String sessionId) {\n        System.out.println(Thread.currentThread().getName() + \" - Session Created: \" + sessionId);\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSessionManagerSingleton",
    "input": "public class ThreadLocalSessionManagerSingletonExample3 {\n\n    public ThreadLocalSessionManagerSingletonExample3() {}\n\n}",
    "output": "public class ThreadLocalSessionManagerSingletonExample3 {\n\n    private static final ThreadLocal<ThreadLocalSessionManagerSingletonExample3> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSessionManagerSingletonExample3::new);\n\n    private ThreadLocalSessionManagerSingletonExample3() {}\n\n    public static ThreadLocalSessionManagerSingletonExample3 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public void createSession(String sessionId) {\n        System.out.println(Thread.currentThread().getName() + \" - Session Created: \" + sessionId);\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSessionManagerSingleton",
    "input": "public class ThreadLocalSessionManagerSingletonExample4 {\n\n    public ThreadLocalSessionManagerSingletonExample4() {}\n\n}",
    "output": "public class ThreadLocalSessionManagerSingletonExample4 {\n\n    private static final ThreadLocal<ThreadLocalSessionManagerSingletonExample4> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSessionManagerSingletonExample4::new);\n\n    private ThreadLocalSessionManagerSingletonExample4() {}\n\n    public static ThreadLocalSessionManagerSingletonExample4 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public void createSession(String sessionId) {\n        System.out.println(Thread.currentThread().getName() + \" - Session Created: \" + sessionId);\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSessionManagerSingleton",
    "input": "public class ThreadLocalSessionManagerSingletonExample5 {\n\n    public ThreadLocalSessionManagerSingletonExample5() {}\n\n}",
    "output": "public class ThreadLocalSessionManagerSingletonExample5 {\n\n    private static final ThreadLocal<ThreadLocalSessionManagerSingletonExample5> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSessionManagerSingletonExample5::new);\n\n    private ThreadLocalSessionManagerSingletonExample5() {}\n\n    public static ThreadLocalSessionManagerSingletonExample5 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public void createSession(String sessionId) {\n        System.out.println(Thread.currentThread().getName() + \" - Session Created: \" + sessionId);\n    }\n\n}"
  },
  {
    "type": "SessionTrackerSingleton",
    "input": "public class SessionTrackerSingletonExample1 {\n\n    public SessionTrackerSingletonExample1() {}\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class SessionTrackerSingletonExample1 {\n\n    private static SessionTrackerSingletonExample1 instance;\n    private Set<String> activeSessions;\n\n    private SessionTrackerSingletonExample1() {\n        activeSessions = new HashSet<>();\n    }\n\n    public static synchronized SessionTrackerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new SessionTrackerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void trackSession(String sessionId) {\n        activeSessions.add(sessionId);\n        System.out.println(\"Session tracked: \" + sessionId);\n    }\n\n    public boolean isSessionActive(String sessionId) {\n        return activeSessions.contains(sessionId);\n    }\n\n}"
  },
  {
    "type": "SessionTrackerSingleton",
    "input": "public class SessionTrackerSingletonExample2 {\n\n    public SessionTrackerSingletonExample2() {}\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class SessionTrackerSingletonExample2 {\n\n    private static SessionTrackerSingletonExample2 instance;\n    private Set<String> activeSessions;\n\n    private SessionTrackerSingletonExample2() {\n        activeSessions = new HashSet<>();\n    }\n\n    public static synchronized SessionTrackerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new SessionTrackerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void trackSession(String sessionId) {\n        activeSessions.add(sessionId);\n        System.out.println(\"Session tracked: \" + sessionId);\n    }\n\n    public boolean isSessionActive(String sessionId) {\n        return activeSessions.contains(sessionId);\n    }\n\n}"
  },
  {
    "type": "SessionTrackerSingleton",
    "input": "public class SessionTrackerSingletonExample3 {\n\n    public SessionTrackerSingletonExample3() {}\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class SessionTrackerSingletonExample3 {\n\n    private static SessionTrackerSingletonExample3 instance;\n    private Set<String> activeSessions;\n\n    private SessionTrackerSingletonExample3() {\n        activeSessions = new HashSet<>();\n    }\n\n    public static synchronized SessionTrackerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new SessionTrackerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void trackSession(String sessionId) {\n        activeSessions.add(sessionId);\n        System.out.println(\"Session tracked: \" + sessionId);\n    }\n\n    public boolean isSessionActive(String sessionId) {\n        return activeSessions.contains(sessionId);\n    }\n\n}"
  },
  {
    "type": "SessionTrackerSingleton",
    "input": "public class SessionTrackerSingletonExample4 {\n\n    public SessionTrackerSingletonExample4() {}\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class SessionTrackerSingletonExample4 {\n\n    private static SessionTrackerSingletonExample4 instance;\n    private Set<String> activeSessions;\n\n    private SessionTrackerSingletonExample4() {\n        activeSessions = new HashSet<>();\n    }\n\n    public static synchronized SessionTrackerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new SessionTrackerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void trackSession(String sessionId) {\n        activeSessions.add(sessionId);\n        System.out.println(\"Session tracked: \" + sessionId);\n    }\n\n    public boolean isSessionActive(String sessionId) {\n        return activeSessions.contains(sessionId);\n    }\n\n}"
  },
  {
    "type": "SessionTrackerSingleton",
    "input": "public class SessionTrackerSingletonExample5 {\n\n    public SessionTrackerSingletonExample5() {}\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class SessionTrackerSingletonExample5 {\n\n    private static SessionTrackerSingletonExample5 instance;\n    private Set<String> activeSessions;\n\n    private SessionTrackerSingletonExample5() {\n        activeSessions = new HashSet<>();\n    }\n\n    public static synchronized SessionTrackerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new SessionTrackerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void trackSession(String sessionId) {\n        activeSessions.add(sessionId);\n        System.out.println(\"Session tracked: \" + sessionId);\n    }\n\n    public boolean isSessionActive(String sessionId) {\n        return activeSessions.contains(sessionId);\n    }\n\n}"
  },
  {
    "type": "NotificationCenterSingleton",
    "input": "public class NotificationCenterSingletonExample1 {\n\n    public NotificationCenterSingletonExample1() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationCenterSingletonExample1 {\n\n    private static NotificationCenterSingletonExample1 instance;\n    private List<String> notifications;\n\n    private NotificationCenterSingletonExample1() {\n        notifications = new ArrayList<>();\n    }\n\n    public static synchronized NotificationCenterSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new NotificationCenterSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void sendNotification(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification sent: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}"
  },
  {
    "type": "NotificationCenterSingleton",
    "input": "public class NotificationCenterSingletonExample2 {\n\n    public NotificationCenterSingletonExample2() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationCenterSingletonExample2 {\n\n    private static NotificationCenterSingletonExample2 instance;\n    private List<String> notifications;\n\n    private NotificationCenterSingletonExample2() {\n        notifications = new ArrayList<>();\n    }\n\n    public static synchronized NotificationCenterSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new NotificationCenterSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void sendNotification(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification sent: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}"
  },
  {
    "type": "NotificationCenterSingleton",
    "input": "public class NotificationCenterSingletonExample3 {\n\n    public NotificationCenterSingletonExample3() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationCenterSingletonExample3 {\n\n    private static NotificationCenterSingletonExample3 instance;\n    private List<String> notifications;\n\n    private NotificationCenterSingletonExample3() {\n        notifications = new ArrayList<>();\n    }\n\n    public static synchronized NotificationCenterSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new NotificationCenterSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void sendNotification(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification sent: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}"
  },
  {
    "type": "NotificationCenterSingleton",
    "input": "public class NotificationCenterSingletonExample4 {\n\n    public NotificationCenterSingletonExample4() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationCenterSingletonExample4 {\n\n    private static NotificationCenterSingletonExample4 instance;\n    private List<String> notifications;\n\n    private NotificationCenterSingletonExample4() {\n        notifications = new ArrayList<>();\n    }\n\n    public static synchronized NotificationCenterSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new NotificationCenterSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void sendNotification(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification sent: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}"
  },
  {
    "type": "NotificationCenterSingleton",
    "input": "public class NotificationCenterSingletonExample5 {\n\n    public NotificationCenterSingletonExample5() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationCenterSingletonExample5 {\n\n    private static NotificationCenterSingletonExample5 instance;\n    private List<String> notifications;\n\n    private NotificationCenterSingletonExample5() {\n        notifications = new ArrayList<>();\n    }\n\n    public static synchronized NotificationCenterSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new NotificationCenterSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void sendNotification(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification sent: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}"
  },
  {
    "type": "ResourceAllocatorSingleton",
    "input": "public class ResourceAllocatorSingletonExample1 {\n\n    public ResourceAllocatorSingletonExample1() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class ResourceAllocatorSingletonExample1 {\n\n    private static ResourceAllocatorSingletonExample1 instance;\n    private Queue<String> resources;\n\n    private ResourceAllocatorSingletonExample1() {\n        resources = new LinkedList<>();\n        resources.add(\"Resource1\");\n        resources.add(\"Resource2\");\n    }\n\n    public static synchronized ResourceAllocatorSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new ResourceAllocatorSingletonExample1();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return resources.poll();\n    }\n\n    public void releaseResource(String resourceName) {\n        resources.add(resourceName);\n    }\n\n}"
  },
  {
    "type": "ResourceAllocatorSingleton",
    "input": "public class ResourceAllocatorSingletonExample2 {\n\n    public ResourceAllocatorSingletonExample2() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class ResourceAllocatorSingletonExample2 {\n\n    private static ResourceAllocatorSingletonExample2 instance;\n    private Queue<String> resources;\n\n    private ResourceAllocatorSingletonExample2() {\n        resources = new LinkedList<>();\n        resources.add(\"Resource1\");\n        resources.add(\"Resource2\");\n    }\n\n    public static synchronized ResourceAllocatorSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new ResourceAllocatorSingletonExample2();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return resources.poll();\n    }\n\n    public void releaseResource(String resourceName) {\n        resources.add(resourceName);\n    }\n\n}"
  },
  {
    "type": "ResourceAllocatorSingleton",
    "input": "public class ResourceAllocatorSingletonExample3 {\n\n    public ResourceAllocatorSingletonExample3() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class ResourceAllocatorSingletonExample3 {\n\n    private static ResourceAllocatorSingletonExample3 instance;\n    private Queue<String> resources;\n\n    private ResourceAllocatorSingletonExample3() {\n        resources = new LinkedList<>();\n        resources.add(\"Resource1\");\n        resources.add(\"Resource2\");\n    }\n\n    public static synchronized ResourceAllocatorSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new ResourceAllocatorSingletonExample3();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return resources.poll();\n    }\n\n    public void releaseResource(String resourceName) {\n        resources.add(resourceName);\n    }\n\n}"
  },
  {
    "type": "ResourceAllocatorSingleton",
    "input": "public class ResourceAllocatorSingletonExample4 {\n\n    public ResourceAllocatorSingletonExample4() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class ResourceAllocatorSingletonExample4 {\n\n    private static ResourceAllocatorSingletonExample4 instance;\n    private Queue<String> resources;\n\n    private ResourceAllocatorSingletonExample4() {\n        resources = new LinkedList<>();\n        resources.add(\"Resource1\");\n        resources.add(\"Resource2\");\n    }\n\n    public static synchronized ResourceAllocatorSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new ResourceAllocatorSingletonExample4();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return resources.poll();\n    }\n\n    public void releaseResource(String resourceName) {\n        resources.add(resourceName);\n    }\n\n}"
  },
  {
    "type": "ResourceAllocatorSingleton",
    "input": "public class ResourceAllocatorSingletonExample5 {\n\n    public ResourceAllocatorSingletonExample5() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class ResourceAllocatorSingletonExample5 {\n\n    private static ResourceAllocatorSingletonExample5 instance;\n    private Queue<String> resources;\n\n    private ResourceAllocatorSingletonExample5() {\n        resources = new LinkedList<>();\n        resources.add(\"Resource1\");\n        resources.add(\"Resource2\");\n    }\n\n    public static synchronized ResourceAllocatorSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new ResourceAllocatorSingletonExample5();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return resources.poll();\n    }\n\n    public void releaseResource(String resourceName) {\n        resources.add(resourceName);\n    }\n\n}"
  },
  {
    "type": "GlobalEventBusSingleton",
    "input": "public class GlobalEventBusSingletonExample1 {\n\n    public GlobalEventBusSingletonExample1() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class GlobalEventBusSingletonExample1 {\n\n    private static GlobalEventBusSingletonExample1 instance;\n    private List<String> events;\n\n    private GlobalEventBusSingletonExample1() {\n        events = new ArrayList<>();\n    }\n\n    public static synchronized GlobalEventBusSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new GlobalEventBusSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void postEvent(String event) {\n        events.add(event);\n        System.out.println(\"Event posted: \" + event);\n    }\n\n    public List<String> getPostedEvents() {\n        return events;\n    }\n\n}"
  },
  {
    "type": "GlobalEventBusSingleton",
    "input": "public class GlobalEventBusSingletonExample2 {\n\n    public GlobalEventBusSingletonExample2() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class GlobalEventBusSingletonExample2 {\n\n    private static GlobalEventBusSingletonExample2 instance;\n    private List<String> events;\n\n    private GlobalEventBusSingletonExample2() {\n        events = new ArrayList<>();\n    }\n\n    public static synchronized GlobalEventBusSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new GlobalEventBusSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void postEvent(String event) {\n        events.add(event);\n        System.out.println(\"Event posted: \" + event);\n    }\n\n    public List<String> getPostedEvents() {\n        return events;\n    }\n\n}"
  },
  {
    "type": "GlobalEventBusSingleton",
    "input": "public class GlobalEventBusSingletonExample3 {\n\n    public GlobalEventBusSingletonExample3() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class GlobalEventBusSingletonExample3 {\n\n    private static GlobalEventBusSingletonExample3 instance;\n    private List<String> events;\n\n    private GlobalEventBusSingletonExample3() {\n        events = new ArrayList<>();\n    }\n\n    public static synchronized GlobalEventBusSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new GlobalEventBusSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void postEvent(String event) {\n        events.add(event);\n        System.out.println(\"Event posted: \" + event);\n    }\n\n    public List<String> getPostedEvents() {\n        return events;\n    }\n\n}"
  },
  {
    "type": "GlobalEventBusSingleton",
    "input": "public class GlobalEventBusSingletonExample4 {\n\n    public GlobalEventBusSingletonExample4() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class GlobalEventBusSingletonExample4 {\n\n    private static GlobalEventBusSingletonExample4 instance;\n    private List<String> events;\n\n    private GlobalEventBusSingletonExample4() {\n        events = new ArrayList<>();\n    }\n\n    public static synchronized GlobalEventBusSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new GlobalEventBusSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void postEvent(String event) {\n        events.add(event);\n        System.out.println(\"Event posted: \" + event);\n    }\n\n    public List<String> getPostedEvents() {\n        return events;\n    }\n\n}"
  },
  {
    "type": "GlobalEventBusSingleton",
    "input": "public class GlobalEventBusSingletonExample5 {\n\n    public GlobalEventBusSingletonExample5() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class GlobalEventBusSingletonExample5 {\n\n    private static GlobalEventBusSingletonExample5 instance;\n    private List<String> events;\n\n    private GlobalEventBusSingletonExample5() {\n        events = new ArrayList<>();\n    }\n\n    public static synchronized GlobalEventBusSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new GlobalEventBusSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void postEvent(String event) {\n        events.add(event);\n        System.out.println(\"Event posted: \" + event);\n    }\n\n    public List<String> getPostedEvents() {\n        return events;\n    }\n\n}"
  },
  {
    "type": "FileStorageManagerSingleton",
    "input": "public class FileStorageManagerSingletonExample1 {\n\n    public FileStorageManagerSingletonExample1() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class FileStorageManagerSingletonExample1 {\n\n    private static FileStorageManagerSingletonExample1 instance;\n    private Map<String, byte[]> fileStorage;\n\n    private FileStorageManagerSingletonExample1() {\n        fileStorage = new HashMap<>();\n    }\n\n    public static synchronized FileStorageManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new FileStorageManagerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void saveFile(String fileName, byte[] data) {\n        fileStorage.put(fileName, data);\n        System.out.println(\"File saved: \" + fileName);\n    }\n\n    public byte[] getFile(String fileName) {\n        return fileStorage.get(fileName);\n    }\n\n}"
  },
  {
    "type": "FileStorageManagerSingleton",
    "input": "public class FileStorageManagerSingletonExample2 {\n\n    public FileStorageManagerSingletonExample2() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class FileStorageManagerSingletonExample2 {\n\n    private static FileStorageManagerSingletonExample2 instance;\n    private Map<String, byte[]> fileStorage;\n\n    private FileStorageManagerSingletonExample2() {\n        fileStorage = new HashMap<>();\n    }\n\n    public static synchronized FileStorageManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new FileStorageManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void saveFile(String fileName, byte[] data) {\n        fileStorage.put(fileName, data);\n        System.out.println(\"File saved: \" + fileName);\n    }\n\n    public byte[] getFile(String fileName) {\n        return fileStorage.get(fileName);\n    }\n\n}"
  },
  {
    "type": "FileStorageManagerSingleton",
    "input": "public class FileStorageManagerSingletonExample3 {\n\n    public FileStorageManagerSingletonExample3() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class FileStorageManagerSingletonExample3 {\n\n    private static FileStorageManagerSingletonExample3 instance;\n    private Map<String, byte[]> fileStorage;\n\n    private FileStorageManagerSingletonExample3() {\n        fileStorage = new HashMap<>();\n    }\n\n    public static synchronized FileStorageManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new FileStorageManagerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void saveFile(String fileName, byte[] data) {\n        fileStorage.put(fileName, data);\n        System.out.println(\"File saved: \" + fileName);\n    }\n\n    public byte[] getFile(String fileName) {\n        return fileStorage.get(fileName);\n    }\n\n}"
  },
  {
    "type": "FileStorageManagerSingleton",
    "input": "public class FileStorageManagerSingletonExample4 {\n\n    public FileStorageManagerSingletonExample4() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class FileStorageManagerSingletonExample4 {\n\n    private static FileStorageManagerSingletonExample4 instance;\n    private Map<String, byte[]> fileStorage;\n\n    private FileStorageManagerSingletonExample4() {\n        fileStorage = new HashMap<>();\n    }\n\n    public static synchronized FileStorageManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new FileStorageManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void saveFile(String fileName, byte[] data) {\n        fileStorage.put(fileName, data);\n        System.out.println(\"File saved: \" + fileName);\n    }\n\n    public byte[] getFile(String fileName) {\n        return fileStorage.get(fileName);\n    }\n\n}"
  },
  {
    "type": "FileStorageManagerSingleton",
    "input": "public class FileStorageManagerSingletonExample5 {\n\n    public FileStorageManagerSingletonExample5() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class FileStorageManagerSingletonExample5 {\n\n    private static FileStorageManagerSingletonExample5 instance;\n    private Map<String, byte[]> fileStorage;\n\n    private FileStorageManagerSingletonExample5() {\n        fileStorage = new HashMap<>();\n    }\n\n    public static synchronized FileStorageManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new FileStorageManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void saveFile(String fileName, byte[] data) {\n        fileStorage.put(fileName, data);\n        System.out.println(\"File saved: \" + fileName);\n    }\n\n    public byte[] getFile(String fileName) {\n        return fileStorage.get(fileName);\n    }\n\n}"
  },
  {
    "type": "LocalizationManagerSingleton",
    "input": "public class LocalizationManagerSingletonExample1 {\n\n    public LocalizationManagerSingletonExample1() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class LocalizationManagerSingletonExample1 {\n\n    private static LocalizationManagerSingletonExample1 instance;\n    private Map<String, String> translations;\n\n    private LocalizationManagerSingletonExample1() {\n        translations = new HashMap<>();\n        translations.put(\"hello\", \"Hello\");\n        translations.put(\"goodbye\", \"Goodbye\");\n    }\n\n    public static synchronized LocalizationManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new LocalizationManagerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public String getTranslation(String key) {\n        return translations.getOrDefault(key, \"Translation not found\");\n    }\n\n}"
  },
  {
    "type": "LocalizationManagerSingleton",
    "input": "public class LocalizationManagerSingletonExample2 {\n\n    public LocalizationManagerSingletonExample2() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class LocalizationManagerSingletonExample2 {\n\n    private static LocalizationManagerSingletonExample2 instance;\n    private Map<String, String> translations;\n\n    private LocalizationManagerSingletonExample2() {\n        translations = new HashMap<>();\n        translations.put(\"hello\", \"Hello\");\n        translations.put(\"goodbye\", \"Goodbye\");\n    }\n\n    public static synchronized LocalizationManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new LocalizationManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public String getTranslation(String key) {\n        return translations.getOrDefault(key, \"Translation not found\");\n    }\n\n}"
  },
  {
    "type": "LocalizationManagerSingleton",
    "input": "public class LocalizationManagerSingletonExample3 {\n\n    public LocalizationManagerSingletonExample3() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class LocalizationManagerSingletonExample3 {\n\n    private static LocalizationManagerSingletonExample3 instance;\n    private Map<String, String> translations;\n\n    private LocalizationManagerSingletonExample3() {\n        translations = new HashMap<>();\n        translations.put(\"hello\", \"Hello\");\n        translations.put(\"goodbye\", \"Goodbye\");\n    }\n\n    public static synchronized LocalizationManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new LocalizationManagerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public String getTranslation(String key) {\n        return translations.getOrDefault(key, \"Translation not found\");\n    }\n\n}"
  },
  {
    "type": "LocalizationManagerSingleton",
    "input": "public class LocalizationManagerSingletonExample4 {\n\n    public LocalizationManagerSingletonExample4() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class LocalizationManagerSingletonExample4 {\n\n    private static LocalizationManagerSingletonExample4 instance;\n    private Map<String, String> translations;\n\n    private LocalizationManagerSingletonExample4() {\n        translations = new HashMap<>();\n        translations.put(\"hello\", \"Hello\");\n        translations.put(\"goodbye\", \"Goodbye\");\n    }\n\n    public static synchronized LocalizationManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new LocalizationManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public String getTranslation(String key) {\n        return translations.getOrDefault(key, \"Translation not found\");\n    }\n\n}"
  },
  {
    "type": "LocalizationManagerSingleton",
    "input": "public class LocalizationManagerSingletonExample5 {\n\n    public LocalizationManagerSingletonExample5() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class LocalizationManagerSingletonExample5 {\n\n    private static LocalizationManagerSingletonExample5 instance;\n    private Map<String, String> translations;\n\n    private LocalizationManagerSingletonExample5() {\n        translations = new HashMap<>();\n        translations.put(\"hello\", \"Hello\");\n        translations.put(\"goodbye\", \"Goodbye\");\n    }\n\n    public static synchronized LocalizationManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new LocalizationManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public String getTranslation(String key) {\n        return translations.getOrDefault(key, \"Translation not found\");\n    }\n\n}"
  },
  {
    "type": "AnalyticsTrackerSingleton",
    "input": "public class AnalyticsTrackerSingletonExample1 {\n\n    public AnalyticsTrackerSingletonExample1() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class AnalyticsTrackerSingletonExample1 {\n\n    private static AnalyticsTrackerSingletonExample1 instance;\n    private List<String> trackedEvents;\n\n    private AnalyticsTrackerSingletonExample1() {\n        trackedEvents = new ArrayList<>();\n    }\n\n    public static synchronized AnalyticsTrackerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new AnalyticsTrackerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void trackEvent(String eventName) {\n        trackedEvents.add(eventName);\n        System.out.println(\"Event tracked: \" + eventName);\n    }\n\n    public List<String> getTrackedEvents() {\n        return trackedEvents;\n    }\n\n}"
  },
  {
    "type": "AnalyticsTrackerSingleton",
    "input": "public class AnalyticsTrackerSingletonExample2 {\n\n    public AnalyticsTrackerSingletonExample2() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class AnalyticsTrackerSingletonExample2 {\n\n    private static AnalyticsTrackerSingletonExample2 instance;\n    private List<String> trackedEvents;\n\n    private AnalyticsTrackerSingletonExample2() {\n        trackedEvents = new ArrayList<>();\n    }\n\n    public static synchronized AnalyticsTrackerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new AnalyticsTrackerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void trackEvent(String eventName) {\n        trackedEvents.add(eventName);\n        System.out.println(\"Event tracked: \" + eventName);\n    }\n\n    public List<String> getTrackedEvents() {\n        return trackedEvents;\n    }\n\n}"
  },
  {
    "type": "AnalyticsTrackerSingleton",
    "input": "public class AnalyticsTrackerSingletonExample3 {\n\n    public AnalyticsTrackerSingletonExample3() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class AnalyticsTrackerSingletonExample3 {\n\n    private static AnalyticsTrackerSingletonExample3 instance;\n    private List<String> trackedEvents;\n\n    private AnalyticsTrackerSingletonExample3() {\n        trackedEvents = new ArrayList<>();\n    }\n\n    public static synchronized AnalyticsTrackerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new AnalyticsTrackerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void trackEvent(String eventName) {\n        trackedEvents.add(eventName);\n        System.out.println(\"Event tracked: \" + eventName);\n    }\n\n    public List<String> getTrackedEvents() {\n        return trackedEvents;\n    }\n\n}"
  },
  {
    "type": "AnalyticsTrackerSingleton",
    "input": "public class AnalyticsTrackerSingletonExample4 {\n\n    public AnalyticsTrackerSingletonExample4() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class AnalyticsTrackerSingletonExample4 {\n\n    private static AnalyticsTrackerSingletonExample4 instance;\n    private List<String> trackedEvents;\n\n    private AnalyticsTrackerSingletonExample4() {\n        trackedEvents = new ArrayList<>();\n    }\n\n    public static synchronized AnalyticsTrackerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new AnalyticsTrackerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void trackEvent(String eventName) {\n        trackedEvents.add(eventName);\n        System.out.println(\"Event tracked: \" + eventName);\n    }\n\n    public List<String> getTrackedEvents() {\n        return trackedEvents;\n    }\n\n}"
  },
  {
    "type": "AnalyticsTrackerSingleton",
    "input": "public class AnalyticsTrackerSingletonExample5 {\n\n    public AnalyticsTrackerSingletonExample5() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class AnalyticsTrackerSingletonExample5 {\n\n    private static AnalyticsTrackerSingletonExample5 instance;\n    private List<String> trackedEvents;\n\n    private AnalyticsTrackerSingletonExample5() {\n        trackedEvents = new ArrayList<>();\n    }\n\n    public static synchronized AnalyticsTrackerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new AnalyticsTrackerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void trackEvent(String eventName) {\n        trackedEvents.add(eventName);\n        System.out.println(\"Event tracked: \" + eventName);\n    }\n\n    public List<String> getTrackedEvents() {\n        return trackedEvents;\n    }\n\n}"
  },
  {
    "type": "SchedulerWithCronJobsSingleton",
    "input": "public class SchedulerWithCronJobsSingletonExample1 {\n\n    public SchedulerWithCronJobsSingletonExample1() {}\n\n}",
    "output": "import java.util.Timer;\nimport java.util.TimerTask;\n\npublic class SchedulerWithCronJobsSingletonExample1 {\n\n    private static SchedulerWithCronJobsSingletonExample1 instance;\n    private Timer timer;\n\n    private SchedulerWithCronJobsSingletonExample1() {\n        timer = new Timer(true);\n    }\n\n    public static synchronized SchedulerWithCronJobsSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new SchedulerWithCronJobsSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void addJob(String job, long delay) {\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                System.out.println(\"Executing job: \" + job);\n            }\n        }, delay);\n    }\n\n}"
  },
  {
    "type": "SchedulerWithCronJobsSingleton",
    "input": "public class SchedulerWithCronJobsSingletonExample2 {\n\n    public SchedulerWithCronJobsSingletonExample2() {}\n\n}",
    "output": "import java.util.Timer;\nimport java.util.TimerTask;\n\npublic class SchedulerWithCronJobsSingletonExample2 {\n\n    private static SchedulerWithCronJobsSingletonExample2 instance;\n    private Timer timer;\n\n    private SchedulerWithCronJobsSingletonExample2() {\n        timer = new Timer(true);\n    }\n\n    public static synchronized SchedulerWithCronJobsSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new SchedulerWithCronJobsSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void addJob(String job, long delay) {\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                System.out.println(\"Executing job: \" + job);\n            }\n        }, delay);\n    }\n\n}"
  },
  {
    "type": "SchedulerWithCronJobsSingleton",
    "input": "public class SchedulerWithCronJobsSingletonExample3 {\n\n    public SchedulerWithCronJobsSingletonExample3() {}\n\n}",
    "output": "import java.util.Timer;\nimport java.util.TimerTask;\n\npublic class SchedulerWithCronJobsSingletonExample3 {\n\n    private static SchedulerWithCronJobsSingletonExample3 instance;\n    private Timer timer;\n\n    private SchedulerWithCronJobsSingletonExample3() {\n        timer = new Timer(true);\n    }\n\n    public static synchronized SchedulerWithCronJobsSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new SchedulerWithCronJobsSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void addJob(String job, long delay) {\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                System.out.println(\"Executing job: \" + job);\n            }\n        }, delay);\n    }\n\n}"
  },
  {
    "type": "SchedulerWithCronJobsSingleton",
    "input": "public class SchedulerWithCronJobsSingletonExample4 {\n\n    public SchedulerWithCronJobsSingletonExample4() {}\n\n}",
    "output": "import java.util.Timer;\nimport java.util.TimerTask;\n\npublic class SchedulerWithCronJobsSingletonExample4 {\n\n    private static SchedulerWithCronJobsSingletonExample4 instance;\n    private Timer timer;\n\n    private SchedulerWithCronJobsSingletonExample4() {\n        timer = new Timer(true);\n    }\n\n    public static synchronized SchedulerWithCronJobsSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new SchedulerWithCronJobsSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void addJob(String job, long delay) {\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                System.out.println(\"Executing job: \" + job);\n            }\n        }, delay);\n    }\n\n}"
  },
  {
    "type": "SchedulerWithCronJobsSingleton",
    "input": "public class SchedulerWithCronJobsSingletonExample5 {\n\n    public SchedulerWithCronJobsSingletonExample5() {}\n\n}",
    "output": "import java.util.Timer;\nimport java.util.TimerTask;\n\npublic class SchedulerWithCronJobsSingletonExample5 {\n\n    private static SchedulerWithCronJobsSingletonExample5 instance;\n    private Timer timer;\n\n    private SchedulerWithCronJobsSingletonExample5() {\n        timer = new Timer(true);\n    }\n\n    public static synchronized SchedulerWithCronJobsSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new SchedulerWithCronJobsSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void addJob(String job, long delay) {\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                System.out.println(\"Executing job: \" + job);\n            }\n        }, delay);\n    }\n\n}"
  },
  {
    "type": "GlobalConfigurationSingleton",
    "input": "public class GlobalConfigurationSingletonExample1 {\n\n    public GlobalConfigurationSingletonExample1() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class GlobalConfigurationSingletonExample1 {\n\n    private static GlobalConfigurationSingletonExample1 instance;\n    private Properties properties;\n\n    private GlobalConfigurationSingletonExample1() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"global_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized GlobalConfigurationSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new GlobalConfigurationSingletonExample1();\n        }\n        return instance;\n    }\n\n    public String getSetting(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "GlobalConfigurationSingleton",
    "input": "public class GlobalConfigurationSingletonExample2 {\n\n    public GlobalConfigurationSingletonExample2() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class GlobalConfigurationSingletonExample2 {\n\n    private static GlobalConfigurationSingletonExample2 instance;\n    private Properties properties;\n\n    private GlobalConfigurationSingletonExample2() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"global_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized GlobalConfigurationSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new GlobalConfigurationSingletonExample2();\n        }\n        return instance;\n    }\n\n    public String getSetting(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "GlobalConfigurationSingleton",
    "input": "public class GlobalConfigurationSingletonExample3 {\n\n    public GlobalConfigurationSingletonExample3() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class GlobalConfigurationSingletonExample3 {\n\n    private static GlobalConfigurationSingletonExample3 instance;\n    private Properties properties;\n\n    private GlobalConfigurationSingletonExample3() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"global_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized GlobalConfigurationSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new GlobalConfigurationSingletonExample3();\n        }\n        return instance;\n    }\n\n    public String getSetting(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "GlobalConfigurationSingleton",
    "input": "public class GlobalConfigurationSingletonExample4 {\n\n    public GlobalConfigurationSingletonExample4() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class GlobalConfigurationSingletonExample4 {\n\n    private static GlobalConfigurationSingletonExample4 instance;\n    private Properties properties;\n\n    private GlobalConfigurationSingletonExample4() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"global_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized GlobalConfigurationSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new GlobalConfigurationSingletonExample4();\n        }\n        return instance;\n    }\n\n    public String getSetting(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "GlobalConfigurationSingleton",
    "input": "public class GlobalConfigurationSingletonExample5 {\n\n    public GlobalConfigurationSingletonExample5() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class GlobalConfigurationSingletonExample5 {\n\n    private static GlobalConfigurationSingletonExample5 instance;\n    private Properties properties;\n\n    private GlobalConfigurationSingletonExample5() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"global_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized GlobalConfigurationSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new GlobalConfigurationSingletonExample5();\n        }\n        return instance;\n    }\n\n    public String getSetting(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "EventLoggerSingleton",
    "input": "public class EventLoggerSingletonExample1 {\n\n    public EventLoggerSingletonExample1() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class EventLoggerSingletonExample1 {\n\n    private static EventLoggerSingletonExample1 instance;\n    private FileWriter writer;\n\n    private EventLoggerSingletonExample1() {\n        try {\n            writer = new FileWriter(\"events.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized EventLoggerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new EventLoggerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void logEvent(String event) {\n        try {\n            writer.write(event + \"\\n\");\n            writer.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "EventLoggerSingleton",
    "input": "public class EventLoggerSingletonExample2 {\n\n    public EventLoggerSingletonExample2() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class EventLoggerSingletonExample2 {\n\n    private static EventLoggerSingletonExample2 instance;\n    private FileWriter writer;\n\n    private EventLoggerSingletonExample2() {\n        try {\n            writer = new FileWriter(\"events.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized EventLoggerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new EventLoggerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void logEvent(String event) {\n        try {\n            writer.write(event + \"\\n\");\n            writer.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "EventLoggerSingleton",
    "input": "public class EventLoggerSingletonExample3 {\n\n    public EventLoggerSingletonExample3() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class EventLoggerSingletonExample3 {\n\n    private static EventLoggerSingletonExample3 instance;\n    private FileWriter writer;\n\n    private EventLoggerSingletonExample3() {\n        try {\n            writer = new FileWriter(\"events.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized EventLoggerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new EventLoggerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void logEvent(String event) {\n        try {\n            writer.write(event + \"\\n\");\n            writer.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "EventLoggerSingleton",
    "input": "public class EventLoggerSingletonExample4 {\n\n    public EventLoggerSingletonExample4() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class EventLoggerSingletonExample4 {\n\n    private static EventLoggerSingletonExample4 instance;\n    private FileWriter writer;\n\n    private EventLoggerSingletonExample4() {\n        try {\n            writer = new FileWriter(\"events.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized EventLoggerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new EventLoggerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void logEvent(String event) {\n        try {\n            writer.write(event + \"\\n\");\n            writer.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "EventLoggerSingleton",
    "input": "public class EventLoggerSingletonExample5 {\n\n    public EventLoggerSingletonExample5() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class EventLoggerSingletonExample5 {\n\n    private static EventLoggerSingletonExample5 instance;\n    private FileWriter writer;\n\n    private EventLoggerSingletonExample5() {\n        try {\n            writer = new FileWriter(\"events.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized EventLoggerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new EventLoggerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void logEvent(String event) {\n        try {\n            writer.write(event + \"\\n\");\n            writer.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "ImageCacheSingleton",
    "input": "public class ImageCacheSingletonExample1 {\n\n    public ImageCacheSingletonExample1() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ImageCacheSingletonExample1 {\n\n    private static ImageCacheSingletonExample1 instance;\n    private Map<String, byte[]> cache;\n\n    private ImageCacheSingletonExample1() {\n        cache = new HashMap<>();\n    }\n\n    public static synchronized ImageCacheSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new ImageCacheSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void addImage(String imageName, byte[] imageData) {\n        cache.put(imageName, imageData);\n    }\n\n    public byte[] getImage(String imageName) {\n        return cache.get(imageName);\n    }\n\n}"
  },
  {
    "type": "ImageCacheSingleton",
    "input": "public class ImageCacheSingletonExample2 {\n\n    public ImageCacheSingletonExample2() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ImageCacheSingletonExample2 {\n\n    private static ImageCacheSingletonExample2 instance;\n    private Map<String, byte[]> cache;\n\n    private ImageCacheSingletonExample2() {\n        cache = new HashMap<>();\n    }\n\n    public static synchronized ImageCacheSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new ImageCacheSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void addImage(String imageName, byte[] imageData) {\n        cache.put(imageName, imageData);\n    }\n\n    public byte[] getImage(String imageName) {\n        return cache.get(imageName);\n    }\n\n}"
  },
  {
    "type": "ImageCacheSingleton",
    "input": "public class ImageCacheSingletonExample3 {\n\n    public ImageCacheSingletonExample3() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ImageCacheSingletonExample3 {\n\n    private static ImageCacheSingletonExample3 instance;\n    private Map<String, byte[]> cache;\n\n    private ImageCacheSingletonExample3() {\n        cache = new HashMap<>();\n    }\n\n    public static synchronized ImageCacheSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new ImageCacheSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void addImage(String imageName, byte[] imageData) {\n        cache.put(imageName, imageData);\n    }\n\n    public byte[] getImage(String imageName) {\n        return cache.get(imageName);\n    }\n\n}"
  },
  {
    "type": "ImageCacheSingleton",
    "input": "public class ImageCacheSingletonExample4 {\n\n    public ImageCacheSingletonExample4() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ImageCacheSingletonExample4 {\n\n    private static ImageCacheSingletonExample4 instance;\n    private Map<String, byte[]> cache;\n\n    private ImageCacheSingletonExample4() {\n        cache = new HashMap<>();\n    }\n\n    public static synchronized ImageCacheSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new ImageCacheSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void addImage(String imageName, byte[] imageData) {\n        cache.put(imageName, imageData);\n    }\n\n    public byte[] getImage(String imageName) {\n        return cache.get(imageName);\n    }\n\n}"
  },
  {
    "type": "ImageCacheSingleton",
    "input": "public class ImageCacheSingletonExample5 {\n\n    public ImageCacheSingletonExample5() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ImageCacheSingletonExample5 {\n\n    private static ImageCacheSingletonExample5 instance;\n    private Map<String, byte[]> cache;\n\n    private ImageCacheSingletonExample5() {\n        cache = new HashMap<>();\n    }\n\n    public static synchronized ImageCacheSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new ImageCacheSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void addImage(String imageName, byte[] imageData) {\n        cache.put(imageName, imageData);\n    }\n\n    public byte[] getImage(String imageName) {\n        return cache.get(imageName);\n    }\n\n}"
  },
  {
    "type": "AppConfigManagerSingleton",
    "input": "public class AppConfigManagerSingletonExample1 {\n\n    public AppConfigManagerSingletonExample1() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class AppConfigManagerSingletonExample1 {\n\n    private static AppConfigManagerSingletonExample1 instance;\n    private Properties config;\n\n    private AppConfigManagerSingletonExample1() {\n        config = new Properties();\n        try {\n            config.load(new FileInputStream(\"app_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized AppConfigManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new AppConfigManagerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public String getConfig(String key) {\n        return config.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "AppConfigManagerSingleton",
    "input": "public class AppConfigManagerSingletonExample2 {\n\n    public AppConfigManagerSingletonExample2() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class AppConfigManagerSingletonExample2 {\n\n    private static AppConfigManagerSingletonExample2 instance;\n    private Properties config;\n\n    private AppConfigManagerSingletonExample2() {\n        config = new Properties();\n        try {\n            config.load(new FileInputStream(\"app_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized AppConfigManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new AppConfigManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public String getConfig(String key) {\n        return config.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "AppConfigManagerSingleton",
    "input": "public class AppConfigManagerSingletonExample3 {\n\n    public AppConfigManagerSingletonExample3() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class AppConfigManagerSingletonExample3 {\n\n    private static AppConfigManagerSingletonExample3 instance;\n    private Properties config;\n\n    private AppConfigManagerSingletonExample3() {\n        config = new Properties();\n        try {\n            config.load(new FileInputStream(\"app_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized AppConfigManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new AppConfigManagerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public String getConfig(String key) {\n        return config.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "AppConfigManagerSingleton",
    "input": "public class AppConfigManagerSingletonExample4 {\n\n    public AppConfigManagerSingletonExample4() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class AppConfigManagerSingletonExample4 {\n\n    private static AppConfigManagerSingletonExample4 instance;\n    private Properties config;\n\n    private AppConfigManagerSingletonExample4() {\n        config = new Properties();\n        try {\n            config.load(new FileInputStream(\"app_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized AppConfigManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new AppConfigManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public String getConfig(String key) {\n        return config.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "AppConfigManagerSingleton",
    "input": "public class AppConfigManagerSingletonExample5 {\n\n    public AppConfigManagerSingletonExample5() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class AppConfigManagerSingletonExample5 {\n\n    private static AppConfigManagerSingletonExample5 instance;\n    private Properties config;\n\n    private AppConfigManagerSingletonExample5() {\n        config = new Properties();\n        try {\n            config.load(new FileInputStream(\"app_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized AppConfigManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new AppConfigManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public String getConfig(String key) {\n        return config.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "DatabaseMigrationManagerSingleton",
    "input": "public class DatabaseMigrationManagerSingletonExample1 {\n\n    public DatabaseMigrationManagerSingletonExample1() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class DatabaseMigrationManagerSingletonExample1 {\n\n    private static DatabaseMigrationManagerSingletonExample1 instance;\n    private List<String> executedMigrations;\n\n    private DatabaseMigrationManagerSingletonExample1() {\n        executedMigrations = new ArrayList<>();\n    }\n\n    public static synchronized DatabaseMigrationManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseMigrationManagerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void migrateDatabase(String migrationScript) {\n        if (!executedMigrations.contains(migrationScript)) {\n            executedMigrations.add(migrationScript);\n            System.out.println(\"Migration executed: \" + migrationScript);\n        } else {\n            System.out.println(\"Migration already executed: \" + migrationScript);\n        }\n    }\n\n}"
  },
  {
    "type": "DatabaseMigrationManagerSingleton",
    "input": "public class DatabaseMigrationManagerSingletonExample2 {\n\n    public DatabaseMigrationManagerSingletonExample2() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class DatabaseMigrationManagerSingletonExample2 {\n\n    private static DatabaseMigrationManagerSingletonExample2 instance;\n    private List<String> executedMigrations;\n\n    private DatabaseMigrationManagerSingletonExample2() {\n        executedMigrations = new ArrayList<>();\n    }\n\n    public static synchronized DatabaseMigrationManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseMigrationManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void migrateDatabase(String migrationScript) {\n        if (!executedMigrations.contains(migrationScript)) {\n            executedMigrations.add(migrationScript);\n            System.out.println(\"Migration executed: \" + migrationScript);\n        } else {\n            System.out.println(\"Migration already executed: \" + migrationScript);\n        }\n    }\n\n}"
  },
  {
    "type": "DatabaseMigrationManagerSingleton",
    "input": "public class DatabaseMigrationManagerSingletonExample3 {\n\n    public DatabaseMigrationManagerSingletonExample3() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class DatabaseMigrationManagerSingletonExample3 {\n\n    private static DatabaseMigrationManagerSingletonExample3 instance;\n    private List<String> executedMigrations;\n\n    private DatabaseMigrationManagerSingletonExample3() {\n        executedMigrations = new ArrayList<>();\n    }\n\n    public static synchronized DatabaseMigrationManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseMigrationManagerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void migrateDatabase(String migrationScript) {\n        if (!executedMigrations.contains(migrationScript)) {\n            executedMigrations.add(migrationScript);\n            System.out.println(\"Migration executed: \" + migrationScript);\n        } else {\n            System.out.println(\"Migration already executed: \" + migrationScript);\n        }\n    }\n\n}"
  },
  {
    "type": "DatabaseMigrationManagerSingleton",
    "input": "public class DatabaseMigrationManagerSingletonExample4 {\n\n    public DatabaseMigrationManagerSingletonExample4() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class DatabaseMigrationManagerSingletonExample4 {\n\n    private static DatabaseMigrationManagerSingletonExample4 instance;\n    private List<String> executedMigrations;\n\n    private DatabaseMigrationManagerSingletonExample4() {\n        executedMigrations = new ArrayList<>();\n    }\n\n    public static synchronized DatabaseMigrationManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseMigrationManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void migrateDatabase(String migrationScript) {\n        if (!executedMigrations.contains(migrationScript)) {\n            executedMigrations.add(migrationScript);\n            System.out.println(\"Migration executed: \" + migrationScript);\n        } else {\n            System.out.println(\"Migration already executed: \" + migrationScript);\n        }\n    }\n\n}"
  },
  {
    "type": "DatabaseMigrationManagerSingleton",
    "input": "public class DatabaseMigrationManagerSingletonExample5 {\n\n    public DatabaseMigrationManagerSingletonExample5() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class DatabaseMigrationManagerSingletonExample5 {\n\n    private static DatabaseMigrationManagerSingletonExample5 instance;\n    private List<String> executedMigrations;\n\n    private DatabaseMigrationManagerSingletonExample5() {\n        executedMigrations = new ArrayList<>();\n    }\n\n    public static synchronized DatabaseMigrationManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseMigrationManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void migrateDatabase(String migrationScript) {\n        if (!executedMigrations.contains(migrationScript)) {\n            executedMigrations.add(migrationScript);\n            System.out.println(\"Migration executed: \" + migrationScript);\n        } else {\n            System.out.println(\"Migration already executed: \" + migrationScript);\n        }\n    }\n\n}"
  },
  {
    "type": "TaskQueueManagerSingleton",
    "input": "public class TaskQueueManagerSingletonExample1 {\n\n    public TaskQueueManagerSingletonExample1() {}\n\n}",
    "output": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class TaskQueueManagerSingletonExample1 {\n\n    private static TaskQueueManagerSingletonExample1 instance;\n    private LinkedBlockingQueue<String> taskQueue;\n\n    private TaskQueueManagerSingletonExample1() {\n        taskQueue = new LinkedBlockingQueue<>();\n    }\n\n    public static synchronized TaskQueueManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new TaskQueueManagerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        try {\n            taskQueue.put(task);\n            System.out.println(\"Task added: \" + task);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public String getNextTask() {\n        return taskQueue.poll();\n    }\n\n}"
  },
  {
    "type": "TaskQueueManagerSingleton",
    "input": "public class TaskQueueManagerSingletonExample2 {\n\n    public TaskQueueManagerSingletonExample2() {}\n\n}",
    "output": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class TaskQueueManagerSingletonExample2 {\n\n    private static TaskQueueManagerSingletonExample2 instance;\n    private LinkedBlockingQueue<String> taskQueue;\n\n    private TaskQueueManagerSingletonExample2() {\n        taskQueue = new LinkedBlockingQueue<>();\n    }\n\n    public static synchronized TaskQueueManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new TaskQueueManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        try {\n            taskQueue.put(task);\n            System.out.println(\"Task added: \" + task);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public String getNextTask() {\n        return taskQueue.poll();\n    }\n\n}"
  },
  {
    "type": "TaskQueueManagerSingleton",
    "input": "public class TaskQueueManagerSingletonExample3 {\n\n    public TaskQueueManagerSingletonExample3() {}\n\n}",
    "output": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class TaskQueueManagerSingletonExample3 {\n\n    private static TaskQueueManagerSingletonExample3 instance;\n    private LinkedBlockingQueue<String> taskQueue;\n\n    private TaskQueueManagerSingletonExample3() {\n        taskQueue = new LinkedBlockingQueue<>();\n    }\n\n    public static synchronized TaskQueueManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new TaskQueueManagerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        try {\n            taskQueue.put(task);\n            System.out.println(\"Task added: \" + task);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public String getNextTask() {\n        return taskQueue.poll();\n    }\n\n}"
  },
  {
    "type": "TaskQueueManagerSingleton",
    "input": "public class TaskQueueManagerSingletonExample4 {\n\n    public TaskQueueManagerSingletonExample4() {}\n\n}",
    "output": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class TaskQueueManagerSingletonExample4 {\n\n    private static TaskQueueManagerSingletonExample4 instance;\n    private LinkedBlockingQueue<String> taskQueue;\n\n    private TaskQueueManagerSingletonExample4() {\n        taskQueue = new LinkedBlockingQueue<>();\n    }\n\n    public static synchronized TaskQueueManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new TaskQueueManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        try {\n            taskQueue.put(task);\n            System.out.println(\"Task added: \" + task);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public String getNextTask() {\n        return taskQueue.poll();\n    }\n\n}"
  },
  {
    "type": "TaskQueueManagerSingleton",
    "input": "public class TaskQueueManagerSingletonExample5 {\n\n    public TaskQueueManagerSingletonExample5() {}\n\n}",
    "output": "import java.util.concurrent.LinkedBlockingQueue;\n\npublic class TaskQueueManagerSingletonExample5 {\n\n    private static TaskQueueManagerSingletonExample5 instance;\n    private LinkedBlockingQueue<String> taskQueue;\n\n    private TaskQueueManagerSingletonExample5() {\n        taskQueue = new LinkedBlockingQueue<>();\n    }\n\n    public static synchronized TaskQueueManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new TaskQueueManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        try {\n            taskQueue.put(task);\n            System.out.println(\"Task added: \" + task);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public String getNextTask() {\n        return taskQueue.poll();\n    }\n\n}"
  },
  {
    "type": "FeatureFlagManagerSingleton",
    "input": "public class FeatureFlagManagerSingletonExample1 {\n\n    public FeatureFlagManagerSingletonExample1() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class FeatureFlagManagerSingletonExample1 {\n\n    private static FeatureFlagManagerSingletonExample1 instance;\n    private Map<String, Boolean> featureFlags;\n\n    private FeatureFlagManagerSingletonExample1() {\n        featureFlags = new HashMap<>();\n        featureFlags.put(\"DarkMode\", true);\n        featureFlags.put(\"BetaFeatures\", false);\n    }\n\n    public static synchronized FeatureFlagManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new FeatureFlagManagerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public boolean isFeatureEnabled(String feature) {\n        return featureFlags.getOrDefault(feature, false);\n    }\n\n}"
  },
  {
    "type": "FeatureFlagManagerSingleton",
    "input": "public class FeatureFlagManagerSingletonExample2 {\n\n    public FeatureFlagManagerSingletonExample2() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class FeatureFlagManagerSingletonExample2 {\n\n    private static FeatureFlagManagerSingletonExample2 instance;\n    private Map<String, Boolean> featureFlags;\n\n    private FeatureFlagManagerSingletonExample2() {\n        featureFlags = new HashMap<>();\n        featureFlags.put(\"DarkMode\", true);\n        featureFlags.put(\"BetaFeatures\", false);\n    }\n\n    public static synchronized FeatureFlagManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new FeatureFlagManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public boolean isFeatureEnabled(String feature) {\n        return featureFlags.getOrDefault(feature, false);\n    }\n\n}"
  },
  {
    "type": "FeatureFlagManagerSingleton",
    "input": "public class FeatureFlagManagerSingletonExample3 {\n\n    public FeatureFlagManagerSingletonExample3() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class FeatureFlagManagerSingletonExample3 {\n\n    private static FeatureFlagManagerSingletonExample3 instance;\n    private Map<String, Boolean> featureFlags;\n\n    private FeatureFlagManagerSingletonExample3() {\n        featureFlags = new HashMap<>();\n        featureFlags.put(\"DarkMode\", true);\n        featureFlags.put(\"BetaFeatures\", false);\n    }\n\n    public static synchronized FeatureFlagManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new FeatureFlagManagerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public boolean isFeatureEnabled(String feature) {\n        return featureFlags.getOrDefault(feature, false);\n    }\n\n}"
  },
  {
    "type": "FeatureFlagManagerSingleton",
    "input": "public class FeatureFlagManagerSingletonExample4 {\n\n    public FeatureFlagManagerSingletonExample4() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class FeatureFlagManagerSingletonExample4 {\n\n    private static FeatureFlagManagerSingletonExample4 instance;\n    private Map<String, Boolean> featureFlags;\n\n    private FeatureFlagManagerSingletonExample4() {\n        featureFlags = new HashMap<>();\n        featureFlags.put(\"DarkMode\", true);\n        featureFlags.put(\"BetaFeatures\", false);\n    }\n\n    public static synchronized FeatureFlagManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new FeatureFlagManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public boolean isFeatureEnabled(String feature) {\n        return featureFlags.getOrDefault(feature, false);\n    }\n\n}"
  },
  {
    "type": "FeatureFlagManagerSingleton",
    "input": "public class FeatureFlagManagerSingletonExample5 {\n\n    public FeatureFlagManagerSingletonExample5() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class FeatureFlagManagerSingletonExample5 {\n\n    private static FeatureFlagManagerSingletonExample5 instance;\n    private Map<String, Boolean> featureFlags;\n\n    private FeatureFlagManagerSingletonExample5() {\n        featureFlags = new HashMap<>();\n        featureFlags.put(\"DarkMode\", true);\n        featureFlags.put(\"BetaFeatures\", false);\n    }\n\n    public static synchronized FeatureFlagManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new FeatureFlagManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public boolean isFeatureEnabled(String feature) {\n        return featureFlags.getOrDefault(feature, false);\n    }\n\n}"
  },
  {
    "type": "GlobalThemeManagerSingleton",
    "input": "public class GlobalThemeManagerSingletonExample1 {\n\n    public GlobalThemeManagerSingletonExample1() {}\n\n}",
    "output": "public class GlobalThemeManagerSingletonExample1 {\n\n    private static GlobalThemeManagerSingletonExample1 instance;\n    private String currentTheme;\n\n    private GlobalThemeManagerSingletonExample1() {\n        currentTheme = \"Light\";\n    }\n\n    public static synchronized GlobalThemeManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new GlobalThemeManagerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public String getCurrentTheme() {\n        return currentTheme;\n    }\n\n    public void setTheme(String theme) {\n        currentTheme = theme;\n        System.out.println(\"Theme updated to: \" + theme);\n    }\n\n}"
  },
  {
    "type": "GlobalThemeManagerSingleton",
    "input": "public class GlobalThemeManagerSingletonExample2 {\n\n    public GlobalThemeManagerSingletonExample2() {}\n\n}",
    "output": "public class GlobalThemeManagerSingletonExample2 {\n\n    private static GlobalThemeManagerSingletonExample2 instance;\n    private String currentTheme;\n\n    private GlobalThemeManagerSingletonExample2() {\n        currentTheme = \"Light\";\n    }\n\n    public static synchronized GlobalThemeManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new GlobalThemeManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public String getCurrentTheme() {\n        return currentTheme;\n    }\n\n    public void setTheme(String theme) {\n        currentTheme = theme;\n        System.out.println(\"Theme updated to: \" + theme);\n    }\n\n}"
  },
  {
    "type": "GlobalThemeManagerSingleton",
    "input": "public class GlobalThemeManagerSingletonExample3 {\n\n    public GlobalThemeManagerSingletonExample3() {}\n\n}",
    "output": "public class GlobalThemeManagerSingletonExample3 {\n\n    private static GlobalThemeManagerSingletonExample3 instance;\n    private String currentTheme;\n\n    private GlobalThemeManagerSingletonExample3() {\n        currentTheme = \"Light\";\n    }\n\n    public static synchronized GlobalThemeManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new GlobalThemeManagerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public String getCurrentTheme() {\n        return currentTheme;\n    }\n\n    public void setTheme(String theme) {\n        currentTheme = theme;\n        System.out.println(\"Theme updated to: \" + theme);\n    }\n\n}"
  },
  {
    "type": "GlobalThemeManagerSingleton",
    "input": "public class GlobalThemeManagerSingletonExample4 {\n\n    public GlobalThemeManagerSingletonExample4() {}\n\n}",
    "output": "public class GlobalThemeManagerSingletonExample4 {\n\n    private static GlobalThemeManagerSingletonExample4 instance;\n    private String currentTheme;\n\n    private GlobalThemeManagerSingletonExample4() {\n        currentTheme = \"Light\";\n    }\n\n    public static synchronized GlobalThemeManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new GlobalThemeManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public String getCurrentTheme() {\n        return currentTheme;\n    }\n\n    public void setTheme(String theme) {\n        currentTheme = theme;\n        System.out.println(\"Theme updated to: \" + theme);\n    }\n\n}"
  },
  {
    "type": "GlobalThemeManagerSingleton",
    "input": "public class GlobalThemeManagerSingletonExample5 {\n\n    public GlobalThemeManagerSingletonExample5() {}\n\n}",
    "output": "public class GlobalThemeManagerSingletonExample5 {\n\n    private static GlobalThemeManagerSingletonExample5 instance;\n    private String currentTheme;\n\n    private GlobalThemeManagerSingletonExample5() {\n        currentTheme = \"Light\";\n    }\n\n    public static synchronized GlobalThemeManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new GlobalThemeManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public String getCurrentTheme() {\n        return currentTheme;\n    }\n\n    public void setTheme(String theme) {\n        currentTheme = theme;\n        System.out.println(\"Theme updated to: \" + theme);\n    }\n\n}"
  },
  {
    "type": "SecurityManagerSingleton",
    "input": "public class SecurityManagerSingletonExample1 {\n\n    public SecurityManagerSingletonExample1() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SecurityManagerSingletonExample1 {\n\n    private static SecurityManagerSingletonExample1 instance;\n    private Map<String, String> permissions;\n\n    private SecurityManagerSingletonExample1() {\n        permissions = new HashMap<>();\n        permissions.put(\"admin\", \"*:*\" );\n        permissions.put(\"user\", \"read:resources\");\n    }\n\n    public static synchronized SecurityManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new SecurityManagerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public boolean hasPermission(String user, String resource) {\n        String allowedPermissions = permissions.get(user);\n        return allowedPermissions != null && (allowedPermissions.equals(\"*:*\") || allowedPermissions.contains(resource));\n    }\n\n}"
  },
  {
    "type": "SecurityManagerSingleton",
    "input": "public class SecurityManagerSingletonExample2 {\n\n    public SecurityManagerSingletonExample2() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SecurityManagerSingletonExample2 {\n\n    private static SecurityManagerSingletonExample2 instance;\n    private Map<String, String> permissions;\n\n    private SecurityManagerSingletonExample2() {\n        permissions = new HashMap<>();\n        permissions.put(\"admin\", \"*:*\" );\n        permissions.put(\"user\", \"read:resources\");\n    }\n\n    public static synchronized SecurityManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new SecurityManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public boolean hasPermission(String user, String resource) {\n        String allowedPermissions = permissions.get(user);\n        return allowedPermissions != null && (allowedPermissions.equals(\"*:*\") || allowedPermissions.contains(resource));\n    }\n\n}"
  },
  {
    "type": "SecurityManagerSingleton",
    "input": "public class SecurityManagerSingletonExample3 {\n\n    public SecurityManagerSingletonExample3() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SecurityManagerSingletonExample3 {\n\n    private static SecurityManagerSingletonExample3 instance;\n    private Map<String, String> permissions;\n\n    private SecurityManagerSingletonExample3() {\n        permissions = new HashMap<>();\n        permissions.put(\"admin\", \"*:*\" );\n        permissions.put(\"user\", \"read:resources\");\n    }\n\n    public static synchronized SecurityManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new SecurityManagerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public boolean hasPermission(String user, String resource) {\n        String allowedPermissions = permissions.get(user);\n        return allowedPermissions != null && (allowedPermissions.equals(\"*:*\") || allowedPermissions.contains(resource));\n    }\n\n}"
  },
  {
    "type": "SecurityManagerSingleton",
    "input": "public class SecurityManagerSingletonExample4 {\n\n    public SecurityManagerSingletonExample4() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SecurityManagerSingletonExample4 {\n\n    private static SecurityManagerSingletonExample4 instance;\n    private Map<String, String> permissions;\n\n    private SecurityManagerSingletonExample4() {\n        permissions = new HashMap<>();\n        permissions.put(\"admin\", \"*:*\" );\n        permissions.put(\"user\", \"read:resources\");\n    }\n\n    public static synchronized SecurityManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new SecurityManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public boolean hasPermission(String user, String resource) {\n        String allowedPermissions = permissions.get(user);\n        return allowedPermissions != null && (allowedPermissions.equals(\"*:*\") || allowedPermissions.contains(resource));\n    }\n\n}"
  },
  {
    "type": "SecurityManagerSingleton",
    "input": "public class SecurityManagerSingletonExample5 {\n\n    public SecurityManagerSingletonExample5() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SecurityManagerSingletonExample5 {\n\n    private static SecurityManagerSingletonExample5 instance;\n    private Map<String, String> permissions;\n\n    private SecurityManagerSingletonExample5() {\n        permissions = new HashMap<>();\n        permissions.put(\"admin\", \"*:*\" );\n        permissions.put(\"user\", \"read:resources\");\n    }\n\n    public static synchronized SecurityManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new SecurityManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public boolean hasPermission(String user, String resource) {\n        String allowedPermissions = permissions.get(user);\n        return allowedPermissions != null && (allowedPermissions.equals(\"*:*\") || allowedPermissions.contains(resource));\n    }\n\n}"
  },
  {
    "type": "DistributedCacheSingleton",
    "input": "public class DistributedCacheSingletonExample1 {\n\n    public DistributedCacheSingletonExample1() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedCacheSingletonExample1 {\n\n    private static DistributedCacheSingletonExample1 instance;\n    private ConcurrentHashMap<String, String> cache;\n\n    private DistributedCacheSingletonExample1() {\n        cache = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedCacheSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new DistributedCacheSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void addCacheEntry(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String getCacheEntry(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "DistributedCacheSingleton",
    "input": "public class DistributedCacheSingletonExample2 {\n\n    public DistributedCacheSingletonExample2() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedCacheSingletonExample2 {\n\n    private static DistributedCacheSingletonExample2 instance;\n    private ConcurrentHashMap<String, String> cache;\n\n    private DistributedCacheSingletonExample2() {\n        cache = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedCacheSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new DistributedCacheSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void addCacheEntry(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String getCacheEntry(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "DistributedCacheSingleton",
    "input": "public class DistributedCacheSingletonExample3 {\n\n    public DistributedCacheSingletonExample3() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedCacheSingletonExample3 {\n\n    private static DistributedCacheSingletonExample3 instance;\n    private ConcurrentHashMap<String, String> cache;\n\n    private DistributedCacheSingletonExample3() {\n        cache = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedCacheSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new DistributedCacheSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void addCacheEntry(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String getCacheEntry(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "DistributedCacheSingleton",
    "input": "public class DistributedCacheSingletonExample4 {\n\n    public DistributedCacheSingletonExample4() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedCacheSingletonExample4 {\n\n    private static DistributedCacheSingletonExample4 instance;\n    private ConcurrentHashMap<String, String> cache;\n\n    private DistributedCacheSingletonExample4() {\n        cache = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedCacheSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new DistributedCacheSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void addCacheEntry(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String getCacheEntry(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "DistributedCacheSingleton",
    "input": "public class DistributedCacheSingletonExample5 {\n\n    public DistributedCacheSingletonExample5() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedCacheSingletonExample5 {\n\n    private static DistributedCacheSingletonExample5 instance;\n    private ConcurrentHashMap<String, String> cache;\n\n    private DistributedCacheSingletonExample5() {\n        cache = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedCacheSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new DistributedCacheSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void addCacheEntry(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String getCacheEntry(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "LazyLoadedResourceManagerSingleton",
    "input": "public class LazyLoadedResourceManagerSingletonExample1 {\n\n    public LazyLoadedResourceManagerSingletonExample1() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class LazyLoadedResourceManagerSingletonExample1 {\n\n    private static LazyLoadedResourceManagerSingletonExample1 instance;\n    private Queue<String> availableResources;\n\n    private LazyLoadedResourceManagerSingletonExample1() {\n        availableResources = new LinkedList<>();\n        availableResources.add(\"Resource1\");\n        availableResources.add(\"Resource2\");\n    }\n\n    public static synchronized LazyLoadedResourceManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new LazyLoadedResourceManagerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return availableResources.poll();\n    }\n\n    public void releaseResource(String resource) {\n        availableResources.add(resource);\n    }\n\n}"
  },
  {
    "type": "LazyLoadedResourceManagerSingleton",
    "input": "public class LazyLoadedResourceManagerSingletonExample2 {\n\n    public LazyLoadedResourceManagerSingletonExample2() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class LazyLoadedResourceManagerSingletonExample2 {\n\n    private static LazyLoadedResourceManagerSingletonExample2 instance;\n    private Queue<String> availableResources;\n\n    private LazyLoadedResourceManagerSingletonExample2() {\n        availableResources = new LinkedList<>();\n        availableResources.add(\"Resource1\");\n        availableResources.add(\"Resource2\");\n    }\n\n    public static synchronized LazyLoadedResourceManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazyLoadedResourceManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return availableResources.poll();\n    }\n\n    public void releaseResource(String resource) {\n        availableResources.add(resource);\n    }\n\n}"
  },
  {
    "type": "LazyLoadedResourceManagerSingleton",
    "input": "public class LazyLoadedResourceManagerSingletonExample3 {\n\n    public LazyLoadedResourceManagerSingletonExample3() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class LazyLoadedResourceManagerSingletonExample3 {\n\n    private static LazyLoadedResourceManagerSingletonExample3 instance;\n    private Queue<String> availableResources;\n\n    private LazyLoadedResourceManagerSingletonExample3() {\n        availableResources = new LinkedList<>();\n        availableResources.add(\"Resource1\");\n        availableResources.add(\"Resource2\");\n    }\n\n    public static synchronized LazyLoadedResourceManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new LazyLoadedResourceManagerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return availableResources.poll();\n    }\n\n    public void releaseResource(String resource) {\n        availableResources.add(resource);\n    }\n\n}"
  },
  {
    "type": "LazyLoadedResourceManagerSingleton",
    "input": "public class LazyLoadedResourceManagerSingletonExample4 {\n\n    public LazyLoadedResourceManagerSingletonExample4() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class LazyLoadedResourceManagerSingletonExample4 {\n\n    private static LazyLoadedResourceManagerSingletonExample4 instance;\n    private Queue<String> availableResources;\n\n    private LazyLoadedResourceManagerSingletonExample4() {\n        availableResources = new LinkedList<>();\n        availableResources.add(\"Resource1\");\n        availableResources.add(\"Resource2\");\n    }\n\n    public static synchronized LazyLoadedResourceManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new LazyLoadedResourceManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return availableResources.poll();\n    }\n\n    public void releaseResource(String resource) {\n        availableResources.add(resource);\n    }\n\n}"
  },
  {
    "type": "LazyLoadedResourceManagerSingleton",
    "input": "public class LazyLoadedResourceManagerSingletonExample5 {\n\n    public LazyLoadedResourceManagerSingletonExample5() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class LazyLoadedResourceManagerSingletonExample5 {\n\n    private static LazyLoadedResourceManagerSingletonExample5 instance;\n    private Queue<String> availableResources;\n\n    private LazyLoadedResourceManagerSingletonExample5() {\n        availableResources = new LinkedList<>();\n        availableResources.add(\"Resource1\");\n        availableResources.add(\"Resource2\");\n    }\n\n    public static synchronized LazyLoadedResourceManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new LazyLoadedResourceManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return availableResources.poll();\n    }\n\n    public void releaseResource(String resource) {\n        availableResources.add(resource);\n    }\n\n}"
  },
  {
    "type": "ThreadSafeFeatureToggleSingleton",
    "input": "public class ThreadSafeFeatureToggleSingletonExample1 {\n\n    public ThreadSafeFeatureToggleSingletonExample1() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class ThreadSafeFeatureToggleSingletonExample1 {\n\n    private static ThreadSafeFeatureToggleSingletonExample1 instance;\n    private ConcurrentHashMap<String, Boolean> toggles;\n\n    private ThreadSafeFeatureToggleSingletonExample1() {\n        toggles = new ConcurrentHashMap<>();\n        toggles.put(\"NewFeature\", true);\n        toggles.put(\"BetaMode\", false);\n    }\n\n    public static synchronized ThreadSafeFeatureToggleSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeFeatureToggleSingletonExample1();\n        }\n        return instance;\n    }\n\n    public boolean isFeatureEnabled(String feature) {\n        return toggles.getOrDefault(feature, false);\n    }\n\n    public void setFeature(String feature, boolean isEnabled) {\n        toggles.put(feature, isEnabled);\n    }\n\n}"
  },
  {
    "type": "ThreadSafeFeatureToggleSingleton",
    "input": "public class ThreadSafeFeatureToggleSingletonExample2 {\n\n    public ThreadSafeFeatureToggleSingletonExample2() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class ThreadSafeFeatureToggleSingletonExample2 {\n\n    private static ThreadSafeFeatureToggleSingletonExample2 instance;\n    private ConcurrentHashMap<String, Boolean> toggles;\n\n    private ThreadSafeFeatureToggleSingletonExample2() {\n        toggles = new ConcurrentHashMap<>();\n        toggles.put(\"NewFeature\", true);\n        toggles.put(\"BetaMode\", false);\n    }\n\n    public static synchronized ThreadSafeFeatureToggleSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeFeatureToggleSingletonExample2();\n        }\n        return instance;\n    }\n\n    public boolean isFeatureEnabled(String feature) {\n        return toggles.getOrDefault(feature, false);\n    }\n\n    public void setFeature(String feature, boolean isEnabled) {\n        toggles.put(feature, isEnabled);\n    }\n\n}"
  },
  {
    "type": "ThreadSafeFeatureToggleSingleton",
    "input": "public class ThreadSafeFeatureToggleSingletonExample3 {\n\n    public ThreadSafeFeatureToggleSingletonExample3() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class ThreadSafeFeatureToggleSingletonExample3 {\n\n    private static ThreadSafeFeatureToggleSingletonExample3 instance;\n    private ConcurrentHashMap<String, Boolean> toggles;\n\n    private ThreadSafeFeatureToggleSingletonExample3() {\n        toggles = new ConcurrentHashMap<>();\n        toggles.put(\"NewFeature\", true);\n        toggles.put(\"BetaMode\", false);\n    }\n\n    public static synchronized ThreadSafeFeatureToggleSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeFeatureToggleSingletonExample3();\n        }\n        return instance;\n    }\n\n    public boolean isFeatureEnabled(String feature) {\n        return toggles.getOrDefault(feature, false);\n    }\n\n    public void setFeature(String feature, boolean isEnabled) {\n        toggles.put(feature, isEnabled);\n    }\n\n}"
  },
  {
    "type": "ThreadSafeFeatureToggleSingleton",
    "input": "public class ThreadSafeFeatureToggleSingletonExample4 {\n\n    public ThreadSafeFeatureToggleSingletonExample4() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class ThreadSafeFeatureToggleSingletonExample4 {\n\n    private static ThreadSafeFeatureToggleSingletonExample4 instance;\n    private ConcurrentHashMap<String, Boolean> toggles;\n\n    private ThreadSafeFeatureToggleSingletonExample4() {\n        toggles = new ConcurrentHashMap<>();\n        toggles.put(\"NewFeature\", true);\n        toggles.put(\"BetaMode\", false);\n    }\n\n    public static synchronized ThreadSafeFeatureToggleSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeFeatureToggleSingletonExample4();\n        }\n        return instance;\n    }\n\n    public boolean isFeatureEnabled(String feature) {\n        return toggles.getOrDefault(feature, false);\n    }\n\n    public void setFeature(String feature, boolean isEnabled) {\n        toggles.put(feature, isEnabled);\n    }\n\n}"
  },
  {
    "type": "ThreadSafeFeatureToggleSingleton",
    "input": "public class ThreadSafeFeatureToggleSingletonExample5 {\n\n    public ThreadSafeFeatureToggleSingletonExample5() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class ThreadSafeFeatureToggleSingletonExample5 {\n\n    private static ThreadSafeFeatureToggleSingletonExample5 instance;\n    private ConcurrentHashMap<String, Boolean> toggles;\n\n    private ThreadSafeFeatureToggleSingletonExample5() {\n        toggles = new ConcurrentHashMap<>();\n        toggles.put(\"NewFeature\", true);\n        toggles.put(\"BetaMode\", false);\n    }\n\n    public static synchronized ThreadSafeFeatureToggleSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeFeatureToggleSingletonExample5();\n        }\n        return instance;\n    }\n\n    public boolean isFeatureEnabled(String feature) {\n        return toggles.getOrDefault(feature, false);\n    }\n\n    public void setFeature(String feature, boolean isEnabled) {\n        toggles.put(feature, isEnabled);\n    }\n\n}"
  },
  {
    "type": "ConnectionPoolManagerSingleton",
    "input": "public class ConnectionPoolManagerSingletonExample1 {\n\n    public ConnectionPoolManagerSingletonExample1() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class ConnectionPoolManagerSingletonExample1 {\n\n    private static ConnectionPoolManagerSingletonExample1 instance;\n    private Queue<String> connectionPool;\n\n    private ConnectionPoolManagerSingletonExample1() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static synchronized ConnectionPoolManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new ConnectionPoolManagerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}"
  },
  {
    "type": "ConnectionPoolManagerSingleton",
    "input": "public class ConnectionPoolManagerSingletonExample2 {\n\n    public ConnectionPoolManagerSingletonExample2() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class ConnectionPoolManagerSingletonExample2 {\n\n    private static ConnectionPoolManagerSingletonExample2 instance;\n    private Queue<String> connectionPool;\n\n    private ConnectionPoolManagerSingletonExample2() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static synchronized ConnectionPoolManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new ConnectionPoolManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}"
  },
  {
    "type": "ConnectionPoolManagerSingleton",
    "input": "public class ConnectionPoolManagerSingletonExample3 {\n\n    public ConnectionPoolManagerSingletonExample3() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class ConnectionPoolManagerSingletonExample3 {\n\n    private static ConnectionPoolManagerSingletonExample3 instance;\n    private Queue<String> connectionPool;\n\n    private ConnectionPoolManagerSingletonExample3() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static synchronized ConnectionPoolManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new ConnectionPoolManagerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}"
  },
  {
    "type": "ConnectionPoolManagerSingleton",
    "input": "public class ConnectionPoolManagerSingletonExample4 {\n\n    public ConnectionPoolManagerSingletonExample4() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class ConnectionPoolManagerSingletonExample4 {\n\n    private static ConnectionPoolManagerSingletonExample4 instance;\n    private Queue<String> connectionPool;\n\n    private ConnectionPoolManagerSingletonExample4() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static synchronized ConnectionPoolManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new ConnectionPoolManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}"
  },
  {
    "type": "ConnectionPoolManagerSingleton",
    "input": "public class ConnectionPoolManagerSingletonExample5 {\n\n    public ConnectionPoolManagerSingletonExample5() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class ConnectionPoolManagerSingletonExample5 {\n\n    private static ConnectionPoolManagerSingletonExample5 instance;\n    private Queue<String> connectionPool;\n\n    private ConnectionPoolManagerSingletonExample5() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static synchronized ConnectionPoolManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new ConnectionPoolManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}"
  },
  {
    "type": "NotificationServiceSingleton",
    "input": "public class NotificationServiceSingletonExample1 {\n\n    public NotificationServiceSingletonExample1() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationServiceSingletonExample1 {\n\n    private static NotificationServiceSingletonExample1 instance;\n    private List<String> notifications;\n\n    private NotificationServiceSingletonExample1() {\n        notifications = new ArrayList<>();\n    }\n\n    public static synchronized NotificationServiceSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new NotificationServiceSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void sendNotification(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification sent: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}"
  },
  {
    "type": "NotificationServiceSingleton",
    "input": "public class NotificationServiceSingletonExample2 {\n\n    public NotificationServiceSingletonExample2() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationServiceSingletonExample2 {\n\n    private static NotificationServiceSingletonExample2 instance;\n    private List<String> notifications;\n\n    private NotificationServiceSingletonExample2() {\n        notifications = new ArrayList<>();\n    }\n\n    public static synchronized NotificationServiceSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new NotificationServiceSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void sendNotification(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification sent: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}"
  },
  {
    "type": "NotificationServiceSingleton",
    "input": "public class NotificationServiceSingletonExample3 {\n\n    public NotificationServiceSingletonExample3() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationServiceSingletonExample3 {\n\n    private static NotificationServiceSingletonExample3 instance;\n    private List<String> notifications;\n\n    private NotificationServiceSingletonExample3() {\n        notifications = new ArrayList<>();\n    }\n\n    public static synchronized NotificationServiceSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new NotificationServiceSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void sendNotification(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification sent: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}"
  },
  {
    "type": "NotificationServiceSingleton",
    "input": "public class NotificationServiceSingletonExample4 {\n\n    public NotificationServiceSingletonExample4() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationServiceSingletonExample4 {\n\n    private static NotificationServiceSingletonExample4 instance;\n    private List<String> notifications;\n\n    private NotificationServiceSingletonExample4() {\n        notifications = new ArrayList<>();\n    }\n\n    public static synchronized NotificationServiceSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new NotificationServiceSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void sendNotification(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification sent: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}"
  },
  {
    "type": "NotificationServiceSingleton",
    "input": "public class NotificationServiceSingletonExample5 {\n\n    public NotificationServiceSingletonExample5() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationServiceSingletonExample5 {\n\n    private static NotificationServiceSingletonExample5 instance;\n    private List<String> notifications;\n\n    private NotificationServiceSingletonExample5() {\n        notifications = new ArrayList<>();\n    }\n\n    public static synchronized NotificationServiceSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new NotificationServiceSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void sendNotification(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification sent: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}"
  },
  {
    "type": "EventBusSingleton",
    "input": "public class EventBusSingletonExample1 {\n\n    public EventBusSingletonExample1() {}\n\n}",
    "output": "import java.util.concurrent.CopyOnWriteArrayList;\n\npublic class EventBusSingletonExample1 {\n\n    private static EventBusSingletonExample1 instance;\n    private CopyOnWriteArrayList<String> subscribers;\n\n    private EventBusSingletonExample1() {\n        subscribers = new CopyOnWriteArrayList<>();\n    }\n\n    public static synchronized EventBusSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new EventBusSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void subscribe(String subscriber) {\n        subscribers.add(subscriber);\n    }\n\n    public void postEvent(String event) {\n        for (String subscriber : subscribers) {\n            System.out.println(\"Event sent to \" + subscriber + \": \" + event);\n        }\n    }\n\n}"
  },
  {
    "type": "EventBusSingleton",
    "input": "public class EventBusSingletonExample2 {\n\n    public EventBusSingletonExample2() {}\n\n}",
    "output": "import java.util.concurrent.CopyOnWriteArrayList;\n\npublic class EventBusSingletonExample2 {\n\n    private static EventBusSingletonExample2 instance;\n    private CopyOnWriteArrayList<String> subscribers;\n\n    private EventBusSingletonExample2() {\n        subscribers = new CopyOnWriteArrayList<>();\n    }\n\n    public static synchronized EventBusSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new EventBusSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void subscribe(String subscriber) {\n        subscribers.add(subscriber);\n    }\n\n    public void postEvent(String event) {\n        for (String subscriber : subscribers) {\n            System.out.println(\"Event sent to \" + subscriber + \": \" + event);\n        }\n    }\n\n}"
  },
  {
    "type": "EventBusSingleton",
    "input": "public class EventBusSingletonExample3 {\n\n    public EventBusSingletonExample3() {}\n\n}",
    "output": "import java.util.concurrent.CopyOnWriteArrayList;\n\npublic class EventBusSingletonExample3 {\n\n    private static EventBusSingletonExample3 instance;\n    private CopyOnWriteArrayList<String> subscribers;\n\n    private EventBusSingletonExample3() {\n        subscribers = new CopyOnWriteArrayList<>();\n    }\n\n    public static synchronized EventBusSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new EventBusSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void subscribe(String subscriber) {\n        subscribers.add(subscriber);\n    }\n\n    public void postEvent(String event) {\n        for (String subscriber : subscribers) {\n            System.out.println(\"Event sent to \" + subscriber + \": \" + event);\n        }\n    }\n\n}"
  },
  {
    "type": "EventBusSingleton",
    "input": "public class EventBusSingletonExample4 {\n\n    public EventBusSingletonExample4() {}\n\n}",
    "output": "import java.util.concurrent.CopyOnWriteArrayList;\n\npublic class EventBusSingletonExample4 {\n\n    private static EventBusSingletonExample4 instance;\n    private CopyOnWriteArrayList<String> subscribers;\n\n    private EventBusSingletonExample4() {\n        subscribers = new CopyOnWriteArrayList<>();\n    }\n\n    public static synchronized EventBusSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new EventBusSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void subscribe(String subscriber) {\n        subscribers.add(subscriber);\n    }\n\n    public void postEvent(String event) {\n        for (String subscriber : subscribers) {\n            System.out.println(\"Event sent to \" + subscriber + \": \" + event);\n        }\n    }\n\n}"
  },
  {
    "type": "EventBusSingleton",
    "input": "public class EventBusSingletonExample5 {\n\n    public EventBusSingletonExample5() {}\n\n}",
    "output": "import java.util.concurrent.CopyOnWriteArrayList;\n\npublic class EventBusSingletonExample5 {\n\n    private static EventBusSingletonExample5 instance;\n    private CopyOnWriteArrayList<String> subscribers;\n\n    private EventBusSingletonExample5() {\n        subscribers = new CopyOnWriteArrayList<>();\n    }\n\n    public static synchronized EventBusSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new EventBusSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void subscribe(String subscriber) {\n        subscribers.add(subscriber);\n    }\n\n    public void postEvent(String event) {\n        for (String subscriber : subscribers) {\n            System.out.println(\"Event sent to \" + subscriber + \": \" + event);\n        }\n    }\n\n}"
  },
  {
    "type": "ThreadLocalCounterSingleton",
    "input": "public class ThreadLocalCounterSingletonExample1 {\n\n    public ThreadLocalCounterSingletonExample1() {}\n\n}",
    "output": "public class ThreadLocalCounterSingletonExample1 {\n\n    private static final ThreadLocal<ThreadLocalCounterSingletonExample1> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalCounterSingletonExample1::new);\n    private int counter;\n\n    private ThreadLocalCounterSingletonExample1() {\n        counter = 0;\n    }\n\n    public static ThreadLocalCounterSingletonExample1 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public int incrementAndGet() {\n        return ++counter;\n    }\n\n}"
  },
  {
    "type": "ThreadLocalCounterSingleton",
    "input": "public class ThreadLocalCounterSingletonExample2 {\n\n    public ThreadLocalCounterSingletonExample2() {}\n\n}",
    "output": "public class ThreadLocalCounterSingletonExample2 {\n\n    private static final ThreadLocal<ThreadLocalCounterSingletonExample2> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalCounterSingletonExample2::new);\n    private int counter;\n\n    private ThreadLocalCounterSingletonExample2() {\n        counter = 0;\n    }\n\n    public static ThreadLocalCounterSingletonExample2 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public int incrementAndGet() {\n        return ++counter;\n    }\n\n}"
  },
  {
    "type": "ThreadLocalCounterSingleton",
    "input": "public class ThreadLocalCounterSingletonExample3 {\n\n    public ThreadLocalCounterSingletonExample3() {}\n\n}",
    "output": "public class ThreadLocalCounterSingletonExample3 {\n\n    private static final ThreadLocal<ThreadLocalCounterSingletonExample3> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalCounterSingletonExample3::new);\n    private int counter;\n\n    private ThreadLocalCounterSingletonExample3() {\n        counter = 0;\n    }\n\n    public static ThreadLocalCounterSingletonExample3 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public int incrementAndGet() {\n        return ++counter;\n    }\n\n}"
  },
  {
    "type": "ThreadLocalCounterSingleton",
    "input": "public class ThreadLocalCounterSingletonExample4 {\n\n    public ThreadLocalCounterSingletonExample4() {}\n\n}",
    "output": "public class ThreadLocalCounterSingletonExample4 {\n\n    private static final ThreadLocal<ThreadLocalCounterSingletonExample4> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalCounterSingletonExample4::new);\n    private int counter;\n\n    private ThreadLocalCounterSingletonExample4() {\n        counter = 0;\n    }\n\n    public static ThreadLocalCounterSingletonExample4 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public int incrementAndGet() {\n        return ++counter;\n    }\n\n}"
  },
  {
    "type": "ThreadLocalCounterSingleton",
    "input": "public class ThreadLocalCounterSingletonExample5 {\n\n    public ThreadLocalCounterSingletonExample5() {}\n\n}",
    "output": "public class ThreadLocalCounterSingletonExample5 {\n\n    private static final ThreadLocal<ThreadLocalCounterSingletonExample5> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalCounterSingletonExample5::new);\n    private int counter;\n\n    private ThreadLocalCounterSingletonExample5() {\n        counter = 0;\n    }\n\n    public static ThreadLocalCounterSingletonExample5 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public int incrementAndGet() {\n        return ++counter;\n    }\n\n}"
  },
  {
    "type": "GlobalRateLimiterSingleton",
    "input": "public class GlobalRateLimiterSingletonExample1 {\n\n    public GlobalRateLimiterSingletonExample1() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class GlobalRateLimiterSingletonExample1 {\n\n    private static GlobalRateLimiterSingletonExample1 instance;\n    private ConcurrentHashMap<String, AtomicInteger> clientRequests;\n    private static final int MAX_REQUESTS = 5;\n\n    private GlobalRateLimiterSingletonExample1() {\n        clientRequests = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized GlobalRateLimiterSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new GlobalRateLimiterSingletonExample1();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest(String clientId) {\n        clientRequests.putIfAbsent(clientId, new AtomicInteger(0));\n        AtomicInteger requestCount = clientRequests.get(clientId);\n        if (requestCount.get() < MAX_REQUESTS) {\n            requestCount.incrementAndGet();\n            return true;\n        } else {\n            System.out.println(\"Rate limit exceeded for: \" + clientId);\n            return false;\n        }\n    }\n\n}"
  },
  {
    "type": "GlobalRateLimiterSingleton",
    "input": "public class GlobalRateLimiterSingletonExample2 {\n\n    public GlobalRateLimiterSingletonExample2() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class GlobalRateLimiterSingletonExample2 {\n\n    private static GlobalRateLimiterSingletonExample2 instance;\n    private ConcurrentHashMap<String, AtomicInteger> clientRequests;\n    private static final int MAX_REQUESTS = 5;\n\n    private GlobalRateLimiterSingletonExample2() {\n        clientRequests = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized GlobalRateLimiterSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new GlobalRateLimiterSingletonExample2();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest(String clientId) {\n        clientRequests.putIfAbsent(clientId, new AtomicInteger(0));\n        AtomicInteger requestCount = clientRequests.get(clientId);\n        if (requestCount.get() < MAX_REQUESTS) {\n            requestCount.incrementAndGet();\n            return true;\n        } else {\n            System.out.println(\"Rate limit exceeded for: \" + clientId);\n            return false;\n        }\n    }\n\n}"
  },
  {
    "type": "GlobalRateLimiterSingleton",
    "input": "public class GlobalRateLimiterSingletonExample3 {\n\n    public GlobalRateLimiterSingletonExample3() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class GlobalRateLimiterSingletonExample3 {\n\n    private static GlobalRateLimiterSingletonExample3 instance;\n    private ConcurrentHashMap<String, AtomicInteger> clientRequests;\n    private static final int MAX_REQUESTS = 5;\n\n    private GlobalRateLimiterSingletonExample3() {\n        clientRequests = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized GlobalRateLimiterSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new GlobalRateLimiterSingletonExample3();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest(String clientId) {\n        clientRequests.putIfAbsent(clientId, new AtomicInteger(0));\n        AtomicInteger requestCount = clientRequests.get(clientId);\n        if (requestCount.get() < MAX_REQUESTS) {\n            requestCount.incrementAndGet();\n            return true;\n        } else {\n            System.out.println(\"Rate limit exceeded for: \" + clientId);\n            return false;\n        }\n    }\n\n}"
  },
  {
    "type": "GlobalRateLimiterSingleton",
    "input": "public class GlobalRateLimiterSingletonExample4 {\n\n    public GlobalRateLimiterSingletonExample4() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class GlobalRateLimiterSingletonExample4 {\n\n    private static GlobalRateLimiterSingletonExample4 instance;\n    private ConcurrentHashMap<String, AtomicInteger> clientRequests;\n    private static final int MAX_REQUESTS = 5;\n\n    private GlobalRateLimiterSingletonExample4() {\n        clientRequests = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized GlobalRateLimiterSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new GlobalRateLimiterSingletonExample4();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest(String clientId) {\n        clientRequests.putIfAbsent(clientId, new AtomicInteger(0));\n        AtomicInteger requestCount = clientRequests.get(clientId);\n        if (requestCount.get() < MAX_REQUESTS) {\n            requestCount.incrementAndGet();\n            return true;\n        } else {\n            System.out.println(\"Rate limit exceeded for: \" + clientId);\n            return false;\n        }\n    }\n\n}"
  },
  {
    "type": "GlobalRateLimiterSingleton",
    "input": "public class GlobalRateLimiterSingletonExample5 {\n\n    public GlobalRateLimiterSingletonExample5() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class GlobalRateLimiterSingletonExample5 {\n\n    private static GlobalRateLimiterSingletonExample5 instance;\n    private ConcurrentHashMap<String, AtomicInteger> clientRequests;\n    private static final int MAX_REQUESTS = 5;\n\n    private GlobalRateLimiterSingletonExample5() {\n        clientRequests = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized GlobalRateLimiterSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new GlobalRateLimiterSingletonExample5();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest(String clientId) {\n        clientRequests.putIfAbsent(clientId, new AtomicInteger(0));\n        AtomicInteger requestCount = clientRequests.get(clientId);\n        if (requestCount.get() < MAX_REQUESTS) {\n            requestCount.incrementAndGet();\n            return true;\n        } else {\n            System.out.println(\"Rate limit exceeded for: \" + clientId);\n            return false;\n        }\n    }\n\n}"
  },
  {
    "type": "SingletonWithTimeoutInitialization",
    "input": "public class SingletonWithTimeoutInitializationExample1 {\n\n    public SingletonWithTimeoutInitializationExample1() {}\n\n}",
    "output": "import java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class SingletonWithTimeoutInitializationExample1 {\n\n    private static SingletonWithTimeoutInitializationExample1 instance;\n    private static final Lock lock = new ReentrantLock();\n\n    private SingletonWithTimeoutInitializationExample1() {}\n\n    public static SingletonWithTimeoutInitializationExample1 getInstance() {\n        if (instance == null) {\n            try {\n                if (lock.tryLock()) {\n                    try {\n                        if (instance == null) {\n                            instance = new SingletonWithTimeoutInitializationExample1();\n                        }\n                    } finally {\n                        lock.unlock();\n                    }\n                }\n            } catch (Exception e) {\n                System.out.println(\"Timeout during initialization\");\n            }\n        }\n        return instance;\n    }\n\n    public void initialize() {\n        System.out.println(\"Initialized\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithTimeoutInitialization",
    "input": "public class SingletonWithTimeoutInitializationExample2 {\n\n    public SingletonWithTimeoutInitializationExample2() {}\n\n}",
    "output": "import java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class SingletonWithTimeoutInitializationExample2 {\n\n    private static SingletonWithTimeoutInitializationExample2 instance;\n    private static final Lock lock = new ReentrantLock();\n\n    private SingletonWithTimeoutInitializationExample2() {}\n\n    public static SingletonWithTimeoutInitializationExample2 getInstance() {\n        if (instance == null) {\n            try {\n                if (lock.tryLock()) {\n                    try {\n                        if (instance == null) {\n                            instance = new SingletonWithTimeoutInitializationExample2();\n                        }\n                    } finally {\n                        lock.unlock();\n                    }\n                }\n            } catch (Exception e) {\n                System.out.println(\"Timeout during initialization\");\n            }\n        }\n        return instance;\n    }\n\n    public void initialize() {\n        System.out.println(\"Initialized\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithTimeoutInitialization",
    "input": "public class SingletonWithTimeoutInitializationExample3 {\n\n    public SingletonWithTimeoutInitializationExample3() {}\n\n}",
    "output": "import java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class SingletonWithTimeoutInitializationExample3 {\n\n    private static SingletonWithTimeoutInitializationExample3 instance;\n    private static final Lock lock = new ReentrantLock();\n\n    private SingletonWithTimeoutInitializationExample3() {}\n\n    public static SingletonWithTimeoutInitializationExample3 getInstance() {\n        if (instance == null) {\n            try {\n                if (lock.tryLock()) {\n                    try {\n                        if (instance == null) {\n                            instance = new SingletonWithTimeoutInitializationExample3();\n                        }\n                    } finally {\n                        lock.unlock();\n                    }\n                }\n            } catch (Exception e) {\n                System.out.println(\"Timeout during initialization\");\n            }\n        }\n        return instance;\n    }\n\n    public void initialize() {\n        System.out.println(\"Initialized\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithTimeoutInitialization",
    "input": "public class SingletonWithTimeoutInitializationExample4 {\n\n    public SingletonWithTimeoutInitializationExample4() {}\n\n}",
    "output": "import java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class SingletonWithTimeoutInitializationExample4 {\n\n    private static SingletonWithTimeoutInitializationExample4 instance;\n    private static final Lock lock = new ReentrantLock();\n\n    private SingletonWithTimeoutInitializationExample4() {}\n\n    public static SingletonWithTimeoutInitializationExample4 getInstance() {\n        if (instance == null) {\n            try {\n                if (lock.tryLock()) {\n                    try {\n                        if (instance == null) {\n                            instance = new SingletonWithTimeoutInitializationExample4();\n                        }\n                    } finally {\n                        lock.unlock();\n                    }\n                }\n            } catch (Exception e) {\n                System.out.println(\"Timeout during initialization\");\n            }\n        }\n        return instance;\n    }\n\n    public void initialize() {\n        System.out.println(\"Initialized\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithTimeoutInitialization",
    "input": "public class SingletonWithTimeoutInitializationExample5 {\n\n    public SingletonWithTimeoutInitializationExample5() {}\n\n}",
    "output": "import java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class SingletonWithTimeoutInitializationExample5 {\n\n    private static SingletonWithTimeoutInitializationExample5 instance;\n    private static final Lock lock = new ReentrantLock();\n\n    private SingletonWithTimeoutInitializationExample5() {}\n\n    public static SingletonWithTimeoutInitializationExample5 getInstance() {\n        if (instance == null) {\n            try {\n                if (lock.tryLock()) {\n                    try {\n                        if (instance == null) {\n                            instance = new SingletonWithTimeoutInitializationExample5();\n                        }\n                    } finally {\n                        lock.unlock();\n                    }\n                }\n            } catch (Exception e) {\n                System.out.println(\"Timeout during initialization\");\n            }\n        }\n        return instance;\n    }\n\n    public void initialize() {\n        System.out.println(\"Initialized\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithCyclicDependencyGuard",
    "input": "public class SingletonWithCyclicDependencyGuardExample1 {\n\n    public SingletonWithCyclicDependencyGuardExample1() {}\n\n}",
    "output": "public class SingletonWithCyclicDependencyGuardExample1 {\n\n    private static SingletonWithCyclicDependencyGuardExample1 instance;\n    private static boolean isCreating;\n\n    private SingletonWithCyclicDependencyGuardExample1() {\n        if (isCreating) {\n            throw new IllegalStateException(\"Cyclic dependency detected!\");\n        }\n        isCreating = true;\n    }\n\n    public static synchronized SingletonWithCyclicDependencyGuardExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCyclicDependencyGuardExample1();\n            isCreating = false;\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithCyclicDependencyGuard",
    "input": "public class SingletonWithCyclicDependencyGuardExample2 {\n\n    public SingletonWithCyclicDependencyGuardExample2() {}\n\n}",
    "output": "public class SingletonWithCyclicDependencyGuardExample2 {\n\n    private static SingletonWithCyclicDependencyGuardExample2 instance;\n    private static boolean isCreating;\n\n    private SingletonWithCyclicDependencyGuardExample2() {\n        if (isCreating) {\n            throw new IllegalStateException(\"Cyclic dependency detected!\");\n        }\n        isCreating = true;\n    }\n\n    public static synchronized SingletonWithCyclicDependencyGuardExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCyclicDependencyGuardExample2();\n            isCreating = false;\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithCyclicDependencyGuard",
    "input": "public class SingletonWithCyclicDependencyGuardExample3 {\n\n    public SingletonWithCyclicDependencyGuardExample3() {}\n\n}",
    "output": "public class SingletonWithCyclicDependencyGuardExample3 {\n\n    private static SingletonWithCyclicDependencyGuardExample3 instance;\n    private static boolean isCreating;\n\n    private SingletonWithCyclicDependencyGuardExample3() {\n        if (isCreating) {\n            throw new IllegalStateException(\"Cyclic dependency detected!\");\n        }\n        isCreating = true;\n    }\n\n    public static synchronized SingletonWithCyclicDependencyGuardExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCyclicDependencyGuardExample3();\n            isCreating = false;\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithCyclicDependencyGuard",
    "input": "public class SingletonWithCyclicDependencyGuardExample4 {\n\n    public SingletonWithCyclicDependencyGuardExample4() {}\n\n}",
    "output": "public class SingletonWithCyclicDependencyGuardExample4 {\n\n    private static SingletonWithCyclicDependencyGuardExample4 instance;\n    private static boolean isCreating;\n\n    private SingletonWithCyclicDependencyGuardExample4() {\n        if (isCreating) {\n            throw new IllegalStateException(\"Cyclic dependency detected!\");\n        }\n        isCreating = true;\n    }\n\n    public static synchronized SingletonWithCyclicDependencyGuardExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCyclicDependencyGuardExample4();\n            isCreating = false;\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithCyclicDependencyGuard",
    "input": "public class SingletonWithCyclicDependencyGuardExample5 {\n\n    public SingletonWithCyclicDependencyGuardExample5() {}\n\n}",
    "output": "public class SingletonWithCyclicDependencyGuardExample5 {\n\n    private static SingletonWithCyclicDependencyGuardExample5 instance;\n    private static boolean isCreating;\n\n    private SingletonWithCyclicDependencyGuardExample5() {\n        if (isCreating) {\n            throw new IllegalStateException(\"Cyclic dependency detected!\");\n        }\n        isCreating = true;\n    }\n\n    public static synchronized SingletonWithCyclicDependencyGuardExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCyclicDependencyGuardExample5();\n            isCreating = false;\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithFallbackInstance",
    "input": "public class SingletonWithFallbackInstanceExample1 {\n\n    public SingletonWithFallbackInstanceExample1() {}\n\n}",
    "output": "public class SingletonWithFallbackInstanceExample1 {\n\n    private static SingletonWithFallbackInstanceExample1 instance;\n    private static final SingletonWithFallbackInstanceExample1 fallbackInstance = new SingletonWithFallbackInstanceExample1(\"fallback\");\n\n    private String mode;\n\n    private SingletonWithFallbackInstanceExample1(String mode) {\n        this.mode = mode;\n    }\n\n    public static SingletonWithFallbackInstanceExample1 getInstance(boolean useFallback) {\n        if (useFallback) {\n            return fallbackInstance;\n        }\n        if (instance == null) {\n            instance = new SingletonWithFallbackInstanceExample1(\"primary\");\n        }\n        return instance;\n    }\n\n    public String getMode() {\n        return mode;\n    }\n\n}"
  },
  {
    "type": "SingletonWithFallbackInstance",
    "input": "public class SingletonWithFallbackInstanceExample2 {\n\n    public SingletonWithFallbackInstanceExample2() {}\n\n}",
    "output": "public class SingletonWithFallbackInstanceExample2 {\n\n    private static SingletonWithFallbackInstanceExample2 instance;\n    private static final SingletonWithFallbackInstanceExample2 fallbackInstance = new SingletonWithFallbackInstanceExample2(\"fallback\");\n\n    private String mode;\n\n    private SingletonWithFallbackInstanceExample2(String mode) {\n        this.mode = mode;\n    }\n\n    public static SingletonWithFallbackInstanceExample2 getInstance(boolean useFallback) {\n        if (useFallback) {\n            return fallbackInstance;\n        }\n        if (instance == null) {\n            instance = new SingletonWithFallbackInstanceExample2(\"primary\");\n        }\n        return instance;\n    }\n\n    public String getMode() {\n        return mode;\n    }\n\n}"
  },
  {
    "type": "SingletonWithFallbackInstance",
    "input": "public class SingletonWithFallbackInstanceExample3 {\n\n    public SingletonWithFallbackInstanceExample3() {}\n\n}",
    "output": "public class SingletonWithFallbackInstanceExample3 {\n\n    private static SingletonWithFallbackInstanceExample3 instance;\n    private static final SingletonWithFallbackInstanceExample3 fallbackInstance = new SingletonWithFallbackInstanceExample3(\"fallback\");\n\n    private String mode;\n\n    private SingletonWithFallbackInstanceExample3(String mode) {\n        this.mode = mode;\n    }\n\n    public static SingletonWithFallbackInstanceExample3 getInstance(boolean useFallback) {\n        if (useFallback) {\n            return fallbackInstance;\n        }\n        if (instance == null) {\n            instance = new SingletonWithFallbackInstanceExample3(\"primary\");\n        }\n        return instance;\n    }\n\n    public String getMode() {\n        return mode;\n    }\n\n}"
  },
  {
    "type": "SingletonWithFallbackInstance",
    "input": "public class SingletonWithFallbackInstanceExample4 {\n\n    public SingletonWithFallbackInstanceExample4() {}\n\n}",
    "output": "public class SingletonWithFallbackInstanceExample4 {\n\n    private static SingletonWithFallbackInstanceExample4 instance;\n    private static final SingletonWithFallbackInstanceExample4 fallbackInstance = new SingletonWithFallbackInstanceExample4(\"fallback\");\n\n    private String mode;\n\n    private SingletonWithFallbackInstanceExample4(String mode) {\n        this.mode = mode;\n    }\n\n    public static SingletonWithFallbackInstanceExample4 getInstance(boolean useFallback) {\n        if (useFallback) {\n            return fallbackInstance;\n        }\n        if (instance == null) {\n            instance = new SingletonWithFallbackInstanceExample4(\"primary\");\n        }\n        return instance;\n    }\n\n    public String getMode() {\n        return mode;\n    }\n\n}"
  },
  {
    "type": "SingletonWithFallbackInstance",
    "input": "public class SingletonWithFallbackInstanceExample5 {\n\n    public SingletonWithFallbackInstanceExample5() {}\n\n}",
    "output": "public class SingletonWithFallbackInstanceExample5 {\n\n    private static SingletonWithFallbackInstanceExample5 instance;\n    private static final SingletonWithFallbackInstanceExample5 fallbackInstance = new SingletonWithFallbackInstanceExample5(\"fallback\");\n\n    private String mode;\n\n    private SingletonWithFallbackInstanceExample5(String mode) {\n        this.mode = mode;\n    }\n\n    public static SingletonWithFallbackInstanceExample5 getInstance(boolean useFallback) {\n        if (useFallback) {\n            return fallbackInstance;\n        }\n        if (instance == null) {\n            instance = new SingletonWithFallbackInstanceExample5(\"primary\");\n        }\n        return instance;\n    }\n\n    public String getMode() {\n        return mode;\n    }\n\n}"
  },
  {
    "type": "SelfDestructingSingleton",
    "input": "public class SelfDestructingSingletonExample1 {\n\n    public SelfDestructingSingletonExample1() {}\n\n}",
    "output": "public class SelfDestructingSingletonExample1 {\n\n    private static SelfDestructingSingletonExample1 instance;\n    private static long lastAccessed;\n    private static final long TIMEOUT = 3000; // milliseconds\n\n    private SelfDestructingSingletonExample1() {}\n\n    public static synchronized SelfDestructingSingletonExample1 getInstance() {\n        if (instance == null || (System.currentTimeMillis() - lastAccessed) > TIMEOUT) {\n            instance = new SelfDestructingSingletonExample1();\n        }\n        lastAccessed = System.currentTimeMillis();\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SelfDestructingSingleton",
    "input": "public class SelfDestructingSingletonExample2 {\n\n    public SelfDestructingSingletonExample2() {}\n\n}",
    "output": "public class SelfDestructingSingletonExample2 {\n\n    private static SelfDestructingSingletonExample2 instance;\n    private static long lastAccessed;\n    private static final long TIMEOUT = 3000; // milliseconds\n\n    private SelfDestructingSingletonExample2() {}\n\n    public static synchronized SelfDestructingSingletonExample2 getInstance() {\n        if (instance == null || (System.currentTimeMillis() - lastAccessed) > TIMEOUT) {\n            instance = new SelfDestructingSingletonExample2();\n        }\n        lastAccessed = System.currentTimeMillis();\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SelfDestructingSingleton",
    "input": "public class SelfDestructingSingletonExample3 {\n\n    public SelfDestructingSingletonExample3() {}\n\n}",
    "output": "public class SelfDestructingSingletonExample3 {\n\n    private static SelfDestructingSingletonExample3 instance;\n    private static long lastAccessed;\n    private static final long TIMEOUT = 3000; // milliseconds\n\n    private SelfDestructingSingletonExample3() {}\n\n    public static synchronized SelfDestructingSingletonExample3 getInstance() {\n        if (instance == null || (System.currentTimeMillis() - lastAccessed) > TIMEOUT) {\n            instance = new SelfDestructingSingletonExample3();\n        }\n        lastAccessed = System.currentTimeMillis();\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SelfDestructingSingleton",
    "input": "public class SelfDestructingSingletonExample4 {\n\n    public SelfDestructingSingletonExample4() {}\n\n}",
    "output": "public class SelfDestructingSingletonExample4 {\n\n    private static SelfDestructingSingletonExample4 instance;\n    private static long lastAccessed;\n    private static final long TIMEOUT = 3000; // milliseconds\n\n    private SelfDestructingSingletonExample4() {}\n\n    public static synchronized SelfDestructingSingletonExample4 getInstance() {\n        if (instance == null || (System.currentTimeMillis() - lastAccessed) > TIMEOUT) {\n            instance = new SelfDestructingSingletonExample4();\n        }\n        lastAccessed = System.currentTimeMillis();\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SelfDestructingSingleton",
    "input": "public class SelfDestructingSingletonExample5 {\n\n    public SelfDestructingSingletonExample5() {}\n\n}",
    "output": "public class SelfDestructingSingletonExample5 {\n\n    private static SelfDestructingSingletonExample5 instance;\n    private static long lastAccessed;\n    private static final long TIMEOUT = 3000; // milliseconds\n\n    private SelfDestructingSingletonExample5() {}\n\n    public static synchronized SelfDestructingSingletonExample5 getInstance() {\n        if (instance == null || (System.currentTimeMillis() - lastAccessed) > TIMEOUT) {\n            instance = new SelfDestructingSingletonExample5();\n        }\n        lastAccessed = System.currentTimeMillis();\n        return instance;\n    }\n\n}"
  },
  {
    "type": "DistributedLockingSingleton",
    "input": "public class DistributedLockingSingletonExample1 {\n\n    public DistributedLockingSingletonExample1() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedLockingSingletonExample1 {\n\n    private static DistributedLockingSingletonExample1 instance;\n    private ConcurrentHashMap<String, Boolean> lockMap;\n\n    private DistributedLockingSingletonExample1() {\n        lockMap = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedLockingSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new DistributedLockingSingletonExample1();\n        }\n        return instance;\n    }\n\n    public boolean acquireLock(String key) {\n        return lockMap.putIfAbsent(key, true) == null;\n    }\n\n    public void releaseLock(String key) {\n        lockMap.remove(key);\n    }\n\n}"
  },
  {
    "type": "DistributedLockingSingleton",
    "input": "public class DistributedLockingSingletonExample2 {\n\n    public DistributedLockingSingletonExample2() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedLockingSingletonExample2 {\n\n    private static DistributedLockingSingletonExample2 instance;\n    private ConcurrentHashMap<String, Boolean> lockMap;\n\n    private DistributedLockingSingletonExample2() {\n        lockMap = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedLockingSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new DistributedLockingSingletonExample2();\n        }\n        return instance;\n    }\n\n    public boolean acquireLock(String key) {\n        return lockMap.putIfAbsent(key, true) == null;\n    }\n\n    public void releaseLock(String key) {\n        lockMap.remove(key);\n    }\n\n}"
  },
  {
    "type": "DistributedLockingSingleton",
    "input": "public class DistributedLockingSingletonExample3 {\n\n    public DistributedLockingSingletonExample3() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedLockingSingletonExample3 {\n\n    private static DistributedLockingSingletonExample3 instance;\n    private ConcurrentHashMap<String, Boolean> lockMap;\n\n    private DistributedLockingSingletonExample3() {\n        lockMap = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedLockingSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new DistributedLockingSingletonExample3();\n        }\n        return instance;\n    }\n\n    public boolean acquireLock(String key) {\n        return lockMap.putIfAbsent(key, true) == null;\n    }\n\n    public void releaseLock(String key) {\n        lockMap.remove(key);\n    }\n\n}"
  },
  {
    "type": "DistributedLockingSingleton",
    "input": "public class DistributedLockingSingletonExample4 {\n\n    public DistributedLockingSingletonExample4() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedLockingSingletonExample4 {\n\n    private static DistributedLockingSingletonExample4 instance;\n    private ConcurrentHashMap<String, Boolean> lockMap;\n\n    private DistributedLockingSingletonExample4() {\n        lockMap = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedLockingSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new DistributedLockingSingletonExample4();\n        }\n        return instance;\n    }\n\n    public boolean acquireLock(String key) {\n        return lockMap.putIfAbsent(key, true) == null;\n    }\n\n    public void releaseLock(String key) {\n        lockMap.remove(key);\n    }\n\n}"
  },
  {
    "type": "DistributedLockingSingleton",
    "input": "public class DistributedLockingSingletonExample5 {\n\n    public DistributedLockingSingletonExample5() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedLockingSingletonExample5 {\n\n    private static DistributedLockingSingletonExample5 instance;\n    private ConcurrentHashMap<String, Boolean> lockMap;\n\n    private DistributedLockingSingletonExample5() {\n        lockMap = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedLockingSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new DistributedLockingSingletonExample5();\n        }\n        return instance;\n    }\n\n    public boolean acquireLock(String key) {\n        return lockMap.putIfAbsent(key, true) == null;\n    }\n\n    public void releaseLock(String key) {\n        lockMap.remove(key);\n    }\n\n}"
  },
  {
    "type": "SingletonWithObserverLifecycle",
    "input": "public class SingletonWithObserverLifecycleExample1 {\n\n    public SingletonWithObserverLifecycleExample1() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithObserverLifecycleExample1 {\n\n    private static SingletonWithObserverLifecycleExample1 instance;\n    private List<String> events;\n\n    private SingletonWithObserverLifecycleExample1() {\n        events = new ArrayList<>();\n        onStart();\n    }\n\n    public static synchronized SingletonWithObserverLifecycleExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithObserverLifecycleExample1();\n        }\n        return instance;\n    }\n\n    public void onStart() {\n        System.out.println(\"Singleton started\");\n    }\n\n    public void onEvent(String event) {\n        events.add(event);\n        System.out.println(\"Event captured: \" + event);\n    }\n\n    public void onStop() {\n        events.clear();\n        System.out.println(\"Singleton stopped\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithObserverLifecycle",
    "input": "public class SingletonWithObserverLifecycleExample2 {\n\n    public SingletonWithObserverLifecycleExample2() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithObserverLifecycleExample2 {\n\n    private static SingletonWithObserverLifecycleExample2 instance;\n    private List<String> events;\n\n    private SingletonWithObserverLifecycleExample2() {\n        events = new ArrayList<>();\n        onStart();\n    }\n\n    public static synchronized SingletonWithObserverLifecycleExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithObserverLifecycleExample2();\n        }\n        return instance;\n    }\n\n    public void onStart() {\n        System.out.println(\"Singleton started\");\n    }\n\n    public void onEvent(String event) {\n        events.add(event);\n        System.out.println(\"Event captured: \" + event);\n    }\n\n    public void onStop() {\n        events.clear();\n        System.out.println(\"Singleton stopped\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithObserverLifecycle",
    "input": "public class SingletonWithObserverLifecycleExample3 {\n\n    public SingletonWithObserverLifecycleExample3() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithObserverLifecycleExample3 {\n\n    private static SingletonWithObserverLifecycleExample3 instance;\n    private List<String> events;\n\n    private SingletonWithObserverLifecycleExample3() {\n        events = new ArrayList<>();\n        onStart();\n    }\n\n    public static synchronized SingletonWithObserverLifecycleExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithObserverLifecycleExample3();\n        }\n        return instance;\n    }\n\n    public void onStart() {\n        System.out.println(\"Singleton started\");\n    }\n\n    public void onEvent(String event) {\n        events.add(event);\n        System.out.println(\"Event captured: \" + event);\n    }\n\n    public void onStop() {\n        events.clear();\n        System.out.println(\"Singleton stopped\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithObserverLifecycle",
    "input": "public class SingletonWithObserverLifecycleExample4 {\n\n    public SingletonWithObserverLifecycleExample4() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithObserverLifecycleExample4 {\n\n    private static SingletonWithObserverLifecycleExample4 instance;\n    private List<String> events;\n\n    private SingletonWithObserverLifecycleExample4() {\n        events = new ArrayList<>();\n        onStart();\n    }\n\n    public static synchronized SingletonWithObserverLifecycleExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithObserverLifecycleExample4();\n        }\n        return instance;\n    }\n\n    public void onStart() {\n        System.out.println(\"Singleton started\");\n    }\n\n    public void onEvent(String event) {\n        events.add(event);\n        System.out.println(\"Event captured: \" + event);\n    }\n\n    public void onStop() {\n        events.clear();\n        System.out.println(\"Singleton stopped\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithObserverLifecycle",
    "input": "public class SingletonWithObserverLifecycleExample5 {\n\n    public SingletonWithObserverLifecycleExample5() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithObserverLifecycleExample5 {\n\n    private static SingletonWithObserverLifecycleExample5 instance;\n    private List<String> events;\n\n    private SingletonWithObserverLifecycleExample5() {\n        events = new ArrayList<>();\n        onStart();\n    }\n\n    public static synchronized SingletonWithObserverLifecycleExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithObserverLifecycleExample5();\n        }\n        return instance;\n    }\n\n    public void onStart() {\n        System.out.println(\"Singleton started\");\n    }\n\n    public void onEvent(String event) {\n        events.add(event);\n        System.out.println(\"Event captured: \" + event);\n    }\n\n    public void onStop() {\n        events.clear();\n        System.out.println(\"Singleton stopped\");\n    }\n\n}"
  },
  {
    "type": "SynchronizedMethodSingleton",
    "input": "public class SynchronizedMethodSingletonExample1 {\n\n    public SynchronizedMethodSingletonExample1() {}\n\n}",
    "output": "public class SynchronizedMethodSingletonExample1 {\n\n    private static SynchronizedMethodSingletonExample1 instance;\n\n    private SynchronizedMethodSingletonExample1() {}\n\n    public static synchronized SynchronizedMethodSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new SynchronizedMethodSingletonExample1();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedMethodSingleton",
    "input": "public class SynchronizedMethodSingletonExample2 {\n\n    public SynchronizedMethodSingletonExample2() {}\n\n}",
    "output": "public class SynchronizedMethodSingletonExample2 {\n\n    private static SynchronizedMethodSingletonExample2 instance;\n\n    private SynchronizedMethodSingletonExample2() {}\n\n    public static synchronized SynchronizedMethodSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new SynchronizedMethodSingletonExample2();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedMethodSingleton",
    "input": "public class SynchronizedMethodSingletonExample3 {\n\n    public SynchronizedMethodSingletonExample3() {}\n\n}",
    "output": "public class SynchronizedMethodSingletonExample3 {\n\n    private static SynchronizedMethodSingletonExample3 instance;\n\n    private SynchronizedMethodSingletonExample3() {}\n\n    public static synchronized SynchronizedMethodSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new SynchronizedMethodSingletonExample3();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedMethodSingleton",
    "input": "public class SynchronizedMethodSingletonExample4 {\n\n    public SynchronizedMethodSingletonExample4() {}\n\n}",
    "output": "public class SynchronizedMethodSingletonExample4 {\n\n    private static SynchronizedMethodSingletonExample4 instance;\n\n    private SynchronizedMethodSingletonExample4() {}\n\n    public static synchronized SynchronizedMethodSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new SynchronizedMethodSingletonExample4();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedMethodSingleton",
    "input": "public class SynchronizedMethodSingletonExample5 {\n\n    public SynchronizedMethodSingletonExample5() {}\n\n}",
    "output": "public class SynchronizedMethodSingletonExample5 {\n\n    private static SynchronizedMethodSingletonExample5 instance;\n\n    private SynchronizedMethodSingletonExample5() {}\n\n    public static synchronized SynchronizedMethodSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new SynchronizedMethodSingletonExample5();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample1 {\n\n    public DoubleCheckedLockingSingletonExample1() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample1 {\n\n    private static volatile DoubleCheckedLockingSingletonExample1 instance;\n\n    private DoubleCheckedLockingSingletonExample1() {}\n\n    public static DoubleCheckedLockingSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample2 {\n\n    public DoubleCheckedLockingSingletonExample2() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample2 {\n\n    private static volatile DoubleCheckedLockingSingletonExample2 instance;\n\n    private DoubleCheckedLockingSingletonExample2() {}\n\n    public static DoubleCheckedLockingSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample3 {\n\n    public DoubleCheckedLockingSingletonExample3() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample3 {\n\n    private static volatile DoubleCheckedLockingSingletonExample3 instance;\n\n    private DoubleCheckedLockingSingletonExample3() {}\n\n    public static DoubleCheckedLockingSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample4 {\n\n    public DoubleCheckedLockingSingletonExample4() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample4 {\n\n    private static volatile DoubleCheckedLockingSingletonExample4 instance;\n\n    private DoubleCheckedLockingSingletonExample4() {}\n\n    public static DoubleCheckedLockingSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckedLockingSingletonExample5 {\n\n    public DoubleCheckedLockingSingletonExample5() {}\n\n}",
    "output": "public class DoubleCheckedLockingSingletonExample5 {\n\n    private static volatile DoubleCheckedLockingSingletonExample5 instance;\n\n    private DoubleCheckedLockingSingletonExample5() {}\n\n    public static DoubleCheckedLockingSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingletonExample1 {\n\n    public BillPughSingletonExample1() {}\n\n}",
    "output": "public class BillPughSingletonExample1 {\n\n    private BillPughSingletonExample1() {}\n\n    private static class SingletonHelper {\n        private static final BillPughSingletonExample1 INSTANCE = new BillPughSingletonExample1();\n    }\n\n    public static BillPughSingletonExample1 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingletonExample2 {\n\n    public BillPughSingletonExample2() {}\n\n}",
    "output": "public class BillPughSingletonExample2 {\n\n    private BillPughSingletonExample2() {}\n\n    private static class SingletonHelper {\n        private static final BillPughSingletonExample2 INSTANCE = new BillPughSingletonExample2();\n    }\n\n    public static BillPughSingletonExample2 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingletonExample3 {\n\n    public BillPughSingletonExample3() {}\n\n}",
    "output": "public class BillPughSingletonExample3 {\n\n    private BillPughSingletonExample3() {}\n\n    private static class SingletonHelper {\n        private static final BillPughSingletonExample3 INSTANCE = new BillPughSingletonExample3();\n    }\n\n    public static BillPughSingletonExample3 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingletonExample4 {\n\n    public BillPughSingletonExample4() {}\n\n}",
    "output": "public class BillPughSingletonExample4 {\n\n    private BillPughSingletonExample4() {}\n\n    private static class SingletonHelper {\n        private static final BillPughSingletonExample4 INSTANCE = new BillPughSingletonExample4();\n    }\n\n    public static BillPughSingletonExample4 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingletonExample5 {\n\n    public BillPughSingletonExample5() {}\n\n}",
    "output": "public class BillPughSingletonExample5 {\n\n    private BillPughSingletonExample5() {}\n\n    private static class SingletonHelper {\n        private static final BillPughSingletonExample5 INSTANCE = new BillPughSingletonExample5();\n    }\n\n    public static BillPughSingletonExample5 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample1 {\n\n    public ThreadLocalSingletonExample1() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample1 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample1> instance = ThreadLocal.withInitial(ThreadLocalSingletonExample1::new);\n\n    private ThreadLocalSingletonExample1() {}\n\n    public static ThreadLocalSingletonExample1 getInstance() {\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample2 {\n\n    public ThreadLocalSingletonExample2() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample2 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample2> instance = ThreadLocal.withInitial(ThreadLocalSingletonExample2::new);\n\n    private ThreadLocalSingletonExample2() {}\n\n    public static ThreadLocalSingletonExample2 getInstance() {\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample3 {\n\n    public ThreadLocalSingletonExample3() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample3 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample3> instance = ThreadLocal.withInitial(ThreadLocalSingletonExample3::new);\n\n    private ThreadLocalSingletonExample3() {}\n\n    public static ThreadLocalSingletonExample3 getInstance() {\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample4 {\n\n    public ThreadLocalSingletonExample4() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample4 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample4> instance = ThreadLocal.withInitial(ThreadLocalSingletonExample4::new);\n\n    private ThreadLocalSingletonExample4() {}\n\n    public static ThreadLocalSingletonExample4 getInstance() {\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample5 {\n\n    public ThreadLocalSingletonExample5() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample5 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample5> instance = ThreadLocal.withInitial(ThreadLocalSingletonExample5::new);\n\n    private ThreadLocalSingletonExample5() {}\n\n    public static ThreadLocalSingletonExample5 getInstance() {\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "EnumBasedSingleton",
    "input": "public class EnumBasedSingletonExample1 {\n\n    public EnumBasedSingletonExample1() {}\n\n}",
    "output": "public enum EnumBasedSingletonExample1 {\n\n    INSTANCE;\n\n    public void performAction() {\n        System.out.println(\"Action performed by Singleton\");\n    }\n\n}"
  },
  {
    "type": "EnumBasedSingleton",
    "input": "public class EnumBasedSingletonExample2 {\n\n    public EnumBasedSingletonExample2() {}\n\n}",
    "output": "public enum EnumBasedSingletonExample2 {\n\n    INSTANCE;\n\n    public void performAction() {\n        System.out.println(\"Action performed by Singleton\");\n    }\n\n}"
  },
  {
    "type": "EnumBasedSingleton",
    "input": "public class EnumBasedSingletonExample3 {\n\n    public EnumBasedSingletonExample3() {}\n\n}",
    "output": "public enum EnumBasedSingletonExample3 {\n\n    INSTANCE;\n\n    public void performAction() {\n        System.out.println(\"Action performed by Singleton\");\n    }\n\n}"
  },
  {
    "type": "EnumBasedSingleton",
    "input": "public class EnumBasedSingletonExample4 {\n\n    public EnumBasedSingletonExample4() {}\n\n}",
    "output": "public enum EnumBasedSingletonExample4 {\n\n    INSTANCE;\n\n    public void performAction() {\n        System.out.println(\"Action performed by Singleton\");\n    }\n\n}"
  },
  {
    "type": "EnumBasedSingleton",
    "input": "public class EnumBasedSingletonExample5 {\n\n    public EnumBasedSingletonExample5() {}\n\n}",
    "output": "public enum EnumBasedSingletonExample5 {\n\n    INSTANCE;\n\n    public void performAction() {\n        System.out.println(\"Action performed by Singleton\");\n    }\n\n}"
  },
  {
    "type": "StaticBlockInitializationSingleton",
    "input": "public class StaticBlockInitializationSingletonExample1 {\n\n    public StaticBlockInitializationSingletonExample1() {}\n\n}",
    "output": "public class StaticBlockInitializationSingletonExample1 {\n\n    private static StaticBlockInitializationSingletonExample1 instance;\n\n    static {\n        try {\n            instance = new StaticBlockInitializationSingletonExample1();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error initializing singleton\", e);\n        }\n    }\n\n    private StaticBlockInitializationSingletonExample1() {}\n\n    public static StaticBlockInitializationSingletonExample1 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "StaticBlockInitializationSingleton",
    "input": "public class StaticBlockInitializationSingletonExample2 {\n\n    public StaticBlockInitializationSingletonExample2() {}\n\n}",
    "output": "public class StaticBlockInitializationSingletonExample2 {\n\n    private static StaticBlockInitializationSingletonExample2 instance;\n\n    static {\n        try {\n            instance = new StaticBlockInitializationSingletonExample2();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error initializing singleton\", e);\n        }\n    }\n\n    private StaticBlockInitializationSingletonExample2() {}\n\n    public static StaticBlockInitializationSingletonExample2 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "StaticBlockInitializationSingleton",
    "input": "public class StaticBlockInitializationSingletonExample3 {\n\n    public StaticBlockInitializationSingletonExample3() {}\n\n}",
    "output": "public class StaticBlockInitializationSingletonExample3 {\n\n    private static StaticBlockInitializationSingletonExample3 instance;\n\n    static {\n        try {\n            instance = new StaticBlockInitializationSingletonExample3();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error initializing singleton\", e);\n        }\n    }\n\n    private StaticBlockInitializationSingletonExample3() {}\n\n    public static StaticBlockInitializationSingletonExample3 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "StaticBlockInitializationSingleton",
    "input": "public class StaticBlockInitializationSingletonExample4 {\n\n    public StaticBlockInitializationSingletonExample4() {}\n\n}",
    "output": "public class StaticBlockInitializationSingletonExample4 {\n\n    private static StaticBlockInitializationSingletonExample4 instance;\n\n    static {\n        try {\n            instance = new StaticBlockInitializationSingletonExample4();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error initializing singleton\", e);\n        }\n    }\n\n    private StaticBlockInitializationSingletonExample4() {}\n\n    public static StaticBlockInitializationSingletonExample4 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "StaticBlockInitializationSingleton",
    "input": "public class StaticBlockInitializationSingletonExample5 {\n\n    public StaticBlockInitializationSingletonExample5() {}\n\n}",
    "output": "public class StaticBlockInitializationSingletonExample5 {\n\n    private static StaticBlockInitializationSingletonExample5 instance;\n\n    static {\n        try {\n            instance = new StaticBlockInitializationSingletonExample5();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error initializing singleton\", e);\n        }\n    }\n\n    private StaticBlockInitializationSingletonExample5() {}\n\n    public static StaticBlockInitializationSingletonExample5 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "VolatileLazyInitializationSingleton",
    "input": "public class VolatileLazyInitializationSingletonExample1 {\n\n    public VolatileLazyInitializationSingletonExample1() {}\n\n}",
    "output": "public class VolatileLazyInitializationSingletonExample1 {\n\n    private static volatile VolatileLazyInitializationSingletonExample1 instance;\n\n    private VolatileLazyInitializationSingletonExample1() {}\n\n    public static VolatileLazyInitializationSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (VolatileLazyInitializationSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new VolatileLazyInitializationSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "VolatileLazyInitializationSingleton",
    "input": "public class VolatileLazyInitializationSingletonExample2 {\n\n    public VolatileLazyInitializationSingletonExample2() {}\n\n}",
    "output": "public class VolatileLazyInitializationSingletonExample2 {\n\n    private static volatile VolatileLazyInitializationSingletonExample2 instance;\n\n    private VolatileLazyInitializationSingletonExample2() {}\n\n    public static VolatileLazyInitializationSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (VolatileLazyInitializationSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new VolatileLazyInitializationSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "VolatileLazyInitializationSingleton",
    "input": "public class VolatileLazyInitializationSingletonExample3 {\n\n    public VolatileLazyInitializationSingletonExample3() {}\n\n}",
    "output": "public class VolatileLazyInitializationSingletonExample3 {\n\n    private static volatile VolatileLazyInitializationSingletonExample3 instance;\n\n    private VolatileLazyInitializationSingletonExample3() {}\n\n    public static VolatileLazyInitializationSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (VolatileLazyInitializationSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new VolatileLazyInitializationSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "VolatileLazyInitializationSingleton",
    "input": "public class VolatileLazyInitializationSingletonExample4 {\n\n    public VolatileLazyInitializationSingletonExample4() {}\n\n}",
    "output": "public class VolatileLazyInitializationSingletonExample4 {\n\n    private static volatile VolatileLazyInitializationSingletonExample4 instance;\n\n    private VolatileLazyInitializationSingletonExample4() {}\n\n    public static VolatileLazyInitializationSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (VolatileLazyInitializationSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new VolatileLazyInitializationSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "VolatileLazyInitializationSingleton",
    "input": "public class VolatileLazyInitializationSingletonExample5 {\n\n    public VolatileLazyInitializationSingletonExample5() {}\n\n}",
    "output": "public class VolatileLazyInitializationSingletonExample5 {\n\n    private static volatile VolatileLazyInitializationSingletonExample5 instance;\n\n    private VolatileLazyInitializationSingletonExample5() {}\n\n    public static VolatileLazyInitializationSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (VolatileLazyInitializationSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new VolatileLazyInitializationSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeLazyHolderSingleton",
    "input": "public class ThreadSafeLazyHolderSingletonExample1 {\n\n    public ThreadSafeLazyHolderSingletonExample1() {}\n\n}",
    "output": "public class ThreadSafeLazyHolderSingletonExample1 {\n\n    private ThreadSafeLazyHolderSingletonExample1() {}\n\n    private static class LazyHolder {\n        private static final ThreadSafeLazyHolderSingletonExample1 INSTANCE = new ThreadSafeLazyHolderSingletonExample1();\n    }\n\n    public static ThreadSafeLazyHolderSingletonExample1 getInstance() {\n        return LazyHolder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeLazyHolderSingleton",
    "input": "public class ThreadSafeLazyHolderSingletonExample2 {\n\n    public ThreadSafeLazyHolderSingletonExample2() {}\n\n}",
    "output": "public class ThreadSafeLazyHolderSingletonExample2 {\n\n    private ThreadSafeLazyHolderSingletonExample2() {}\n\n    private static class LazyHolder {\n        private static final ThreadSafeLazyHolderSingletonExample2 INSTANCE = new ThreadSafeLazyHolderSingletonExample2();\n    }\n\n    public static ThreadSafeLazyHolderSingletonExample2 getInstance() {\n        return LazyHolder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeLazyHolderSingleton",
    "input": "public class ThreadSafeLazyHolderSingletonExample3 {\n\n    public ThreadSafeLazyHolderSingletonExample3() {}\n\n}",
    "output": "public class ThreadSafeLazyHolderSingletonExample3 {\n\n    private ThreadSafeLazyHolderSingletonExample3() {}\n\n    private static class LazyHolder {\n        private static final ThreadSafeLazyHolderSingletonExample3 INSTANCE = new ThreadSafeLazyHolderSingletonExample3();\n    }\n\n    public static ThreadSafeLazyHolderSingletonExample3 getInstance() {\n        return LazyHolder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeLazyHolderSingleton",
    "input": "public class ThreadSafeLazyHolderSingletonExample4 {\n\n    public ThreadSafeLazyHolderSingletonExample4() {}\n\n}",
    "output": "public class ThreadSafeLazyHolderSingletonExample4 {\n\n    private ThreadSafeLazyHolderSingletonExample4() {}\n\n    private static class LazyHolder {\n        private static final ThreadSafeLazyHolderSingletonExample4 INSTANCE = new ThreadSafeLazyHolderSingletonExample4();\n    }\n\n    public static ThreadSafeLazyHolderSingletonExample4 getInstance() {\n        return LazyHolder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeLazyHolderSingleton",
    "input": "public class ThreadSafeLazyHolderSingletonExample5 {\n\n    public ThreadSafeLazyHolderSingletonExample5() {}\n\n}",
    "output": "public class ThreadSafeLazyHolderSingletonExample5 {\n\n    private ThreadSafeLazyHolderSingletonExample5() {}\n\n    private static class LazyHolder {\n        private static final ThreadSafeLazyHolderSingletonExample5 INSTANCE = new ThreadSafeLazyHolderSingletonExample5();\n    }\n\n    public static ThreadSafeLazyHolderSingletonExample5 getInstance() {\n        return LazyHolder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "SynchronizedBlockSingleton",
    "input": "public class SynchronizedBlockSingletonExample1 {\n\n    public SynchronizedBlockSingletonExample1() {}\n\n}",
    "output": "public class SynchronizedBlockSingletonExample1 {\n\n    private static SynchronizedBlockSingletonExample1 instance;\n\n    private SynchronizedBlockSingletonExample1() {}\n\n    public static SynchronizedBlockSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (SynchronizedBlockSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new SynchronizedBlockSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedBlockSingleton",
    "input": "public class SynchronizedBlockSingletonExample2 {\n\n    public SynchronizedBlockSingletonExample2() {}\n\n}",
    "output": "public class SynchronizedBlockSingletonExample2 {\n\n    private static SynchronizedBlockSingletonExample2 instance;\n\n    private SynchronizedBlockSingletonExample2() {}\n\n    public static SynchronizedBlockSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (SynchronizedBlockSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new SynchronizedBlockSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedBlockSingleton",
    "input": "public class SynchronizedBlockSingletonExample3 {\n\n    public SynchronizedBlockSingletonExample3() {}\n\n}",
    "output": "public class SynchronizedBlockSingletonExample3 {\n\n    private static SynchronizedBlockSingletonExample3 instance;\n\n    private SynchronizedBlockSingletonExample3() {}\n\n    public static SynchronizedBlockSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (SynchronizedBlockSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new SynchronizedBlockSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedBlockSingleton",
    "input": "public class SynchronizedBlockSingletonExample4 {\n\n    public SynchronizedBlockSingletonExample4() {}\n\n}",
    "output": "public class SynchronizedBlockSingletonExample4 {\n\n    private static SynchronizedBlockSingletonExample4 instance;\n\n    private SynchronizedBlockSingletonExample4() {}\n\n    public static SynchronizedBlockSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (SynchronizedBlockSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new SynchronizedBlockSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedBlockSingleton",
    "input": "public class SynchronizedBlockSingletonExample5 {\n\n    public SynchronizedBlockSingletonExample5() {}\n\n}",
    "output": "public class SynchronizedBlockSingletonExample5 {\n\n    private static SynchronizedBlockSingletonExample5 instance;\n\n    private SynchronizedBlockSingletonExample5() {}\n\n    public static SynchronizedBlockSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (SynchronizedBlockSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new SynchronizedBlockSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeInitializationOnDemandHolder",
    "input": "public class ThreadSafeInitializationOnDemandHolderExample1 {\n\n    public ThreadSafeInitializationOnDemandHolderExample1() {}\n\n}",
    "output": "public class ThreadSafeInitializationOnDemandHolderExample1 {\n\n    private ThreadSafeInitializationOnDemandHolderExample1() {}\n\n    private static class Holder {\n        private static final ThreadSafeInitializationOnDemandHolderExample1 INSTANCE = new ThreadSafeInitializationOnDemandHolderExample1();\n    }\n\n    public static ThreadSafeInitializationOnDemandHolderExample1 getInstance() {\n        return Holder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeInitializationOnDemandHolder",
    "input": "public class ThreadSafeInitializationOnDemandHolderExample2 {\n\n    public ThreadSafeInitializationOnDemandHolderExample2() {}\n\n}",
    "output": "public class ThreadSafeInitializationOnDemandHolderExample2 {\n\n    private ThreadSafeInitializationOnDemandHolderExample2() {}\n\n    private static class Holder {\n        private static final ThreadSafeInitializationOnDemandHolderExample2 INSTANCE = new ThreadSafeInitializationOnDemandHolderExample2();\n    }\n\n    public static ThreadSafeInitializationOnDemandHolderExample2 getInstance() {\n        return Holder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeInitializationOnDemandHolder",
    "input": "public class ThreadSafeInitializationOnDemandHolderExample3 {\n\n    public ThreadSafeInitializationOnDemandHolderExample3() {}\n\n}",
    "output": "public class ThreadSafeInitializationOnDemandHolderExample3 {\n\n    private ThreadSafeInitializationOnDemandHolderExample3() {}\n\n    private static class Holder {\n        private static final ThreadSafeInitializationOnDemandHolderExample3 INSTANCE = new ThreadSafeInitializationOnDemandHolderExample3();\n    }\n\n    public static ThreadSafeInitializationOnDemandHolderExample3 getInstance() {\n        return Holder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeInitializationOnDemandHolder",
    "input": "public class ThreadSafeInitializationOnDemandHolderExample4 {\n\n    public ThreadSafeInitializationOnDemandHolderExample4() {}\n\n}",
    "output": "public class ThreadSafeInitializationOnDemandHolderExample4 {\n\n    private ThreadSafeInitializationOnDemandHolderExample4() {}\n\n    private static class Holder {\n        private static final ThreadSafeInitializationOnDemandHolderExample4 INSTANCE = new ThreadSafeInitializationOnDemandHolderExample4();\n    }\n\n    public static ThreadSafeInitializationOnDemandHolderExample4 getInstance() {\n        return Holder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeInitializationOnDemandHolder",
    "input": "public class ThreadSafeInitializationOnDemandHolderExample5 {\n\n    public ThreadSafeInitializationOnDemandHolderExample5() {}\n\n}",
    "output": "public class ThreadSafeInitializationOnDemandHolderExample5 {\n\n    private ThreadSafeInitializationOnDemandHolderExample5() {}\n\n    private static class Holder {\n        private static final ThreadSafeInitializationOnDemandHolderExample5 INSTANCE = new ThreadSafeInitializationOnDemandHolderExample5();\n    }\n\n    public static ThreadSafeInitializationOnDemandHolderExample5 getInstance() {\n        return Holder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "EagerThreadSafeSingleton",
    "input": "public class EagerThreadSafeSingletonExample1 {\n\n    public EagerThreadSafeSingletonExample1() {}\n\n}",
    "output": "public class EagerThreadSafeSingletonExample1 {\n\n    private static final EagerThreadSafeSingletonExample1 INSTANCE = new EagerThreadSafeSingletonExample1();\n\n    private EagerThreadSafeSingletonExample1() {}\n\n    public static EagerThreadSafeSingletonExample1 getInstance() {\n        return INSTANCE;\n    }\n\n}"
  },
  {
    "type": "EagerThreadSafeSingleton",
    "input": "public class EagerThreadSafeSingletonExample2 {\n\n    public EagerThreadSafeSingletonExample2() {}\n\n}",
    "output": "public class EagerThreadSafeSingletonExample2 {\n\n    private static final EagerThreadSafeSingletonExample2 INSTANCE = new EagerThreadSafeSingletonExample2();\n\n    private EagerThreadSafeSingletonExample2() {}\n\n    public static EagerThreadSafeSingletonExample2 getInstance() {\n        return INSTANCE;\n    }\n\n}"
  },
  {
    "type": "EagerThreadSafeSingleton",
    "input": "public class EagerThreadSafeSingletonExample3 {\n\n    public EagerThreadSafeSingletonExample3() {}\n\n}",
    "output": "public class EagerThreadSafeSingletonExample3 {\n\n    private static final EagerThreadSafeSingletonExample3 INSTANCE = new EagerThreadSafeSingletonExample3();\n\n    private EagerThreadSafeSingletonExample3() {}\n\n    public static EagerThreadSafeSingletonExample3 getInstance() {\n        return INSTANCE;\n    }\n\n}"
  },
  {
    "type": "EagerThreadSafeSingleton",
    "input": "public class EagerThreadSafeSingletonExample4 {\n\n    public EagerThreadSafeSingletonExample4() {}\n\n}",
    "output": "public class EagerThreadSafeSingletonExample4 {\n\n    private static final EagerThreadSafeSingletonExample4 INSTANCE = new EagerThreadSafeSingletonExample4();\n\n    private EagerThreadSafeSingletonExample4() {}\n\n    public static EagerThreadSafeSingletonExample4 getInstance() {\n        return INSTANCE;\n    }\n\n}"
  },
  {
    "type": "EagerThreadSafeSingleton",
    "input": "public class EagerThreadSafeSingletonExample5 {\n\n    public EagerThreadSafeSingletonExample5() {}\n\n}",
    "output": "public class EagerThreadSafeSingletonExample5 {\n\n    private static final EagerThreadSafeSingletonExample5 INSTANCE = new EagerThreadSafeSingletonExample5();\n\n    private EagerThreadSafeSingletonExample5() {}\n\n    public static EagerThreadSafeSingletonExample5 getInstance() {\n        return INSTANCE;\n    }\n\n}"
  },
  {
    "type": "SynchronizedDoubleCheckSingleton",
    "input": "public class SynchronizedDoubleCheckSingletonExample1 {\n\n    public SynchronizedDoubleCheckSingletonExample1() {}\n\n}",
    "output": "public class SynchronizedDoubleCheckSingletonExample1 {\n\n    private static volatile SynchronizedDoubleCheckSingletonExample1 instance;\n\n    private SynchronizedDoubleCheckSingletonExample1() {}\n\n    public static SynchronizedDoubleCheckSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (SynchronizedDoubleCheckSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new SynchronizedDoubleCheckSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedDoubleCheckSingleton",
    "input": "public class SynchronizedDoubleCheckSingletonExample2 {\n\n    public SynchronizedDoubleCheckSingletonExample2() {}\n\n}",
    "output": "public class SynchronizedDoubleCheckSingletonExample2 {\n\n    private static volatile SynchronizedDoubleCheckSingletonExample2 instance;\n\n    private SynchronizedDoubleCheckSingletonExample2() {}\n\n    public static SynchronizedDoubleCheckSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (SynchronizedDoubleCheckSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new SynchronizedDoubleCheckSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedDoubleCheckSingleton",
    "input": "public class SynchronizedDoubleCheckSingletonExample3 {\n\n    public SynchronizedDoubleCheckSingletonExample3() {}\n\n}",
    "output": "public class SynchronizedDoubleCheckSingletonExample3 {\n\n    private static volatile SynchronizedDoubleCheckSingletonExample3 instance;\n\n    private SynchronizedDoubleCheckSingletonExample3() {}\n\n    public static SynchronizedDoubleCheckSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (SynchronizedDoubleCheckSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new SynchronizedDoubleCheckSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedDoubleCheckSingleton",
    "input": "public class SynchronizedDoubleCheckSingletonExample4 {\n\n    public SynchronizedDoubleCheckSingletonExample4() {}\n\n}",
    "output": "public class SynchronizedDoubleCheckSingletonExample4 {\n\n    private static volatile SynchronizedDoubleCheckSingletonExample4 instance;\n\n    private SynchronizedDoubleCheckSingletonExample4() {}\n\n    public static SynchronizedDoubleCheckSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (SynchronizedDoubleCheckSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new SynchronizedDoubleCheckSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedDoubleCheckSingleton",
    "input": "public class SynchronizedDoubleCheckSingletonExample5 {\n\n    public SynchronizedDoubleCheckSingletonExample5() {}\n\n}",
    "output": "public class SynchronizedDoubleCheckSingletonExample5 {\n\n    private static volatile SynchronizedDoubleCheckSingletonExample5 instance;\n\n    private SynchronizedDoubleCheckSingletonExample5() {}\n\n    public static SynchronizedDoubleCheckSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (SynchronizedDoubleCheckSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new SynchronizedDoubleCheckSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedAccessSingleton",
    "input": "public class SynchronizedAccessSingletonExample1 {\n\n    public SynchronizedAccessSingletonExample1() {}\n\n}",
    "output": "public class SynchronizedAccessSingletonExample1 {\n\n    private static SynchronizedAccessSingletonExample1 instance;\n\n    private SynchronizedAccessSingletonExample1() {}\n\n    public static SynchronizedAccessSingletonExample1 getInstance() {\n        synchronized (SynchronizedAccessSingletonExample1.class) {\n            if (instance == null) {\n                instance = new SynchronizedAccessSingletonExample1();\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedAccessSingleton",
    "input": "public class SynchronizedAccessSingletonExample2 {\n\n    public SynchronizedAccessSingletonExample2() {}\n\n}",
    "output": "public class SynchronizedAccessSingletonExample2 {\n\n    private static SynchronizedAccessSingletonExample2 instance;\n\n    private SynchronizedAccessSingletonExample2() {}\n\n    public static SynchronizedAccessSingletonExample2 getInstance() {\n        synchronized (SynchronizedAccessSingletonExample2.class) {\n            if (instance == null) {\n                instance = new SynchronizedAccessSingletonExample2();\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedAccessSingleton",
    "input": "public class SynchronizedAccessSingletonExample3 {\n\n    public SynchronizedAccessSingletonExample3() {}\n\n}",
    "output": "public class SynchronizedAccessSingletonExample3 {\n\n    private static SynchronizedAccessSingletonExample3 instance;\n\n    private SynchronizedAccessSingletonExample3() {}\n\n    public static SynchronizedAccessSingletonExample3 getInstance() {\n        synchronized (SynchronizedAccessSingletonExample3.class) {\n            if (instance == null) {\n                instance = new SynchronizedAccessSingletonExample3();\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedAccessSingleton",
    "input": "public class SynchronizedAccessSingletonExample4 {\n\n    public SynchronizedAccessSingletonExample4() {}\n\n}",
    "output": "public class SynchronizedAccessSingletonExample4 {\n\n    private static SynchronizedAccessSingletonExample4 instance;\n\n    private SynchronizedAccessSingletonExample4() {}\n\n    public static SynchronizedAccessSingletonExample4 getInstance() {\n        synchronized (SynchronizedAccessSingletonExample4.class) {\n            if (instance == null) {\n                instance = new SynchronizedAccessSingletonExample4();\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SynchronizedAccessSingleton",
    "input": "public class SynchronizedAccessSingletonExample5 {\n\n    public SynchronizedAccessSingletonExample5() {}\n\n}",
    "output": "public class SynchronizedAccessSingletonExample5 {\n\n    private static SynchronizedAccessSingletonExample5 instance;\n\n    private SynchronizedAccessSingletonExample5() {}\n\n    public static SynchronizedAccessSingletonExample5 getInstance() {\n        synchronized (SynchronizedAccessSingletonExample5.class) {\n            if (instance == null) {\n                instance = new SynchronizedAccessSingletonExample5();\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ConcurrentMapSingleton",
    "input": "public class ConcurrentMapSingletonExample1 {\n\n    public ConcurrentMapSingletonExample1() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class ConcurrentMapSingletonExample1 {\n\n    private static final ConcurrentHashMap<String, ConcurrentMapSingletonExample1> instances = new ConcurrentHashMap<>();\n\n    private ConcurrentMapSingletonExample1() {}\n\n    public static ConcurrentMapSingletonExample1 getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new ConcurrentMapSingletonExample1());\n    }\n\n}"
  },
  {
    "type": "ConcurrentMapSingleton",
    "input": "public class ConcurrentMapSingletonExample2 {\n\n    public ConcurrentMapSingletonExample2() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class ConcurrentMapSingletonExample2 {\n\n    private static final ConcurrentHashMap<String, ConcurrentMapSingletonExample2> instances = new ConcurrentHashMap<>();\n\n    private ConcurrentMapSingletonExample2() {}\n\n    public static ConcurrentMapSingletonExample2 getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new ConcurrentMapSingletonExample2());\n    }\n\n}"
  },
  {
    "type": "ConcurrentMapSingleton",
    "input": "public class ConcurrentMapSingletonExample3 {\n\n    public ConcurrentMapSingletonExample3() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class ConcurrentMapSingletonExample3 {\n\n    private static final ConcurrentHashMap<String, ConcurrentMapSingletonExample3> instances = new ConcurrentHashMap<>();\n\n    private ConcurrentMapSingletonExample3() {}\n\n    public static ConcurrentMapSingletonExample3 getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new ConcurrentMapSingletonExample3());\n    }\n\n}"
  },
  {
    "type": "ConcurrentMapSingleton",
    "input": "public class ConcurrentMapSingletonExample4 {\n\n    public ConcurrentMapSingletonExample4() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class ConcurrentMapSingletonExample4 {\n\n    private static final ConcurrentHashMap<String, ConcurrentMapSingletonExample4> instances = new ConcurrentHashMap<>();\n\n    private ConcurrentMapSingletonExample4() {}\n\n    public static ConcurrentMapSingletonExample4 getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new ConcurrentMapSingletonExample4());\n    }\n\n}"
  },
  {
    "type": "ConcurrentMapSingleton",
    "input": "public class ConcurrentMapSingletonExample5 {\n\n    public ConcurrentMapSingletonExample5() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class ConcurrentMapSingletonExample5 {\n\n    private static final ConcurrentHashMap<String, ConcurrentMapSingletonExample5> instances = new ConcurrentHashMap<>();\n\n    private ConcurrentMapSingletonExample5() {}\n\n    public static ConcurrentMapSingletonExample5 getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new ConcurrentMapSingletonExample5());\n    }\n\n}"
  },
  {
    "type": "AtomicReferenceSingleton",
    "input": "public class AtomicReferenceSingletonExample1 {\n\n    public AtomicReferenceSingletonExample1() {}\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicReference;\n\npublic class AtomicReferenceSingletonExample1 {\n\n    private static final AtomicReference<AtomicReferenceSingletonExample1> INSTANCE = new AtomicReference<>();\n\n    private AtomicReferenceSingletonExample1() {}\n\n    public static AtomicReferenceSingletonExample1 getInstance() {\n        if (INSTANCE.get() == null) {\n            INSTANCE.compareAndSet(null, new AtomicReferenceSingletonExample1());\n        }\n        return INSTANCE.get();\n    }\n\n}"
  },
  {
    "type": "AtomicReferenceSingleton",
    "input": "public class AtomicReferenceSingletonExample2 {\n\n    public AtomicReferenceSingletonExample2() {}\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicReference;\n\npublic class AtomicReferenceSingletonExample2 {\n\n    private static final AtomicReference<AtomicReferenceSingletonExample2> INSTANCE = new AtomicReference<>();\n\n    private AtomicReferenceSingletonExample2() {}\n\n    public static AtomicReferenceSingletonExample2 getInstance() {\n        if (INSTANCE.get() == null) {\n            INSTANCE.compareAndSet(null, new AtomicReferenceSingletonExample2());\n        }\n        return INSTANCE.get();\n    }\n\n}"
  },
  {
    "type": "AtomicReferenceSingleton",
    "input": "public class AtomicReferenceSingletonExample3 {\n\n    public AtomicReferenceSingletonExample3() {}\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicReference;\n\npublic class AtomicReferenceSingletonExample3 {\n\n    private static final AtomicReference<AtomicReferenceSingletonExample3> INSTANCE = new AtomicReference<>();\n\n    private AtomicReferenceSingletonExample3() {}\n\n    public static AtomicReferenceSingletonExample3 getInstance() {\n        if (INSTANCE.get() == null) {\n            INSTANCE.compareAndSet(null, new AtomicReferenceSingletonExample3());\n        }\n        return INSTANCE.get();\n    }\n\n}"
  },
  {
    "type": "AtomicReferenceSingleton",
    "input": "public class AtomicReferenceSingletonExample4 {\n\n    public AtomicReferenceSingletonExample4() {}\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicReference;\n\npublic class AtomicReferenceSingletonExample4 {\n\n    private static final AtomicReference<AtomicReferenceSingletonExample4> INSTANCE = new AtomicReference<>();\n\n    private AtomicReferenceSingletonExample4() {}\n\n    public static AtomicReferenceSingletonExample4 getInstance() {\n        if (INSTANCE.get() == null) {\n            INSTANCE.compareAndSet(null, new AtomicReferenceSingletonExample4());\n        }\n        return INSTANCE.get();\n    }\n\n}"
  },
  {
    "type": "AtomicReferenceSingleton",
    "input": "public class AtomicReferenceSingletonExample5 {\n\n    public AtomicReferenceSingletonExample5() {}\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicReference;\n\npublic class AtomicReferenceSingletonExample5 {\n\n    private static final AtomicReference<AtomicReferenceSingletonExample5> INSTANCE = new AtomicReference<>();\n\n    private AtomicReferenceSingletonExample5() {}\n\n    public static AtomicReferenceSingletonExample5 getInstance() {\n        if (INSTANCE.get() == null) {\n            INSTANCE.compareAndSet(null, new AtomicReferenceSingletonExample5());\n        }\n        return INSTANCE.get();\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithCounter",
    "input": "public class ThreadSafeSingletonWithCounterExample1 {\n\n    public ThreadSafeSingletonWithCounterExample1() {}\n\n}",
    "output": "public class ThreadSafeSingletonWithCounterExample1 {\n\n    private static ThreadSafeSingletonWithCounterExample1 instance;\n    private int counter;\n\n    private ThreadSafeSingletonWithCounterExample1() {\n        counter = 0;\n    }\n\n    public static synchronized ThreadSafeSingletonWithCounterExample1 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithCounterExample1();\n        }\n        return instance;\n    }\n\n    public synchronized void incrementCounter() {\n        counter++;\n    }\n\n    public synchronized int getCounter() {\n        return counter;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithCounter",
    "input": "public class ThreadSafeSingletonWithCounterExample2 {\n\n    public ThreadSafeSingletonWithCounterExample2() {}\n\n}",
    "output": "public class ThreadSafeSingletonWithCounterExample2 {\n\n    private static ThreadSafeSingletonWithCounterExample2 instance;\n    private int counter;\n\n    private ThreadSafeSingletonWithCounterExample2() {\n        counter = 0;\n    }\n\n    public static synchronized ThreadSafeSingletonWithCounterExample2 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithCounterExample2();\n        }\n        return instance;\n    }\n\n    public synchronized void incrementCounter() {\n        counter++;\n    }\n\n    public synchronized int getCounter() {\n        return counter;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithCounter",
    "input": "public class ThreadSafeSingletonWithCounterExample3 {\n\n    public ThreadSafeSingletonWithCounterExample3() {}\n\n}",
    "output": "public class ThreadSafeSingletonWithCounterExample3 {\n\n    private static ThreadSafeSingletonWithCounterExample3 instance;\n    private int counter;\n\n    private ThreadSafeSingletonWithCounterExample3() {\n        counter = 0;\n    }\n\n    public static synchronized ThreadSafeSingletonWithCounterExample3 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithCounterExample3();\n        }\n        return instance;\n    }\n\n    public synchronized void incrementCounter() {\n        counter++;\n    }\n\n    public synchronized int getCounter() {\n        return counter;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithCounter",
    "input": "public class ThreadSafeSingletonWithCounterExample4 {\n\n    public ThreadSafeSingletonWithCounterExample4() {}\n\n}",
    "output": "public class ThreadSafeSingletonWithCounterExample4 {\n\n    private static ThreadSafeSingletonWithCounterExample4 instance;\n    private int counter;\n\n    private ThreadSafeSingletonWithCounterExample4() {\n        counter = 0;\n    }\n\n    public static synchronized ThreadSafeSingletonWithCounterExample4 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithCounterExample4();\n        }\n        return instance;\n    }\n\n    public synchronized void incrementCounter() {\n        counter++;\n    }\n\n    public synchronized int getCounter() {\n        return counter;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithCounter",
    "input": "public class ThreadSafeSingletonWithCounterExample5 {\n\n    public ThreadSafeSingletonWithCounterExample5() {}\n\n}",
    "output": "public class ThreadSafeSingletonWithCounterExample5 {\n\n    private static ThreadSafeSingletonWithCounterExample5 instance;\n    private int counter;\n\n    private ThreadSafeSingletonWithCounterExample5() {\n        counter = 0;\n    }\n\n    public static synchronized ThreadSafeSingletonWithCounterExample5 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithCounterExample5();\n        }\n        return instance;\n    }\n\n    public synchronized void incrementCounter() {\n        counter++;\n    }\n\n    public synchronized int getCounter() {\n        return counter;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithThreadPool",
    "input": "public class ThreadSafeSingletonWithThreadPoolExample1 {\n\n    public ThreadSafeSingletonWithThreadPoolExample1() {}\n\n}",
    "output": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class ThreadSafeSingletonWithThreadPoolExample1 {\n\n    private static ThreadSafeSingletonWithThreadPoolExample1 instance;\n    private ExecutorService executorService;\n\n    private ThreadSafeSingletonWithThreadPoolExample1() {\n        executorService = Executors.newFixedThreadPool(5);\n    }\n\n    public static synchronized ThreadSafeSingletonWithThreadPoolExample1 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithThreadPoolExample1();\n        }\n        return instance;\n    }\n\n    public ExecutorService getExecutorService() {\n        return executorService;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithThreadPool",
    "input": "public class ThreadSafeSingletonWithThreadPoolExample2 {\n\n    public ThreadSafeSingletonWithThreadPoolExample2() {}\n\n}",
    "output": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class ThreadSafeSingletonWithThreadPoolExample2 {\n\n    private static ThreadSafeSingletonWithThreadPoolExample2 instance;\n    private ExecutorService executorService;\n\n    private ThreadSafeSingletonWithThreadPoolExample2() {\n        executorService = Executors.newFixedThreadPool(5);\n    }\n\n    public static synchronized ThreadSafeSingletonWithThreadPoolExample2 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithThreadPoolExample2();\n        }\n        return instance;\n    }\n\n    public ExecutorService getExecutorService() {\n        return executorService;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithThreadPool",
    "input": "public class ThreadSafeSingletonWithThreadPoolExample3 {\n\n    public ThreadSafeSingletonWithThreadPoolExample3() {}\n\n}",
    "output": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class ThreadSafeSingletonWithThreadPoolExample3 {\n\n    private static ThreadSafeSingletonWithThreadPoolExample3 instance;\n    private ExecutorService executorService;\n\n    private ThreadSafeSingletonWithThreadPoolExample3() {\n        executorService = Executors.newFixedThreadPool(5);\n    }\n\n    public static synchronized ThreadSafeSingletonWithThreadPoolExample3 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithThreadPoolExample3();\n        }\n        return instance;\n    }\n\n    public ExecutorService getExecutorService() {\n        return executorService;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithThreadPool",
    "input": "public class ThreadSafeSingletonWithThreadPoolExample4 {\n\n    public ThreadSafeSingletonWithThreadPoolExample4() {}\n\n}",
    "output": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class ThreadSafeSingletonWithThreadPoolExample4 {\n\n    private static ThreadSafeSingletonWithThreadPoolExample4 instance;\n    private ExecutorService executorService;\n\n    private ThreadSafeSingletonWithThreadPoolExample4() {\n        executorService = Executors.newFixedThreadPool(5);\n    }\n\n    public static synchronized ThreadSafeSingletonWithThreadPoolExample4 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithThreadPoolExample4();\n        }\n        return instance;\n    }\n\n    public ExecutorService getExecutorService() {\n        return executorService;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithThreadPool",
    "input": "public class ThreadSafeSingletonWithThreadPoolExample5 {\n\n    public ThreadSafeSingletonWithThreadPoolExample5() {}\n\n}",
    "output": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class ThreadSafeSingletonWithThreadPoolExample5 {\n\n    private static ThreadSafeSingletonWithThreadPoolExample5 instance;\n    private ExecutorService executorService;\n\n    private ThreadSafeSingletonWithThreadPoolExample5() {\n        executorService = Executors.newFixedThreadPool(5);\n    }\n\n    public static synchronized ThreadSafeSingletonWithThreadPoolExample5 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithThreadPoolExample5();\n        }\n        return instance;\n    }\n\n    public ExecutorService getExecutorService() {\n        return executorService;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithCache",
    "input": "public class ThreadSafeSingletonWithCacheExample1 {\n\n    public ThreadSafeSingletonWithCacheExample1() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.Map;\n\npublic class ThreadSafeSingletonWithCacheExample1 {\n\n    private static ThreadSafeSingletonWithCacheExample1 instance;\n    private Map<String, String> cache;\n\n    private ThreadSafeSingletonWithCacheExample1() {\n        cache = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized ThreadSafeSingletonWithCacheExample1 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithCacheExample1();\n        }\n        return instance;\n    }\n\n    public synchronized void addToCache(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public synchronized String getFromCache(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithCache",
    "input": "public class ThreadSafeSingletonWithCacheExample2 {\n\n    public ThreadSafeSingletonWithCacheExample2() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.Map;\n\npublic class ThreadSafeSingletonWithCacheExample2 {\n\n    private static ThreadSafeSingletonWithCacheExample2 instance;\n    private Map<String, String> cache;\n\n    private ThreadSafeSingletonWithCacheExample2() {\n        cache = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized ThreadSafeSingletonWithCacheExample2 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithCacheExample2();\n        }\n        return instance;\n    }\n\n    public synchronized void addToCache(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public synchronized String getFromCache(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithCache",
    "input": "public class ThreadSafeSingletonWithCacheExample3 {\n\n    public ThreadSafeSingletonWithCacheExample3() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.Map;\n\npublic class ThreadSafeSingletonWithCacheExample3 {\n\n    private static ThreadSafeSingletonWithCacheExample3 instance;\n    private Map<String, String> cache;\n\n    private ThreadSafeSingletonWithCacheExample3() {\n        cache = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized ThreadSafeSingletonWithCacheExample3 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithCacheExample3();\n        }\n        return instance;\n    }\n\n    public synchronized void addToCache(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public synchronized String getFromCache(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithCache",
    "input": "public class ThreadSafeSingletonWithCacheExample4 {\n\n    public ThreadSafeSingletonWithCacheExample4() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.Map;\n\npublic class ThreadSafeSingletonWithCacheExample4 {\n\n    private static ThreadSafeSingletonWithCacheExample4 instance;\n    private Map<String, String> cache;\n\n    private ThreadSafeSingletonWithCacheExample4() {\n        cache = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized ThreadSafeSingletonWithCacheExample4 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithCacheExample4();\n        }\n        return instance;\n    }\n\n    public synchronized void addToCache(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public synchronized String getFromCache(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithCache",
    "input": "public class ThreadSafeSingletonWithCacheExample5 {\n\n    public ThreadSafeSingletonWithCacheExample5() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.Map;\n\npublic class ThreadSafeSingletonWithCacheExample5 {\n\n    private static ThreadSafeSingletonWithCacheExample5 instance;\n    private Map<String, String> cache;\n\n    private ThreadSafeSingletonWithCacheExample5() {\n        cache = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized ThreadSafeSingletonWithCacheExample5 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithCacheExample5();\n        }\n        return instance;\n    }\n\n    public synchronized void addToCache(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public synchronized String getFromCache(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithLifecycle",
    "input": "public class ThreadSafeSingletonWithLifecycleExample1 {\n\n    public ThreadSafeSingletonWithLifecycleExample1() {}\n\n}",
    "output": "public class ThreadSafeSingletonWithLifecycleExample1 {\n\n    private static ThreadSafeSingletonWithLifecycleExample1 instance;\n\n    private ThreadSafeSingletonWithLifecycleExample1() {\n        onCreate();\n    }\n\n    public static synchronized ThreadSafeSingletonWithLifecycleExample1 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithLifecycleExample1();\n        }\n        return instance;\n    }\n\n    private void onCreate() {\n        System.out.println(\"Singleton created\");\n    }\n\n    public void onDestroy() {\n        System.out.println(\"Singleton destroyed\");\n        instance = null;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithLifecycle",
    "input": "public class ThreadSafeSingletonWithLifecycleExample2 {\n\n    public ThreadSafeSingletonWithLifecycleExample2() {}\n\n}",
    "output": "public class ThreadSafeSingletonWithLifecycleExample2 {\n\n    private static ThreadSafeSingletonWithLifecycleExample2 instance;\n\n    private ThreadSafeSingletonWithLifecycleExample2() {\n        onCreate();\n    }\n\n    public static synchronized ThreadSafeSingletonWithLifecycleExample2 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithLifecycleExample2();\n        }\n        return instance;\n    }\n\n    private void onCreate() {\n        System.out.println(\"Singleton created\");\n    }\n\n    public void onDestroy() {\n        System.out.println(\"Singleton destroyed\");\n        instance = null;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithLifecycle",
    "input": "public class ThreadSafeSingletonWithLifecycleExample3 {\n\n    public ThreadSafeSingletonWithLifecycleExample3() {}\n\n}",
    "output": "public class ThreadSafeSingletonWithLifecycleExample3 {\n\n    private static ThreadSafeSingletonWithLifecycleExample3 instance;\n\n    private ThreadSafeSingletonWithLifecycleExample3() {\n        onCreate();\n    }\n\n    public static synchronized ThreadSafeSingletonWithLifecycleExample3 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithLifecycleExample3();\n        }\n        return instance;\n    }\n\n    private void onCreate() {\n        System.out.println(\"Singleton created\");\n    }\n\n    public void onDestroy() {\n        System.out.println(\"Singleton destroyed\");\n        instance = null;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithLifecycle",
    "input": "public class ThreadSafeSingletonWithLifecycleExample4 {\n\n    public ThreadSafeSingletonWithLifecycleExample4() {}\n\n}",
    "output": "public class ThreadSafeSingletonWithLifecycleExample4 {\n\n    private static ThreadSafeSingletonWithLifecycleExample4 instance;\n\n    private ThreadSafeSingletonWithLifecycleExample4() {\n        onCreate();\n    }\n\n    public static synchronized ThreadSafeSingletonWithLifecycleExample4 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithLifecycleExample4();\n        }\n        return instance;\n    }\n\n    private void onCreate() {\n        System.out.println(\"Singleton created\");\n    }\n\n    public void onDestroy() {\n        System.out.println(\"Singleton destroyed\");\n        instance = null;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingletonWithLifecycle",
    "input": "public class ThreadSafeSingletonWithLifecycleExample5 {\n\n    public ThreadSafeSingletonWithLifecycleExample5() {}\n\n}",
    "output": "public class ThreadSafeSingletonWithLifecycleExample5 {\n\n    private static ThreadSafeSingletonWithLifecycleExample5 instance;\n\n    private ThreadSafeSingletonWithLifecycleExample5() {\n        onCreate();\n    }\n\n    public static synchronized ThreadSafeSingletonWithLifecycleExample5 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithLifecycleExample5();\n        }\n        return instance;\n    }\n\n    private void onCreate() {\n        System.out.println(\"Singleton created\");\n    }\n\n    public void onDestroy() {\n        System.out.println(\"Singleton destroyed\");\n        instance = null;\n    }\n\n}"
  },
  {
    "type": "SynchronizedWeakReferenceSingleton",
    "input": "public class SynchronizedWeakReferenceSingletonExample1 {\n\n    public SynchronizedWeakReferenceSingletonExample1() {}\n\n}",
    "output": "import java.lang.ref.WeakReference;\n\npublic class SynchronizedWeakReferenceSingletonExample1 {\n\n    private static WeakReference<SynchronizedWeakReferenceSingletonExample1> instance;\n\n    private SynchronizedWeakReferenceSingletonExample1() {}\n\n    public static synchronized SynchronizedWeakReferenceSingletonExample1 getInstance() {\n        if (instance == null || instance.get() == null) {\n            instance = new WeakReference<>(new SynchronizedWeakReferenceSingletonExample1());\n        }\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "SynchronizedWeakReferenceSingleton",
    "input": "public class SynchronizedWeakReferenceSingletonExample2 {\n\n    public SynchronizedWeakReferenceSingletonExample2() {}\n\n}",
    "output": "import java.lang.ref.WeakReference;\n\npublic class SynchronizedWeakReferenceSingletonExample2 {\n\n    private static WeakReference<SynchronizedWeakReferenceSingletonExample2> instance;\n\n    private SynchronizedWeakReferenceSingletonExample2() {}\n\n    public static synchronized SynchronizedWeakReferenceSingletonExample2 getInstance() {\n        if (instance == null || instance.get() == null) {\n            instance = new WeakReference<>(new SynchronizedWeakReferenceSingletonExample2());\n        }\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "SynchronizedWeakReferenceSingleton",
    "input": "public class SynchronizedWeakReferenceSingletonExample3 {\n\n    public SynchronizedWeakReferenceSingletonExample3() {}\n\n}",
    "output": "import java.lang.ref.WeakReference;\n\npublic class SynchronizedWeakReferenceSingletonExample3 {\n\n    private static WeakReference<SynchronizedWeakReferenceSingletonExample3> instance;\n\n    private SynchronizedWeakReferenceSingletonExample3() {}\n\n    public static synchronized SynchronizedWeakReferenceSingletonExample3 getInstance() {\n        if (instance == null || instance.get() == null) {\n            instance = new WeakReference<>(new SynchronizedWeakReferenceSingletonExample3());\n        }\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "SynchronizedWeakReferenceSingleton",
    "input": "public class SynchronizedWeakReferenceSingletonExample4 {\n\n    public SynchronizedWeakReferenceSingletonExample4() {}\n\n}",
    "output": "import java.lang.ref.WeakReference;\n\npublic class SynchronizedWeakReferenceSingletonExample4 {\n\n    private static WeakReference<SynchronizedWeakReferenceSingletonExample4> instance;\n\n    private SynchronizedWeakReferenceSingletonExample4() {}\n\n    public static synchronized SynchronizedWeakReferenceSingletonExample4 getInstance() {\n        if (instance == null || instance.get() == null) {\n            instance = new WeakReference<>(new SynchronizedWeakReferenceSingletonExample4());\n        }\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "SynchronizedWeakReferenceSingleton",
    "input": "public class SynchronizedWeakReferenceSingletonExample5 {\n\n    public SynchronizedWeakReferenceSingletonExample5() {}\n\n}",
    "output": "import java.lang.ref.WeakReference;\n\npublic class SynchronizedWeakReferenceSingletonExample5 {\n\n    private static WeakReference<SynchronizedWeakReferenceSingletonExample5> instance;\n\n    private SynchronizedWeakReferenceSingletonExample5() {}\n\n    public static synchronized SynchronizedWeakReferenceSingletonExample5 getInstance() {\n        if (instance == null || instance.get() == null) {\n            instance = new WeakReference<>(new SynchronizedWeakReferenceSingletonExample5());\n        }\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "SingletonWithRetryPolicy",
    "input": "public class SingletonWithRetryPolicyExample1 {\n\n    public SingletonWithRetryPolicyExample1() {}\n\n}",
    "output": "public class SingletonWithRetryPolicyExample1 {\n\n    private static SingletonWithRetryPolicyExample1 instance;\n    private int retryCount;\n\n    private SingletonWithRetryPolicyExample1() {\n        retryCount = 0;\n    }\n\n    public static synchronized SingletonWithRetryPolicyExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithRetryPolicyExample1();\n        }\n        return instance;\n    }\n\n    public void retry(String task) {\n        retryCount++;\n        System.out.println(\"Retrying task: \" + task + \" - Retry Count: \" + retryCount);\n    }\n\n    public int getRetryCount() {\n        return retryCount;\n    }\n\n}"
  },
  {
    "type": "SingletonWithRetryPolicy",
    "input": "public class SingletonWithRetryPolicyExample2 {\n\n    public SingletonWithRetryPolicyExample2() {}\n\n}",
    "output": "public class SingletonWithRetryPolicyExample2 {\n\n    private static SingletonWithRetryPolicyExample2 instance;\n    private int retryCount;\n\n    private SingletonWithRetryPolicyExample2() {\n        retryCount = 0;\n    }\n\n    public static synchronized SingletonWithRetryPolicyExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithRetryPolicyExample2();\n        }\n        return instance;\n    }\n\n    public void retry(String task) {\n        retryCount++;\n        System.out.println(\"Retrying task: \" + task + \" - Retry Count: \" + retryCount);\n    }\n\n    public int getRetryCount() {\n        return retryCount;\n    }\n\n}"
  },
  {
    "type": "SingletonWithRetryPolicy",
    "input": "public class SingletonWithRetryPolicyExample3 {\n\n    public SingletonWithRetryPolicyExample3() {}\n\n}",
    "output": "public class SingletonWithRetryPolicyExample3 {\n\n    private static SingletonWithRetryPolicyExample3 instance;\n    private int retryCount;\n\n    private SingletonWithRetryPolicyExample3() {\n        retryCount = 0;\n    }\n\n    public static synchronized SingletonWithRetryPolicyExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithRetryPolicyExample3();\n        }\n        return instance;\n    }\n\n    public void retry(String task) {\n        retryCount++;\n        System.out.println(\"Retrying task: \" + task + \" - Retry Count: \" + retryCount);\n    }\n\n    public int getRetryCount() {\n        return retryCount;\n    }\n\n}"
  },
  {
    "type": "SingletonWithRetryPolicy",
    "input": "public class SingletonWithRetryPolicyExample4 {\n\n    public SingletonWithRetryPolicyExample4() {}\n\n}",
    "output": "public class SingletonWithRetryPolicyExample4 {\n\n    private static SingletonWithRetryPolicyExample4 instance;\n    private int retryCount;\n\n    private SingletonWithRetryPolicyExample4() {\n        retryCount = 0;\n    }\n\n    public static synchronized SingletonWithRetryPolicyExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithRetryPolicyExample4();\n        }\n        return instance;\n    }\n\n    public void retry(String task) {\n        retryCount++;\n        System.out.println(\"Retrying task: \" + task + \" - Retry Count: \" + retryCount);\n    }\n\n    public int getRetryCount() {\n        return retryCount;\n    }\n\n}"
  },
  {
    "type": "SingletonWithRetryPolicy",
    "input": "public class SingletonWithRetryPolicyExample5 {\n\n    public SingletonWithRetryPolicyExample5() {}\n\n}",
    "output": "public class SingletonWithRetryPolicyExample5 {\n\n    private static SingletonWithRetryPolicyExample5 instance;\n    private int retryCount;\n\n    private SingletonWithRetryPolicyExample5() {\n        retryCount = 0;\n    }\n\n    public static synchronized SingletonWithRetryPolicyExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithRetryPolicyExample5();\n        }\n        return instance;\n    }\n\n    public void retry(String task) {\n        retryCount++;\n        System.out.println(\"Retrying task: \" + task + \" - Retry Count: \" + retryCount);\n    }\n\n    public int getRetryCount() {\n        return retryCount;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithInitializationCheck",
    "input": "public class LazySingletonWithInitializationCheckExample1 {\n\n    public LazySingletonWithInitializationCheckExample1() {}\n\n}",
    "output": "public class LazySingletonWithInitializationCheckExample1 {\n\n    private static LazySingletonWithInitializationCheckExample1 instance;\n\n    private LazySingletonWithInitializationCheckExample1() {}\n\n    public static synchronized LazySingletonWithInitializationCheckExample1 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithInitializationCheckExample1();\n        }\n        return instance;\n    }\n\n    public boolean isInitialized() {\n        return instance != null;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithInitializationCheck",
    "input": "public class LazySingletonWithInitializationCheckExample2 {\n\n    public LazySingletonWithInitializationCheckExample2() {}\n\n}",
    "output": "public class LazySingletonWithInitializationCheckExample2 {\n\n    private static LazySingletonWithInitializationCheckExample2 instance;\n\n    private LazySingletonWithInitializationCheckExample2() {}\n\n    public static synchronized LazySingletonWithInitializationCheckExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithInitializationCheckExample2();\n        }\n        return instance;\n    }\n\n    public boolean isInitialized() {\n        return instance != null;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithInitializationCheck",
    "input": "public class LazySingletonWithInitializationCheckExample3 {\n\n    public LazySingletonWithInitializationCheckExample3() {}\n\n}",
    "output": "public class LazySingletonWithInitializationCheckExample3 {\n\n    private static LazySingletonWithInitializationCheckExample3 instance;\n\n    private LazySingletonWithInitializationCheckExample3() {}\n\n    public static synchronized LazySingletonWithInitializationCheckExample3 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithInitializationCheckExample3();\n        }\n        return instance;\n    }\n\n    public boolean isInitialized() {\n        return instance != null;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithInitializationCheck",
    "input": "public class LazySingletonWithInitializationCheckExample4 {\n\n    public LazySingletonWithInitializationCheckExample4() {}\n\n}",
    "output": "public class LazySingletonWithInitializationCheckExample4 {\n\n    private static LazySingletonWithInitializationCheckExample4 instance;\n\n    private LazySingletonWithInitializationCheckExample4() {}\n\n    public static synchronized LazySingletonWithInitializationCheckExample4 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithInitializationCheckExample4();\n        }\n        return instance;\n    }\n\n    public boolean isInitialized() {\n        return instance != null;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithInitializationCheck",
    "input": "public class LazySingletonWithInitializationCheckExample5 {\n\n    public LazySingletonWithInitializationCheckExample5() {}\n\n}",
    "output": "public class LazySingletonWithInitializationCheckExample5 {\n\n    private static LazySingletonWithInitializationCheckExample5 instance;\n\n    private LazySingletonWithInitializationCheckExample5() {}\n\n    public static synchronized LazySingletonWithInitializationCheckExample5 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithInitializationCheckExample5();\n        }\n        return instance;\n    }\n\n    public boolean isInitialized() {\n        return instance != null;\n    }\n\n}"
  },
  {
    "type": "SingletonWithSessionTimeout",
    "input": "public class SingletonWithSessionTimeoutExample1 {\n\n    public SingletonWithSessionTimeoutExample1() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class SingletonWithSessionTimeoutExample1 {\n\n    private static SingletonWithSessionTimeoutExample1 instance;\n    private Map<String, Long> sessions;\n    private ScheduledExecutorService scheduler;\n\n    private SingletonWithSessionTimeoutExample1() {\n        sessions = new HashMap<>();\n        scheduler = Executors.newScheduledThreadPool(1);\n        scheduler.scheduleAtFixedRate(() -> {\n            long currentTime = System.currentTimeMillis();\n            sessions.entrySet().removeIf(entry -> currentTime - entry.getValue() > 30000);\n        }, 0, 10, TimeUnit.SECONDS);\n    }\n\n    public static synchronized SingletonWithSessionTimeoutExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithSessionTimeoutExample1();\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        sessions.put(user, System.currentTimeMillis());\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return sessions.containsKey(user);\n    }\n\n}"
  },
  {
    "type": "SingletonWithSessionTimeout",
    "input": "public class SingletonWithSessionTimeoutExample2 {\n\n    public SingletonWithSessionTimeoutExample2() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class SingletonWithSessionTimeoutExample2 {\n\n    private static SingletonWithSessionTimeoutExample2 instance;\n    private Map<String, Long> sessions;\n    private ScheduledExecutorService scheduler;\n\n    private SingletonWithSessionTimeoutExample2() {\n        sessions = new HashMap<>();\n        scheduler = Executors.newScheduledThreadPool(1);\n        scheduler.scheduleAtFixedRate(() -> {\n            long currentTime = System.currentTimeMillis();\n            sessions.entrySet().removeIf(entry -> currentTime - entry.getValue() > 30000);\n        }, 0, 10, TimeUnit.SECONDS);\n    }\n\n    public static synchronized SingletonWithSessionTimeoutExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithSessionTimeoutExample2();\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        sessions.put(user, System.currentTimeMillis());\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return sessions.containsKey(user);\n    }\n\n}"
  },
  {
    "type": "SingletonWithSessionTimeout",
    "input": "public class SingletonWithSessionTimeoutExample3 {\n\n    public SingletonWithSessionTimeoutExample3() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class SingletonWithSessionTimeoutExample3 {\n\n    private static SingletonWithSessionTimeoutExample3 instance;\n    private Map<String, Long> sessions;\n    private ScheduledExecutorService scheduler;\n\n    private SingletonWithSessionTimeoutExample3() {\n        sessions = new HashMap<>();\n        scheduler = Executors.newScheduledThreadPool(1);\n        scheduler.scheduleAtFixedRate(() -> {\n            long currentTime = System.currentTimeMillis();\n            sessions.entrySet().removeIf(entry -> currentTime - entry.getValue() > 30000);\n        }, 0, 10, TimeUnit.SECONDS);\n    }\n\n    public static synchronized SingletonWithSessionTimeoutExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithSessionTimeoutExample3();\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        sessions.put(user, System.currentTimeMillis());\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return sessions.containsKey(user);\n    }\n\n}"
  },
  {
    "type": "SingletonWithSessionTimeout",
    "input": "public class SingletonWithSessionTimeoutExample4 {\n\n    public SingletonWithSessionTimeoutExample4() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class SingletonWithSessionTimeoutExample4 {\n\n    private static SingletonWithSessionTimeoutExample4 instance;\n    private Map<String, Long> sessions;\n    private ScheduledExecutorService scheduler;\n\n    private SingletonWithSessionTimeoutExample4() {\n        sessions = new HashMap<>();\n        scheduler = Executors.newScheduledThreadPool(1);\n        scheduler.scheduleAtFixedRate(() -> {\n            long currentTime = System.currentTimeMillis();\n            sessions.entrySet().removeIf(entry -> currentTime - entry.getValue() > 30000);\n        }, 0, 10, TimeUnit.SECONDS);\n    }\n\n    public static synchronized SingletonWithSessionTimeoutExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithSessionTimeoutExample4();\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        sessions.put(user, System.currentTimeMillis());\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return sessions.containsKey(user);\n    }\n\n}"
  },
  {
    "type": "SingletonWithSessionTimeout",
    "input": "public class SingletonWithSessionTimeoutExample5 {\n\n    public SingletonWithSessionTimeoutExample5() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class SingletonWithSessionTimeoutExample5 {\n\n    private static SingletonWithSessionTimeoutExample5 instance;\n    private Map<String, Long> sessions;\n    private ScheduledExecutorService scheduler;\n\n    private SingletonWithSessionTimeoutExample5() {\n        sessions = new HashMap<>();\n        scheduler = Executors.newScheduledThreadPool(1);\n        scheduler.scheduleAtFixedRate(() -> {\n            long currentTime = System.currentTimeMillis();\n            sessions.entrySet().removeIf(entry -> currentTime - entry.getValue() > 30000);\n        }, 0, 10, TimeUnit.SECONDS);\n    }\n\n    public static synchronized SingletonWithSessionTimeoutExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithSessionTimeoutExample5();\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        sessions.put(user, System.currentTimeMillis());\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return sessions.containsKey(user);\n    }\n\n}"
  },
  {
    "type": "SingletonWithDynamicResourcePool",
    "input": "public class SingletonWithDynamicResourcePoolExample1 {\n\n    public SingletonWithDynamicResourcePoolExample1() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentLinkedQueue;\n\npublic class SingletonWithDynamicResourcePoolExample1 {\n\n    private static SingletonWithDynamicResourcePoolExample1 instance;\n    private ConcurrentLinkedQueue<String> resources;\n\n    private SingletonWithDynamicResourcePoolExample1() {\n        resources = new ConcurrentLinkedQueue<>();\n    }\n\n    public static synchronized SingletonWithDynamicResourcePoolExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithDynamicResourcePoolExample1();\n        }\n        return instance;\n    }\n\n    public void addResource(String resource) {\n        resources.add(resource);\n    }\n\n    public String getResource() {\n        return resources.poll();\n    }\n\n}"
  },
  {
    "type": "SingletonWithDynamicResourcePool",
    "input": "public class SingletonWithDynamicResourcePoolExample2 {\n\n    public SingletonWithDynamicResourcePoolExample2() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentLinkedQueue;\n\npublic class SingletonWithDynamicResourcePoolExample2 {\n\n    private static SingletonWithDynamicResourcePoolExample2 instance;\n    private ConcurrentLinkedQueue<String> resources;\n\n    private SingletonWithDynamicResourcePoolExample2() {\n        resources = new ConcurrentLinkedQueue<>();\n    }\n\n    public static synchronized SingletonWithDynamicResourcePoolExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithDynamicResourcePoolExample2();\n        }\n        return instance;\n    }\n\n    public void addResource(String resource) {\n        resources.add(resource);\n    }\n\n    public String getResource() {\n        return resources.poll();\n    }\n\n}"
  },
  {
    "type": "SingletonWithDynamicResourcePool",
    "input": "public class SingletonWithDynamicResourcePoolExample3 {\n\n    public SingletonWithDynamicResourcePoolExample3() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentLinkedQueue;\n\npublic class SingletonWithDynamicResourcePoolExample3 {\n\n    private static SingletonWithDynamicResourcePoolExample3 instance;\n    private ConcurrentLinkedQueue<String> resources;\n\n    private SingletonWithDynamicResourcePoolExample3() {\n        resources = new ConcurrentLinkedQueue<>();\n    }\n\n    public static synchronized SingletonWithDynamicResourcePoolExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithDynamicResourcePoolExample3();\n        }\n        return instance;\n    }\n\n    public void addResource(String resource) {\n        resources.add(resource);\n    }\n\n    public String getResource() {\n        return resources.poll();\n    }\n\n}"
  },
  {
    "type": "SingletonWithDynamicResourcePool",
    "input": "public class SingletonWithDynamicResourcePoolExample4 {\n\n    public SingletonWithDynamicResourcePoolExample4() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentLinkedQueue;\n\npublic class SingletonWithDynamicResourcePoolExample4 {\n\n    private static SingletonWithDynamicResourcePoolExample4 instance;\n    private ConcurrentLinkedQueue<String> resources;\n\n    private SingletonWithDynamicResourcePoolExample4() {\n        resources = new ConcurrentLinkedQueue<>();\n    }\n\n    public static synchronized SingletonWithDynamicResourcePoolExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithDynamicResourcePoolExample4();\n        }\n        return instance;\n    }\n\n    public void addResource(String resource) {\n        resources.add(resource);\n    }\n\n    public String getResource() {\n        return resources.poll();\n    }\n\n}"
  },
  {
    "type": "SingletonWithDynamicResourcePool",
    "input": "public class SingletonWithDynamicResourcePoolExample5 {\n\n    public SingletonWithDynamicResourcePoolExample5() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentLinkedQueue;\n\npublic class SingletonWithDynamicResourcePoolExample5 {\n\n    private static SingletonWithDynamicResourcePoolExample5 instance;\n    private ConcurrentLinkedQueue<String> resources;\n\n    private SingletonWithDynamicResourcePoolExample5() {\n        resources = new ConcurrentLinkedQueue<>();\n    }\n\n    public static synchronized SingletonWithDynamicResourcePoolExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithDynamicResourcePoolExample5();\n        }\n        return instance;\n    }\n\n    public void addResource(String resource) {\n        resources.add(resource);\n    }\n\n    public String getResource() {\n        return resources.poll();\n    }\n\n}"
  },
  {
    "type": "DistributedSingleton",
    "input": "public class DistributedSingletonExample1 {\n\n    public DistributedSingletonExample1() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedSingletonExample1 {\n\n    private static ConcurrentHashMap<String, DistributedSingletonExample1> instances = new ConcurrentHashMap<>();\n\n    private DistributedSingletonExample1() {}\n\n    public static DistributedSingletonExample1 getInstance(String region) {\n        return instances.computeIfAbsent(region, k -> new DistributedSingletonExample1());\n    }\n\n}"
  },
  {
    "type": "DistributedSingleton",
    "input": "public class DistributedSingletonExample2 {\n\n    public DistributedSingletonExample2() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedSingletonExample2 {\n\n    private static ConcurrentHashMap<String, DistributedSingletonExample2> instances = new ConcurrentHashMap<>();\n\n    private DistributedSingletonExample2() {}\n\n    public static DistributedSingletonExample2 getInstance(String region) {\n        return instances.computeIfAbsent(region, k -> new DistributedSingletonExample2());\n    }\n\n}"
  },
  {
    "type": "DistributedSingleton",
    "input": "public class DistributedSingletonExample3 {\n\n    public DistributedSingletonExample3() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedSingletonExample3 {\n\n    private static ConcurrentHashMap<String, DistributedSingletonExample3> instances = new ConcurrentHashMap<>();\n\n    private DistributedSingletonExample3() {}\n\n    public static DistributedSingletonExample3 getInstance(String region) {\n        return instances.computeIfAbsent(region, k -> new DistributedSingletonExample3());\n    }\n\n}"
  },
  {
    "type": "DistributedSingleton",
    "input": "public class DistributedSingletonExample4 {\n\n    public DistributedSingletonExample4() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedSingletonExample4 {\n\n    private static ConcurrentHashMap<String, DistributedSingletonExample4> instances = new ConcurrentHashMap<>();\n\n    private DistributedSingletonExample4() {}\n\n    public static DistributedSingletonExample4 getInstance(String region) {\n        return instances.computeIfAbsent(region, k -> new DistributedSingletonExample4());\n    }\n\n}"
  },
  {
    "type": "DistributedSingleton",
    "input": "public class DistributedSingletonExample5 {\n\n    public DistributedSingletonExample5() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedSingletonExample5 {\n\n    private static ConcurrentHashMap<String, DistributedSingletonExample5> instances = new ConcurrentHashMap<>();\n\n    private DistributedSingletonExample5() {}\n\n    public static DistributedSingletonExample5 getInstance(String region) {\n        return instances.computeIfAbsent(region, k -> new DistributedSingletonExample5());\n    }\n\n}"
  },
  {
    "type": "SingletonWithPreloadedData",
    "input": "public class SingletonWithPreloadedDataExample1 {\n\n    public SingletonWithPreloadedDataExample1() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithPreloadedDataExample1 {\n\n    private static SingletonWithPreloadedDataExample1 instance;\n    private Map<String, String> data;\n\n    private SingletonWithPreloadedDataExample1() {\n        data = new HashMap<>();\n        data.put(\"Key1\", \"Value1\");\n        data.put(\"Key2\", \"Value2\");\n    }\n\n    public static synchronized SingletonWithPreloadedDataExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithPreloadedDataExample1();\n        }\n        return instance;\n    }\n\n    public String getData(String key) {\n        return data.get(key);\n    }\n\n}"
  },
  {
    "type": "SingletonWithPreloadedData",
    "input": "public class SingletonWithPreloadedDataExample2 {\n\n    public SingletonWithPreloadedDataExample2() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithPreloadedDataExample2 {\n\n    private static SingletonWithPreloadedDataExample2 instance;\n    private Map<String, String> data;\n\n    private SingletonWithPreloadedDataExample2() {\n        data = new HashMap<>();\n        data.put(\"Key1\", \"Value1\");\n        data.put(\"Key2\", \"Value2\");\n    }\n\n    public static synchronized SingletonWithPreloadedDataExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithPreloadedDataExample2();\n        }\n        return instance;\n    }\n\n    public String getData(String key) {\n        return data.get(key);\n    }\n\n}"
  },
  {
    "type": "SingletonWithPreloadedData",
    "input": "public class SingletonWithPreloadedDataExample3 {\n\n    public SingletonWithPreloadedDataExample3() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithPreloadedDataExample3 {\n\n    private static SingletonWithPreloadedDataExample3 instance;\n    private Map<String, String> data;\n\n    private SingletonWithPreloadedDataExample3() {\n        data = new HashMap<>();\n        data.put(\"Key1\", \"Value1\");\n        data.put(\"Key2\", \"Value2\");\n    }\n\n    public static synchronized SingletonWithPreloadedDataExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithPreloadedDataExample3();\n        }\n        return instance;\n    }\n\n    public String getData(String key) {\n        return data.get(key);\n    }\n\n}"
  },
  {
    "type": "SingletonWithPreloadedData",
    "input": "public class SingletonWithPreloadedDataExample4 {\n\n    public SingletonWithPreloadedDataExample4() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithPreloadedDataExample4 {\n\n    private static SingletonWithPreloadedDataExample4 instance;\n    private Map<String, String> data;\n\n    private SingletonWithPreloadedDataExample4() {\n        data = new HashMap<>();\n        data.put(\"Key1\", \"Value1\");\n        data.put(\"Key2\", \"Value2\");\n    }\n\n    public static synchronized SingletonWithPreloadedDataExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithPreloadedDataExample4();\n        }\n        return instance;\n    }\n\n    public String getData(String key) {\n        return data.get(key);\n    }\n\n}"
  },
  {
    "type": "SingletonWithPreloadedData",
    "input": "public class SingletonWithPreloadedDataExample5 {\n\n    public SingletonWithPreloadedDataExample5() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithPreloadedDataExample5 {\n\n    private static SingletonWithPreloadedDataExample5 instance;\n    private Map<String, String> data;\n\n    private SingletonWithPreloadedDataExample5() {\n        data = new HashMap<>();\n        data.put(\"Key1\", \"Value1\");\n        data.put(\"Key2\", \"Value2\");\n    }\n\n    public static synchronized SingletonWithPreloadedDataExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithPreloadedDataExample5();\n        }\n        return instance;\n    }\n\n    public String getData(String key) {\n        return data.get(key);\n    }\n\n}"
  },
  {
    "type": "SingletonWithRuntimeExceptionProtection",
    "input": "public class SingletonWithRuntimeExceptionProtectionExample1 {\n\n    public SingletonWithRuntimeExceptionProtectionExample1() {}\n\n}",
    "output": "public class SingletonWithRuntimeExceptionProtectionExample1 {\n\n    private static SingletonWithRuntimeExceptionProtectionExample1 instance;\n\n    private SingletonWithRuntimeExceptionProtectionExample1() {\n        if (instance != null) {\n            throw new RuntimeException(\"Instance already created\");\n        }\n    }\n\n    public static synchronized SingletonWithRuntimeExceptionProtectionExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithRuntimeExceptionProtectionExample1();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithRuntimeExceptionProtection",
    "input": "public class SingletonWithRuntimeExceptionProtectionExample2 {\n\n    public SingletonWithRuntimeExceptionProtectionExample2() {}\n\n}",
    "output": "public class SingletonWithRuntimeExceptionProtectionExample2 {\n\n    private static SingletonWithRuntimeExceptionProtectionExample2 instance;\n\n    private SingletonWithRuntimeExceptionProtectionExample2() {\n        if (instance != null) {\n            throw new RuntimeException(\"Instance already created\");\n        }\n    }\n\n    public static synchronized SingletonWithRuntimeExceptionProtectionExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithRuntimeExceptionProtectionExample2();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithRuntimeExceptionProtection",
    "input": "public class SingletonWithRuntimeExceptionProtectionExample3 {\n\n    public SingletonWithRuntimeExceptionProtectionExample3() {}\n\n}",
    "output": "public class SingletonWithRuntimeExceptionProtectionExample3 {\n\n    private static SingletonWithRuntimeExceptionProtectionExample3 instance;\n\n    private SingletonWithRuntimeExceptionProtectionExample3() {\n        if (instance != null) {\n            throw new RuntimeException(\"Instance already created\");\n        }\n    }\n\n    public static synchronized SingletonWithRuntimeExceptionProtectionExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithRuntimeExceptionProtectionExample3();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithRuntimeExceptionProtection",
    "input": "public class SingletonWithRuntimeExceptionProtectionExample4 {\n\n    public SingletonWithRuntimeExceptionProtectionExample4() {}\n\n}",
    "output": "public class SingletonWithRuntimeExceptionProtectionExample4 {\n\n    private static SingletonWithRuntimeExceptionProtectionExample4 instance;\n\n    private SingletonWithRuntimeExceptionProtectionExample4() {\n        if (instance != null) {\n            throw new RuntimeException(\"Instance already created\");\n        }\n    }\n\n    public static synchronized SingletonWithRuntimeExceptionProtectionExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithRuntimeExceptionProtectionExample4();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithRuntimeExceptionProtection",
    "input": "public class SingletonWithRuntimeExceptionProtectionExample5 {\n\n    public SingletonWithRuntimeExceptionProtectionExample5() {}\n\n}",
    "output": "public class SingletonWithRuntimeExceptionProtectionExample5 {\n\n    private static SingletonWithRuntimeExceptionProtectionExample5 instance;\n\n    private SingletonWithRuntimeExceptionProtectionExample5() {\n        if (instance != null) {\n            throw new RuntimeException(\"Instance already created\");\n        }\n    }\n\n    public static synchronized SingletonWithRuntimeExceptionProtectionExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithRuntimeExceptionProtectionExample5();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithInitializationHooks",
    "input": "public class SingletonWithInitializationHooksExample1 {\n\n    public SingletonWithInitializationHooksExample1() {}\n\n}",
    "output": "public class SingletonWithInitializationHooksExample1 {\n\n    private static SingletonWithInitializationHooksExample1 instance;\n\n    private SingletonWithInitializationHooksExample1() {\n        initialize();\n    }\n\n    public static synchronized SingletonWithInitializationHooksExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithInitializationHooksExample1();\n        }\n        return instance;\n    }\n\n    private void initialize() {\n        System.out.println(\"Singleton Initialized\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithInitializationHooks",
    "input": "public class SingletonWithInitializationHooksExample2 {\n\n    public SingletonWithInitializationHooksExample2() {}\n\n}",
    "output": "public class SingletonWithInitializationHooksExample2 {\n\n    private static SingletonWithInitializationHooksExample2 instance;\n\n    private SingletonWithInitializationHooksExample2() {\n        initialize();\n    }\n\n    public static synchronized SingletonWithInitializationHooksExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithInitializationHooksExample2();\n        }\n        return instance;\n    }\n\n    private void initialize() {\n        System.out.println(\"Singleton Initialized\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithInitializationHooks",
    "input": "public class SingletonWithInitializationHooksExample3 {\n\n    public SingletonWithInitializationHooksExample3() {}\n\n}",
    "output": "public class SingletonWithInitializationHooksExample3 {\n\n    private static SingletonWithInitializationHooksExample3 instance;\n\n    private SingletonWithInitializationHooksExample3() {\n        initialize();\n    }\n\n    public static synchronized SingletonWithInitializationHooksExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithInitializationHooksExample3();\n        }\n        return instance;\n    }\n\n    private void initialize() {\n        System.out.println(\"Singleton Initialized\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithInitializationHooks",
    "input": "public class SingletonWithInitializationHooksExample4 {\n\n    public SingletonWithInitializationHooksExample4() {}\n\n}",
    "output": "public class SingletonWithInitializationHooksExample4 {\n\n    private static SingletonWithInitializationHooksExample4 instance;\n\n    private SingletonWithInitializationHooksExample4() {\n        initialize();\n    }\n\n    public static synchronized SingletonWithInitializationHooksExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithInitializationHooksExample4();\n        }\n        return instance;\n    }\n\n    private void initialize() {\n        System.out.println(\"Singleton Initialized\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithInitializationHooks",
    "input": "public class SingletonWithInitializationHooksExample5 {\n\n    public SingletonWithInitializationHooksExample5() {}\n\n}",
    "output": "public class SingletonWithInitializationHooksExample5 {\n\n    private static SingletonWithInitializationHooksExample5 instance;\n\n    private SingletonWithInitializationHooksExample5() {\n        initialize();\n    }\n\n    public static synchronized SingletonWithInitializationHooksExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithInitializationHooksExample5();\n        }\n        return instance;\n    }\n\n    private void initialize() {\n        System.out.println(\"Singleton Initialized\");\n    }\n\n}"
  },
  {
    "type": "SingletonWithOptionalInstance",
    "input": "public class SingletonWithOptionalInstanceExample1 {\n\n    public SingletonWithOptionalInstanceExample1() {}\n\n}",
    "output": "import java.util.Optional;\n\npublic class SingletonWithOptionalInstanceExample1 {\n\n    private static SingletonWithOptionalInstanceExample1 instance;\n\n    private SingletonWithOptionalInstanceExample1() {}\n\n    public static Optional<SingletonWithOptionalInstanceExample1> getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithOptionalInstanceExample1();\n        }\n        return Optional.of(instance);\n    }\n\n}"
  },
  {
    "type": "SingletonWithOptionalInstance",
    "input": "public class SingletonWithOptionalInstanceExample2 {\n\n    public SingletonWithOptionalInstanceExample2() {}\n\n}",
    "output": "import java.util.Optional;\n\npublic class SingletonWithOptionalInstanceExample2 {\n\n    private static SingletonWithOptionalInstanceExample2 instance;\n\n    private SingletonWithOptionalInstanceExample2() {}\n\n    public static Optional<SingletonWithOptionalInstanceExample2> getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithOptionalInstanceExample2();\n        }\n        return Optional.of(instance);\n    }\n\n}"
  },
  {
    "type": "SingletonWithOptionalInstance",
    "input": "public class SingletonWithOptionalInstanceExample3 {\n\n    public SingletonWithOptionalInstanceExample3() {}\n\n}",
    "output": "import java.util.Optional;\n\npublic class SingletonWithOptionalInstanceExample3 {\n\n    private static SingletonWithOptionalInstanceExample3 instance;\n\n    private SingletonWithOptionalInstanceExample3() {}\n\n    public static Optional<SingletonWithOptionalInstanceExample3> getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithOptionalInstanceExample3();\n        }\n        return Optional.of(instance);\n    }\n\n}"
  },
  {
    "type": "SingletonWithOptionalInstance",
    "input": "public class SingletonWithOptionalInstanceExample4 {\n\n    public SingletonWithOptionalInstanceExample4() {}\n\n}",
    "output": "import java.util.Optional;\n\npublic class SingletonWithOptionalInstanceExample4 {\n\n    private static SingletonWithOptionalInstanceExample4 instance;\n\n    private SingletonWithOptionalInstanceExample4() {}\n\n    public static Optional<SingletonWithOptionalInstanceExample4> getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithOptionalInstanceExample4();\n        }\n        return Optional.of(instance);\n    }\n\n}"
  },
  {
    "type": "SingletonWithOptionalInstance",
    "input": "public class SingletonWithOptionalInstanceExample5 {\n\n    public SingletonWithOptionalInstanceExample5() {}\n\n}",
    "output": "import java.util.Optional;\n\npublic class SingletonWithOptionalInstanceExample5 {\n\n    private static SingletonWithOptionalInstanceExample5 instance;\n\n    private SingletonWithOptionalInstanceExample5() {}\n\n    public static Optional<SingletonWithOptionalInstanceExample5> getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithOptionalInstanceExample5();\n        }\n        return Optional.of(instance);\n    }\n\n}"
  },
  {
    "type": "ParameterizedLazySingleton",
    "input": "public class ParameterizedLazySingletonExample1 {\n\n    public ParameterizedLazySingletonExample1() {}\n\n}",
    "output": "public class ParameterizedLazySingletonExample1 {\n\n    private static ParameterizedLazySingletonExample1 instance;\n    private String config;\n\n    private ParameterizedLazySingletonExample1(String config) {\n        this.config = config;\n    }\n\n    public static ParameterizedLazySingletonExample1 getInstance(String config) {\n        if (instance == null) {\n            instance = new ParameterizedLazySingletonExample1(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "ParameterizedLazySingleton",
    "input": "public class ParameterizedLazySingletonExample2 {\n\n    public ParameterizedLazySingletonExample2() {}\n\n}",
    "output": "public class ParameterizedLazySingletonExample2 {\n\n    private static ParameterizedLazySingletonExample2 instance;\n    private String config;\n\n    private ParameterizedLazySingletonExample2(String config) {\n        this.config = config;\n    }\n\n    public static ParameterizedLazySingletonExample2 getInstance(String config) {\n        if (instance == null) {\n            instance = new ParameterizedLazySingletonExample2(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "ParameterizedLazySingleton",
    "input": "public class ParameterizedLazySingletonExample3 {\n\n    public ParameterizedLazySingletonExample3() {}\n\n}",
    "output": "public class ParameterizedLazySingletonExample3 {\n\n    private static ParameterizedLazySingletonExample3 instance;\n    private String config;\n\n    private ParameterizedLazySingletonExample3(String config) {\n        this.config = config;\n    }\n\n    public static ParameterizedLazySingletonExample3 getInstance(String config) {\n        if (instance == null) {\n            instance = new ParameterizedLazySingletonExample3(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "ParameterizedLazySingleton",
    "input": "public class ParameterizedLazySingletonExample4 {\n\n    public ParameterizedLazySingletonExample4() {}\n\n}",
    "output": "public class ParameterizedLazySingletonExample4 {\n\n    private static ParameterizedLazySingletonExample4 instance;\n    private String config;\n\n    private ParameterizedLazySingletonExample4(String config) {\n        this.config = config;\n    }\n\n    public static ParameterizedLazySingletonExample4 getInstance(String config) {\n        if (instance == null) {\n            instance = new ParameterizedLazySingletonExample4(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "ParameterizedLazySingleton",
    "input": "public class ParameterizedLazySingletonExample5 {\n\n    public ParameterizedLazySingletonExample5() {}\n\n}",
    "output": "public class ParameterizedLazySingletonExample5 {\n\n    private static ParameterizedLazySingletonExample5 instance;\n    private String config;\n\n    private ParameterizedLazySingletonExample5(String config) {\n        this.config = config;\n    }\n\n    public static ParameterizedLazySingletonExample5 getInstance(String config) {\n        if (instance == null) {\n            instance = new ParameterizedLazySingletonExample5(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeLazySingleton",
    "input": "public class ThreadSafeLazySingletonExample1 {\n\n    public ThreadSafeLazySingletonExample1() {}\n\n}",
    "output": "public class ThreadSafeLazySingletonExample1 {\n\n    private static volatile ThreadSafeLazySingletonExample1 instance;\n\n    private ThreadSafeLazySingletonExample1() {}\n\n    public static ThreadSafeLazySingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (ThreadSafeLazySingletonExample1.class) {\n                if (instance == null) {\n                    instance = new ThreadSafeLazySingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeLazySingleton",
    "input": "public class ThreadSafeLazySingletonExample2 {\n\n    public ThreadSafeLazySingletonExample2() {}\n\n}",
    "output": "public class ThreadSafeLazySingletonExample2 {\n\n    private static volatile ThreadSafeLazySingletonExample2 instance;\n\n    private ThreadSafeLazySingletonExample2() {}\n\n    public static ThreadSafeLazySingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (ThreadSafeLazySingletonExample2.class) {\n                if (instance == null) {\n                    instance = new ThreadSafeLazySingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeLazySingleton",
    "input": "public class ThreadSafeLazySingletonExample3 {\n\n    public ThreadSafeLazySingletonExample3() {}\n\n}",
    "output": "public class ThreadSafeLazySingletonExample3 {\n\n    private static volatile ThreadSafeLazySingletonExample3 instance;\n\n    private ThreadSafeLazySingletonExample3() {}\n\n    public static ThreadSafeLazySingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (ThreadSafeLazySingletonExample3.class) {\n                if (instance == null) {\n                    instance = new ThreadSafeLazySingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeLazySingleton",
    "input": "public class ThreadSafeLazySingletonExample4 {\n\n    public ThreadSafeLazySingletonExample4() {}\n\n}",
    "output": "public class ThreadSafeLazySingletonExample4 {\n\n    private static volatile ThreadSafeLazySingletonExample4 instance;\n\n    private ThreadSafeLazySingletonExample4() {}\n\n    public static ThreadSafeLazySingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (ThreadSafeLazySingletonExample4.class) {\n                if (instance == null) {\n                    instance = new ThreadSafeLazySingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeLazySingleton",
    "input": "public class ThreadSafeLazySingletonExample5 {\n\n    public ThreadSafeLazySingletonExample5() {}\n\n}",
    "output": "public class ThreadSafeLazySingletonExample5 {\n\n    private static volatile ThreadSafeLazySingletonExample5 instance;\n\n    private ThreadSafeLazySingletonExample5() {}\n\n    public static ThreadSafeLazySingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (ThreadSafeLazySingletonExample5.class) {\n                if (instance == null) {\n                    instance = new ThreadSafeLazySingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithDynamicConfiguration",
    "input": "public class SingletonWithDynamicConfigurationExample1 {\n\n    public SingletonWithDynamicConfigurationExample1() {}\n\n}",
    "output": "public class SingletonWithDynamicConfigurationExample1 {\n\n    private static SingletonWithDynamicConfigurationExample1 instance;\n    private String environment;\n\n    private SingletonWithDynamicConfigurationExample1(String environment) {\n        this.environment = environment;\n    }\n\n    public static SingletonWithDynamicConfigurationExample1 getInstance(String environment) {\n        if (instance == null) {\n            instance = new SingletonWithDynamicConfigurationExample1(environment);\n        }\n        return instance;\n    }\n\n    public String getEnvironment() {\n        return environment;\n    }\n\n}"
  },
  {
    "type": "SingletonWithDynamicConfiguration",
    "input": "public class SingletonWithDynamicConfigurationExample2 {\n\n    public SingletonWithDynamicConfigurationExample2() {}\n\n}",
    "output": "public class SingletonWithDynamicConfigurationExample2 {\n\n    private static SingletonWithDynamicConfigurationExample2 instance;\n    private String environment;\n\n    private SingletonWithDynamicConfigurationExample2(String environment) {\n        this.environment = environment;\n    }\n\n    public static SingletonWithDynamicConfigurationExample2 getInstance(String environment) {\n        if (instance == null) {\n            instance = new SingletonWithDynamicConfigurationExample2(environment);\n        }\n        return instance;\n    }\n\n    public String getEnvironment() {\n        return environment;\n    }\n\n}"
  },
  {
    "type": "SingletonWithDynamicConfiguration",
    "input": "public class SingletonWithDynamicConfigurationExample3 {\n\n    public SingletonWithDynamicConfigurationExample3() {}\n\n}",
    "output": "public class SingletonWithDynamicConfigurationExample3 {\n\n    private static SingletonWithDynamicConfigurationExample3 instance;\n    private String environment;\n\n    private SingletonWithDynamicConfigurationExample3(String environment) {\n        this.environment = environment;\n    }\n\n    public static SingletonWithDynamicConfigurationExample3 getInstance(String environment) {\n        if (instance == null) {\n            instance = new SingletonWithDynamicConfigurationExample3(environment);\n        }\n        return instance;\n    }\n\n    public String getEnvironment() {\n        return environment;\n    }\n\n}"
  },
  {
    "type": "SingletonWithDynamicConfiguration",
    "input": "public class SingletonWithDynamicConfigurationExample4 {\n\n    public SingletonWithDynamicConfigurationExample4() {}\n\n}",
    "output": "public class SingletonWithDynamicConfigurationExample4 {\n\n    private static SingletonWithDynamicConfigurationExample4 instance;\n    private String environment;\n\n    private SingletonWithDynamicConfigurationExample4(String environment) {\n        this.environment = environment;\n    }\n\n    public static SingletonWithDynamicConfigurationExample4 getInstance(String environment) {\n        if (instance == null) {\n            instance = new SingletonWithDynamicConfigurationExample4(environment);\n        }\n        return instance;\n    }\n\n    public String getEnvironment() {\n        return environment;\n    }\n\n}"
  },
  {
    "type": "SingletonWithDynamicConfiguration",
    "input": "public class SingletonWithDynamicConfigurationExample5 {\n\n    public SingletonWithDynamicConfigurationExample5() {}\n\n}",
    "output": "public class SingletonWithDynamicConfigurationExample5 {\n\n    private static SingletonWithDynamicConfigurationExample5 instance;\n    private String environment;\n\n    private SingletonWithDynamicConfigurationExample5(String environment) {\n        this.environment = environment;\n    }\n\n    public static SingletonWithDynamicConfigurationExample5 getInstance(String environment) {\n        if (instance == null) {\n            instance = new SingletonWithDynamicConfigurationExample5(environment);\n        }\n        return instance;\n    }\n\n    public String getEnvironment() {\n        return environment;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMultipleConstructors",
    "input": "public class SingletonWithMultipleConstructorsExample1 {\n\n    public SingletonWithMultipleConstructorsExample1() {}\n\n}",
    "output": "public class SingletonWithMultipleConstructorsExample1 {\n\n    private static SingletonWithMultipleConstructorsExample1 instance;\n    private String config;\n\n    private SingletonWithMultipleConstructorsExample1(String config) {\n        this.config = config;\n    }\n\n    private SingletonWithMultipleConstructorsExample1() {}\n\n    public static SingletonWithMultipleConstructorsExample1 getInstance(String config) {\n        if (instance == null) {\n            instance = new SingletonWithMultipleConstructorsExample1(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMultipleConstructors",
    "input": "public class SingletonWithMultipleConstructorsExample2 {\n\n    public SingletonWithMultipleConstructorsExample2() {}\n\n}",
    "output": "public class SingletonWithMultipleConstructorsExample2 {\n\n    private static SingletonWithMultipleConstructorsExample2 instance;\n    private String config;\n\n    private SingletonWithMultipleConstructorsExample2(String config) {\n        this.config = config;\n    }\n\n    private SingletonWithMultipleConstructorsExample2() {}\n\n    public static SingletonWithMultipleConstructorsExample2 getInstance(String config) {\n        if (instance == null) {\n            instance = new SingletonWithMultipleConstructorsExample2(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMultipleConstructors",
    "input": "public class SingletonWithMultipleConstructorsExample3 {\n\n    public SingletonWithMultipleConstructorsExample3() {}\n\n}",
    "output": "public class SingletonWithMultipleConstructorsExample3 {\n\n    private static SingletonWithMultipleConstructorsExample3 instance;\n    private String config;\n\n    private SingletonWithMultipleConstructorsExample3(String config) {\n        this.config = config;\n    }\n\n    private SingletonWithMultipleConstructorsExample3() {}\n\n    public static SingletonWithMultipleConstructorsExample3 getInstance(String config) {\n        if (instance == null) {\n            instance = new SingletonWithMultipleConstructorsExample3(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMultipleConstructors",
    "input": "public class SingletonWithMultipleConstructorsExample4 {\n\n    public SingletonWithMultipleConstructorsExample4() {}\n\n}",
    "output": "public class SingletonWithMultipleConstructorsExample4 {\n\n    private static SingletonWithMultipleConstructorsExample4 instance;\n    private String config;\n\n    private SingletonWithMultipleConstructorsExample4(String config) {\n        this.config = config;\n    }\n\n    private SingletonWithMultipleConstructorsExample4() {}\n\n    public static SingletonWithMultipleConstructorsExample4 getInstance(String config) {\n        if (instance == null) {\n            instance = new SingletonWithMultipleConstructorsExample4(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMultipleConstructors",
    "input": "public class SingletonWithMultipleConstructorsExample5 {\n\n    public SingletonWithMultipleConstructorsExample5() {}\n\n}",
    "output": "public class SingletonWithMultipleConstructorsExample5 {\n\n    private static SingletonWithMultipleConstructorsExample5 instance;\n    private String config;\n\n    private SingletonWithMultipleConstructorsExample5(String config) {\n        this.config = config;\n    }\n\n    private SingletonWithMultipleConstructorsExample5() {}\n\n    public static SingletonWithMultipleConstructorsExample5 getInstance(String config) {\n        if (instance == null) {\n            instance = new SingletonWithMultipleConstructorsExample5(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "SingletonWithInheritance",
    "input": "public class SingletonWithInheritanceExample1 {\n\n    public SingletonWithInheritanceExample1() {}\n\n}",
    "output": "public class SingletonWithInheritanceExample1 {\n\n    public SingletonWithInheritanceExample1() {}\n\n}\n\npublic class DerivedSingleton extends SingletonWithInheritanceExample1 {\n\n    private static DerivedSingleton instance;\n\n    private DerivedSingleton() {}\n\n    public static DerivedSingleton getInstance() {\n        if (instance == null) {\n            instance = new DerivedSingleton();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithInheritance",
    "input": "public class SingletonWithInheritanceExample2 {\n\n    public SingletonWithInheritanceExample2() {}\n\n}",
    "output": "public class SingletonWithInheritanceExample2 {\n\n    public SingletonWithInheritanceExample2() {}\n\n}\n\npublic class DerivedSingleton extends SingletonWithInheritanceExample2 {\n\n    private static DerivedSingleton instance;\n\n    private DerivedSingleton() {}\n\n    public static DerivedSingleton getInstance() {\n        if (instance == null) {\n            instance = new DerivedSingleton();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithInheritance",
    "input": "public class SingletonWithInheritanceExample3 {\n\n    public SingletonWithInheritanceExample3() {}\n\n}",
    "output": "public class SingletonWithInheritanceExample3 {\n\n    public SingletonWithInheritanceExample3() {}\n\n}\n\npublic class DerivedSingleton extends SingletonWithInheritanceExample3 {\n\n    private static DerivedSingleton instance;\n\n    private DerivedSingleton() {}\n\n    public static DerivedSingleton getInstance() {\n        if (instance == null) {\n            instance = new DerivedSingleton();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithInheritance",
    "input": "public class SingletonWithInheritanceExample4 {\n\n    public SingletonWithInheritanceExample4() {}\n\n}",
    "output": "public class SingletonWithInheritanceExample4 {\n\n    public SingletonWithInheritanceExample4() {}\n\n}\n\npublic class DerivedSingleton extends SingletonWithInheritanceExample4 {\n\n    private static DerivedSingleton instance;\n\n    private DerivedSingleton() {}\n\n    public static DerivedSingleton getInstance() {\n        if (instance == null) {\n            instance = new DerivedSingleton();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithInheritance",
    "input": "public class SingletonWithInheritanceExample5 {\n\n    public SingletonWithInheritanceExample5() {}\n\n}",
    "output": "public class SingletonWithInheritanceExample5 {\n\n    public SingletonWithInheritanceExample5() {}\n\n}\n\npublic class DerivedSingleton extends SingletonWithInheritanceExample5 {\n\n    private static DerivedSingleton instance;\n\n    private DerivedSingleton() {}\n\n    public static DerivedSingleton getInstance() {\n        if (instance == null) {\n            instance = new DerivedSingleton();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithInitializationLogging",
    "input": "public class SingletonWithInitializationLoggingExample1 {\n\n    public SingletonWithInitializationLoggingExample1() {}\n\n}",
    "output": "public class SingletonWithInitializationLoggingExample1 {\n\n    private static SingletonWithInitializationLoggingExample1 instance;\n\n    private SingletonWithInitializationLoggingExample1() {\n        System.out.println(\"SingletonWithInitializationLoggingExample1 initialized\");\n    }\n\n    public static SingletonWithInitializationLoggingExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithInitializationLoggingExample1();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithInitializationLogging",
    "input": "public class SingletonWithInitializationLoggingExample2 {\n\n    public SingletonWithInitializationLoggingExample2() {}\n\n}",
    "output": "public class SingletonWithInitializationLoggingExample2 {\n\n    private static SingletonWithInitializationLoggingExample2 instance;\n\n    private SingletonWithInitializationLoggingExample2() {\n        System.out.println(\"SingletonWithInitializationLoggingExample2 initialized\");\n    }\n\n    public static SingletonWithInitializationLoggingExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithInitializationLoggingExample2();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithInitializationLogging",
    "input": "public class SingletonWithInitializationLoggingExample3 {\n\n    public SingletonWithInitializationLoggingExample3() {}\n\n}",
    "output": "public class SingletonWithInitializationLoggingExample3 {\n\n    private static SingletonWithInitializationLoggingExample3 instance;\n\n    private SingletonWithInitializationLoggingExample3() {\n        System.out.println(\"SingletonWithInitializationLoggingExample3 initialized\");\n    }\n\n    public static SingletonWithInitializationLoggingExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithInitializationLoggingExample3();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithInitializationLogging",
    "input": "public class SingletonWithInitializationLoggingExample4 {\n\n    public SingletonWithInitializationLoggingExample4() {}\n\n}",
    "output": "public class SingletonWithInitializationLoggingExample4 {\n\n    private static SingletonWithInitializationLoggingExample4 instance;\n\n    private SingletonWithInitializationLoggingExample4() {\n        System.out.println(\"SingletonWithInitializationLoggingExample4 initialized\");\n    }\n\n    public static SingletonWithInitializationLoggingExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithInitializationLoggingExample4();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithInitializationLogging",
    "input": "public class SingletonWithInitializationLoggingExample5 {\n\n    public SingletonWithInitializationLoggingExample5() {}\n\n}",
    "output": "public class SingletonWithInitializationLoggingExample5 {\n\n    private static SingletonWithInitializationLoggingExample5 instance;\n\n    private SingletonWithInitializationLoggingExample5() {\n        System.out.println(\"SingletonWithInitializationLoggingExample5 initialized\");\n    }\n\n    public static SingletonWithInitializationLoggingExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithInitializationLoggingExample5();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithImmutableState",
    "input": "public class SingletonWithImmutableStateExample1 {\n\n    public SingletonWithImmutableStateExample1() {}\n\n}",
    "output": "public class SingletonWithImmutableStateExample1 {\n\n    private static SingletonWithImmutableStateExample1 instance;\n    private final String state;\n\n    private SingletonWithImmutableStateExample1(String state) {\n        this.state = state;\n    }\n\n    public static SingletonWithImmutableStateExample1 getInstance(String state) {\n        if (instance == null) {\n            instance = new SingletonWithImmutableStateExample1(state);\n        }\n        return instance;\n    }\n\n    public String getState() {\n        return state;\n    }\n\n}"
  },
  {
    "type": "SingletonWithImmutableState",
    "input": "public class SingletonWithImmutableStateExample2 {\n\n    public SingletonWithImmutableStateExample2() {}\n\n}",
    "output": "public class SingletonWithImmutableStateExample2 {\n\n    private static SingletonWithImmutableStateExample2 instance;\n    private final String state;\n\n    private SingletonWithImmutableStateExample2(String state) {\n        this.state = state;\n    }\n\n    public static SingletonWithImmutableStateExample2 getInstance(String state) {\n        if (instance == null) {\n            instance = new SingletonWithImmutableStateExample2(state);\n        }\n        return instance;\n    }\n\n    public String getState() {\n        return state;\n    }\n\n}"
  },
  {
    "type": "SingletonWithImmutableState",
    "input": "public class SingletonWithImmutableStateExample3 {\n\n    public SingletonWithImmutableStateExample3() {}\n\n}",
    "output": "public class SingletonWithImmutableStateExample3 {\n\n    private static SingletonWithImmutableStateExample3 instance;\n    private final String state;\n\n    private SingletonWithImmutableStateExample3(String state) {\n        this.state = state;\n    }\n\n    public static SingletonWithImmutableStateExample3 getInstance(String state) {\n        if (instance == null) {\n            instance = new SingletonWithImmutableStateExample3(state);\n        }\n        return instance;\n    }\n\n    public String getState() {\n        return state;\n    }\n\n}"
  },
  {
    "type": "SingletonWithImmutableState",
    "input": "public class SingletonWithImmutableStateExample4 {\n\n    public SingletonWithImmutableStateExample4() {}\n\n}",
    "output": "public class SingletonWithImmutableStateExample4 {\n\n    private static SingletonWithImmutableStateExample4 instance;\n    private final String state;\n\n    private SingletonWithImmutableStateExample4(String state) {\n        this.state = state;\n    }\n\n    public static SingletonWithImmutableStateExample4 getInstance(String state) {\n        if (instance == null) {\n            instance = new SingletonWithImmutableStateExample4(state);\n        }\n        return instance;\n    }\n\n    public String getState() {\n        return state;\n    }\n\n}"
  },
  {
    "type": "SingletonWithImmutableState",
    "input": "public class SingletonWithImmutableStateExample5 {\n\n    public SingletonWithImmutableStateExample5() {}\n\n}",
    "output": "public class SingletonWithImmutableStateExample5 {\n\n    private static SingletonWithImmutableStateExample5 instance;\n    private final String state;\n\n    private SingletonWithImmutableStateExample5(String state) {\n        this.state = state;\n    }\n\n    public static SingletonWithImmutableStateExample5 getInstance(String state) {\n        if (instance == null) {\n            instance = new SingletonWithImmutableStateExample5(state);\n        }\n        return instance;\n    }\n\n    public String getState() {\n        return state;\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample1 {\n\n    public ThreadLocalSingletonExample1() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample1 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample1> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample1::new);\n\n    private ThreadLocalSingletonExample1() {}\n\n    public static ThreadLocalSingletonExample1 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample2 {\n\n    public ThreadLocalSingletonExample2() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample2 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample2> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample2::new);\n\n    private ThreadLocalSingletonExample2() {}\n\n    public static ThreadLocalSingletonExample2 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample3 {\n\n    public ThreadLocalSingletonExample3() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample3 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample3> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample3::new);\n\n    private ThreadLocalSingletonExample3() {}\n\n    public static ThreadLocalSingletonExample3 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample4 {\n\n    public ThreadLocalSingletonExample4() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample4 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample4> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample4::new);\n\n    private ThreadLocalSingletonExample4() {}\n\n    public static ThreadLocalSingletonExample4 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample5 {\n\n    public ThreadLocalSingletonExample5() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample5 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample5> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample5::new);\n\n    private ThreadLocalSingletonExample5() {}\n\n    public static ThreadLocalSingletonExample5 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "SingletonWithFallbackInstance",
    "input": "public class SingletonWithFallbackInstanceExample1 {\n\n    public SingletonWithFallbackInstanceExample1() {}\n\n}",
    "output": "public class SingletonWithFallbackInstanceExample1 {\n\n    private static SingletonWithFallbackInstanceExample1 instance;\n\n    private SingletonWithFallbackInstanceExample1() {}\n\n    public static SingletonWithFallbackInstanceExample1 getInstance() {\n        if (instance == null) {\n            try {\n                instance = new SingletonWithFallbackInstanceExample1();\n            } catch (Exception e) {\n                instance = new SingletonWithFallbackInstanceExample1(); // Fallback logic\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithFallbackInstance",
    "input": "public class SingletonWithFallbackInstanceExample2 {\n\n    public SingletonWithFallbackInstanceExample2() {}\n\n}",
    "output": "public class SingletonWithFallbackInstanceExample2 {\n\n    private static SingletonWithFallbackInstanceExample2 instance;\n\n    private SingletonWithFallbackInstanceExample2() {}\n\n    public static SingletonWithFallbackInstanceExample2 getInstance() {\n        if (instance == null) {\n            try {\n                instance = new SingletonWithFallbackInstanceExample2();\n            } catch (Exception e) {\n                instance = new SingletonWithFallbackInstanceExample2(); // Fallback logic\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithFallbackInstance",
    "input": "public class SingletonWithFallbackInstanceExample3 {\n\n    public SingletonWithFallbackInstanceExample3() {}\n\n}",
    "output": "public class SingletonWithFallbackInstanceExample3 {\n\n    private static SingletonWithFallbackInstanceExample3 instance;\n\n    private SingletonWithFallbackInstanceExample3() {}\n\n    public static SingletonWithFallbackInstanceExample3 getInstance() {\n        if (instance == null) {\n            try {\n                instance = new SingletonWithFallbackInstanceExample3();\n            } catch (Exception e) {\n                instance = new SingletonWithFallbackInstanceExample3(); // Fallback logic\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithFallbackInstance",
    "input": "public class SingletonWithFallbackInstanceExample4 {\n\n    public SingletonWithFallbackInstanceExample4() {}\n\n}",
    "output": "public class SingletonWithFallbackInstanceExample4 {\n\n    private static SingletonWithFallbackInstanceExample4 instance;\n\n    private SingletonWithFallbackInstanceExample4() {}\n\n    public static SingletonWithFallbackInstanceExample4 getInstance() {\n        if (instance == null) {\n            try {\n                instance = new SingletonWithFallbackInstanceExample4();\n            } catch (Exception e) {\n                instance = new SingletonWithFallbackInstanceExample4(); // Fallback logic\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithFallbackInstance",
    "input": "public class SingletonWithFallbackInstanceExample5 {\n\n    public SingletonWithFallbackInstanceExample5() {}\n\n}",
    "output": "public class SingletonWithFallbackInstanceExample5 {\n\n    private static SingletonWithFallbackInstanceExample5 instance;\n\n    private SingletonWithFallbackInstanceExample5() {}\n\n    public static SingletonWithFallbackInstanceExample5 getInstance() {\n        if (instance == null) {\n            try {\n                instance = new SingletonWithFallbackInstanceExample5();\n            } catch (Exception e) {\n                instance = new SingletonWithFallbackInstanceExample5(); // Fallback logic\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "MultithreadedLazySingleton",
    "input": "public class MultithreadedLazySingleton {\n\n    public MultithreadedLazySingleton() {}\n\n}",
    "output": "public class MultithreadedLazySingleton {\n\n    private static volatile MultithreadedLazySingleton instance;\n\n    private MultithreadedLazySingleton() {}\n\n    public static MultithreadedLazySingleton getInstance() {\n        if (instance == null) {\n            synchronized (MultithreadedLazySingleton.class) {\n                if (instance == null) {\n                    instance = new MultithreadedLazySingleton();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SerializationSafeSingleton",
    "input": "public class SerializationSafeSingleton {\n\n    public SerializationSafeSingleton() {}\n\n}",
    "output": "import java.io.Serializable;\n\npublic class SerializationSafeSingleton implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static final SerializationSafeSingleton INSTANCE = new SerializationSafeSingleton();\n\n    private SerializationSafeSingleton() {}\n\n    public static SerializationSafeSingleton getInstance() {\n        return INSTANCE;\n    }\n\n    protected Object readResolve() {\n        return INSTANCE;\n    }\n\n}"
  },
  {
    "type": "EnumBasedSingleton",
    "input": "public class EnumBasedSingleton {\n\n    public EnumBasedSingleton() {}\n\n}",
    "output": "public enum EnumBasedSingleton {\n\n    INSTANCE;\n\n    public void someMethod() {\n        System.out.println(\"Singleton with enum\");\n    }\n\n}"
  },
  {
    "type": "RetryFallbackSingleton",
    "input": "public class RetryFallbackSingleton {\n\n    public RetryFallbackSingleton() {}\n\n}",
    "output": "public class RetryFallbackSingleton {\n\n    private static RetryFallbackSingleton instance;\n\n    private RetryFallbackSingleton() {}\n\n    public static RetryFallbackSingleton getInstance() {\n        if (instance == null) {\n            for (int retries = 0; retries < 3; retries++) {\n                try {\n                    instance = new RetryFallbackSingleton();\n                    break;\n                } catch (Exception e) {\n                    System.out.println(\"Retrying...\" + retries);\n                }\n            }\n            if (instance == null) {\n                instance = new RetryFallbackSingleton(); // Fallback logic\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingleton {\n\n    public ThreadLocalSingleton() {}\n\n}",
    "output": "public class ThreadLocalSingleton {\n\n    private static final ThreadLocal<ThreadLocalSingleton> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingleton::new);\n\n    private ThreadLocalSingleton() {}\n\n    public static ThreadLocalSingleton getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "SingletonWithCounter",
    "input": "public class SingletonWithCounter {\n\n    public SingletonWithCounter() {}\n\n}",
    "output": "public class SingletonWithCounter {\n\n    private static SingletonWithCounter instance;\n    private static int counter = 0;\n\n    private SingletonWithCounter() {\n        counter++;\n    }\n\n    public static SingletonWithCounter getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCounter();\n        }\n        return instance;\n    }\n\n    public int getInstanceCount() {\n        return counter;\n    }\n\n}"
  },
  {
    "type": "MultiTenantSingleton",
    "input": "public class MultiTenantSingleton {\n\n    public MultiTenantSingleton() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class MultiTenantSingleton {\n\n    private static final Map<String, MultiTenantSingleton> instances = new HashMap<>();\n\n    private MultiTenantSingleton() {}\n\n    public static MultiTenantSingleton getInstance(String tenantId) {\n        synchronized (instances) {\n            return instances.computeIfAbsent(tenantId, k -> new MultiTenantSingleton());\n        }\n    }\n\n    public static int getTenantCount() {\n        return instances.size();\n    }\n\n}"
  },
  {
    "type": "ReflectionProofSingleton",
    "input": "public class ReflectionProofSingleton {\n\n    public ReflectionProofSingleton() {}\n\n}",
    "output": "public class ReflectionProofSingleton {\n\n    private static final ReflectionProofSingleton instance = new ReflectionProofSingleton();\n\n    private ReflectionProofSingleton() {\n        if (instance != null) {\n            throw new IllegalStateException(\"Singleton instance already created\");\n        }\n    }\n\n    public static ReflectionProofSingleton getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LoggerSingleton",
    "input": "public class LoggerSingleton {\n\n    public LoggerSingleton() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingleton {\n\n    private static volatile LoggerSingleton instance;\n    private FileWriter writer;\n\n    private LoggerSingleton() {\n        try {\n            writer = new FileWriter(\"application.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggerSingleton getInstance() {\n        if (instance == null) {\n            synchronized (LoggerSingleton.class) {\n                if (instance == null) {\n                    instance = new LoggerSingleton();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public synchronized void log(String message, String level) {\n        try {\n            writer.write(level + \": \" + message + \"\\n\");\n            writer.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        try {\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionPoolSingleton",
    "input": "public class DatabaseConnectionPool {\n\n    public DatabaseConnectionPool() {}\n\n}",
    "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class DatabaseConnectionPool {\n\n    private static final int POOL_SIZE = 5;\n    private static DatabaseConnectionPool instance;\n    private BlockingQueue<Connection> connectionPool;\n\n    private DatabaseConnectionPool() {\n        connectionPool = new ArrayBlockingQueue<>(POOL_SIZE);\n        for (int i = 0; i < POOL_SIZE; i++) {\n            try {\n                connectionPool.add(DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mydb\", \"user\", \"password\"));\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static DatabaseConnectionPool getInstance() {\n        if (instance == null) {\n            synchronized (DatabaseConnectionPool.class) {\n                if (instance == null) {\n                    instance = new DatabaseConnectionPool();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public Connection getConnection() throws InterruptedException {\n        return connectionPool.take();\n    }\n\n    public void releaseConnection(Connection connection) {\n        connectionPool.offer(connection);\n    }\n\n}"
  },
  {
    "type": "ConfigurationManagerSingleton",
    "input": "public class ConfigurationManager {\n\n    public ConfigurationManager() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationManager {\n\n    private static ConfigurationManager instance;\n    private Properties properties;\n\n    private ConfigurationManager() {\n        properties = new Properties();\n        try (FileInputStream fis = new FileInputStream(\"application.properties\")) {\n            properties.load(fis);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationManager getInstance() {\n        if (instance == null) {\n            synchronized (ConfigurationManager.class) {\n                if (instance == null) {\n                    instance = new ConfigurationManager();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public String getProperty(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ServiceLocatorSingleton",
    "input": "public class ServiceLocator {\n\n    public ServiceLocator() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ServiceLocator {\n\n    private static ServiceLocator instance;\n    private Map<String, Object> services;\n\n    private ServiceLocator() {\n        services = new HashMap<>();\n    }\n\n    public static ServiceLocator getInstance() {\n        if (instance == null) {\n            synchronized (ServiceLocator.class) {\n                if (instance == null) {\n                    instance = new ServiceLocator();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void registerService(String name, Object service) {\n        services.put(name, service);\n    }\n\n    public Object getService(String name) {\n        return services.get(name);\n    }\n\n}"
  },
  {
    "type": "CacheSingleton",
    "input": "public class CacheSingleton {\n\n    public CacheSingleton() {}\n\n}",
    "output": "import java.util.LinkedHashMap;\nimport java.util.Map;\n\npublic class CacheSingleton {\n\n    private static CacheSingleton instance;\n    private final int CACHE_SIZE = 5;\n    private Map<String, String> cache;\n\n    private CacheSingleton() {\n        cache = new LinkedHashMap<String, String>(CACHE_SIZE, 0.75f, true) {\n            protected boolean removeEldestEntry(Map.Entry<String, String> eldest) {\n                return size() > CACHE_SIZE;\n            }\n        };\n    }\n\n    public static CacheSingleton getInstance() {\n        if (instance == null) {\n            synchronized (CacheSingleton.class) {\n                if (instance == null) {\n                    instance = new CacheSingleton();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "MultithreadedLazySingleton",
    "input": "public class MultithreadedLazySingletonExample1 {\n\n    public MultithreadedLazySingletonExample1() {}\n\n}",
    "output": "public class MultithreadedLazySingletonExample1 {\n\n    private static volatile MultithreadedLazySingletonExample1 instance;\n\n    private MultithreadedLazySingletonExample1() {}\n\n    public static MultithreadedLazySingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (MultithreadedLazySingletonExample1.class) {\n                if (instance == null) {\n                    instance = new MultithreadedLazySingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "MultithreadedLazySingleton",
    "input": "public class MultithreadedLazySingletonExample2 {\n\n    public MultithreadedLazySingletonExample2() {}\n\n}",
    "output": "public class MultithreadedLazySingletonExample2 {\n\n    private static volatile MultithreadedLazySingletonExample2 instance;\n\n    private MultithreadedLazySingletonExample2() {}\n\n    public static MultithreadedLazySingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (MultithreadedLazySingletonExample2.class) {\n                if (instance == null) {\n                    instance = new MultithreadedLazySingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "MultithreadedLazySingleton",
    "input": "public class MultithreadedLazySingletonExample3 {\n\n    public MultithreadedLazySingletonExample3() {}\n\n}",
    "output": "public class MultithreadedLazySingletonExample3 {\n\n    private static volatile MultithreadedLazySingletonExample3 instance;\n\n    private MultithreadedLazySingletonExample3() {}\n\n    public static MultithreadedLazySingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (MultithreadedLazySingletonExample3.class) {\n                if (instance == null) {\n                    instance = new MultithreadedLazySingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "MultithreadedLazySingleton",
    "input": "public class MultithreadedLazySingletonExample4 {\n\n    public MultithreadedLazySingletonExample4() {}\n\n}",
    "output": "public class MultithreadedLazySingletonExample4 {\n\n    private static volatile MultithreadedLazySingletonExample4 instance;\n\n    private MultithreadedLazySingletonExample4() {}\n\n    public static MultithreadedLazySingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (MultithreadedLazySingletonExample4.class) {\n                if (instance == null) {\n                    instance = new MultithreadedLazySingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "MultithreadedLazySingleton",
    "input": "public class MultithreadedLazySingletonExample5 {\n\n    public MultithreadedLazySingletonExample5() {}\n\n}",
    "output": "public class MultithreadedLazySingletonExample5 {\n\n    private static volatile MultithreadedLazySingletonExample5 instance;\n\n    private MultithreadedLazySingletonExample5() {}\n\n    public static MultithreadedLazySingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (MultithreadedLazySingletonExample5.class) {\n                if (instance == null) {\n                    instance = new MultithreadedLazySingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SerializationSafeSingleton",
    "input": "public class SerializationSafeSingletonExample1 {\n\n    public SerializationSafeSingletonExample1() {}\n\n}",
    "output": "import java.io.Serializable;\n\npublic class SerializationSafeSingletonExample1 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static final SerializationSafeSingletonExample1 INSTANCE = new SerializationSafeSingletonExample1();\n\n    private SerializationSafeSingletonExample1() {}\n\n    public static SerializationSafeSingletonExample1 getInstance() {\n        return INSTANCE;\n    }\n\n    protected Object readResolve() {\n        return INSTANCE;\n    }\n\n}"
  },
  {
    "type": "SerializationSafeSingleton",
    "input": "public class SerializationSafeSingletonExample2 {\n\n    public SerializationSafeSingletonExample2() {}\n\n}",
    "output": "import java.io.Serializable;\n\npublic class SerializationSafeSingletonExample2 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static final SerializationSafeSingletonExample2 INSTANCE = new SerializationSafeSingletonExample2();\n\n    private SerializationSafeSingletonExample2() {}\n\n    public static SerializationSafeSingletonExample2 getInstance() {\n        return INSTANCE;\n    }\n\n    protected Object readResolve() {\n        return INSTANCE;\n    }\n\n}"
  },
  {
    "type": "SerializationSafeSingleton",
    "input": "public class SerializationSafeSingletonExample3 {\n\n    public SerializationSafeSingletonExample3() {}\n\n}",
    "output": "import java.io.Serializable;\n\npublic class SerializationSafeSingletonExample3 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static final SerializationSafeSingletonExample3 INSTANCE = new SerializationSafeSingletonExample3();\n\n    private SerializationSafeSingletonExample3() {}\n\n    public static SerializationSafeSingletonExample3 getInstance() {\n        return INSTANCE;\n    }\n\n    protected Object readResolve() {\n        return INSTANCE;\n    }\n\n}"
  },
  {
    "type": "SerializationSafeSingleton",
    "input": "public class SerializationSafeSingletonExample4 {\n\n    public SerializationSafeSingletonExample4() {}\n\n}",
    "output": "import java.io.Serializable;\n\npublic class SerializationSafeSingletonExample4 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static final SerializationSafeSingletonExample4 INSTANCE = new SerializationSafeSingletonExample4();\n\n    private SerializationSafeSingletonExample4() {}\n\n    public static SerializationSafeSingletonExample4 getInstance() {\n        return INSTANCE;\n    }\n\n    protected Object readResolve() {\n        return INSTANCE;\n    }\n\n}"
  },
  {
    "type": "SerializationSafeSingleton",
    "input": "public class SerializationSafeSingletonExample5 {\n\n    public SerializationSafeSingletonExample5() {}\n\n}",
    "output": "import java.io.Serializable;\n\npublic class SerializationSafeSingletonExample5 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static final SerializationSafeSingletonExample5 INSTANCE = new SerializationSafeSingletonExample5();\n\n    private SerializationSafeSingletonExample5() {}\n\n    public static SerializationSafeSingletonExample5 getInstance() {\n        return INSTANCE;\n    }\n\n    protected Object readResolve() {\n        return INSTANCE;\n    }\n\n}"
  },
  {
    "type": "EnumBasedSingleton",
    "input": "public class EnumBasedSingletonExample1 {\n\n    public EnumBasedSingletonExample1() {}\n\n}",
    "output": "public enum EnumBasedSingletonExample1 {\n\n    INSTANCE;\n\n    public void someMethod() {\n        System.out.println(\"Singleton with enum\");\n    }\n\n}"
  },
  {
    "type": "EnumBasedSingleton",
    "input": "public class EnumBasedSingletonExample2 {\n\n    public EnumBasedSingletonExample2() {}\n\n}",
    "output": "public enum EnumBasedSingletonExample2 {\n\n    INSTANCE;\n\n    public void someMethod() {\n        System.out.println(\"Singleton with enum\");\n    }\n\n}"
  },
  {
    "type": "EnumBasedSingleton",
    "input": "public class EnumBasedSingletonExample3 {\n\n    public EnumBasedSingletonExample3() {}\n\n}",
    "output": "public enum EnumBasedSingletonExample3 {\n\n    INSTANCE;\n\n    public void someMethod() {\n        System.out.println(\"Singleton with enum\");\n    }\n\n}"
  },
  {
    "type": "EnumBasedSingleton",
    "input": "public class EnumBasedSingletonExample4 {\n\n    public EnumBasedSingletonExample4() {}\n\n}",
    "output": "public enum EnumBasedSingletonExample4 {\n\n    INSTANCE;\n\n    public void someMethod() {\n        System.out.println(\"Singleton with enum\");\n    }\n\n}"
  },
  {
    "type": "EnumBasedSingleton",
    "input": "public class EnumBasedSingletonExample5 {\n\n    public EnumBasedSingletonExample5() {}\n\n}",
    "output": "public enum EnumBasedSingletonExample5 {\n\n    INSTANCE;\n\n    public void someMethod() {\n        System.out.println(\"Singleton with enum\");\n    }\n\n}"
  },
  {
    "type": "RetryFallbackSingleton",
    "input": "public class RetryFallbackSingletonExample1 {\n\n    public RetryFallbackSingletonExample1() {}\n\n}",
    "output": "public class RetryFallbackSingletonExample1 {\n\n    private static RetryFallbackSingletonExample1 instance;\n\n    private RetryFallbackSingletonExample1() {}\n\n    public static RetryFallbackSingletonExample1 getInstance() {\n        if (instance == null) {\n            for (int retries = 0; retries < 3; retries++) {\n                try {\n                    instance = new RetryFallbackSingletonExample1();\n                    break;\n                } catch (Exception e) {\n                    System.out.println(\"Retrying...\" + retries);\n                }\n            }\n            if (instance == null) {\n                instance = new RetryFallbackSingletonExample1(); // Fallback logic\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "RetryFallbackSingleton",
    "input": "public class RetryFallbackSingletonExample2 {\n\n    public RetryFallbackSingletonExample2() {}\n\n}",
    "output": "public class RetryFallbackSingletonExample2 {\n\n    private static RetryFallbackSingletonExample2 instance;\n\n    private RetryFallbackSingletonExample2() {}\n\n    public static RetryFallbackSingletonExample2 getInstance() {\n        if (instance == null) {\n            for (int retries = 0; retries < 3; retries++) {\n                try {\n                    instance = new RetryFallbackSingletonExample2();\n                    break;\n                } catch (Exception e) {\n                    System.out.println(\"Retrying...\" + retries);\n                }\n            }\n            if (instance == null) {\n                instance = new RetryFallbackSingletonExample2(); // Fallback logic\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "RetryFallbackSingleton",
    "input": "public class RetryFallbackSingletonExample3 {\n\n    public RetryFallbackSingletonExample3() {}\n\n}",
    "output": "public class RetryFallbackSingletonExample3 {\n\n    private static RetryFallbackSingletonExample3 instance;\n\n    private RetryFallbackSingletonExample3() {}\n\n    public static RetryFallbackSingletonExample3 getInstance() {\n        if (instance == null) {\n            for (int retries = 0; retries < 3; retries++) {\n                try {\n                    instance = new RetryFallbackSingletonExample3();\n                    break;\n                } catch (Exception e) {\n                    System.out.println(\"Retrying...\" + retries);\n                }\n            }\n            if (instance == null) {\n                instance = new RetryFallbackSingletonExample3(); // Fallback logic\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "RetryFallbackSingleton",
    "input": "public class RetryFallbackSingletonExample4 {\n\n    public RetryFallbackSingletonExample4() {}\n\n}",
    "output": "public class RetryFallbackSingletonExample4 {\n\n    private static RetryFallbackSingletonExample4 instance;\n\n    private RetryFallbackSingletonExample4() {}\n\n    public static RetryFallbackSingletonExample4 getInstance() {\n        if (instance == null) {\n            for (int retries = 0; retries < 3; retries++) {\n                try {\n                    instance = new RetryFallbackSingletonExample4();\n                    break;\n                } catch (Exception e) {\n                    System.out.println(\"Retrying...\" + retries);\n                }\n            }\n            if (instance == null) {\n                instance = new RetryFallbackSingletonExample4(); // Fallback logic\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "RetryFallbackSingleton",
    "input": "public class RetryFallbackSingletonExample5 {\n\n    public RetryFallbackSingletonExample5() {}\n\n}",
    "output": "public class RetryFallbackSingletonExample5 {\n\n    private static RetryFallbackSingletonExample5 instance;\n\n    private RetryFallbackSingletonExample5() {}\n\n    public static RetryFallbackSingletonExample5 getInstance() {\n        if (instance == null) {\n            for (int retries = 0; retries < 3; retries++) {\n                try {\n                    instance = new RetryFallbackSingletonExample5();\n                    break;\n                } catch (Exception e) {\n                    System.out.println(\"Retrying...\" + retries);\n                }\n            }\n            if (instance == null) {\n                instance = new RetryFallbackSingletonExample5(); // Fallback logic\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample1 {\n\n    public ThreadLocalSingletonExample1() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample1 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample1> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample1::new);\n\n    private ThreadLocalSingletonExample1() {}\n\n    public static ThreadLocalSingletonExample1 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample2 {\n\n    public ThreadLocalSingletonExample2() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample2 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample2> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample2::new);\n\n    private ThreadLocalSingletonExample2() {}\n\n    public static ThreadLocalSingletonExample2 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample3 {\n\n    public ThreadLocalSingletonExample3() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample3 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample3> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample3::new);\n\n    private ThreadLocalSingletonExample3() {}\n\n    public static ThreadLocalSingletonExample3 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample4 {\n\n    public ThreadLocalSingletonExample4() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample4 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample4> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample4::new);\n\n    private ThreadLocalSingletonExample4() {}\n\n    public static ThreadLocalSingletonExample4 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingletonExample5 {\n\n    public ThreadLocalSingletonExample5() {}\n\n}",
    "output": "public class ThreadLocalSingletonExample5 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample5> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample5::new);\n\n    private ThreadLocalSingletonExample5() {}\n\n    public static ThreadLocalSingletonExample5 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "SingletonWithCounter",
    "input": "public class SingletonWithCounterExample1 {\n\n    public SingletonWithCounterExample1() {}\n\n}",
    "output": "public class SingletonWithCounterExample1 {\n\n    private static SingletonWithCounterExample1 instance;\n    private static int counter = 0;\n\n    private SingletonWithCounterExample1() {\n        counter++;\n    }\n\n    public static SingletonWithCounterExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCounterExample1();\n        }\n        return instance;\n    }\n\n    public int getInstanceCount() {\n        return counter;\n    }\n\n}"
  },
  {
    "type": "SingletonWithCounter",
    "input": "public class SingletonWithCounterExample2 {\n\n    public SingletonWithCounterExample2() {}\n\n}",
    "output": "public class SingletonWithCounterExample2 {\n\n    private static SingletonWithCounterExample2 instance;\n    private static int counter = 0;\n\n    private SingletonWithCounterExample2() {\n        counter++;\n    }\n\n    public static SingletonWithCounterExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCounterExample2();\n        }\n        return instance;\n    }\n\n    public int getInstanceCount() {\n        return counter;\n    }\n\n}"
  },
  {
    "type": "SingletonWithCounter",
    "input": "public class SingletonWithCounterExample3 {\n\n    public SingletonWithCounterExample3() {}\n\n}",
    "output": "public class SingletonWithCounterExample3 {\n\n    private static SingletonWithCounterExample3 instance;\n    private static int counter = 0;\n\n    private SingletonWithCounterExample3() {\n        counter++;\n    }\n\n    public static SingletonWithCounterExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCounterExample3();\n        }\n        return instance;\n    }\n\n    public int getInstanceCount() {\n        return counter;\n    }\n\n}"
  },
  {
    "type": "SingletonWithCounter",
    "input": "public class SingletonWithCounterExample4 {\n\n    public SingletonWithCounterExample4() {}\n\n}",
    "output": "public class SingletonWithCounterExample4 {\n\n    private static SingletonWithCounterExample4 instance;\n    private static int counter = 0;\n\n    private SingletonWithCounterExample4() {\n        counter++;\n    }\n\n    public static SingletonWithCounterExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCounterExample4();\n        }\n        return instance;\n    }\n\n    public int getInstanceCount() {\n        return counter;\n    }\n\n}"
  },
  {
    "type": "SingletonWithCounter",
    "input": "public class SingletonWithCounterExample5 {\n\n    public SingletonWithCounterExample5() {}\n\n}",
    "output": "public class SingletonWithCounterExample5 {\n\n    private static SingletonWithCounterExample5 instance;\n    private static int counter = 0;\n\n    private SingletonWithCounterExample5() {\n        counter++;\n    }\n\n    public static SingletonWithCounterExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCounterExample5();\n        }\n        return instance;\n    }\n\n    public int getInstanceCount() {\n        return counter;\n    }\n\n}"
  },
  {
    "type": "MultiTenantSingleton",
    "input": "public class MultiTenantSingletonExample1 {\n\n    public MultiTenantSingletonExample1() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class MultiTenantSingletonExample1 {\n\n    private static final Map<String, MultiTenantSingletonExample1> instances = new HashMap<>();\n\n    private MultiTenantSingletonExample1() {}\n\n    public static MultiTenantSingletonExample1 getInstance(String tenantId) {\n        synchronized (instances) {\n            return instances.computeIfAbsent(tenantId, k -> new MultiTenantSingletonExample1());\n        }\n    }\n\n    public static int getTenantCount() {\n        return instances.size();\n    }\n\n}"
  },
  {
    "type": "MultiTenantSingleton",
    "input": "public class MultiTenantSingletonExample2 {\n\n    public MultiTenantSingletonExample2() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class MultiTenantSingletonExample2 {\n\n    private static final Map<String, MultiTenantSingletonExample2> instances = new HashMap<>();\n\n    private MultiTenantSingletonExample2() {}\n\n    public static MultiTenantSingletonExample2 getInstance(String tenantId) {\n        synchronized (instances) {\n            return instances.computeIfAbsent(tenantId, k -> new MultiTenantSingletonExample2());\n        }\n    }\n\n    public static int getTenantCount() {\n        return instances.size();\n    }\n\n}"
  },
  {
    "type": "MultiTenantSingleton",
    "input": "public class MultiTenantSingletonExample3 {\n\n    public MultiTenantSingletonExample3() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class MultiTenantSingletonExample3 {\n\n    private static final Map<String, MultiTenantSingletonExample3> instances = new HashMap<>();\n\n    private MultiTenantSingletonExample3() {}\n\n    public static MultiTenantSingletonExample3 getInstance(String tenantId) {\n        synchronized (instances) {\n            return instances.computeIfAbsent(tenantId, k -> new MultiTenantSingletonExample3());\n        }\n    }\n\n    public static int getTenantCount() {\n        return instances.size();\n    }\n\n}"
  },
  {
    "type": "MultiTenantSingleton",
    "input": "public class MultiTenantSingletonExample4 {\n\n    public MultiTenantSingletonExample4() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class MultiTenantSingletonExample4 {\n\n    private static final Map<String, MultiTenantSingletonExample4> instances = new HashMap<>();\n\n    private MultiTenantSingletonExample4() {}\n\n    public static MultiTenantSingletonExample4 getInstance(String tenantId) {\n        synchronized (instances) {\n            return instances.computeIfAbsent(tenantId, k -> new MultiTenantSingletonExample4());\n        }\n    }\n\n    public static int getTenantCount() {\n        return instances.size();\n    }\n\n}"
  },
  {
    "type": "MultiTenantSingleton",
    "input": "public class MultiTenantSingletonExample5 {\n\n    public MultiTenantSingletonExample5() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class MultiTenantSingletonExample5 {\n\n    private static final Map<String, MultiTenantSingletonExample5> instances = new HashMap<>();\n\n    private MultiTenantSingletonExample5() {}\n\n    public static MultiTenantSingletonExample5 getInstance(String tenantId) {\n        synchronized (instances) {\n            return instances.computeIfAbsent(tenantId, k -> new MultiTenantSingletonExample5());\n        }\n    }\n\n    public static int getTenantCount() {\n        return instances.size();\n    }\n\n}"
  },
  {
    "type": "ReflectionProofSingleton",
    "input": "public class ReflectionProofSingletonExample1 {\n\n    public ReflectionProofSingletonExample1() {}\n\n}",
    "output": "public class ReflectionProofSingletonExample1 {\n\n    private static final ReflectionProofSingletonExample1 instance = new ReflectionProofSingletonExample1();\n\n    private ReflectionProofSingletonExample1() {\n        if (instance != null) {\n            throw new IllegalStateException(\"Singleton instance already created\");\n        }\n    }\n\n    public static ReflectionProofSingletonExample1 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ReflectionProofSingleton",
    "input": "public class ReflectionProofSingletonExample2 {\n\n    public ReflectionProofSingletonExample2() {}\n\n}",
    "output": "public class ReflectionProofSingletonExample2 {\n\n    private static final ReflectionProofSingletonExample2 instance = new ReflectionProofSingletonExample2();\n\n    private ReflectionProofSingletonExample2() {\n        if (instance != null) {\n            throw new IllegalStateException(\"Singleton instance already created\");\n        }\n    }\n\n    public static ReflectionProofSingletonExample2 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ReflectionProofSingleton",
    "input": "public class ReflectionProofSingletonExample3 {\n\n    public ReflectionProofSingletonExample3() {}\n\n}",
    "output": "public class ReflectionProofSingletonExample3 {\n\n    private static final ReflectionProofSingletonExample3 instance = new ReflectionProofSingletonExample3();\n\n    private ReflectionProofSingletonExample3() {\n        if (instance != null) {\n            throw new IllegalStateException(\"Singleton instance already created\");\n        }\n    }\n\n    public static ReflectionProofSingletonExample3 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ReflectionProofSingleton",
    "input": "public class ReflectionProofSingletonExample4 {\n\n    public ReflectionProofSingletonExample4() {}\n\n}",
    "output": "public class ReflectionProofSingletonExample4 {\n\n    private static final ReflectionProofSingletonExample4 instance = new ReflectionProofSingletonExample4();\n\n    private ReflectionProofSingletonExample4() {\n        if (instance != null) {\n            throw new IllegalStateException(\"Singleton instance already created\");\n        }\n    }\n\n    public static ReflectionProofSingletonExample4 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ReflectionProofSingleton",
    "input": "public class ReflectionProofSingletonExample5 {\n\n    public ReflectionProofSingletonExample5() {}\n\n}",
    "output": "public class ReflectionProofSingletonExample5 {\n\n    private static final ReflectionProofSingletonExample5 instance = new ReflectionProofSingletonExample5();\n\n    private ReflectionProofSingletonExample5() {\n        if (instance != null) {\n            throw new IllegalStateException(\"Singleton instance already created\");\n        }\n    }\n\n    public static ReflectionProofSingletonExample5 getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LoggerSingleton",
    "input": "public class LoggerSingletonExample1 {\n\n    public LoggerSingletonExample1() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample1 {\n\n    private static volatile LoggerSingletonExample1 instance;\n    private FileWriter writer;\n\n    private LoggerSingletonExample1() {\n        try {\n            writer = new FileWriter(\"application.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggerSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (LoggerSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new LoggerSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public synchronized void log(String message, String level) {\n        try {\n            writer.write(level + \": \" + message + \"\\n\");\n            writer.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        try {\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "LoggerSingleton",
    "input": "public class LoggerSingletonExample2 {\n\n    public LoggerSingletonExample2() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample2 {\n\n    private static volatile LoggerSingletonExample2 instance;\n    private FileWriter writer;\n\n    private LoggerSingletonExample2() {\n        try {\n            writer = new FileWriter(\"application.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggerSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (LoggerSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new LoggerSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public synchronized void log(String message, String level) {\n        try {\n            writer.write(level + \": \" + message + \"\\n\");\n            writer.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        try {\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "LoggerSingleton",
    "input": "public class LoggerSingletonExample3 {\n\n    public LoggerSingletonExample3() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample3 {\n\n    private static volatile LoggerSingletonExample3 instance;\n    private FileWriter writer;\n\n    private LoggerSingletonExample3() {\n        try {\n            writer = new FileWriter(\"application.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggerSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (LoggerSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new LoggerSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public synchronized void log(String message, String level) {\n        try {\n            writer.write(level + \": \" + message + \"\\n\");\n            writer.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        try {\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "LoggerSingleton",
    "input": "public class LoggerSingletonExample4 {\n\n    public LoggerSingletonExample4() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample4 {\n\n    private static volatile LoggerSingletonExample4 instance;\n    private FileWriter writer;\n\n    private LoggerSingletonExample4() {\n        try {\n            writer = new FileWriter(\"application.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggerSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (LoggerSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new LoggerSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public synchronized void log(String message, String level) {\n        try {\n            writer.write(level + \": \" + message + \"\\n\");\n            writer.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        try {\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "LoggerSingleton",
    "input": "public class LoggerSingletonExample5 {\n\n    public LoggerSingletonExample5() {}\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample5 {\n\n    private static volatile LoggerSingletonExample5 instance;\n    private FileWriter writer;\n\n    private LoggerSingletonExample5() {\n        try {\n            writer = new FileWriter(\"application.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggerSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (LoggerSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new LoggerSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public synchronized void log(String message, String level) {\n        try {\n            writer.write(level + \": \" + message + \"\\n\");\n            writer.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        try {\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionPoolSingleton",
    "input": "public class DatabaseConnectionPoolSingletonExample1 {\n\n    public DatabaseConnectionPoolSingletonExample1() {}\n\n}",
    "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class DatabaseConnectionPoolSingletonExample1 {\n\n    private static final int POOL_SIZE = 5;\n    private static DatabaseConnectionPoolSingletonExample1 instance;\n    private BlockingQueue<Connection> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample1() {\n        connectionPool = new ArrayBlockingQueue<>(POOL_SIZE);\n        for (int i = 0; i < POOL_SIZE; i++) {\n            try {\n                connectionPool.add(DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mydb\", \"user\", \"password\"));\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static DatabaseConnectionPoolSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (DatabaseConnectionPoolSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new DatabaseConnectionPoolSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public Connection getConnection() throws InterruptedException {\n        return connectionPool.take();\n    }\n\n    public void releaseConnection(Connection connection) {\n        connectionPool.offer(connection);\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionPoolSingleton",
    "input": "public class DatabaseConnectionPoolSingletonExample2 {\n\n    public DatabaseConnectionPoolSingletonExample2() {}\n\n}",
    "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class DatabaseConnectionPoolSingletonExample2 {\n\n    private static final int POOL_SIZE = 5;\n    private static DatabaseConnectionPoolSingletonExample2 instance;\n    private BlockingQueue<Connection> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample2() {\n        connectionPool = new ArrayBlockingQueue<>(POOL_SIZE);\n        for (int i = 0; i < POOL_SIZE; i++) {\n            try {\n                connectionPool.add(DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mydb\", \"user\", \"password\"));\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static DatabaseConnectionPoolSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (DatabaseConnectionPoolSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new DatabaseConnectionPoolSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public Connection getConnection() throws InterruptedException {\n        return connectionPool.take();\n    }\n\n    public void releaseConnection(Connection connection) {\n        connectionPool.offer(connection);\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionPoolSingleton",
    "input": "public class DatabaseConnectionPoolSingletonExample3 {\n\n    public DatabaseConnectionPoolSingletonExample3() {}\n\n}",
    "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class DatabaseConnectionPoolSingletonExample3 {\n\n    private static final int POOL_SIZE = 5;\n    private static DatabaseConnectionPoolSingletonExample3 instance;\n    private BlockingQueue<Connection> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample3() {\n        connectionPool = new ArrayBlockingQueue<>(POOL_SIZE);\n        for (int i = 0; i < POOL_SIZE; i++) {\n            try {\n                connectionPool.add(DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mydb\", \"user\", \"password\"));\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static DatabaseConnectionPoolSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (DatabaseConnectionPoolSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new DatabaseConnectionPoolSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public Connection getConnection() throws InterruptedException {\n        return connectionPool.take();\n    }\n\n    public void releaseConnection(Connection connection) {\n        connectionPool.offer(connection);\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionPoolSingleton",
    "input": "public class DatabaseConnectionPoolSingletonExample4 {\n\n    public DatabaseConnectionPoolSingletonExample4() {}\n\n}",
    "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class DatabaseConnectionPoolSingletonExample4 {\n\n    private static final int POOL_SIZE = 5;\n    private static DatabaseConnectionPoolSingletonExample4 instance;\n    private BlockingQueue<Connection> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample4() {\n        connectionPool = new ArrayBlockingQueue<>(POOL_SIZE);\n        for (int i = 0; i < POOL_SIZE; i++) {\n            try {\n                connectionPool.add(DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mydb\", \"user\", \"password\"));\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static DatabaseConnectionPoolSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (DatabaseConnectionPoolSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new DatabaseConnectionPoolSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public Connection getConnection() throws InterruptedException {\n        return connectionPool.take();\n    }\n\n    public void releaseConnection(Connection connection) {\n        connectionPool.offer(connection);\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionPoolSingleton",
    "input": "public class DatabaseConnectionPoolSingletonExample5 {\n\n    public DatabaseConnectionPoolSingletonExample5() {}\n\n}",
    "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class DatabaseConnectionPoolSingletonExample5 {\n\n    private static final int POOL_SIZE = 5;\n    private static DatabaseConnectionPoolSingletonExample5 instance;\n    private BlockingQueue<Connection> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample5() {\n        connectionPool = new ArrayBlockingQueue<>(POOL_SIZE);\n        for (int i = 0; i < POOL_SIZE; i++) {\n            try {\n                connectionPool.add(DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mydb\", \"user\", \"password\"));\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static DatabaseConnectionPoolSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (DatabaseConnectionPoolSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new DatabaseConnectionPoolSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public Connection getConnection() throws InterruptedException {\n        return connectionPool.take();\n    }\n\n    public void releaseConnection(Connection connection) {\n        connectionPool.offer(connection);\n    }\n\n}"
  },
  {
    "type": "ConfigurationManagerSingleton",
    "input": "public class ConfigurationManagerSingletonExample1 {\n\n    public ConfigurationManagerSingletonExample1() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationManagerSingletonExample1 {\n\n    private static ConfigurationManagerSingletonExample1 instance;\n    private Properties properties;\n\n    private ConfigurationManagerSingletonExample1() {\n        properties = new Properties();\n        try (FileInputStream fis = new FileInputStream(\"application.properties\")) {\n            properties.load(fis);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (ConfigurationManagerSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new ConfigurationManagerSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public String getProperty(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ConfigurationManagerSingleton",
    "input": "public class ConfigurationManagerSingletonExample2 {\n\n    public ConfigurationManagerSingletonExample2() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationManagerSingletonExample2 {\n\n    private static ConfigurationManagerSingletonExample2 instance;\n    private Properties properties;\n\n    private ConfigurationManagerSingletonExample2() {\n        properties = new Properties();\n        try (FileInputStream fis = new FileInputStream(\"application.properties\")) {\n            properties.load(fis);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (ConfigurationManagerSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new ConfigurationManagerSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public String getProperty(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ConfigurationManagerSingleton",
    "input": "public class ConfigurationManagerSingletonExample3 {\n\n    public ConfigurationManagerSingletonExample3() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationManagerSingletonExample3 {\n\n    private static ConfigurationManagerSingletonExample3 instance;\n    private Properties properties;\n\n    private ConfigurationManagerSingletonExample3() {\n        properties = new Properties();\n        try (FileInputStream fis = new FileInputStream(\"application.properties\")) {\n            properties.load(fis);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (ConfigurationManagerSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new ConfigurationManagerSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public String getProperty(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ConfigurationManagerSingleton",
    "input": "public class ConfigurationManagerSingletonExample4 {\n\n    public ConfigurationManagerSingletonExample4() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationManagerSingletonExample4 {\n\n    private static ConfigurationManagerSingletonExample4 instance;\n    private Properties properties;\n\n    private ConfigurationManagerSingletonExample4() {\n        properties = new Properties();\n        try (FileInputStream fis = new FileInputStream(\"application.properties\")) {\n            properties.load(fis);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (ConfigurationManagerSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new ConfigurationManagerSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public String getProperty(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ConfigurationManagerSingleton",
    "input": "public class ConfigurationManagerSingletonExample5 {\n\n    public ConfigurationManagerSingletonExample5() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationManagerSingletonExample5 {\n\n    private static ConfigurationManagerSingletonExample5 instance;\n    private Properties properties;\n\n    private ConfigurationManagerSingletonExample5() {\n        properties = new Properties();\n        try (FileInputStream fis = new FileInputStream(\"application.properties\")) {\n            properties.load(fis);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (ConfigurationManagerSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new ConfigurationManagerSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public String getProperty(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ServiceLocatorSingleton",
    "input": "public class ServiceLocatorSingletonExample1 {\n\n    public ServiceLocatorSingletonExample1() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ServiceLocatorSingletonExample1 {\n\n    private static ServiceLocatorSingletonExample1 instance;\n    private Map<String, Object> services;\n\n    private ServiceLocatorSingletonExample1() {\n        services = new HashMap<>();\n    }\n\n    public static ServiceLocatorSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (ServiceLocatorSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new ServiceLocatorSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void registerService(String name, Object service) {\n        services.put(name, service);\n    }\n\n    public Object getService(String name) {\n        return services.get(name);\n    }\n\n}"
  },
  {
    "type": "ServiceLocatorSingleton",
    "input": "public class ServiceLocatorSingletonExample2 {\n\n    public ServiceLocatorSingletonExample2() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ServiceLocatorSingletonExample2 {\n\n    private static ServiceLocatorSingletonExample2 instance;\n    private Map<String, Object> services;\n\n    private ServiceLocatorSingletonExample2() {\n        services = new HashMap<>();\n    }\n\n    public static ServiceLocatorSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (ServiceLocatorSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new ServiceLocatorSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void registerService(String name, Object service) {\n        services.put(name, service);\n    }\n\n    public Object getService(String name) {\n        return services.get(name);\n    }\n\n}"
  },
  {
    "type": "ServiceLocatorSingleton",
    "input": "public class ServiceLocatorSingletonExample3 {\n\n    public ServiceLocatorSingletonExample3() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ServiceLocatorSingletonExample3 {\n\n    private static ServiceLocatorSingletonExample3 instance;\n    private Map<String, Object> services;\n\n    private ServiceLocatorSingletonExample3() {\n        services = new HashMap<>();\n    }\n\n    public static ServiceLocatorSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (ServiceLocatorSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new ServiceLocatorSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void registerService(String name, Object service) {\n        services.put(name, service);\n    }\n\n    public Object getService(String name) {\n        return services.get(name);\n    }\n\n}"
  },
  {
    "type": "ServiceLocatorSingleton",
    "input": "public class ServiceLocatorSingletonExample4 {\n\n    public ServiceLocatorSingletonExample4() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ServiceLocatorSingletonExample4 {\n\n    private static ServiceLocatorSingletonExample4 instance;\n    private Map<String, Object> services;\n\n    private ServiceLocatorSingletonExample4() {\n        services = new HashMap<>();\n    }\n\n    public static ServiceLocatorSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (ServiceLocatorSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new ServiceLocatorSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void registerService(String name, Object service) {\n        services.put(name, service);\n    }\n\n    public Object getService(String name) {\n        return services.get(name);\n    }\n\n}"
  },
  {
    "type": "ServiceLocatorSingleton",
    "input": "public class ServiceLocatorSingletonExample5 {\n\n    public ServiceLocatorSingletonExample5() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ServiceLocatorSingletonExample5 {\n\n    private static ServiceLocatorSingletonExample5 instance;\n    private Map<String, Object> services;\n\n    private ServiceLocatorSingletonExample5() {\n        services = new HashMap<>();\n    }\n\n    public static ServiceLocatorSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (ServiceLocatorSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new ServiceLocatorSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void registerService(String name, Object service) {\n        services.put(name, service);\n    }\n\n    public Object getService(String name) {\n        return services.get(name);\n    }\n\n}"
  },
  {
    "type": "CacheSingleton",
    "input": "public class CacheSingletonExample1 {\n\n    public CacheSingletonExample1() {}\n\n}",
    "output": "import java.util.LinkedHashMap;\nimport java.util.Map;\n\npublic class CacheSingletonExample1 {\n\n    private static CacheSingletonExample1 instance;\n    private final int CACHE_SIZE = 5;\n    private Map<String, String> cache;\n\n    private CacheSingletonExample1() {\n        cache = new LinkedHashMap<String, String>(CACHE_SIZE, 0.75f, true) {\n            protected boolean removeEldestEntry(Map.Entry<String, String> eldest) {\n                return size() > CACHE_SIZE;\n            }\n        };\n    }\n\n    public static CacheSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (CacheSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new CacheSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "CacheSingleton",
    "input": "public class CacheSingletonExample2 {\n\n    public CacheSingletonExample2() {}\n\n}",
    "output": "import java.util.LinkedHashMap;\nimport java.util.Map;\n\npublic class CacheSingletonExample2 {\n\n    private static CacheSingletonExample2 instance;\n    private final int CACHE_SIZE = 5;\n    private Map<String, String> cache;\n\n    private CacheSingletonExample2() {\n        cache = new LinkedHashMap<String, String>(CACHE_SIZE, 0.75f, true) {\n            protected boolean removeEldestEntry(Map.Entry<String, String> eldest) {\n                return size() > CACHE_SIZE;\n            }\n        };\n    }\n\n    public static CacheSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (CacheSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new CacheSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "CacheSingleton",
    "input": "public class CacheSingletonExample3 {\n\n    public CacheSingletonExample3() {}\n\n}",
    "output": "import java.util.LinkedHashMap;\nimport java.util.Map;\n\npublic class CacheSingletonExample3 {\n\n    private static CacheSingletonExample3 instance;\n    private final int CACHE_SIZE = 5;\n    private Map<String, String> cache;\n\n    private CacheSingletonExample3() {\n        cache = new LinkedHashMap<String, String>(CACHE_SIZE, 0.75f, true) {\n            protected boolean removeEldestEntry(Map.Entry<String, String> eldest) {\n                return size() > CACHE_SIZE;\n            }\n        };\n    }\n\n    public static CacheSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (CacheSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new CacheSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "CacheSingleton",
    "input": "public class CacheSingletonExample4 {\n\n    public CacheSingletonExample4() {}\n\n}",
    "output": "import java.util.LinkedHashMap;\nimport java.util.Map;\n\npublic class CacheSingletonExample4 {\n\n    private static CacheSingletonExample4 instance;\n    private final int CACHE_SIZE = 5;\n    private Map<String, String> cache;\n\n    private CacheSingletonExample4() {\n        cache = new LinkedHashMap<String, String>(CACHE_SIZE, 0.75f, true) {\n            protected boolean removeEldestEntry(Map.Entry<String, String> eldest) {\n                return size() > CACHE_SIZE;\n            }\n        };\n    }\n\n    public static CacheSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (CacheSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new CacheSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "CacheSingleton",
    "input": "public class CacheSingletonExample5 {\n\n    public CacheSingletonExample5() {}\n\n}",
    "output": "import java.util.LinkedHashMap;\nimport java.util.Map;\n\npublic class CacheSingletonExample5 {\n\n    private static CacheSingletonExample5 instance;\n    private final int CACHE_SIZE = 5;\n    private Map<String, String> cache;\n\n    private CacheSingletonExample5() {\n        cache = new LinkedHashMap<String, String>(CACHE_SIZE, 0.75f, true) {\n            protected boolean removeEldestEntry(Map.Entry<String, String> eldest) {\n                return size() > CACHE_SIZE;\n            }\n        };\n    }\n\n    public static CacheSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (CacheSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new CacheSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "ClusteredSingleton",
    "input": "public class ClusteredSingleton {\n\n    public ClusteredSingleton() {}\n\n}",
    "output": "import java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class ClusteredSingleton {\n\n    private static volatile ClusteredSingleton instance;\n    private static final Lock lock = new ReentrantLock();\n\n    private ClusteredSingleton() {}\n\n    public static ClusteredSingleton getInstance() {\n        if (instance == null) {\n            lock.lock();\n            try {\n                if (instance == null) {\n                    instance = new ClusteredSingleton();\n                    // Simulate cluster-wide initialization\n                    System.out.println(\"Cluster-wide Singleton instance created\");\n                }\n            } finally {\n                lock.unlock();\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithSelfDestruct",
    "input": "public class SingletonWithSelfDestruct {\n\n    public SingletonWithSelfDestruct() {}\n\n}",
    "output": "import java.util.Timer;\nimport java.util.TimerTask;\n\npublic class SingletonWithSelfDestruct {\n\n    private static SingletonWithSelfDestruct instance;\n    private static final Timer timer = new Timer();\n\n    private SingletonWithSelfDestruct() {}\n\n    public static SingletonWithSelfDestruct getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithSelfDestruct();\n            scheduleDestruction();\n        }\n        return instance;\n    }\n\n    private static void scheduleDestruction() {\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                instance = null;\n                System.out.println(\"Singleton instance destroyed due to inactivity\");\n            }\n        }, 60000); // Self-destruct after 1 minute\n    }\n\n}"
  },
  {
    "type": "SingletonWithStateRecovery",
    "input": "public class SingletonWithStateRecovery {\n\n    public SingletonWithStateRecovery() {}\n\n}",
    "output": "import java.io.*;\n\npublic class SingletonWithStateRecovery {\n\n    private static SingletonWithStateRecovery instance;\n    private String state;\n\n    private SingletonWithStateRecovery() {\n        // Recover state from file\n        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"singleton_state.dat\"))) {\n            state = (String) ois.readObject();\n        } catch (Exception e) {\n            state = \"Default State\";\n        }\n    }\n\n    public static SingletonWithStateRecovery getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithStateRecovery();\n        }\n        return instance;\n    }\n\n    public String getState() {\n        return state;\n    }\n\n    public void setState(String state) {\n        this.state = state;\n        // Persist state to file\n        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"singleton_state.dat\"))) {\n            oos.writeObject(state);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "SingletonWithVersioning",
    "input": "public class SingletonWithVersioning {\n\n    public SingletonWithVersioning() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithVersioning {\n\n    private static final Map<String, SingletonWithVersioning> instances = new HashMap<>();\n\n    private SingletonWithVersioning(String version) {\n        System.out.println(\"Version \" + version + \" initialized\");\n    }\n\n    public static SingletonWithVersioning getInstance(String version) {\n        return instances.computeIfAbsent(version, v -> new SingletonWithVersioning(v));\n    }\n\n}"
  },
  {
    "type": "SingletonWithTimeoutLock",
    "input": "public class SingletonWithTimeoutLock {\n\n    public SingletonWithTimeoutLock() {}\n\n}",
    "output": "import java.util.concurrent.locks.ReentrantLock;\nimport java.util.concurrent.TimeUnit;\n\npublic class SingletonWithTimeoutLock {\n\n    private static SingletonWithTimeoutLock instance;\n    private static final ReentrantLock lock = new ReentrantLock();\n\n    private SingletonWithTimeoutLock() {}\n\n    public static SingletonWithTimeoutLock getInstance() throws InterruptedException {\n        if (lock.tryLock(5, TimeUnit.SECONDS)) { // Timeout lock for 5 seconds\n            try {\n                if (instance == null) {\n                    instance = new SingletonWithTimeoutLock();\n                }\n            } finally {\n                lock.unlock();\n            }\n        } else {\n            throw new IllegalStateException(\"Could not acquire lock within the timeout\");\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonForTesting",
    "input": "public class SingletonForTesting {\n\n    public SingletonForTesting() {}\n\n}",
    "output": "public class SingletonForTesting {\n\n    private static SingletonForTesting instance;\n\n    private SingletonForTesting() {}\n\n    public static SingletonForTesting getInstance() {\n        if (instance == null) {\n            instance = new SingletonForTesting();\n        }\n        return instance;\n    }\n\n    public static void resetInstance() {\n        instance = null;\n    }\n\n}"
  },
  {
    "type": "SingletonWithRateLimiter",
    "input": "public class SingletonWithRateLimiter {\n\n    public SingletonWithRateLimiter() {}\n\n}",
    "output": "import java.util.concurrent.Semaphore;\n\npublic class SingletonWithRateLimiter {\n\n    private static SingletonWithRateLimiter instance;\n    private static final Semaphore semaphore = new Semaphore(3); // Allow 3 concurrent accesses\n\n    private SingletonWithRateLimiter() {}\n\n    public static SingletonWithRateLimiter getInstance() {\n        if (instance == null) {\n            synchronized (SingletonWithRateLimiter.class) {\n                if (instance == null) {\n                    instance = new SingletonWithRateLimiter();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void performAction() throws InterruptedException {\n        semaphore.acquire();\n        try {\n            System.out.println(\"Performing rate-limited action\");\n        } finally {\n            semaphore.release();\n        }\n    }\n\n}"
  },
  {
    "type": "ClusteredSingleton",
    "input": "public class ClusteredSingletonExample1 {\n\n    public ClusteredSingletonExample1() {}\n\n}",
    "output": "import java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class ClusteredSingletonExample1 {\n\n    private static volatile ClusteredSingletonExample1 instance;\n    private static final Lock lock = new ReentrantLock();\n\n    private ClusteredSingletonExample1() {}\n\n    public static ClusteredSingletonExample1 getInstance() {\n        if (instance == null) {\n            lock.lock();\n            try {\n                if (instance == null) {\n                    instance = new ClusteredSingletonExample1();\n                    // Simulate cluster-wide initialization\n                    System.out.println(\"Cluster-wide Singleton instance created\");\n                }\n            } finally {\n                lock.unlock();\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ClusteredSingleton",
    "input": "public class ClusteredSingletonExample2 {\n\n    public ClusteredSingletonExample2() {}\n\n}",
    "output": "import java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class ClusteredSingletonExample2 {\n\n    private static volatile ClusteredSingletonExample2 instance;\n    private static final Lock lock = new ReentrantLock();\n\n    private ClusteredSingletonExample2() {}\n\n    public static ClusteredSingletonExample2 getInstance() {\n        if (instance == null) {\n            lock.lock();\n            try {\n                if (instance == null) {\n                    instance = new ClusteredSingletonExample2();\n                    // Simulate cluster-wide initialization\n                    System.out.println(\"Cluster-wide Singleton instance created\");\n                }\n            } finally {\n                lock.unlock();\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ClusteredSingleton",
    "input": "public class ClusteredSingletonExample3 {\n\n    public ClusteredSingletonExample3() {}\n\n}",
    "output": "import java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class ClusteredSingletonExample3 {\n\n    private static volatile ClusteredSingletonExample3 instance;\n    private static final Lock lock = new ReentrantLock();\n\n    private ClusteredSingletonExample3() {}\n\n    public static ClusteredSingletonExample3 getInstance() {\n        if (instance == null) {\n            lock.lock();\n            try {\n                if (instance == null) {\n                    instance = new ClusteredSingletonExample3();\n                    // Simulate cluster-wide initialization\n                    System.out.println(\"Cluster-wide Singleton instance created\");\n                }\n            } finally {\n                lock.unlock();\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ClusteredSingleton",
    "input": "public class ClusteredSingletonExample4 {\n\n    public ClusteredSingletonExample4() {}\n\n}",
    "output": "import java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class ClusteredSingletonExample4 {\n\n    private static volatile ClusteredSingletonExample4 instance;\n    private static final Lock lock = new ReentrantLock();\n\n    private ClusteredSingletonExample4() {}\n\n    public static ClusteredSingletonExample4 getInstance() {\n        if (instance == null) {\n            lock.lock();\n            try {\n                if (instance == null) {\n                    instance = new ClusteredSingletonExample4();\n                    // Simulate cluster-wide initialization\n                    System.out.println(\"Cluster-wide Singleton instance created\");\n                }\n            } finally {\n                lock.unlock();\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ClusteredSingleton",
    "input": "public class ClusteredSingletonExample5 {\n\n    public ClusteredSingletonExample5() {}\n\n}",
    "output": "import java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class ClusteredSingletonExample5 {\n\n    private static volatile ClusteredSingletonExample5 instance;\n    private static final Lock lock = new ReentrantLock();\n\n    private ClusteredSingletonExample5() {}\n\n    public static ClusteredSingletonExample5 getInstance() {\n        if (instance == null) {\n            lock.lock();\n            try {\n                if (instance == null) {\n                    instance = new ClusteredSingletonExample5();\n                    // Simulate cluster-wide initialization\n                    System.out.println(\"Cluster-wide Singleton instance created\");\n                }\n            } finally {\n                lock.unlock();\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithSelfDestruct",
    "input": "public class SingletonWithSelfDestructExample1 {\n\n    public SingletonWithSelfDestructExample1() {}\n\n}",
    "output": "import java.util.Timer;\nimport java.util.TimerTask;\n\npublic class SingletonWithSelfDestructExample1 {\n\n    private static SingletonWithSelfDestructExample1 instance;\n    private static final Timer timer = new Timer();\n\n    private SingletonWithSelfDestructExample1() {}\n\n    public static SingletonWithSelfDestructExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithSelfDestructExample1();\n            scheduleDestruction();\n        }\n        return instance;\n    }\n\n    private static void scheduleDestruction() {\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                instance = null;\n                System.out.println(\"Singleton instance destroyed due to inactivity\");\n            }\n        }, 60000); // Self-destruct after 1 minute\n    }\n\n}"
  },
  {
    "type": "SingletonWithSelfDestruct",
    "input": "public class SingletonWithSelfDestructExample2 {\n\n    public SingletonWithSelfDestructExample2() {}\n\n}",
    "output": "import java.util.Timer;\nimport java.util.TimerTask;\n\npublic class SingletonWithSelfDestructExample2 {\n\n    private static SingletonWithSelfDestructExample2 instance;\n    private static final Timer timer = new Timer();\n\n    private SingletonWithSelfDestructExample2() {}\n\n    public static SingletonWithSelfDestructExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithSelfDestructExample2();\n            scheduleDestruction();\n        }\n        return instance;\n    }\n\n    private static void scheduleDestruction() {\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                instance = null;\n                System.out.println(\"Singleton instance destroyed due to inactivity\");\n            }\n        }, 60000); // Self-destruct after 1 minute\n    }\n\n}"
  },
  {
    "type": "SingletonWithSelfDestruct",
    "input": "public class SingletonWithSelfDestructExample3 {\n\n    public SingletonWithSelfDestructExample3() {}\n\n}",
    "output": "import java.util.Timer;\nimport java.util.TimerTask;\n\npublic class SingletonWithSelfDestructExample3 {\n\n    private static SingletonWithSelfDestructExample3 instance;\n    private static final Timer timer = new Timer();\n\n    private SingletonWithSelfDestructExample3() {}\n\n    public static SingletonWithSelfDestructExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithSelfDestructExample3();\n            scheduleDestruction();\n        }\n        return instance;\n    }\n\n    private static void scheduleDestruction() {\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                instance = null;\n                System.out.println(\"Singleton instance destroyed due to inactivity\");\n            }\n        }, 60000); // Self-destruct after 1 minute\n    }\n\n}"
  },
  {
    "type": "SingletonWithSelfDestruct",
    "input": "public class SingletonWithSelfDestructExample4 {\n\n    public SingletonWithSelfDestructExample4() {}\n\n}",
    "output": "import java.util.Timer;\nimport java.util.TimerTask;\n\npublic class SingletonWithSelfDestructExample4 {\n\n    private static SingletonWithSelfDestructExample4 instance;\n    private static final Timer timer = new Timer();\n\n    private SingletonWithSelfDestructExample4() {}\n\n    public static SingletonWithSelfDestructExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithSelfDestructExample4();\n            scheduleDestruction();\n        }\n        return instance;\n    }\n\n    private static void scheduleDestruction() {\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                instance = null;\n                System.out.println(\"Singleton instance destroyed due to inactivity\");\n            }\n        }, 60000); // Self-destruct after 1 minute\n    }\n\n}"
  },
  {
    "type": "SingletonWithSelfDestruct",
    "input": "public class SingletonWithSelfDestructExample5 {\n\n    public SingletonWithSelfDestructExample5() {}\n\n}",
    "output": "import java.util.Timer;\nimport java.util.TimerTask;\n\npublic class SingletonWithSelfDestructExample5 {\n\n    private static SingletonWithSelfDestructExample5 instance;\n    private static final Timer timer = new Timer();\n\n    private SingletonWithSelfDestructExample5() {}\n\n    public static SingletonWithSelfDestructExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithSelfDestructExample5();\n            scheduleDestruction();\n        }\n        return instance;\n    }\n\n    private static void scheduleDestruction() {\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                instance = null;\n                System.out.println(\"Singleton instance destroyed due to inactivity\");\n            }\n        }, 60000); // Self-destruct after 1 minute\n    }\n\n}"
  },
  {
    "type": "SingletonWithStateRecovery",
    "input": "public class SingletonWithStateRecoveryExample1 {\n\n    public SingletonWithStateRecoveryExample1() {}\n\n}",
    "output": "import java.io.*;\n\npublic class SingletonWithStateRecoveryExample1 {\n\n    private static SingletonWithStateRecoveryExample1 instance;\n    private String state;\n\n    private SingletonWithStateRecoveryExample1() {\n        // Recover state from file\n        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"singleton_state.dat\"))) {\n            state = (String) ois.readObject();\n        } catch (Exception e) {\n            state = \"Default State\";\n        }\n    }\n\n    public static SingletonWithStateRecoveryExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithStateRecoveryExample1();\n        }\n        return instance;\n    }\n\n    public String getState() {\n        return state;\n    }\n\n    public void setState(String state) {\n        this.state = state;\n        // Persist state to file\n        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"singleton_state.dat\"))) {\n            oos.writeObject(state);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "SingletonWithStateRecovery",
    "input": "public class SingletonWithStateRecoveryExample2 {\n\n    public SingletonWithStateRecoveryExample2() {}\n\n}",
    "output": "import java.io.*;\n\npublic class SingletonWithStateRecoveryExample2 {\n\n    private static SingletonWithStateRecoveryExample2 instance;\n    private String state;\n\n    private SingletonWithStateRecoveryExample2() {\n        // Recover state from file\n        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"singleton_state.dat\"))) {\n            state = (String) ois.readObject();\n        } catch (Exception e) {\n            state = \"Default State\";\n        }\n    }\n\n    public static SingletonWithStateRecoveryExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithStateRecoveryExample2();\n        }\n        return instance;\n    }\n\n    public String getState() {\n        return state;\n    }\n\n    public void setState(String state) {\n        this.state = state;\n        // Persist state to file\n        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"singleton_state.dat\"))) {\n            oos.writeObject(state);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "SingletonWithStateRecovery",
    "input": "public class SingletonWithStateRecoveryExample3 {\n\n    public SingletonWithStateRecoveryExample3() {}\n\n}",
    "output": "import java.io.*;\n\npublic class SingletonWithStateRecoveryExample3 {\n\n    private static SingletonWithStateRecoveryExample3 instance;\n    private String state;\n\n    private SingletonWithStateRecoveryExample3() {\n        // Recover state from file\n        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"singleton_state.dat\"))) {\n            state = (String) ois.readObject();\n        } catch (Exception e) {\n            state = \"Default State\";\n        }\n    }\n\n    public static SingletonWithStateRecoveryExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithStateRecoveryExample3();\n        }\n        return instance;\n    }\n\n    public String getState() {\n        return state;\n    }\n\n    public void setState(String state) {\n        this.state = state;\n        // Persist state to file\n        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"singleton_state.dat\"))) {\n            oos.writeObject(state);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "SingletonWithStateRecovery",
    "input": "public class SingletonWithStateRecoveryExample4 {\n\n    public SingletonWithStateRecoveryExample4() {}\n\n}",
    "output": "import java.io.*;\n\npublic class SingletonWithStateRecoveryExample4 {\n\n    private static SingletonWithStateRecoveryExample4 instance;\n    private String state;\n\n    private SingletonWithStateRecoveryExample4() {\n        // Recover state from file\n        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"singleton_state.dat\"))) {\n            state = (String) ois.readObject();\n        } catch (Exception e) {\n            state = \"Default State\";\n        }\n    }\n\n    public static SingletonWithStateRecoveryExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithStateRecoveryExample4();\n        }\n        return instance;\n    }\n\n    public String getState() {\n        return state;\n    }\n\n    public void setState(String state) {\n        this.state = state;\n        // Persist state to file\n        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"singleton_state.dat\"))) {\n            oos.writeObject(state);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "SingletonWithStateRecovery",
    "input": "public class SingletonWithStateRecoveryExample5 {\n\n    public SingletonWithStateRecoveryExample5() {}\n\n}",
    "output": "import java.io.*;\n\npublic class SingletonWithStateRecoveryExample5 {\n\n    private static SingletonWithStateRecoveryExample5 instance;\n    private String state;\n\n    private SingletonWithStateRecoveryExample5() {\n        // Recover state from file\n        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(\"singleton_state.dat\"))) {\n            state = (String) ois.readObject();\n        } catch (Exception e) {\n            state = \"Default State\";\n        }\n    }\n\n    public static SingletonWithStateRecoveryExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithStateRecoveryExample5();\n        }\n        return instance;\n    }\n\n    public String getState() {\n        return state;\n    }\n\n    public void setState(String state) {\n        this.state = state;\n        // Persist state to file\n        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"singleton_state.dat\"))) {\n            oos.writeObject(state);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "SingletonWithVersioning",
    "input": "public class SingletonWithVersioningExample1 {\n\n    public SingletonWithVersioningExample1() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithVersioningExample1 {\n\n    private static final Map<String, SingletonWithVersioningExample1> instances = new HashMap<>();\n\n    private SingletonWithVersioningExample1(String version) {\n        System.out.println(\"Version \" + version + \" initialized\");\n    }\n\n    public static SingletonWithVersioningExample1 getInstance(String version) {\n        return instances.computeIfAbsent(version, v -> new SingletonWithVersioningExample1(v));\n    }\n\n}"
  },
  {
    "type": "SingletonWithVersioning",
    "input": "public class SingletonWithVersioningExample2 {\n\n    public SingletonWithVersioningExample2() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithVersioningExample2 {\n\n    private static final Map<String, SingletonWithVersioningExample2> instances = new HashMap<>();\n\n    private SingletonWithVersioningExample2(String version) {\n        System.out.println(\"Version \" + version + \" initialized\");\n    }\n\n    public static SingletonWithVersioningExample2 getInstance(String version) {\n        return instances.computeIfAbsent(version, v -> new SingletonWithVersioningExample2(v));\n    }\n\n}"
  },
  {
    "type": "SingletonWithVersioning",
    "input": "public class SingletonWithVersioningExample3 {\n\n    public SingletonWithVersioningExample3() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithVersioningExample3 {\n\n    private static final Map<String, SingletonWithVersioningExample3> instances = new HashMap<>();\n\n    private SingletonWithVersioningExample3(String version) {\n        System.out.println(\"Version \" + version + \" initialized\");\n    }\n\n    public static SingletonWithVersioningExample3 getInstance(String version) {\n        return instances.computeIfAbsent(version, v -> new SingletonWithVersioningExample3(v));\n    }\n\n}"
  },
  {
    "type": "SingletonWithVersioning",
    "input": "public class SingletonWithVersioningExample4 {\n\n    public SingletonWithVersioningExample4() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithVersioningExample4 {\n\n    private static final Map<String, SingletonWithVersioningExample4> instances = new HashMap<>();\n\n    private SingletonWithVersioningExample4(String version) {\n        System.out.println(\"Version \" + version + \" initialized\");\n    }\n\n    public static SingletonWithVersioningExample4 getInstance(String version) {\n        return instances.computeIfAbsent(version, v -> new SingletonWithVersioningExample4(v));\n    }\n\n}"
  },
  {
    "type": "SingletonWithVersioning",
    "input": "public class SingletonWithVersioningExample5 {\n\n    public SingletonWithVersioningExample5() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithVersioningExample5 {\n\n    private static final Map<String, SingletonWithVersioningExample5> instances = new HashMap<>();\n\n    private SingletonWithVersioningExample5(String version) {\n        System.out.println(\"Version \" + version + \" initialized\");\n    }\n\n    public static SingletonWithVersioningExample5 getInstance(String version) {\n        return instances.computeIfAbsent(version, v -> new SingletonWithVersioningExample5(v));\n    }\n\n}"
  },
  {
    "type": "SingletonWithTimeoutLock",
    "input": "public class SingletonWithTimeoutLockExample1 {\n\n    public SingletonWithTimeoutLockExample1() {}\n\n}",
    "output": "import java.util.concurrent.locks.ReentrantLock;\nimport java.util.concurrent.TimeUnit;\n\npublic class SingletonWithTimeoutLockExample1 {\n\n    private static SingletonWithTimeoutLockExample1 instance;\n    private static final ReentrantLock lock = new ReentrantLock();\n\n    private SingletonWithTimeoutLockExample1() {}\n\n    public static SingletonWithTimeoutLockExample1 getInstance() throws InterruptedException {\n        if (lock.tryLock(5, TimeUnit.SECONDS)) { // Timeout lock for 5 seconds\n            try {\n                if (instance == null) {\n                    instance = new SingletonWithTimeoutLockExample1();\n                }\n            } finally {\n                lock.unlock();\n            }\n        } else {\n            throw new IllegalStateException(\"Could not acquire lock within the timeout\");\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithTimeoutLock",
    "input": "public class SingletonWithTimeoutLockExample2 {\n\n    public SingletonWithTimeoutLockExample2() {}\n\n}",
    "output": "import java.util.concurrent.locks.ReentrantLock;\nimport java.util.concurrent.TimeUnit;\n\npublic class SingletonWithTimeoutLockExample2 {\n\n    private static SingletonWithTimeoutLockExample2 instance;\n    private static final ReentrantLock lock = new ReentrantLock();\n\n    private SingletonWithTimeoutLockExample2() {}\n\n    public static SingletonWithTimeoutLockExample2 getInstance() throws InterruptedException {\n        if (lock.tryLock(5, TimeUnit.SECONDS)) { // Timeout lock for 5 seconds\n            try {\n                if (instance == null) {\n                    instance = new SingletonWithTimeoutLockExample2();\n                }\n            } finally {\n                lock.unlock();\n            }\n        } else {\n            throw new IllegalStateException(\"Could not acquire lock within the timeout\");\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithTimeoutLock",
    "input": "public class SingletonWithTimeoutLockExample3 {\n\n    public SingletonWithTimeoutLockExample3() {}\n\n}",
    "output": "import java.util.concurrent.locks.ReentrantLock;\nimport java.util.concurrent.TimeUnit;\n\npublic class SingletonWithTimeoutLockExample3 {\n\n    private static SingletonWithTimeoutLockExample3 instance;\n    private static final ReentrantLock lock = new ReentrantLock();\n\n    private SingletonWithTimeoutLockExample3() {}\n\n    public static SingletonWithTimeoutLockExample3 getInstance() throws InterruptedException {\n        if (lock.tryLock(5, TimeUnit.SECONDS)) { // Timeout lock for 5 seconds\n            try {\n                if (instance == null) {\n                    instance = new SingletonWithTimeoutLockExample3();\n                }\n            } finally {\n                lock.unlock();\n            }\n        } else {\n            throw new IllegalStateException(\"Could not acquire lock within the timeout\");\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithTimeoutLock",
    "input": "public class SingletonWithTimeoutLockExample4 {\n\n    public SingletonWithTimeoutLockExample4() {}\n\n}",
    "output": "import java.util.concurrent.locks.ReentrantLock;\nimport java.util.concurrent.TimeUnit;\n\npublic class SingletonWithTimeoutLockExample4 {\n\n    private static SingletonWithTimeoutLockExample4 instance;\n    private static final ReentrantLock lock = new ReentrantLock();\n\n    private SingletonWithTimeoutLockExample4() {}\n\n    public static SingletonWithTimeoutLockExample4 getInstance() throws InterruptedException {\n        if (lock.tryLock(5, TimeUnit.SECONDS)) { // Timeout lock for 5 seconds\n            try {\n                if (instance == null) {\n                    instance = new SingletonWithTimeoutLockExample4();\n                }\n            } finally {\n                lock.unlock();\n            }\n        } else {\n            throw new IllegalStateException(\"Could not acquire lock within the timeout\");\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithTimeoutLock",
    "input": "public class SingletonWithTimeoutLockExample5 {\n\n    public SingletonWithTimeoutLockExample5() {}\n\n}",
    "output": "import java.util.concurrent.locks.ReentrantLock;\nimport java.util.concurrent.TimeUnit;\n\npublic class SingletonWithTimeoutLockExample5 {\n\n    private static SingletonWithTimeoutLockExample5 instance;\n    private static final ReentrantLock lock = new ReentrantLock();\n\n    private SingletonWithTimeoutLockExample5() {}\n\n    public static SingletonWithTimeoutLockExample5 getInstance() throws InterruptedException {\n        if (lock.tryLock(5, TimeUnit.SECONDS)) { // Timeout lock for 5 seconds\n            try {\n                if (instance == null) {\n                    instance = new SingletonWithTimeoutLockExample5();\n                }\n            } finally {\n                lock.unlock();\n            }\n        } else {\n            throw new IllegalStateException(\"Could not acquire lock within the timeout\");\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonForTesting",
    "input": "public class SingletonForTestingExample1 {\n\n    public SingletonForTestingExample1() {}\n\n}",
    "output": "public class SingletonForTestingExample1 {\n\n    private static SingletonForTestingExample1 instance;\n\n    private SingletonForTestingExample1() {}\n\n    public static SingletonForTestingExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonForTestingExample1();\n        }\n        return instance;\n    }\n\n    public static void resetInstance() {\n        instance = null;\n    }\n\n}"
  },
  {
    "type": "SingletonForTesting",
    "input": "public class SingletonForTestingExample2 {\n\n    public SingletonForTestingExample2() {}\n\n}",
    "output": "public class SingletonForTestingExample2 {\n\n    private static SingletonForTestingExample2 instance;\n\n    private SingletonForTestingExample2() {}\n\n    public static SingletonForTestingExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonForTestingExample2();\n        }\n        return instance;\n    }\n\n    public static void resetInstance() {\n        instance = null;\n    }\n\n}"
  },
  {
    "type": "SingletonForTesting",
    "input": "public class SingletonForTestingExample3 {\n\n    public SingletonForTestingExample3() {}\n\n}",
    "output": "public class SingletonForTestingExample3 {\n\n    private static SingletonForTestingExample3 instance;\n\n    private SingletonForTestingExample3() {}\n\n    public static SingletonForTestingExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonForTestingExample3();\n        }\n        return instance;\n    }\n\n    public static void resetInstance() {\n        instance = null;\n    }\n\n}"
  },
  {
    "type": "SingletonForTesting",
    "input": "public class SingletonForTestingExample4 {\n\n    public SingletonForTestingExample4() {}\n\n}",
    "output": "public class SingletonForTestingExample4 {\n\n    private static SingletonForTestingExample4 instance;\n\n    private SingletonForTestingExample4() {}\n\n    public static SingletonForTestingExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonForTestingExample4();\n        }\n        return instance;\n    }\n\n    public static void resetInstance() {\n        instance = null;\n    }\n\n}"
  },
  {
    "type": "SingletonForTesting",
    "input": "public class SingletonForTestingExample5 {\n\n    public SingletonForTestingExample5() {}\n\n}",
    "output": "public class SingletonForTestingExample5 {\n\n    private static SingletonForTestingExample5 instance;\n\n    private SingletonForTestingExample5() {}\n\n    public static SingletonForTestingExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonForTestingExample5();\n        }\n        return instance;\n    }\n\n    public static void resetInstance() {\n        instance = null;\n    }\n\n}"
  },
  {
    "type": "SingletonWithRateLimiter",
    "input": "public class SingletonWithRateLimiterExample1 {\n\n    public SingletonWithRateLimiterExample1() {}\n\n}",
    "output": "import java.util.concurrent.Semaphore;\n\npublic class SingletonWithRateLimiterExample1 {\n\n    private static SingletonWithRateLimiterExample1 instance;\n    private static final Semaphore semaphore = new Semaphore(3); // Allow 3 concurrent accesses\n\n    private SingletonWithRateLimiterExample1() {}\n\n    public static SingletonWithRateLimiterExample1 getInstance() {\n        if (instance == null) {\n            synchronized (SingletonWithRateLimiterExample1.class) {\n                if (instance == null) {\n                    instance = new SingletonWithRateLimiterExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void performAction() throws InterruptedException {\n        semaphore.acquire();\n        try {\n            System.out.println(\"Performing rate-limited action\");\n        } finally {\n            semaphore.release();\n        }\n    }\n\n}"
  },
  {
    "type": "SingletonWithRateLimiter",
    "input": "public class SingletonWithRateLimiterExample2 {\n\n    public SingletonWithRateLimiterExample2() {}\n\n}",
    "output": "import java.util.concurrent.Semaphore;\n\npublic class SingletonWithRateLimiterExample2 {\n\n    private static SingletonWithRateLimiterExample2 instance;\n    private static final Semaphore semaphore = new Semaphore(3); // Allow 3 concurrent accesses\n\n    private SingletonWithRateLimiterExample2() {}\n\n    public static SingletonWithRateLimiterExample2 getInstance() {\n        if (instance == null) {\n            synchronized (SingletonWithRateLimiterExample2.class) {\n                if (instance == null) {\n                    instance = new SingletonWithRateLimiterExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void performAction() throws InterruptedException {\n        semaphore.acquire();\n        try {\n            System.out.println(\"Performing rate-limited action\");\n        } finally {\n            semaphore.release();\n        }\n    }\n\n}"
  },
  {
    "type": "SingletonWithRateLimiter",
    "input": "public class SingletonWithRateLimiterExample3 {\n\n    public SingletonWithRateLimiterExample3() {}\n\n}",
    "output": "import java.util.concurrent.Semaphore;\n\npublic class SingletonWithRateLimiterExample3 {\n\n    private static SingletonWithRateLimiterExample3 instance;\n    private static final Semaphore semaphore = new Semaphore(3); // Allow 3 concurrent accesses\n\n    private SingletonWithRateLimiterExample3() {}\n\n    public static SingletonWithRateLimiterExample3 getInstance() {\n        if (instance == null) {\n            synchronized (SingletonWithRateLimiterExample3.class) {\n                if (instance == null) {\n                    instance = new SingletonWithRateLimiterExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void performAction() throws InterruptedException {\n        semaphore.acquire();\n        try {\n            System.out.println(\"Performing rate-limited action\");\n        } finally {\n            semaphore.release();\n        }\n    }\n\n}"
  },
  {
    "type": "SingletonWithRateLimiter",
    "input": "public class SingletonWithRateLimiterExample4 {\n\n    public SingletonWithRateLimiterExample4() {}\n\n}",
    "output": "import java.util.concurrent.Semaphore;\n\npublic class SingletonWithRateLimiterExample4 {\n\n    private static SingletonWithRateLimiterExample4 instance;\n    private static final Semaphore semaphore = new Semaphore(3); // Allow 3 concurrent accesses\n\n    private SingletonWithRateLimiterExample4() {}\n\n    public static SingletonWithRateLimiterExample4 getInstance() {\n        if (instance == null) {\n            synchronized (SingletonWithRateLimiterExample4.class) {\n                if (instance == null) {\n                    instance = new SingletonWithRateLimiterExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void performAction() throws InterruptedException {\n        semaphore.acquire();\n        try {\n            System.out.println(\"Performing rate-limited action\");\n        } finally {\n            semaphore.release();\n        }\n    }\n\n}"
  },
  {
    "type": "SingletonWithRateLimiter",
    "input": "public class SingletonWithRateLimiterExample5 {\n\n    public SingletonWithRateLimiterExample5() {}\n\n}",
    "output": "import java.util.concurrent.Semaphore;\n\npublic class SingletonWithRateLimiterExample5 {\n\n    private static SingletonWithRateLimiterExample5 instance;\n    private static final Semaphore semaphore = new Semaphore(3); // Allow 3 concurrent accesses\n\n    private SingletonWithRateLimiterExample5() {}\n\n    public static SingletonWithRateLimiterExample5 getInstance() {\n        if (instance == null) {\n            synchronized (SingletonWithRateLimiterExample5.class) {\n                if (instance == null) {\n                    instance = new SingletonWithRateLimiterExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void performAction() throws InterruptedException {\n        semaphore.acquire();\n        try {\n            System.out.println(\"Performing rate-limited action\");\n        } finally {\n            semaphore.release();\n        }\n    }\n\n}"
  }
]

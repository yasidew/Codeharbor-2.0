[
  {
    "type": "EagerlyInitializedSingleton",
    "input": "public class EagerlyInitializedSingleton {\n\n    public EagerlyInitializedSingleton() {}\n\n}",
    "output": "public class EagerlyInitializedSingleton {\n\n    private EagerlyInitializedSingleton() {}\n\n    private static final EagerlyInitializedSingleton instance = new EagerlyInitializedSingleton();\n\n    public static EagerlyInitializedSingleton getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazyInitializedSingleton",
    "input": "public class LazyInitializedSingleton {\n\n    public LazyInitializedSingleton() {}\n\n}",
    "output": "public class LazyInitializedSingleton {\n\n    private static LazyInitializedSingleton instance;\n\n    private LazyInitializedSingleton() {}\n\n    public static LazyInitializedSingleton getInstance() {\n        if (instance == null) {\n            instance = new LazyInitializedSingleton();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ThreadSafeSingleton",
    "input": "public class ThreadSafeSingleton {\n\n    public ThreadSafeSingleton() {}\n\n}",
    "output": "public class ThreadSafeSingleton {\n\n    private static ThreadSafeSingleton instance;\n\n    private ThreadSafeSingleton() {}\n\n    public static synchronized ThreadSafeSingleton getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingleton();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class BillPughSingleton {\n\n    public BillPughSingleton() {}\n\n}",
    "output": "public class BillPughSingleton {\n\n    private BillPughSingleton() {}\n\n    private static class SingletonHelper {\n        private static final BillPughSingleton INSTANCE = new BillPughSingleton();\n    }\n\n    public static BillPughSingleton getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "EnumSingleton",
    "input": "public class EnumSingleton {\n\n    public EnumSingleton() {}\n\n}",
    "output": "public enum EnumSingleton {\n    INSTANCE;\n\n    public void someMethod() {\n        // Your method implementation\n    }\n}"
  },
  {
    "type": "EagerlyInitializedStaticBlockSingleton",
    "input": "public class EagerlyInitializedStaticBlockSingleton {\n\n    public EagerlyInitializedStaticBlockSingleton() {}\n\n}",
    "output": "public class EagerlyInitializedStaticBlockSingleton {\n\n    private static EagerlyInitializedStaticBlockSingleton instance;\n\n    private EagerlyInitializedStaticBlockSingleton() {}\n\n    static {\n        try {\n            instance = new EagerlyInitializedStaticBlockSingleton();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    public static EagerlyInitializedStaticBlockSingleton getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EnumSingleton",
    "input": "public class EnumSingleton {\n\n    public EnumSingleton() {}\n\n}",
    "output": "public enum EnumSingleton {\n\n    INSTANCE;\n\n    //other\n}"
  },
  {
    "type": "LazilyInitializedDoubleCheckedLockingSingleton",
    "input": "public class LazilyInitializedDoubleCheckedLockingSingleton {\n\n    public LazilyInitializedDoubleCheckedLockingSingleton() {}\n\n}",
    "output": "public class LazilyInitializedDoubleCheckedLockingSingleton {\n\n    private static volatile LazilyInitializedDoubleCheckedLockingSingleton instance;\n\n    private LazilyInitializedDoubleCheckedLockingSingleton() {}\n\n    public static LazilyInitializedDoubleCheckedLockingSingleton getInstance() {\n        if(instance == null) {\n            synchronized (LazilyInitializedDoubleCheckedLockingSingleton.class) {\n                if(instance == null) {\n                    instance = new LazilyInitializedDoubleCheckedLockingSingleton();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazilyInitializedInnerClassSingleton",
    "input": "public class LazilyInitializedInnerClassSingleton {\n\n    public LazilyInitializedInnerClassSingleton() {}\n\n}",
    "output": "public class LazilyInitializedInnerClassSingleton {\n\n    private LazilyInitializedInnerClassSingleton() {}\n\n    private static class InnerSingletonInitializer {\n        private static final LazilyInitializedInnerClassSingleton INSTANCE = new LazilyInitializedInnerClassSingleton();\n    }\n\n    public static LazilyInitializedInnerClassSingleton getInstance() {\n        return InnerSingletonInitializer.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class LazilyInitializedSingleton {\n\n    public LazilyInitializedSingleton() {}\n\n}",
    "output": "public class LazilyInitializedSingleton {\n\n    private static LazilyInitializedSingleton instance;\n\n    private LazilyInitializedSingleton() {}\n\n    public static synchronized LazilyInitializedSingleton getInstance() {\n        if(instance == null) {\n            instance = new LazilyInitializedSingleton();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "ProtectionAgainstReflectionSingleton",
    "input": "public class ProtectionAgainstReflectionSingleton {\n\n    public ProtectionAgainstReflectionSingleton() {}\n\n}",
    "output": "public class ProtectionAgainstReflectionSingleton {\n\n    private ProtectionAgainstReflectionSingleton() {\n        if(instance != null) {\n            throw new IllegalStateException(\"Singleton already initialized\");\n        }\n    }\n\n    private static final ProtectionAgainstReflectionSingleton instance = new ProtectionAgainstReflectionSingleton();\n\n    public static ProtectionAgainstReflectionSingleton getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SerializableSingleton",
    "input": "public class SerializableSingleton {\n\n    public SerializableSingleton() {}\n\n}",
    "output": "public class SerializableSingleton implements Serializable {\n\n    private static final long serialVersionUID = -6265755052204900542L;\n\n    private static SerializableSingleton instance;\n\n    private SerializableSingleton() {}\n\n    public static synchronized SerializableSingleton getInstance() {\n        if(instance == null) {\n            instance = new SerializableSingleton();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SerializableWithReadResolveSingleton",
    "input": "public class SerializableWithReadResolveSingleton {\n\n    public SerializableWithReadResolveSingleton() {}\n\n}",
    "output": "public class SerializableWithReadResolveSingleton implements Serializable {\n\n    private static final long serialVersionUID = 1911904003687931976L;\n\n    private static SerializableWithReadResolveSingleton instance;\n\n    private SerializableWithReadResolveSingleton() {}\n\n    protected Object readResolve() {\n        return instance;\n    }\n\n    public static synchronized SerializableWithReadResolveSingleton getInstance() {\n        if(instance == null) {\n            instance = new SerializableWithReadResolveSingleton();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class Universe {\n\n    private String name;\n    private int numberOfGalaxies;\n\n    public Universe(String name, int numberOfGalaxies) {\n        this.name = name;\n        this.numberOfGalaxies = numberOfGalaxies;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public int getNumberOfGalaxies() {\n        return this.numberOfGalaxies;\n    }\n\n    public void setName(String aNewName) {\n        this.name = aNewName;\n    }\n\n}\n\npublic class BigBang {\n\n    public BigBang() {}\n\n    public Universe makeUniverse(String name, int numberOfGalaxies) {\n        return new Universe(name, numberOfGalaxies);\n    }\n\n}",
    "output": "public class Universe {\n    private static Universe instance;\n\n    private String name;\n    private int numberOfGalaxies;\n\n    private Universe(String name, int numberOfGalaxies) {\n        this.name = name;\n        this.numberOfGalaxies = numberOfGalaxies;\n    }\n\n    public static Universe getInstance(String name, int numberOfGalaxies) {\n        if (instance == null) {\n            instance = new Universe(name, numberOfGalaxies);\n        }\n        return instance;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public int getNumberOfGalaxies() {\n        return this.numberOfGalaxies;\n    }\n\n    public void setName(String aNewName) {\n        this.name = aNewName;\n    }\n}\n\npublic class BigBang {\n    public BigBang() {}\n\n    public Universe makeUniverse(String name, int numberOfGalaxies) {\n        return Universe.getInstance(name, numberOfGalaxies);\n    }\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class MakeACaptain {\n\n    public MakeACaptain() {}\n\n    public static MakeACaptain getCaptain() {\n        return new MakeACaptain();\n    }\n\n    public static void main(String[] args) {\n        MakeACaptain c1 = new MakeACaptain();\n        MakeACaptain c2 = new MakeACaptain();\n\n        if (c1 == c2) {\n            System.out.println(\"c1 i c2 su iste instance\");\n        } else {\n            System.out.println(\"c1 i c2 nisu iste instance\");\n        }\n    }\n}",
    "output": "public class MakeACaptain {\n    private static MakeACaptain _captain;\n\n    private MakeACaptain() {}\n\n    public static MakeACaptain getCaptain() {\n        if (_captain == null) {\n            _captain = new MakeACaptain();\n            System.out.println(\"Izabran novi kapiten\");\n        } else {\n            System.out.println(\"Vec postoji kapiten\");\n        }\n        return _captain;\n    }\n\n    public static void main(String[] args) {\n        MakeACaptain c1 = MakeACaptain.getCaptain();\n        MakeACaptain c2 = MakeACaptain.getCaptain();\n\n        if (c1 == c2) {\n            System.out.println(\"c1 i c2 su iste instance\");\n        }\n    }\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class printer {\n  public printer() {}\n\n  public static printer getPublicPrinter() {\n    return new printer();\n  }\n\n  public Connection getConnection() {\n    String url = \"jdbc:derby:memory:sample;create=true\";\n    Connection connection = null;\n    try {\n      connection = DriverManager.getConnection(url);\n    } catch (SQLException e) {\n      e.printStackTrace();\n    }\n    return connection;\n  }\n}",
    "output": "public class printer {\n  private static volatile printer publicPrinter;\n  private static volatile Connection connection;\n\n  private printer() {\n    if (publicPrinter != null) {\n      throw new RuntimeException(\"please use publicPrinter\");\n    }\n  }\n\n  public static printer getPublicPrinter() {\n    if (publicPrinter == null) {\n      synchronized (printer.class) {\n        if (publicPrinter == null) {\n          publicPrinter = new printer();\n        }\n      }\n    }\n    return publicPrinter;\n  }\n\n  public Connection getConnection() {\n    if (connection == null) {\n      synchronized (printer.class) {\n        if (connection == null) {\n          String url = \"jdbc:derby:memory:sample;create=true\";\n          try {\n            connection = DriverManager.getConnection(url);\n          } catch (SQLException e) {\n            e.printStackTrace();\n          }\n        }\n      }\n    }\n    return connection;\n  }\n}"
  },
  {
    "type": "LazilyInitializedSingleton",
    "input": "public class Singleton {\n\n    public String str;\n\n    public Singleton() {\n        str = \"This is a string of singleton\";\n    }\n\n    public static Singleton getInstance() {\n        return new Singleton();\n    }\n\n    public static void main(String[] args) {\n        Singleton s = new Singleton();\n\n        Singleton t = new Singleton();\n\n        Singleton u = new Singleton();\n\n        t.str = t.str.toUpperCase();\n\n        System.out.println(\"For Instance of 's': \" + s.str);\n        System.out.println(\"For Instance of 't': \" + t.str);\n        System.out.println(\"For Instance of 'u': \" + u.str);\n    }\n}",
    "output": "public class Singleton {\n\n    public String str;\n\n    private Singleton() {\n        str = \"This is a string of singleton\";\n    }\n\n    private static Singleton singleInstance = null;\n\n    public static Singleton getInstance() {\n        if (singleInstance == null) {\n            singleInstance = new Singleton();\n        }\n        return singleInstance;\n    }\n\n    public static void main(String[] args) {\n        Singleton s = Singleton.getInstance();\n\n        Singleton t = Singleton.getInstance();\n\n        Singleton u = Singleton.getInstance();\n\n        t.str = t.str.toUpperCase();\n\n        System.out.println(\"For Instance of 's': \" + s.str);\n        System.out.println(\"For Instance of 't': \" + t.str);\n        System.out.println(\"For Instance of 'u': \" + u.str);\n    }\n}"
  },
  {
    "type": "DoubleCheckedLockingSingleton",
    "input": "public class DoubleCheckLockSingleton {\n\n    public DoubleCheckLockSingleton() {\n        // public constructor\n    }\n\n    public static DoubleCheckLockSingleton getInstance() {\n        return new DoubleCheckLockSingleton();\n    }\n}",
    "output": "public class DoubleCheckLockSingleton {\n    private static volatile DoubleCheckLockSingleton instance = null;\n\n    private DoubleCheckLockSingleton() {\n        // private constructor\n    }\n\n    public static DoubleCheckLockSingleton getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckLockSingleton.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckLockSingleton();\n                }\n            }\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "EagerSingleton",
    "input": "public class EagerSingleton {\n    public EagerSingleton() {}\n    public static EagerSingleton getInstance() {\n        return new EagerSingleton();\n    }\n}",
    "output": "public class EagerSingleton {\n    private static final EagerSingleton instance = new EagerSingleton();\n\n    private EagerSingleton() {\n        // private constructor\n    }\n\n    public static EagerSingleton getInstance() {\n        return instance;\n    }\n}"
  },
  {
    "type": "EnumSingleton",
    "input": "public class EnumSingleton {\n\n    public EnumSingleton(String info) {\n        // constructor\n    }\n\n    public EnumSingleton getInstance() {\n        return new EnumSingleton(\"property want to initialize at once\");\n    }\n}",
    "output": "public enum EnumSingleton {\n\n    INSTANCE(\"property want to initialize at once\");\n\n    private String info;\n\n    private EnumSingleton(String info) {\n        this.info = info;\n    }\n\n    public EnumSingleton getInstance() {\n        return INSTANCE;\n    }\n}"
  },
  {
    "type": "LazySingleton",
    "input": "public class LazySingleton {\n    public LazySingleton() {}\n    public static LazySingleton getInstance() {\n        return new LazySingleton();\n    }\n}",
    "output": "public class LazySingleton {\n    private static LazySingleton instance;\n\n    private LazySingleton() {\n        // private constructor\n    }\n\n    public static LazySingleton getInstance() {\n        if (instance == null) {\n            instance = new LazySingleton();\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "BillPughSingleton",
    "input": "public class Singleton {\n    public Singleton() {}\n    public static Singleton getInstance() {\n        return new Singleton();\n    }\n}",
    "output": "public class Singleton {\n\n    private Singleton() {\n    }\n\n    private static class SingletonHelper {\n        private static final Singleton INSTANCE = new Singleton();\n    }\n\n    public static Singleton getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n}"
  },
  {
    "type": "StaticBlockSingleton",
    "input": "public class StaticBlockSingleton {\n    public StaticBlockSingleton() {}\n}",
    "output": "public class StaticBlockSingleton {\n    public static StaticBlockSingleton instance;\n\n    private StaticBlockSingleton() {\n        // private constructor\n    }\n\n    static {\n        instance = new StaticBlockSingleton();\n    }\n}"
  },
  {
    "type": "ThreadSafeDoubleCheckedLockingSingleton",
    "input": "public class ThreadSafeSingle {\n    public ThreadSafeSingle() {}\n    public static ThreadSafeSingle getInstance() {\n        return new ThreadSafeSingle();\n    }\n}",
    "output": "public class ThreadSafeSingle {\n    private static volatile ThreadSafeSingle instance = null;\n\n    private ThreadSafeSingle() {}\n\n    public static ThreadSafeSingle getInstance() {\n        if (instance == null) {\n            synchronized (ThreadSafeSingle.class) {\n                if (instance == null) {\n                    instance = new ThreadSafeSingle();\n                }\n            }\n        }\n        return instance;\n    }\n}"
  },
  {
    "type": "OptimizedLazySingleton",
    "input": "public class YourObject {\n    public YourObject() {}\n    public static YourObject getInstance() {\n        return new YourObject();\n    }\n}",
    "output": "public class YourObject {\n\n    private static final Object lock = new Object();\n    private static volatile YourObject instance;\n\n    public static YourObject getInstance() {\n        YourObject r = instance;\n        if (r == null) {\n            synchronized (lock) {\n                r = instance;\n                if (r == null) {\n                    r = new YourObject();\n                    instance = r;\n                }\n            }\n        }\n        return r;\n    }\n}"
  },
  {
    "type": "LazySingleton",
    "input": "public class Singleton {\n    \n    private Singleton() {\n        // private constructor\n    }\n\n    public void mostrarMensagem() {\n        System.out.println(\"Exemplo de Singleton!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Singleton instancia = new Singleton();\n        instancia.mostrarMensagem();\n    }\n}",
    "output": "public class Singleton {\n    \n    private static Singleton instanciaUnica;\n\n    private Singleton() {\n        // private constructor\n    }\n\n    public static Singleton getInstancia() {\n        if (instanciaUnica == null) {\n            instanciaUnica = new Singleton();\n        }\n        return instanciaUnica;\n    }\n\n    public void mostrarMensagem() {\n        System.out.println(\"Exemplo de Singleton!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Singleton instancia = Singleton.getInstancia();\n        instancia.mostrarMensagem();\n    }\n}"
  },
  {
    "type": "ThreadSafeSingletonWithInitializationOnDemand",
    "input": "public class ThreadSafeSingleton {\n\n    public ThreadSafeSingleton() {}\n\n}",
    "output": "public class ThreadSafeSingleton {\n\n    private ThreadSafeSingleton() {}\n\n    private static class SingletonHelper {\n        private static final ThreadSafeSingleton INSTANCE = new ThreadSafeSingleton();\n    }\n\n    public static ThreadSafeSingleton getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "SynchronizedSingleton",
    "input": "public class SynchronizedSingleton {\n\n    public SynchronizedSingleton() {}\n\n}",
    "output": "public class SynchronizedSingleton {\n\n    private static SynchronizedSingleton instance;\n\n    private SynchronizedSingleton() {}\n\n    public static synchronized SynchronizedSingleton getInstance() {\n        if (instance == null) {\n            instance = new SynchronizedSingleton();\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithCounter",
    "input": "public class LazySingletonWithCounter {\n\n    public LazySingletonWithCounter() {}\n\n    public static LazySingletonWithCounter getInstance() {\n        return new LazySingletonWithCounter();\n    }\n\n    public int getInstanceCount() {\n        return 0;\n    }\n\n}",
    "output": "public class LazySingletonWithCounter {\n\n    private static LazySingletonWithCounter instance;\n    private static int counter;\n\n    private LazySingletonWithCounter() {\n        counter++;\n    }\n\n    public static LazySingletonWithCounter getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithCounter();\n        }\n        return instance;\n    }\n\n    public int getInstanceCount() {\n        return counter;\n    }\n\n}"
  },
  {
    "type": "EagerSingletonWithLogging",
    "input": "public class EagerSingletonWithLogging {\n\n    public EagerSingletonWithLogging() {}\n\n    public static EagerSingletonWithLogging getInstance() {\n        return new EagerSingletonWithLogging();\n    }\n\n}",
    "output": "public class EagerSingletonWithLogging {\n\n    private static final EagerSingletonWithLogging instance = new EagerSingletonWithLogging();\n\n    private EagerSingletonWithLogging() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    public static EagerSingletonWithLogging getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "EnumSingletonWithData",
    "input": "public class EnumSingletonWithData {\n\n    public EnumSingletonWithData(String data) {}\n\n    public static EnumSingletonWithData getInstance() {\n        return new EnumSingletonWithData(\"default\");\n    }\n\n}",
    "output": "public enum EnumSingletonWithData {\n\n    INSTANCE(\"default\");\n\n    private String data;\n\n    private EnumSingletonWithData(String data) {\n        this.data = data;\n    }\n\n    public String getData() {\n        return data;\n    }\n\n    public void setData(String data) {\n        this.data = data;\n    }\n\n}"
  },
  {
    "type": "StaticBlockSingletonWithErrorHandling",
    "input": "public class StaticBlockSingletonWithErrorHandling {\n\n    public StaticBlockSingletonWithErrorHandling() {}\n\n}",
    "output": "public class StaticBlockSingletonWithErrorHandling {\n\n    private static StaticBlockSingletonWithErrorHandling instance;\n\n    private StaticBlockSingletonWithErrorHandling() {}\n\n    static {\n        try {\n            instance = new StaticBlockSingletonWithErrorHandling();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error creating singleton instance\", e);\n        }\n    }\n\n    public static StaticBlockSingletonWithErrorHandling getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithReadResolve",
    "input": "public class LazySingletonWithReadResolve {\n\n    public LazySingletonWithReadResolve() {}\n\n    public static LazySingletonWithReadResolve getInstance() {\n        return new LazySingletonWithReadResolve();\n    }\n\n}",
    "output": "public class LazySingletonWithReadResolve implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static LazySingletonWithReadResolve instance;\n\n    private LazySingletonWithReadResolve() {}\n\n    public static LazySingletonWithReadResolve getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithReadResolve();\n        }\n        return instance;\n    }\n\n    protected Object readResolve() {\n        return getInstance();\n    }\n\n}"
  },
  {
    "type": "SingletonWithEnumAndMethod",
    "input": "public class SingletonWithEnumAndMethod {\n\n    public SingletonWithEnumAndMethod() {}\n\n    public static SingletonWithEnumAndMethod getInstance() {\n        return new SingletonWithEnumAndMethod();\n    }\n\n}",
    "output": "public enum SingletonWithEnumAndMethod {\n\n    INSTANCE;\n\n    public void performAction() {\n        System.out.println(\"Action performed by SingletonWithEnumAndMethod\");\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalSingleton {\n\n    public ThreadLocalSingleton() {}\n\n}",
    "output": "public class ThreadLocalSingleton {\n\n    private static final ThreadLocal<ThreadLocalSingleton> instance = ThreadLocal.withInitial(ThreadLocalSingleton::new);\n\n    private ThreadLocalSingleton() {}\n\n    public static ThreadLocalSingleton getInstance() {\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "ParameterizedLazySingleton",
    "input": "public class ParameterizedLazySingleton {\n\n    public ParameterizedLazySingleton(String param) {}\n\n    public static ParameterizedLazySingleton getInstance() {\n        return new ParameterizedLazySingleton(\"default\");\n    }\n\n}",
    "output": "public class ParameterizedLazySingleton {\n\n    private static ParameterizedLazySingleton instance;\n    private String param;\n\n    private ParameterizedLazySingleton(String param) {\n        this.param = param;\n    }\n\n    public static synchronized ParameterizedLazySingleton getInstance(String param) {\n        if (instance == null) {\n            instance = new ParameterizedLazySingleton(param);\n        }\n        return instance;\n    }\n\n    public String getParam() {\n        return param;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithInitializationCount",
    "input": "public class LazySingletonWithInitializationCount {\n\n    public LazySingletonWithInitializationCount() {}\n\n}",
    "output": "public class LazySingletonWithInitializationCount {\n\n    private static LazySingletonWithInitializationCount instance;\n    private static int initializationCount = 0;\n\n    private LazySingletonWithInitializationCount() {\n        initializationCount++;\n    }\n\n    public static LazySingletonWithInitializationCount getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithInitializationCount();\n        }\n        return instance;\n    }\n\n    public static int getInitializationCount() {\n        return initializationCount;\n    }\n\n}"
  },
  {
    "type": "MultithreadedLazySingleton",
    "input": "public class MultithreadedLazySingleton {\n\n    public MultithreadedLazySingleton() {}\n\n}",
    "output": "public class MultithreadedLazySingleton {\n\n    private static MultithreadedLazySingleton instance;\n\n    private MultithreadedLazySingleton() {}\n\n    public static MultithreadedLazySingleton getInstance() {\n        synchronized (MultithreadedLazySingleton.class) {\n            if (instance == null) {\n                instance = new MultithreadedLazySingleton();\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithOptionalInstance",
    "input": "public class LazySingletonWithOptionalInstance {\n\n    public LazySingletonWithOptionalInstance() {}\n\n}",
    "output": "import java.util.Optional;\n\npublic class LazySingletonWithOptionalInstance {\n\n    private static LazySingletonWithOptionalInstance instance;\n\n    private LazySingletonWithOptionalInstance() {}\n\n    public static Optional<LazySingletonWithOptionalInstance> getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithOptionalInstance();\n        }\n        return Optional.of(instance);\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithDynamicConfig",
    "input": "public class LazySingletonWithDynamicConfig {\n\n    public LazySingletonWithDynamicConfig(String config) {}\n\n}",
    "output": "public class LazySingletonWithDynamicConfig {\n\n    private static LazySingletonWithDynamicConfig instance;\n    private String config;\n\n    private LazySingletonWithDynamicConfig(String config) {\n        this.config = config;\n    }\n\n    public static LazySingletonWithDynamicConfig getInstance(String config) {\n        if (instance == null) {\n            instance = new LazySingletonWithDynamicConfig(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "EagerSingletonWithStartupLogging",
    "input": "public class EagerSingletonWithStartupLogging {\n\n    public EagerSingletonWithStartupLogging() {}\n\n}",
    "output": "public class EagerSingletonWithStartupLogging {\n\n    private static final EagerSingletonWithStartupLogging instance = new EagerSingletonWithStartupLogging();\n\n    private EagerSingletonWithStartupLogging() {\n        System.out.println(\"Singleton initialized during class loading\");\n    }\n\n    public static EagerSingletonWithStartupLogging getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "DoubleCheckedLockingWithLazyInitialization",
    "input": "public class DoubleCheckedLockingWithLazyInitialization {\n\n    public DoubleCheckedLockingWithLazyInitialization() {}\n\n}",
    "output": "public class DoubleCheckedLockingWithLazyInitialization {\n\n    private static volatile DoubleCheckedLockingWithLazyInitialization instance;\n\n    private DoubleCheckedLockingWithLazyInitialization() {}\n\n    public static DoubleCheckedLockingWithLazyInitialization getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingWithLazyInitialization.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingWithLazyInitialization();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
  },
  {
    "type": "SingletonWithWeakReference",
    "input": "public class SingletonWithWeakReference {\n\n    public SingletonWithWeakReference() {}\n\n}",
    "output": "import java.lang.ref.WeakReference;\n\npublic class SingletonWithWeakReference {\n\n    private static WeakReference<SingletonWithWeakReference> instance;\n\n    private SingletonWithWeakReference() {}\n\n    public static SingletonWithWeakReference getInstance() {\n        if (instance == null || instance.get() == null) {\n            instance = new WeakReference<>(new SingletonWithWeakReference());\n        }\n        return instance.get();\n    }\n\n}"
  },
  {
    "type": "StaticBlockWithInstanceValidation",
    "input": "public class StaticBlockWithInstanceValidation {\n\n    public StaticBlockWithInstanceValidation() {}\n\n}",
    "output": "public class StaticBlockWithInstanceValidation {\n\n    private static StaticBlockWithInstanceValidation instance;\n\n    private StaticBlockWithInstanceValidation() {}\n\n    static {\n        try {\n            instance = new StaticBlockWithInstanceValidation();\n        } catch (Exception e) {\n            System.err.println(\"Error during instance initialization: \" + e.getMessage());\n        }\n    }\n\n    public static StaticBlockWithInstanceValidation getInstance() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithPropertiesFile",
    "input": "public class LazySingletonWithPropertiesFile {\n\n    public LazySingletonWithPropertiesFile() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class LazySingletonWithPropertiesFile {\n\n    private static LazySingletonWithPropertiesFile instance;\n    private Properties properties;\n\n    private LazySingletonWithPropertiesFile() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LazySingletonWithPropertiesFile getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithPropertiesFile();\n        }\n        return instance;\n    }\n\n    public Properties getProperties() {\n        return properties;\n    }\n\n}"
  },
  {
    "type": "SingletonWithCache",
    "input": "public class SingletonWithCache {\n\n    public SingletonWithCache() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithCache {\n\n    private static SingletonWithCache instance;\n    private Map<String, String> cache;\n\n    private SingletonWithCache() {\n        cache = new HashMap<>();\n    }\n\n    public static SingletonWithCache getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCache();\n        }\n        return instance;\n    }\n\n    public void putInCache(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String getFromCache(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "SingletonWithImmutableData",
    "input": "public class SingletonWithImmutableData {\n\n    public SingletonWithImmutableData(String data) {}\n\n}",
    "output": "public class SingletonWithImmutableData {\n\n    private static SingletonWithImmutableData instance;\n    private final String data;\n\n    private SingletonWithImmutableData(String data) {\n        this.data = data;\n    }\n\n    public static SingletonWithImmutableData getInstance(String data) {\n        if (instance == null) {\n            instance = new SingletonWithImmutableData(data);\n        }\n        return instance;\n    }\n\n    public String getData() {\n        return data;\n    }\n\n}"
  },
  {
    "type": "SingletonWithBackgroundTask",
    "input": "public class SingletonWithBackgroundTask {\n\n    public SingletonWithBackgroundTask() {}\n\n}",
    "output": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingletonWithBackgroundTask {\n\n    private static SingletonWithBackgroundTask instance;\n    private ExecutorService executorService;\n\n    private SingletonWithBackgroundTask() {\n        executorService = Executors.newSingleThreadExecutor();\n    }\n\n    public static SingletonWithBackgroundTask getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithBackgroundTask();\n        }\n        return instance;\n    }\n\n    public void runTask(Runnable task) {\n        executorService.submit(task);\n    }\n\n}"
  },
  {
    "type": "ClusteredSingleton",
    "input": "public class ClusteredSingleton {\n\n    public ClusteredSingleton() {}\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class ClusteredSingleton {\n\n    private static final ConcurrentMap<String, ClusteredSingleton> instances = new ConcurrentHashMap<>();\n\n    private ClusteredSingleton() {}\n\n    public static ClusteredSingleton getInstance(String clusterKey) {\n        return instances.computeIfAbsent(clusterKey, key -> new ClusteredSingleton());\n    }\n\n}"
  },
  {
    "type": "SingletonWithStateTracking",
    "input": "public class SingletonWithStateTracking {\n\n    public SingletonWithStateTracking() {}\n\n}",
    "output": "public class SingletonWithStateTracking {\n\n    private static SingletonWithStateTracking instance;\n    private int state;\n\n    private SingletonWithStateTracking() {\n        state = 0;\n    }\n\n    public static SingletonWithStateTracking getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithStateTracking();\n        }\n        return instance;\n    }\n\n    public void incrementState() {\n        state++;\n    }\n\n    public int getState() {\n        return state;\n    }\n\n}"
  },
  {
    "type": "EnvironmentBasedSingleton",
    "input": "public class EnvironmentBasedSingleton {\n\n    public EnvironmentBasedSingleton() {}\n\n}",
    "output": "public class EnvironmentBasedSingleton {\n\n    private static EnvironmentBasedSingleton instance;\n    private String environment;\n\n    private EnvironmentBasedSingleton(String environment) {\n        this.environment = environment;\n    }\n\n    public static EnvironmentBasedSingleton getInstance(String environment) {\n        if (instance == null) {\n            instance = new EnvironmentBasedSingleton(environment);\n        }\n        return instance;\n    }\n\n    public String getEnvironment() {\n        return environment;\n    }\n\n}"
  },
  {
    "type": "SingletonWithThreadPool",
    "input": "public class SingletonWithThreadPool {\n\n    public SingletonWithThreadPool() {}\n\n}",
    "output": "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingletonWithThreadPool {\n\n    private static SingletonWithThreadPool instance;\n    private ExecutorService threadPool;\n\n    private SingletonWithThreadPool() {\n        threadPool = Executors.newFixedThreadPool(5);\n    }\n\n    public static SingletonWithThreadPool getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithThreadPool();\n        }\n        return instance;\n    }\n\n    public ExecutorService getThreadPool() {\n        return threadPool;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMultitonSupport",
    "input": "public class SingletonWithMultitonSupport {\n\n    public SingletonWithMultitonSupport() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SingletonWithMultitonSupport {\n\n    private static Map<String, SingletonWithMultitonSupport> instances = new HashMap<>();\n\n    private SingletonWithMultitonSupport() {}\n\n    public static SingletonWithMultitonSupport getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new SingletonWithMultitonSupport());\n    }\n\n}"
  },
  {
    "type": "SingletonWithObserverPattern",
    "input": "public class SingletonWithObserverPattern {\n\n    public SingletonWithObserverPattern() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithObserverPattern {\n\n    private static SingletonWithObserverPattern instance;\n    private List<Observer> observers;\n\n    private SingletonWithObserverPattern() {\n        observers = new ArrayList<>();\n    }\n\n    public static SingletonWithObserverPattern getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithObserverPattern();\n        }\n        return instance;\n    }\n\n    public void addObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyObservers() {\n        for (Observer observer : observers) {\n            observer.update();\n        }\n    }\n\n}\n\ninterface Observer {\n    void update();\n}"
  },
  {
    "type": "SingletonWithLifecycleCallbacks",
    "input": "public class SingletonWithLifecycleCallbacks {\n\n    public SingletonWithLifecycleCallbacks() {}\n\n}",
    "output": "public class SingletonWithLifecycleCallbacks {\n\n    private static SingletonWithLifecycleCallbacks instance;\n\n    private SingletonWithLifecycleCallbacks() {}\n\n    public static SingletonWithLifecycleCallbacks getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithLifecycleCallbacks();\n            onCreate();\n        }\n        return instance;\n    }\n\n    public static void onCreate() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    public static void onDestroy() {\n        System.out.println(\"Singleton instance destroyed\");\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionSingleton",
    "input": "public class DatabaseConnection {\n\n    public DatabaseConnection() {}\n\n    public Connection connect() {\n        return null;\n    }\n\n}",
    "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class DatabaseConnection {\n\n    private static DatabaseConnection instance;\n    private Connection connection;\n\n    private DatabaseConnection() {\n        try {\n            connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db\", \"user\", \"password\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static DatabaseConnection getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnection();\n        }\n        return instance;\n    }\n\n    public Connection getConnection() {\n        return connection;\n    }\n\n}"
  },
  {
    "type": "LoggingSingleton",
    "input": "public class Logger {\n\n    public Logger() {}\n\n    public void log(String message) {\n        System.out.println(message);\n    }\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class Logger {\n\n    private static Logger instance;\n    private FileWriter fileWriter;\n\n    private Logger() {\n        try {\n            fileWriter = new FileWriter(\"app.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static Logger getInstance() {\n        if (instance == null) {\n            instance = new Logger();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "ConfigurationSingleton",
    "input": "public class Configuration {\n\n    public Configuration() {}\n\n    public String getConfig(String key) {\n        return null;\n    }\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class Configuration {\n\n    private static Configuration instance;\n    private Properties properties;\n\n    private Configuration() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static Configuration getInstance() {\n        if (instance == null) {\n            instance = new Configuration();\n        }\n        return instance;\n    }\n\n    public String getConfig(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ThreadLocalSingleton",
    "input": "public class ThreadLocalInstance {\n\n    public ThreadLocalInstance() {}\n\n}",
    "output": "public class ThreadLocalInstance {\n\n    private static final ThreadLocal<ThreadLocalInstance> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalInstance::new);\n\n    private ThreadLocalInstance() {}\n\n    public static ThreadLocalInstance getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
  },
  {
    "type": "MultitonSingleton",
    "input": "public class Multiton {\n\n    public Multiton() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class Multiton {\n\n    private static final Map<String, Multiton> instances = new HashMap<>();\n\n    private Multiton() {}\n\n    public static Multiton getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new Multiton());\n    }\n\n}"
  },
  {
    "type": "SingletonWithSerialization",
    "input": "public class SerializableSingleton {\n\n    public SerializableSingleton() {}\n\n}",
    "output": "import java.io.Serializable;\n\npublic class SerializableSingleton implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static SerializableSingleton instance;\n\n    private SerializableSingleton() {}\n\n    public static SerializableSingleton getInstance() {\n        if (instance == null) {\n            instance = new SerializableSingleton();\n        }\n        return instance;\n    }\n\n    protected Object readResolve() {\n        return instance;\n    }\n\n}"
  },
  {
    "type": "LazyLoadingSingleton",
    "input": "public class LazyLoadingSingleton {\n\n    public LazyLoadingSingleton() {}\n\n}",
    "output": "public class LazyLoadingSingleton {\n\n    private LazyLoadingSingleton() {}\n\n    private static class Holder {\n        private static final LazyLoadingSingleton INSTANCE = new LazyLoadingSingleton();\n    }\n\n    public static LazyLoadingSingleton getInstance() {\n        return Holder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "SingletonWithObserverPattern",
    "input": "public class ObserverSingleton {\n\n    public ObserverSingleton() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class ObserverSingleton {\n\n    private static ObserverSingleton instance;\n    private List<Observer> observers;\n\n    private ObserverSingleton() {\n        observers = new ArrayList<>();\n    }\n\n    public static ObserverSingleton getInstance() {\n        if (instance == null) {\n            instance = new ObserverSingleton();\n        }\n        return instance;\n    }\n\n    public void addObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyObservers(String message) {\n        for (Observer observer : observers) {\n            observer.update(message);\n        }\n    }\n\n}\n\ninterface Observer {\n    void update(String message);\n}"
  },
  {
    "type": "SingletonWithStateTracking",
    "input": "public class StatefulSingleton {\n\n    public StatefulSingleton() {}\n\n}",
    "output": "public class StatefulSingleton {\n\n    private static StatefulSingleton instance;\n    private int state;\n\n    private StatefulSingleton() {\n        state = 0;\n    }\n\n    public static StatefulSingleton getInstance() {\n        if (instance == null) {\n            instance = new StatefulSingleton();\n        }\n        return instance;\n    }\n\n    public void incrementState() {\n        state++;\n    }\n\n    public int getState() {\n        return state;\n    }\n\n}"
  },
  {
    "type": "SingletonWithDynamicConfiguration",
    "input": "public class DynamicConfigSingleton {\n\n    public DynamicConfigSingleton() {}\n\n}",
    "output": "public class DynamicConfigSingleton {\n\n    private static DynamicConfigSingleton instance;\n    private String config;\n\n    private DynamicConfigSingleton(String config) {\n        this.config = config;\n    }\n\n    public static DynamicConfigSingleton getInstance(String config) {\n        if (instance == null) {\n            instance = new DynamicConfigSingleton(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
  },
  {
    "type": "EventDrivenSingleton",
    "input": "public class EventHandler {\n\n    public EventHandler() {}\n\n    public void handleEvent(String event) {\n        System.out.println(event);\n    }\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EventHandler {\n\n    private static EventHandler instance;\n    private List<String> eventQueue;\n\n    private EventHandler() {\n        eventQueue = new ArrayList<>();\n    }\n\n    public static EventHandler getInstance() {\n        if (instance == null) {\n            instance = new EventHandler();\n        }\n        return instance;\n    }\n\n    public void handleEvent(String event) {\n        eventQueue.add(event);\n        System.out.println(\"Event handled: \" + event);\n    }\n\n    public List<String> getEventQueue() {\n        return eventQueue;\n    }\n\n}"
  },
  {
    "type": "SessionManagerSingleton",
    "input": "public class SessionManager {\n\n    public SessionManager() {}\n\n    public void createSession(String user) {\n        System.out.println(\"Session created for: \" + user);\n    }\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SessionManager {\n\n    private static SessionManager instance;\n    private Map<String, String> activeSessions;\n\n    private SessionManager() {\n        activeSessions = new HashMap<>();\n    }\n\n    public static SessionManager getInstance() {\n        if (instance == null) {\n            instance = new SessionManager();\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        activeSessions.put(user, \"SessionActive\");\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return activeSessions.containsKey(user);\n    }\n\n}"
  },
  {
    "type": "ConfigurationManagerSingleton",
    "input": "public class ConfigurationManager {\n\n    public ConfigurationManager() {}\n\n}",
    "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationManager {\n\n    private static ConfigurationManager instance;\n    private Properties properties;\n\n    private ConfigurationManager() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"app_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationManager getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationManager();\n        }\n        return instance;\n    }\n\n    public String getConfigValue(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
  },
  {
    "type": "ResourcePoolSingleton",
    "input": "public class ResourcePool {\n\n    public ResourcePool() {}\n\n    public void allocateResource(String resourceName) {\n        System.out.println(\"Allocated: \" + resourceName);\n    }\n\n}",
    "output": "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class ResourcePool {\n\n    private static ResourcePool instance;\n    private Queue<String> availableResources;\n\n    private ResourcePool() {\n        availableResources = new LinkedList<>();\n        availableResources.add(\"Resource1\");\n        availableResources.add(\"Resource2\");\n    }\n\n    public static ResourcePool getInstance() {\n        if (instance == null) {\n            instance = new ResourcePool();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return availableResources.poll();\n    }\n\n    public void releaseResource(String resource) {\n        availableResources.add(resource);\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class MetricsCollector {\n\n    public MetricsCollector() {}\n\n    public void collectMetric(String metric) {\n        System.out.println(metric);\n    }\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class MetricsCollector {\n\n    private static MetricsCollector instance;\n    private List<String> collectedMetrics;\n\n    private MetricsCollector() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static MetricsCollector getInstance() {\n        if (instance == null) {\n            instance = new MetricsCollector();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n    }\n\n    public List<String> getMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "LazyLoadedSingletonWithLogging",
    "input": "public class LoggingSingleton {\n\n    public LoggingSingleton() {}\n\n}",
    "output": "public class LoggingSingleton {\n\n    private LoggingSingleton() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    private static class SingletonHolder {\n        private static final LoggingSingleton INSTANCE = new LoggingSingleton();\n    }\n\n    public static LoggingSingleton getInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n\n}"
  },
  {
    "type": "PriorityBasedSingleton",
    "input": "public class PrioritySingleton {\n\n    public PrioritySingleton() {}\n\n}",
    "output": "import java.util.PriorityQueue;\n\npublic class PrioritySingleton {\n\n    private static PrioritySingleton instance;\n    private PriorityQueue<Integer> priorityQueue;\n\n    private PrioritySingleton() {\n        priorityQueue = new PriorityQueue<>();\n    }\n\n    public static PrioritySingleton getInstance() {\n        if (instance == null) {\n            instance = new PrioritySingleton();\n        }\n        return instance;\n    }\n\n    public void addPriority(int priority) {\n        priorityQueue.add(priority);\n    }\n\n    public int getHighestPriority() {\n        return priorityQueue.poll();\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithOnDemandInitialization",
    "input": "public class OnDemandSingleton {\n\n    public OnDemandSingleton() {}\n\n}",
    "output": "public class OnDemandSingleton {\n\n    private static OnDemandSingleton instance;\n\n    private OnDemandSingleton() {}\n\n    public static OnDemandSingleton getInstance() {\n        if (instance == null) {\n            instance = new OnDemandSingleton();\n        }\n        return instance;\n    }\n\n    public String fetchData() {\n        return \"Fetched on-demand data\";\n    }\n\n}"
  },
  {
    "type": "SingletonWithLifecycleHooks",
    "input": "public class LifecycleSingleton {\n\n    public LifecycleSingleton() {}\n\n}",
    "output": "public class LifecycleSingleton {\n\n    private static LifecycleSingleton instance;\n\n    private LifecycleSingleton() {\n        onCreate();\n    }\n\n    public static LifecycleSingleton getInstance() {\n        if (instance == null) {\n            instance = new LifecycleSingleton();\n        }\n        return instance;\n    }\n\n    private void onCreate() {\n        System.out.println(\"LifecycleSingleton created\");\n    }\n\n    public void onDestroy() {\n        System.out.println(\"LifecycleSingleton destroyed\");\n        instance = null;\n    }\n\n}"
  },
  {
    "type": "LoggingManagerSingleton",
    "input": "public class LoggingManager {\n\n    public LoggingManager() {}\n\n    public void logMessage(String message) {\n        System.out.println(message);\n    }\n\n}",
    "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggingManager {\n\n    private static LoggingManager instance;\n    private FileWriter fileWriter;\n\n    private LoggingManager() {\n        try {\n            fileWriter = new FileWriter(\"logfile.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggingManager getInstance() {\n        if (instance == null) {\n            instance = new LoggingManager();\n        }\n        return instance;\n    }\n\n    public void logMessage(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
  },
  {
    "type": "ResourceTrackerSingleton",
    "input": "public class ResourceTracker {\n\n    public ResourceTracker() {}\n\n    public void track(String resource) {\n        System.out.println(\"Tracking: \" + resource);\n    }\n\n}",
    "output": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class ResourceTracker {\n\n    private static ResourceTracker instance;\n    private Set<String> trackedResources;\n\n    private ResourceTracker() {\n        trackedResources = new HashSet<>();\n    }\n\n    public static ResourceTracker getInstance() {\n        if (instance == null) {\n            instance = new ResourceTracker();\n        }\n        return instance;\n    }\n\n    public void track(String resource) {\n        trackedResources.add(resource);\n        System.out.println(\"Tracking: \" + resource);\n    }\n\n    public boolean isTracked(String resource) {\n        return trackedResources.contains(resource);\n    }\n\n}"
  },
  {
    "type": "TaskQueueSingleton",
    "input": "public class TaskQueue {\n\n    public TaskQueue() {}\n\n}",
    "output": "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class TaskQueue {\n\n    private static TaskQueue instance;\n    private Queue<String> tasks;\n\n    private TaskQueue() {\n        tasks = new LinkedList<>();\n    }\n\n    public static TaskQueue getInstance() {\n        if (instance == null) {\n            instance = new TaskQueue();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        tasks.add(task);\n    }\n\n    public String getNextTask() {\n        return tasks.poll();\n    }\n\n}"
  },
  {
    "type": "ThreadLocalLoggerSingleton",
    "input": "public class ThreadLocalLogger {\n\n    public ThreadLocalLogger() {}\n\n    public void log(String message) {\n        System.out.println(message);\n    }\n\n}",
    "output": "public class ThreadLocalLogger {\n\n    private static final ThreadLocal<ThreadLocalLogger> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalLogger::new);\n\n    private ThreadLocalLogger() {}\n\n    public static ThreadLocalLogger getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public void log(String message) {\n        System.out.println(Thread.currentThread().getName() + \": \" + message);\n    }\n\n}"
  },
  {
    "type": "ConfigurationCacheSingleton",
    "input": "public class ConfigurationCache {\n\n    public ConfigurationCache() {}\n\n    public String get(String key) {\n        return null;\n    }\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ConfigurationCache {\n\n    private static ConfigurationCache instance;\n    private Map<String, String> cache;\n\n    private ConfigurationCache() {\n        cache = new HashMap<>();\n    }\n\n    public static ConfigurationCache getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationCache();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "EventDispatcherSingleton",
    "input": "public class EventDispatcher {\n\n    public EventDispatcher() {}\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EventDispatcher {\n\n    private static EventDispatcher instance;\n    private List<String> events;\n\n    private EventDispatcher() {\n        events = new ArrayList<>();\n    }\n\n    public static EventDispatcher getInstance() {\n        if (instance == null) {\n            instance = new EventDispatcher();\n        }\n        return instance;\n    }\n\n    public void dispatch(String event) {\n        events.add(event);\n        System.out.println(\"Event dispatched: \" + event);\n    }\n\n    public List<String> getDispatchedEvents() {\n        return events;\n    }\n\n}"
  },
  {
    "type": "UserManagerSingleton",
    "input": "public class UserManager {\n\n    public UserManager() {}\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class UserManager {\n\n    private static UserManager instance;\n    private Map<String, String> users;\n\n    private UserManager() {\n        users = new HashMap<>();\n    }\n\n    public static UserManager getInstance() {\n        if (instance == null) {\n            instance = new UserManager();\n        }\n        return instance;\n    }\n\n    public void addUser(String id, String name) {\n        users.put(id, name);\n    }\n\n    public String getUser(String id) {\n        return users.get(id);\n    }\n\n}"
  },
  {
    "type": "StatefulLoggerSingleton",
    "input": "public class StatefulLogger {\n\n    public StatefulLogger() {}\n\n}",
    "output": "public class StatefulLogger {\n\n    private static StatefulLogger instance;\n    private int logCount;\n\n    private StatefulLogger() {\n        logCount = 0;\n    }\n\n    public static StatefulLogger getInstance() {\n        if (instance == null) {\n            instance = new StatefulLogger();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        logCount++;\n        System.out.println(logCount + \": \" + message);\n    }\n\n    public int getLogCount() {\n        return logCount;\n    }\n\n}"
  },
  {
    "type": "NotificationManagerSingleton",
    "input": "public class NotificationManager {\n\n    public NotificationManager() {}\n\n    public void notify(String message) {\n        System.out.println(message);\n    }\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationManager {\n\n    private static NotificationManager instance;\n    private List<String> notifications;\n\n    private NotificationManager() {\n        notifications = new ArrayList<>();\n    }\n\n    public static NotificationManager getInstance() {\n        if (instance == null) {\n            instance = new NotificationManager();\n        }\n        return instance;\n    }\n\n    public void notify(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}"
  },
  {
    "type": "LazySingletonWithRetry",
    "input": "public class RetryManager {\n\n    public RetryManager() {}\n\n    public void retry(String task) {\n        System.out.println(\"Retrying: \" + task);\n    }\n\n}",
    "output": "public class RetryManager {\n\n    private static RetryManager instance;\n    private int retryCount;\n\n    private RetryManager() {\n        retryCount = 0;\n    }\n\n    public static RetryManager getInstance() {\n        if (instance == null) {\n            instance = new RetryManager();\n        }\n        return instance;\n    }\n\n    public void retry(String task) {\n        retryCount++;\n        System.out.println(\"Retrying task: \" + task + \" - Retry Count: \" + retryCount);\n    }\n\n}"
  },
  {
    "type": "DatabaseConnectionPoolSingleton",
    "input": "public class ConnectionPool {\n\n    public ConnectionPool() {}\n\n    public void addConnection(String conn) {\n        System.out.println(\"Adding: \" + conn);\n    }\n\n}",
    "output": "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class ConnectionPool {\n\n    private static ConnectionPool instance;\n    private Queue<String> connectionPool;\n\n    private ConnectionPool() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static ConnectionPool getInstance() {\n        if (instance == null) {\n            instance = new ConnectionPool();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}"
  },
  {
    "type": "CacheManagerSingleton",
    "input": "public class CacheManager {\n\n    public CacheManager() {}\n\n    public void put(String key, String value) {\n        System.out.println(\"Put: \" + key + \" -> \" + value);\n    }\n\n}",
    "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class CacheManager {\n\n    private static CacheManager instance;\n    private Map<String, String> cache;\n\n    private CacheManager() {\n        cache = new HashMap<>();\n    }\n\n    public static CacheManager getInstance() {\n        if (instance == null) {\n            instance = new CacheManager();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
  },
  {
    "type": "MultithreadedTaskManagerSingleton",
    "input": "public class TaskManager {\n\n    public TaskManager() {}\n\n    public void addTask(String task) {\n        System.out.println(\"Task Added: \" + task);\n    }\n\n}",
    "output": "import java.util.Queue;\nimport java.util.concurrent.ConcurrentLinkedQueue;\n\npublic class TaskManager {\n\n    private static TaskManager instance;\n    private Queue<String> taskQueue;\n\n    private TaskManager() {\n        taskQueue = new ConcurrentLinkedQueue<>();\n    }\n\n    public static synchronized TaskManager getInstance() {\n        if (instance == null) {\n            instance = new TaskManager();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        taskQueue.add(task);\n    }\n\n    public String getTask() {\n        return taskQueue.poll();\n    }\n\n}"
  },
  {
    "type": "ThreadSafeConfigManagerSingleton",
    "input": "public class ConfigManager {\n\n    public ConfigManager() {}\n\n    public String getConfig(String key) {\n        return null;\n    }\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.Map;\n\npublic class ConfigManager {\n\n    private static volatile ConfigManager instance;\n    private Map<String, String> config;\n\n    private ConfigManager() {\n        config = new ConcurrentHashMap<>();\n    }\n\n    public static ConfigManager getInstance() {\n        if (instance == null) {\n            synchronized (ConfigManager.class) {\n                if (instance == null) {\n                    instance = new ConfigManager();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void setConfig(String key, String value) {\n        config.put(key, value);\n    }\n\n    public String getConfig(String key) {\n        return config.get(key);\n    }\n\n}"
  },
  {
    "type": "TokenBucketRateLimiterSingleton",
    "input": "public class RateLimiter {\n\n    public RateLimiter() {}\n\n    public boolean allowRequest() {\n        return true;\n    }\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class RateLimiter {\n\n    private static RateLimiter instance;\n    private AtomicInteger tokens;\n    private static final int MAX_TOKENS = 10;\n\n    private RateLimiter() {\n        tokens = new AtomicInteger(MAX_TOKENS);\n    }\n\n    public static RateLimiter getInstance() {\n        if (instance == null) {\n            instance = new RateLimiter();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest() {\n        if (tokens.get() > 0) {\n            tokens.decrementAndGet();\n            return true;\n        } else {\n            System.out.println(\"Request denied: Rate limit exceeded\");\n            return false;\n        }\n    }\n\n    public void refillTokens() {\n        tokens.set(MAX_TOKENS);\n    }\n\n}"
  },
  {
    "type": "GlobalIdGeneratorSingleton",
    "input": "public class IdGenerator {\n\n    public IdGenerator() {}\n\n    public int generate() {\n        return 0;\n    }\n\n}",
    "output": "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class IdGenerator {\n\n    private static IdGenerator instance;\n    private AtomicInteger counter;\n\n    private IdGenerator() {\n        counter = new AtomicInteger(0);\n    }\n\n    public static IdGenerator getInstance() {\n        if (instance == null) {\n            instance = new IdGenerator();\n        }\n        return instance;\n    }\n\n    public int generate() {\n        return counter.incrementAndGet();\n    }\n\n}"
  },
  {
    "type": "DistributedLockManagerSingleton",
    "input": "public class LockManager {\n\n    public LockManager() {}\n\n    public boolean acquireLock(String key) {\n        return true;\n    }\n\n}",
    "output": "import java.util.concurrent.ConcurrentHashMap;\n\npublic class LockManager {\n\n    private static LockManager instance;\n    private ConcurrentHashMap<String, Boolean> locks;\n\n    private LockManager() {\n        locks = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized LockManager getInstance() {\n        if (instance == null) {\n            instance = new LockManager();\n        }\n        return instance;\n    }\n\n    public boolean acquireLock(String key) {\n        return locks.putIfAbsent(key, true) == null;\n    }\n\n    public void releaseLock(String key) {\n        locks.remove(key);\n    }\n\n}"
  },
  {
    "type": "RealTimeEventPublisherSingleton",
    "input": "public class EventPublisher {\n\n    public EventPublisher() {}\n\n    public void publishEvent(String event) {\n        System.out.println(event);\n    }\n\n}",
    "output": "import java.util.concurrent.CopyOnWriteArrayList;\n\npublic class EventPublisher {\n\n    private static EventPublisher instance;\n    private CopyOnWriteArrayList<String> eventListeners;\n\n    private EventPublisher() {\n        eventListeners = new CopyOnWriteArrayList<>();\n    }\n\n    public static EventPublisher getInstance() {\n        if (instance == null) {\n            instance = new EventPublisher();\n        }\n        return instance;\n    }\n\n    public void addListener(String listener) {\n        eventListeners.add(listener);\n    }\n\n    public void publishEvent(String event) {\n        for (String listener : eventListeners) {\n            System.out.println(\"Notifying listener: \" + listener + \" of event: \" + event);\n        }\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class MetricsCollector {\n\n    public MetricsCollector() {}\n\n    public void collectMetric(String metric) {\n        System.out.println(metric);\n    }\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class MetricsCollector {\n\n    private static MetricsCollector instance;\n    private List<String> collectedMetrics;\n\n    private MetricsCollector() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static MetricsCollector getInstance() {\n        if (instance == null) {\n            instance = new MetricsCollector();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class MetricsCollector {\n\n    public MetricsCollector() {}\n\n    public void collectMetric(String metric) {\n        System.out.println(metric);\n    }\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class MetricsCollector {\n\n    private static MetricsCollector instance;\n    private List<String> collectedMetrics;\n\n    private MetricsCollector() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static MetricsCollector getInstance() {\n        if (instance == null) {\n            instance = new MetricsCollector();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class MetricsCollector {\n\n    public MetricsCollector() {}\n\n    public void collectMetric(String metric) {\n        System.out.println(metric);\n    }\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class MetricsCollector {\n\n    private static MetricsCollector instance;\n    private List<String> collectedMetrics;\n\n    private MetricsCollector() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static MetricsCollector getInstance() {\n        if (instance == null) {\n            instance = new MetricsCollector();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class MetricsCollector {\n\n    public MetricsCollector() {}\n\n    public void collectMetric(String metric) {\n        System.out.println(metric);\n    }\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class MetricsCollector {\n\n    private static MetricsCollector instance;\n    private List<String> collectedMetrics;\n\n    private MetricsCollector() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static MetricsCollector getInstance() {\n        if (instance == null) {\n            instance = new MetricsCollector();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class MetricsCollector {\n\n    public MetricsCollector() {}\n\n    public void collectMetric(String metric) {\n        System.out.println(metric);\n    }\n\n}",
    "output": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class MetricsCollector {\n\n    private static MetricsCollector instance;\n    private List<String> collectedMetrics;\n\n    private MetricsCollector() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static MetricsCollector getInstance() {\n        if (instance == null) {\n            instance = new MetricsCollector();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  },
  {
    "type": "SingletonWithMetricsCollection",
    "input": "public class MetricsCollector {\n\n    public MetricsCollector() {}\n\n    public void collectMetric(String metric) {\n        System.out.println(metric);\n    }\n\n}",
    "output": "import java.util.ArrayList;\n   private static MetricsCollector instance;\n    private List<String> collectedMetrics;\n\n    private MetricsCollector() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static MetricsCollector getInstance() {\n        if (instance == null) {\n            instance = new MetricsCollector();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
  }
]

{
    "predictions": [
        "public class LazyInitializedSingletonExample4 {\n\n    private static LazyInitializedSingletonExample4 instance;\n\n    private LazyInitializedSingletonExample4() {}\n\n    public static LazyInitializedSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new LazyInitializedSingletonExample4();\n        }\n        return instance;\n    }\n\n}",
        "import java.util.HashMap;\nimport java.util.Map;\n\npublic class FeatureFlagManager {\n\n    private static FeatureFlagManager instance;\n    private Map<String, Boolean> featureFlags;\n\n    private FeatureFlagManager() {\n        featureFlags = new HashMap<>();\n        featureFlags.put(\"DarkMode\", true);\n        featureFlags.put(\"BetaFeatures\", false);\n    }\n\n    public static synchronized FeatureFlagManager getInstance() {\n        if (instance == null) {\n            instance = new FeatureFlagManager();\n        }\n        return instance;\n    }\n\n    public boolean isFeatureEnabled(String feature) {\n        return featureFlags.getOrDefault(feature, false);\n    }\n\n}",
        "public class SingletonWithDynamicConfigurationExample3 {\n\n    private static SingletonWithDynamicConfigurationExample3 instance;\n    private String config;\n\n    private SingletonWithDynamicConfigurationExample3(String config) {\n        this.config = config;\n    }\n\n    public static SingletonWithDynamicConfigurationExample3 getInstance(String config) {\n        if (instance == null) {\n            instance = new SingletonWithDynamicConfigurationExample3(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}",
        "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EventBusSingletonExample2 {\n\n    private static EventBusSingletonExample2 instance;\n    private List<String> events;\n\n    private EventBusSingletonExample2() {\n        events = new ArrayList<>();\n    }\n\n    public static synchronized EventBusSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new EventBusSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void postEvent(String event) {\n        events.add(event);\n        System.out.println(\"Event posted: \" + event);\n    }\n\n    public List<String> getPostedEvents() {\n        return events;\n    }\n\n}",
        "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class TokenBucketRateLimiterSingletonExample3 {\n\n    private static TokenBucketRateLimiterSingletonExample3 instance;\n    private AtomicInteger tokenCount;\n    private static final int MAX_TOKENS = 10;\n\n    private TokenBucketRateLimiterSingletonExample3() {\n        tokenCount = new AtomicInteger(MAX_TOKENS);\n    }\n\n    public static TokenBucketRateLimiterSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new TokenBucketRateLimiterSingletonExample3();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest() {\n        if (tokenCount.get() > 0) {\n            tokenCount.decrementAndGet();\n            return true;\n        }\n        return false;\n    }\n\n    public void refillTokens() {\n        tokenCount.set(MAX_TOKENS);\n    }\n\n}",
        "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedLockManagerSingletonExample5 {\n\n    private static DistributedLockManagerSingletonExample5 instance;\n    private ConcurrentHashMap<String, Boolean> locks;\n\n    private DistributedLockManagerSingletonExample5() {\n        locks = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedLockManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new DistributedLockManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public boolean acquireLock(String key) {\n        return locks.putIfAbsent(key, true) == null;\n    }\n\n    public void releaseLock(String key) {\n        locks.remove(key);\n    }\n\n}",
        "public class EagerThreadSafeSingletonExample4 {\n\n    private static final EagerThreadSafeSingletonExample4 instance = new EagerThreadSafeSingletonExample4();\n\n    private EagerThreadSafeSingletonExample4() {}\n\n    public static EagerThreadSafeSingletonExample4 getInstance() {\n        return instance;\n    }\n\n}",
        "import java.util.HashSet;\nimport java.util.Set;\n\npublic class FileSystemCacheSingletonExample4 {\n\n    private static FileSystemCacheSingletonExample4 instance;\n    private Set<String> cachedFiles;\n\n    private FileSystemCacheSingletonExample4() {\n        cachedFiles = new HashSet<>();\n    }\n\n    public static synchronized FileSystemCacheSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new FileSystemCacheSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void cacheFile(String path) {\n        cachedFiles.add(path);\n        System.out.println(\"Caching file: \" + path);\n    }\n\n    public boolean isFileCached(String path) {\n        return cachedFiles.contains(path);\n    }\n\n}",
        "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithObserverPatternExample2 {\n\n    private static SingletonWithObserverPatternExample2 instance;\n    private List<Observer> observers;\n\n    private SingletonWithObserverPatternExample2() {\n        observers = new ArrayList<>();\n    }\n\n    public static SingletonWithObserverPatternExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithObserverPatternExample2();\n        }\n        return instance;\n    }\n\n    public void addObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyObservers() {\n        for (Observer observer : observers) {\n            observer.update();\n        }\n    }\n\n}",
        "import java.util.HashMap;\nimport java.util.Map;\n\npublic class CacheManagerSingletonExample4 {\n\n    private static CacheManagerSingletonExample4 instance;\n    private Map<String, String> cache;\n\n    private CacheManagerSingletonExample4() {\n        cache = new HashMap<>();\n    }\n\n    public static CacheManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new CacheManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}",
        "public class BaseClass {\n\n    private DerivedSingleton instance;\n\n    private BaseClass() {}\n\n    public static BaseClass getInstance() {\n        if (instance == null) {\n            instance = new DerivedSingleton();\n        }\n        return instance;\n    }\n\n}",
        "import java.util.concurrent.ConcurrentHashMap;\n\npublic class ClusteredSingletonExample5 {\n\n    private static final ConcurrentHashMap<String, ClusteredSingletonExample5> instances = new ConcurrentHashMap<>();\n\n    private ClusteredSingletonExample5() {}\n\n    public static ClusteredSingletonExample5 getInstance(String clusterKey) {\n        return instances.computeIfAbsent(clusterKey, k -> new ClusteredSingletonExample5());\n    }\n\n}",
        "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class ResourceAllocatorSingletonExample4 {\n\n    private static ResourceAllocatorSingletonExample4 instance;\n    private Queue<String> resources;\n\n    private ResourceAllocatorSingletonExample4() {\n        resources = new LinkedList<>();\n        resources.add(\"Resource1\");\n        resources.add(\"Resource2\");\n    }\n\n    public static synchronized ResourceAllocatorSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new ResourceAllocatorSingletonExample4();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return resources.poll();\n    }\n\n    public void releaseResource(String resourceName) {\n        resources.add(resourceName);\n    }\n\n}",
        "public class TimedInitializer {\n\n    private static TimedInitializer instance;\n    private long lastAccessed;\n\n    private TimedInitializer() {\n        lastAccessed = System.currentTimeMillis();\n    }\n\n    public static synchronized TimedInitializer getInstance() {\n        if (instance == null) {\n            instance = new TimedInitializer();\n        }\n        return instance;\n    }\n\n    public void initialize() {\n        lastAccessed = System.currentTimeMillis();\n    }\n\n}",
        "import java.util.Timer;\nimport java.util.TimerTask;\n\npublic class SchedulerWithCronJobsSingletonExample5 {\n\n    private static SchedulerWithCronJobsSingletonExample5 instance;\n    private Timer timer;\n\n    private SchedulerWithCronJobsSingletonExample5() {\n        timer = new Timer(true);\n    }\n\n    public static synchronized SchedulerWithCronJobsSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new SchedulerWithCronJobsSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void addJob(String job, long delay) {\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                System.out.println(\"Executing job: \" + job);\n            }\n        }, delay);\n    }\n\n}",
        "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class GlobalIdGeneratorSingletonExample4 {\n\n    private static GlobalIdGeneratorSingletonExample4 instance;\n    private AtomicInteger counter;\n\n    private GlobalIdGeneratorSingletonExample4() {\n        counter = new AtomicInteger(0);\n    }\n\n    public static GlobalIdGeneratorSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new GlobalIdGeneratorSingletonExample4();\n        }\n        return instance;\n    }\n\n    public int generate() {\n        return counter.incrementAndGet();\n    }\n\n}",
        "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample4 {\n\n    private static SingletonWithMetricsCollectionExample4 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample4() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample4();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getMetrics() {\n        return collectedMetrics;\n    }\n\n}",
        "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class RateLimiter {\n\n    private static RateLimiter instance;\n    private AtomicInteger tokenCount;\n    private static final int MAX_TOKENS = 100;\n\n    private RateLimiter() {\n        tokenCount = new AtomicInteger(MAX_TOKENS);\n    }\n\n    public static synchronized RateLimiter getInstance() {\n        if (instance == null) {\n            instance = new RateLimiter();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest() {\n        if (tokenCount.get() > 0) {\n            tokenCount.decrementAndGet();\n            return true;\n        }\n        return false;\n    }\n\n    public void refillTokens() {\n        tokenCount.set(MAX_TOKENS);\n    }\n\n}",
        "public enum EnumSingletonExample2 {\n\n    INSTANCE(\"default\");\n\n    private String info;\n\n    private EnumSingletonExample2(String info) {\n        this.info = info;\n    }\n\n    public EnumSingletonExample2 getInstance() {\n        return INSTANCE;\n    }\n\n}",
        "public class SingletonWithRetryPolicyExample4 {\n\n    private static SingletonWithRetryPolicyExample4 instance;\n    private int retryCount;\n\n    private SingletonWithRetryPolicyExample4() {\n        retryCount = 0;\n    }\n\n    public static synchronized SingletonWithRetryPolicyExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithRetryPolicyExample4();\n        }\n        return instance;\n    }\n\n    public void retry(String task) {\n        retryCount++;\n        System.out.println(\"Retrying task: \" + task + \" - Retry Count: \" + retryCount);\n    }\n\n    public int getRetryCount() {\n        return retryCount;\n    }\n\n}",
        "import java.util.PriorityQueue;\n\npublic class PriorityBasedSingletonExample3 {\n\n    private static PriorityBasedSingletonExample3 instance;\n    private PriorityQueue<Integer> priorityQueue;\n\n    private PriorityBasedSingletonExample3() {\n        priorityQueue = new PriorityQueue<>();\n    }\n\n    public static PriorityBasedSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new PriorityBasedSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void addPriority(int priority) {\n        priorityQueue.add(priority);\n    }\n\n    public int getHighestPriority() {\n        return priorityQueue.poll();\n    }\n\n}",
        "public class StaticBlockSingletonExample1 {\n\n    private static StaticBlockSingletonExample1 instance;\n\n    static {\n        try {\n            instance = new StaticBlockSingletonExample1();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static StaticBlockSingletonExample1 getInstance() {\n        return instance;\n    }\n\n}",
        "public class ThreadSafeSingletonWithLifecycleExample1 {\n\n    private static ThreadSafeSingletonWithLifecycleExample1 instance;\n\n    private ThreadSafeSingletonWithLifecycleExample1() {\n        onCreate();\n    }\n\n    public static synchronized ThreadSafeSingletonWithLifecycleExample1 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithLifecycleExample1();\n        }\n        return instance;\n    }\n\n    public void onCreate() {\n        System.out.println(\"Singleton created\");\n    }\n\n    public void onDestroy() {\n        System.out.println(\"Singleton destroyed\");\n    }\n\n}",
        "public class StaticBlockSingletonExample5 {\n\n    private static StaticBlockSingletonExample5 instance;\n\n    private StaticBlockSingletonExample5() {}\n\n    static {\n        try {\n            instance = new StaticBlockSingletonExample5();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static StaticBlockSingletonExample5 getInstance() {\n        return instance;\n    }\n\n}",
        "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationManagerSingletonExample5 {\n\n    private static NotificationManagerSingletonExample5 instance;\n    private List<String> notifications;\n\n    private NotificationManagerSingletonExample5() {\n        notifications = new ArrayList<>();\n    }\n\n    public static NotificationManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new NotificationManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void sendNotification(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification sent: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}",
        "public class SingletonWithCyclicDependencyGuardExample4 {\n\n    private static SingletonWithCyclicDependencyGuardExample4 instance;\n    private static boolean isCreating;\n\n    private SingletonWithCyclicDependencyGuardExample4() {\n        if (isCreating) {\n            throw new IllegalStateException(\"Cyclic dependency detected!\");\n        }\n        isCreating = true;\n    }\n\n    public static synchronized SingletonWithCyclicDependencyGuardExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCyclicDependencyGuardExample4();\n            isCreating = false;\n        }\n        return instance;\n    }\n\n}",
        "public class SingletonWithInitializationLoggingExample1 {\n\n    private static SingletonWithInitializationLoggingExample1 instance;\n\n    private SingletonWithInitializationLoggingExample1() {\n        System.out.println(\"SingletonWithInitializationLoggingExample1 initialized\");\n    }\n\n    public static SingletonWithInitializationLoggingExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithInitializationLoggingExample1();\n        }\n        return instance;\n    }\n\n    public void initialize() {\n        System.out.println(\"SingletonWithInitializationLoggingExample1 initialized\");\n    }\n\n}",
        "public class LazySingletonWithInitializationCountExample3 {\n\n    private static LazySingletonWithInitializationCountExample3 instance;\n    private static int initializationCount = 0;\n\n    private LazySingletonWithInitializationCountExample3() {\n        initializationCount++;\n    }\n\n    public static LazySingletonWithInitializationCountExample3 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithInitializationCountExample3();\n        }\n        return instance;\n    }\n\n    public int getInitializationCount() {\n        return initializationCount;\n    }\n\n}",
        "public enum EnumSingletonExample5 {\n\n    INSTANCE(\"default\");\n\n    private String info;\n\n    private EnumSingletonExample5(String info) {\n        this.info = info;\n    }\n\n    public EnumSingletonExample5 getInstance() {\n        return INSTANCE;\n    }\n}",
        "import java.util.concurrent.CopyOnWriteArrayList;\n\npublic class RealTimeEventPublisherSingletonExample4 {\n\n    private static RealTimeEventPublisherSingletonExample4 instance;\n    private CopyOnWriteArrayList<String> eventListeners;\n\n    private RealTimeEventPublisherSingletonExample4() {\n        eventListeners = new CopyOnWriteArrayList<>();\n    }\n\n    public static RealTimeEventPublisherSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new RealTimeEventPublisherSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void addListener(String listener) {\n        eventListeners.add(listener);\n    }\n\n    public void publishEvent(String event) {\n        for (String listener : eventListeners) {\n            System.out.println(\"Notifying listener: \" + listener + \" of event: \" + event);\n        }\n    }\n\n}",
        "public class EagerThreadSafeSingletonExample2 {\n\n    private static final EagerThreadSafeSingletonExample2 instance = new EagerThreadSafeSingletonExample2();\n\n    private EagerThreadSafeSingletonExample2() {}\n\n    public static EagerThreadSafeSingletonExample2 getInstance() {\n        return instance;\n    }\n\n}",
        "public class DoubleCheckedLockingSingletonExample4 {\n\n    private static volatile DoubleCheckedLockingSingletonExample4 instance;\n\n    private DoubleCheckedLockingSingletonExample4() {}\n\n    public static DoubleCheckedLockingSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n}",
        "public class SynchronizedDoubleCheckSingletonExample5 {\n    private static volatile SynchronizedDoubleCheckSingletonExample5 instance;\n\n    private SynchronizedDoubleCheckSingletonExample5() {}\n\n    public static SynchronizedDoubleCheckSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (SynchronizedDoubleCheckSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new SynchronizedDoubleCheckSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n}",
        "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EmailSenderSingletonExample1 {\n\n    private static EmailSenderSingletonExample1 instance;\n    private List<String> sentEmails;\n\n    private EmailSenderSingletonExample1() {\n        sentEmails = new ArrayList<>();\n    }\n\n    public static synchronized EmailSenderSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new EmailSenderSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void sendEmail(String recipient, String subject, String body) {\n        sentEmails.add(recipient);\n    }\n\n    public void sendEmail(String recipient, String subject, String body) {\n        sentEmails.add(recipient);\n    }\n\n}",
        "public class EagerlyInitializedSingletonExample5 {\n\n    private EagerlyInitializedSingletonExample5() {}\n\n    private static final EagerlyInitializedSingletonExample5 instance = new EagerlyInitializedSingletonExample5();\n\n    public static EagerlyInitializedSingletonExample5 getInstance() {\n        return instance;\n    }\n\n}",
        "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class DatabaseConnectionPool {\n\n    private static DatabaseConnectionPool instance;\n    private Queue<String> connectionPool;\n\n    private DatabaseConnectionPool() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static synchronized DatabaseConnectionPool getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionPool();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}",
        "import java.util.ArrayList;\nimport java.util.List;\n\npublic class GlobalThemeManagerSingletonExample2 {\n\n    private static GlobalThemeManagerSingletonExample2 instance;\n    private List<String> themes;\n\n    private GlobalThemeManagerSingletonExample2() {\n        themes = new ArrayList<>();\n    }\n\n    public static synchronized GlobalThemeManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new GlobalThemeManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void addTheme(String theme) {\n        themes.add(theme);\n        System.out.println(\"Theme added: \" + theme);\n    }\n\n    public List<String> getThemes() {\n        return themes;\n    }\n\n}",
        "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class EventLoggerSingletonExample2 {\n\n    private static EventLoggerSingletonExample2 instance;\n    private FileWriter writer;\n\n    private EventLoggerSingletonExample2() {\n        try {\n            writer = new FileWriter(\"events.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized EventLoggerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new EventLoggerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void logEvent(String event) {\n        try {\n            writer.write(event + \"\\n\");\n            writer.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}",
        "public class LazilyInitializedSingletonExample1 {\n\n    private static LazilyInitializedSingletonExample1 _captain;\n\n    private LazilyInitializedSingletonExample1() {}\n\n    public static LazilyInitializedSingletonExample1 getCaptain() {\n        if (_captain == null) {\n            _captain = new LazilyInitializedSingletonExample1();\n            System.out.println(\"Izabran novi kapiten\");\n        } else {\n            System.out.println(\"Vec postoji kapiten\");\n        }\n        return _captain;\n    }\n\n}",
        "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class LazySingletonWithPropertiesFileExample2 {\n\n    private static LazySingletonWithPropertiesFileExample2 instance;\n    private Properties properties;\n\n    private LazySingletonWithPropertiesFileExample2() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LazySingletonWithPropertiesFileExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithPropertiesFileExample2();\n        }\n        return instance;\n    }\n\n    public Properties getProperties() {\n        return properties;\n    }\n\n}",
        "public class SingletonWithStateTrackingExample5 {\n\n    private static SingletonWithStateTrackingExample5 instance;\n    private int state;\n\n    private SingletonWithStateTrackingExample5() {\n        state = 0;\n    }\n\n    public static SingletonWithStateTrackingExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithStateTrackingExample5();\n        }\n        return instance;\n    }\n\n    public void incrementState() {\n        state++;\n    }\n\n    public int getState() {\n        return state;\n    }\n\n}",
        "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class APIRequestRateLimiterSingletonExample5 {\n\n    private static APIRequestRateLimiterSingletonExample5 instance;\n    private AtomicInteger tokenCount;\n    private static final int MAX_TOKENS = 100;\n\n    private APIRequestRateLimiterSingletonExample5() {\n        tokenCount = new AtomicInteger(MAX_TOKENS);\n    }\n\n    public static synchronized APIRequestRateLimiterSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new APIRequestRateLimiterSingletonExample5();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest() {\n        if (tokenCount.get() > 0) {\n            tokenCount.decrementAndGet();\n            return true;\n        }\n        return false;\n    }\n\n    public void refillTokens() {\n        tokenCount.set(MAX_TOKENS);\n    }\n\n}",
        "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithObserverLifecycleExample2 {\n\n    private static SingletonWithObserverLifecycleExample2 instance;\n    private List<String> events;\n\n    private SingletonWithObserverLifecycleExample2() {\n        events = new ArrayList<>();\n    }\n\n    public static synchronized SingletonWithObserverLifecycleExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithObserverLifecycleExample2();\n        }\n        return instance;\n    }\n\n    public void onDestroy() {\n        events.clear();\n        System.out.println(\"Singleton destroyed\");\n    }\n\n    public void onEvent(String event) {\n        events.add(event);\n        System.out.println(\"Singleton destroyed\");\n    }\n\n}",
        "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SessionManager {\n\n    private static SessionManager instance;\n    private Map<String, String> activeSessions;\n\n    private SessionManager() {\n        activeSessions = new HashMap<>();\n    }\n\n    public static SessionManager getInstance() {\n        if (instance == null) {\n            instance = new SessionManager();\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        activeSessions.put(user, \"SessionActive\");\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return activeSessions.containsKey(user);\n    }\n\n}",
        "import java.lang.ref.WeakReference;\n\npublic class SingletonWithWeakReferenceExample5 {\n\n    private static WeakReference<SingletonWithWeakReferenceExample5> instance;\n\n    private SingletonWithWeakReferenceExample5() {}\n\n    public static SingletonWithWeakReferenceExample5 getInstance() {\n        if (instance == null || instance.get() == null) {\n            instance = new WeakReference<>(new SingletonWithWeakReferenceExample5());\n        }\n        return instance.get();\n    }\n\n}",
        "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample3 {\n\n    private static SingletonWithMetricsCollectionExample3 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample3() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample3();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}",
        "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample3 {\n\n    private static SingletonWithMetricsCollectionExample3 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample3() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample3();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}",
        "import java.util.HashMap;\nimport java.util.Map;\n\npublic class AuthenticationManagerSingletonExample5 {\n\n    private static AuthenticationManagerSingletonExample5 instance;\n    private Map<String, String> userDatabase;\n\n    private AuthenticationManagerSingletonExample5() {\n        userDatabase = new HashMap<>();\n        userDatabase.put(\"admin\", \"password123\");\n        userDatabase.put(\"user\", \"pass\");\n    }\n\n    public static synchronized AuthenticationManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new AuthenticationManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public boolean authenticate(String user, String password) {\n        return password.equals(userDatabase.get(user));\n    }\n\n}",
        "public class SingletonWithDynamicConfigurationExample5 {\n\n    private static SingletonWithDynamicConfigurationExample5 instance;\n    private String config;\n\n    private SingletonWithDynamicConfigurationExample5(String config) {\n        this.config = config;\n    }\n\n    public static SingletonWithDynamicConfigurationExample5 getInstance(String config) {\n        if (instance == null) {\n            instance = new SingletonWithDynamicConfigurationExample5(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}",
        "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingleton {\n\n    private static LoggerSingleton instance;\n    private FileWriter fileWriter;\n\n    private LoggerSingleton() {\n        try {\n            fileWriter = new FileWriter(\"log.txt\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggerSingleton getInstance() {\n        if (instance == null) {\n            instance = new LoggerSingleton();\n        }\n        return instance;\n    }\n\n    public void log(String level, String message) {\n        try {\n            fileWriter.write(level + \": \" + message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}",
        "public class OptimizedLazySingletonExample3 {\n\n    private static volatile OptimizedLazySingletonExample3 instance;\n\n    private OptimizedLazySingletonExample3() {}\n\n    public static OptimizedLazySingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (OptimizedLazySingletonExample3.class) {\n                if (instance == null) {\n                    instance = new OptimizedLazySingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n}",
        "public class DoubleCheckedLockingSingletonExample2 {\n\n    private static volatile DoubleCheckedLockingSingletonExample2 instance;\n\n    private DoubleCheckedLockingSingletonExample2() {}\n\n    public static DoubleCheckedLockingSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n}",
        "public class LazilyInitializedSingletonExample3 {\n\n    private static LazilyInitializedSingletonExample3 _captain;\n\n    private LazilyInitializedSingletonExample3() {}\n\n    public static LazilyInitializedSingletonExample3 getCaptain() {\n        if (_captain == null) {\n            _captain = new LazilyInitializedSingletonExample3();\n            System.out.println(\"Izabran novi kapiten\");\n        } else {\n            System.out.println(\"Vec postoji kapiten\");\n        }\n        return _captain;\n    }\n\n}",
        "import java.util.ArrayList;\nimport java.util.List;\n\npublic class GlobalThemeManagerSingletonExample1 {\n\n    private static GlobalThemeManagerSingletonExample1 instance;\n    private List<String> themes;\n\n    private GlobalThemeManagerSingletonExample1() {\n        themes = new ArrayList<>();\n    }\n\n    public static synchronized GlobalThemeManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new GlobalThemeManagerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void addTheme(String theme) {\n        themes.add(theme);\n        System.out.println(\"Theme added: \" + theme);\n    }\n\n    public List<String> getThemes() {\n        return themes;\n    }\n\n}",
        "import java.util.HashMap;\nimport java.util.Map;\n\npublic class LocalizationManagerSingletonExample5 {\n\n    private static LocalizationManagerSingletonExample5 instance;\n    private Map<String, String> translations;\n\n    private LocalizationManagerSingletonExample5() {\n        translations = new HashMap<>();\n        translations.put(\"hello\", \"Hello\");\n        translations.put(\"goodbye\", \"Goodbye\");\n    }\n\n    public static synchronized LocalizationManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new LocalizationManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public String getTranslation(String key) {\n        return translations.getOrDefault(key, \"Translation not found\");\n    }\n\n}",
        "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingletonWithBackgroundTaskExample5 {\n\n    private static SingletonWithBackgroundTaskExample5 instance;\n    private ExecutorService executorService;\n\n    private SingletonWithBackgroundTaskExample5() {\n        executorService = Executors.newSingleThreadExecutor();\n    }\n\n    public static SingletonWithBackgroundTaskExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithBackgroundTaskExample5();\n        }\n        return instance;\n    }\n\n    public void runTask(Runnable task) {\n        executorService.submit(task);\n    }\n\n}",
        "public class ThreadSafeSingletonWithInitializationOnDemandExample3 {\n\n    private ThreadSafeSingletonWithInitializationOnDemandExample3() {}\n\n    private static class SingletonHelper {\n        private static final ThreadSafeSingletonWithInitializationOnDemandExample3 INSTANCE = new ThreadSafeSingletonWithInitializationOnDemandExample3();\n    }\n\n    public static ThreadSafeSingletonWithInitializationOnDemandExample3 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}",
        "public class LazySingletonWithParameter {\n\n    private static LazySingletonWithParameter instance;\n    private String config;\n\n    private LazySingletonWithParameter(String config) {\n        this.config = config;\n    }\n\n    public static LazySingletonWithParameter getInstance(String config) {\n        if (instance == null) {\n            instance = new LazySingletonWithParameter(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}",
        "public class ThreadLocalCounter {\n\n    private static final ThreadLocal<ThreadLocalCounter> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalCounter::new);\n\n    private int counter;\n\n    private ThreadLocalCounter() {\n        counter = 0;\n    }\n\n    public static ThreadLocalCounter getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public int incrementAndGet() {\n        return counter.get();\n    }\n\n}",
        "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample1 {\n\n    private static SingletonWithMetricsCollectionExample1 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample1() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample1();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}",
        "public class ThreadSafeSingletonWithLifecycleExample5 {\n\n    private ThreadSafeSingletonWithLifecycleExample5() {}\n\n    private static class SingletonHelper {\n        private static final ThreadSafeSingletonWithLifecycleExample5 INSTANCE = new ThreadSafeSingletonWithLifecycleExample5();\n    }\n\n    public static synchronized ThreadSafeSingletonWithLifecycleExample5 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}",
        "public class LazilyInitializedSingletonExample2 {\n\n    private static LazilyInitializedSingletonExample2 _captain;\n\n    private LazilyInitializedSingletonExample2() {}\n\n    public static LazilyInitializedSingletonExample2 getCaptain() {\n        if (_captain == null) {\n            _captain = new LazilyInitializedSingletonExample2();\n            System.out.println(\"Izabran novi kapiten\");\n        } else {\n            System.out.println(\"Vec postoji kapiten\");\n        }\n        return _captain;\n    }\n\n}",
        "public class ThreadSafeDoubleCheckedLockingSingletonExample3 {\n    private static volatile ThreadSafeDoubleCheckedLockingSingletonExample3 instance = null;\n\n    private ThreadSafeDoubleCheckedLockingSingletonExample3() {}\n\n    public static ThreadSafeDoubleCheckedLockingSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (ThreadSafeDoubleCheckedLockingSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new ThreadSafeDoubleCheckedLockingSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n}",
        "public class StaticBlockSingletonWithErrorHandlingExample4 {\n\n    private static StaticBlockSingletonWithErrorHandlingExample4 instance;\n\n    private StaticBlockSingletonWithErrorHandlingExample4() {}\n\n    static {\n        try {\n            instance = new StaticBlockSingletonWithErrorHandlingExample4();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error creating singleton instance\", e);\n        }\n    }\n\n    public static StaticBlockSingletonWithErrorHandlingExample4 getInstance() {\n        return instance;\n    }\n\n}",
        "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample5 {\n\n    private static SingletonWithMetricsCollectionExample5 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample5() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample5();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getMetrics() {\n        return collectedMetrics;\n    }\n\n}",
        "public class LazilyInitializedDoubleCheckedLockingSingletonExample5 {\n\n    private static volatile LazilyInitializedDoubleCheckedLockingSingletonExample5 instance;\n\n    private LazilyInitializedDoubleCheckedLockingSingletonExample5() {}\n\n    public static LazilyInitializedDoubleCheckedLockingSingletonExample5 getInstance() {\n        if(instance == null) {\n            synchronized (LazilyInitializedDoubleCheckedLockingSingletonExample5.class) {\n                if(instance == null) {\n                    instance = new LazilyInitializedDoubleCheckedLockingSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n}",
        "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class TaskQueueSingletonExample4 {\n\n    private static TaskQueueSingletonExample4 instance;\n    private Queue<String> taskQueue;\n\n    private TaskQueueSingletonExample4() {\n        taskQueue = new LinkedList<>();\n    }\n\n    public static synchronized TaskQueueSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new TaskQueueSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        taskQueue.add(task);\n    }\n\n    public String getNextTask() {\n        return taskQueue.poll();\n    }\n\n}",
        "import java.util.concurrent.atomic.AtomicReference;\n\npublic class AtomicReferenceSingletonExample5 {\n\n    private static final AtomicReference<AtomicReferenceSingletonExample5> INSTANCE = new AtomicReference<>();\n\n    private AtomicReferenceSingletonExample5() {}\n\n    public static AtomicReferenceSingletonExample5 getInstance() {\n        if (INSTANCE.get() == null) {\n            INSTANCE.compareAndSet(null, new AtomicReferenceSingletonExample5());\n        }\n        return INSTANCE.get();\n    }\n\n}",
        "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class DynamicConfigSingleton {\n\n    private static DynamicConfigSingleton instance;\n    private Properties properties;\n\n    private DynamicConfigSingleton() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static DynamicConfigSingleton getInstance() {\n        if (instance == null) {\n            instance = new DynamicConfigSingleton();\n        }\n        return instance;\n    }\n\n    public String getConfig(String key) {\n        return properties.getProperty(key);\n    }\n\n}",
        "public enum SingletonWithEnumAndMethodExample5 {\n\n    INSTANCE;\n\n    public void performAction() {\n        System.out.println(\"Action performed by SingletonWithEnumAndMethodExample5\");\n    }\n\n}",
        "public class SerializableWithReadResolveSingletonExample5 implements Serializable {\n\n    private static final long serialVersionUID = 1911904003687931976L;\n\n    private static SerializableWithReadResolveSingletonExample5 instance;\n\n    private SerializableWithReadResolveSingletonExample5() {}\n\n    public static synchronized SerializableWithReadResolveSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new SerializableWithReadResolveSingletonExample5();\n        }\n        return instance;\n    }\n\n}",
        "public class SingletonWithDynamicConfigurationExample1 {\n\n    private static SingletonWithDynamicConfigurationExample1 instance;\n    private String config;\n\n    private SingletonWithDynamicConfigurationExample1(String config) {\n        this.config = config;\n    }\n\n    public static SingletonWithDynamicConfigurationExample1 getInstance(String config) {\n        if (instance == null) {\n            instance = new SingletonWithDynamicConfigurationExample1(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}",
        "public class ThreadLocalSingletonExample5 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample5> instance = ThreadLocal.withInitial(ThreadLocalSingletonExample5::new);\n\n    private ThreadLocalSingletonExample5() {}\n\n    public static ThreadLocalSingletonExample5 getInstance() {\n        return instance.get();\n    }\n\n}",
        "public class DoubleCheckedLockingWithLazyInitializationExample3 {\n\n    private static volatile DoubleCheckedLockingWithLazyInitializationExample3 instance;\n\n    private DoubleCheckedLockingWithLazyInitializationExample3() {}\n\n    public static DoubleCheckedLockingWithLazyInitializationExample3 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingWithLazyInitializationExample3.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingWithLazyInitializationExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n}",
        "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingletonWithBackgroundTaskExample1 {\n\n    private static SingletonWithBackgroundTaskExample1 instance;\n    private ExecutorService executorService;\n\n    private SingletonWithBackgroundTaskExample1() {\n        executorService = Executors.newSingleThreadExecutor();\n    }\n\n    public static SingletonWithBackgroundTaskExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithBackgroundTaskExample1();\n        }\n        return instance;\n    }\n\n    public void runTask(Runnable task) {\n        executorService.submit(task);\n    }\n\n}",
        "public class ThreadLocalLogger {\n\n    private static final ThreadLocal<ThreadLocalLogger> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalLogger::new);\n\n    private ThreadLocalLogger() {}\n\n    public static ThreadLocalLogger getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}",
        "public class ThreadSafeSingletonExample2 {\n\n    private static ThreadSafeSingletonExample2 instance;\n\n    private ThreadSafeSingletonExample2() {}\n\n    public static synchronized ThreadSafeSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonExample2();\n        }\n        return instance;\n    }\n\n}",
        "public class LazySingletonWithOnDemandInitializationExample5 {\n\n    private static LazySingletonWithOnDemandInitializationExample5 instance;\n\n    private LazySingletonWithOnDemandInitializationExample5() {}\n\n    public static LazySingletonWithOnDemandInitializationExample5 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithOnDemandInitializationExample5();\n        }\n        return instance;\n    }\n\n}",
        "public class DoubleCheckedLockingSingletonExample5 {\n\n    private static volatile DoubleCheckedLockingSingletonExample5 instance;\n\n    private DoubleCheckedLockingSingletonExample5() {}\n\n    public static DoubleCheckedLockingSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n}",
        "import java.io.Serializable;\n\npublic class SerializableSingletonExample3 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static SerializableSingletonExample3 instance;\n\n    private SerializableSingletonExample3() {}\n\n    public static synchronized SerializableSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new SerializableSingletonExample3();\n        }\n        return instance;\n    }\n\n}",
        "import java.io.Serializable;\n\npublic class SerializableSingleton implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static SerializableSingleton instance;\n\n    private SerializableSingleton() {}\n\n    public static synchronized SerializableSingleton getInstance() {\n        if (instance == null) {\n            instance = new SerializableSingleton();\n        }\n        return instance;\n    }\n\n}",
        "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EventBusSingletonExample4 {\n\n    private static EventBusSingletonExample4 instance;\n    private List<String> events;\n\n    private EventBusSingletonExample4() {\n        events = new ArrayList<>();\n    }\n\n    public static synchronized EventBusSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new EventBusSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void postEvent(String event) {\n        events.add(event);\n        System.out.println(\"Event posted: \" + event);\n    }\n\n    public List<String> getPostedEvents() {\n        return events;\n    }\n\n}",
        "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class DatabaseConnectionSingletonExample3 {\n\n    private static DatabaseConnectionSingletonExample3 instance;\n    private Connection connection;\n\n    private DatabaseConnectionSingletonExample3() {\n        try {\n            connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db\", \"user\", \"password\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static DatabaseConnectionSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionSingletonExample3();\n        }\n        return instance;\n    }\n\n    public Connection getConnection() {\n        return connection;\n    }\n\n}",
        "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class RateLimiter {\n\n    private static RateLimiter instance;\n    private AtomicInteger tokenCount;\n    private static final int MAX_TOKENS = 100;\n\n    private RateLimiter() {\n        tokenCount = new AtomicInteger(MAX_TOKENS);\n    }\n\n    public static synchronized RateLimiter getInstance() {\n        if (instance == null) {\n            instance = new RateLimiter();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest(String clientId) {\n        if (tokenCount.get() > 0) {\n            tokenCount.decrementAndGet();\n            return true;\n        }\n        return false;\n    }\n\n    public void refillTokens() {\n        tokenCount.set(MAX_TOKENS);\n    }\n\n}",
        "public class SynchronizedDoubleCheckSingletonExample4 {\n\n    private static volatile SynchronizedDoubleCheckSingletonExample4 instance;\n\n    private SynchronizedDoubleCheckSingletonExample4() {}\n\n    public static SynchronizedDoubleCheckSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (SynchronizedDoubleCheckSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new SynchronizedDoubleCheckSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n}",
        "public class MultitonSingletonExample4 {\n\n    private static final MultitonSingletonExample4 instance = new MultitonSingletonExample4();\n\n    private MultitonSingletonExample4() {}\n\n    public static MultitonSingletonExample4 getInstance(String key) {\n        return instance.computeIfAbsent(key, k -> new MultitonSingletonExample4());\n    }\n\n}",
        "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggingSingletonExample1 {\n\n    private static LoggingSingletonExample1 instance;\n    private FileWriter fileWriter;\n\n    private LoggingSingletonExample1() {\n        try {\n            fileWriter = new FileWriter(\"app.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggingSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new LoggingSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}",
        "public class ThreadSafeSingletonExample5 {\n\n    private ThreadSafeSingletonExample5() {}\n\n    private static class SingletonHelper {\n        private static final ThreadSafeSingletonExample5 INSTANCE = new ThreadSafeSingletonExample5();\n    }\n\n    public static synchronized ThreadSafeSingletonExample5 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}",
        "public class StaticBlockWithInstanceValidationExample1 {\n\n    private static StaticBlockWithInstanceValidationExample1 instance;\n\n    private StaticBlockWithInstanceValidationExample1() {}\n\n    static {\n        try {\n            instance = new StaticBlockWithInstanceValidationExample1();\n        } catch (Exception e) {\n            System.err.println(\"Error during instance initialization: \" + e.getMessage());\n        }\n    }\n\n    public static StaticBlockWithInstanceValidationExample1 getInstance() {\n        return instance;\n    }\n\n}",
        "public class ThreadLocalSingletonExample5 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample5> instance = ThreadLocal.withInitial(ThreadLocalSingletonExample5::new);\n\n    private ThreadLocalSingletonExample5() {}\n\n    public static ThreadLocalSingletonExample5 getInstance() {\n        return instance.get();\n    }\n\n}",
        "public class SingletonWithRuntimeExceptionProtectionExample1 {\n\n    private static SingletonWithRuntimeExceptionProtectionExample1 instance;\n\n    private SingletonWithRuntimeExceptionProtectionExample1() {\n        if (instance != null) {\n            throw new RuntimeException(\"SingletonWithRuntimeExceptionProtectionExample1 already initialized\");\n        }\n    }\n\n    public static SingletonWithRuntimeExceptionProtectionExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithRuntimeExceptionProtectionExample1();\n        }\n        return instance;\n    }\n\n}",
        "public class SynchronizedMethodSingletonExample3 {\n\n    private static SynchronizedMethodSingletonExample3 instance;\n\n    private SynchronizedMethodSingletonExample3() {}\n\n    public static synchronized SynchronizedMethodSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new SynchronizedMethodSingletonExample3();\n        }\n        return instance;\n    }\n\n}",
        "public class BillPughSingletonExample2 {\n\n    private BillPughSingletonExample2() {}\n\n    private static class SingletonHelper {\n        private static final BillPughSingletonExample2 INSTANCE = new BillPughSingletonExample2();\n    }\n\n    public static BillPughSingletonExample2 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}",
        "import java.util.HashMap;\nimport java.util.Map;\n\npublic class CacheManagerSingletonExample5 {\n\n    private static CacheManagerSingletonExample5 instance;\n    private Map<String, String> cache;\n\n    private CacheManagerSingletonExample5() {\n        cache = new HashMap<>();\n    }\n\n    public static CacheManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new CacheManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}",
        "import java.util.concurrent.ConcurrentHashMap;\n\npublic class ClusteredSingletonExample2 {\n\n    private static final ConcurrentHashMap<String, ClusteredSingletonExample2> instances = new ConcurrentHashMap<>();\n\n    private ClusteredSingletonExample2() {}\n\n    public static ClusteredSingletonExample2 getInstance(String clusterKey) {\n        return instances.computeIfAbsent(clusterKey, k -> new ClusteredSingletonExample2());\n    }\n\n}",
        "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedCacheSingletonExample4 {\n\n    private static DistributedCacheSingletonExample4 instance;\n    private ConcurrentHashMap<String, String> cache;\n\n    private DistributedCacheSingletonExample4() {\n        cache = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedCacheSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new DistributedCacheSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void addCacheEntry(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String getCacheEntry(String key) {\n        return cache.get(key);\n    }\n\n}",
        "public class SingletonWithInitializationHooksExample5 {\n\n    private static SingletonWithInitializationHooksExample5 instance;\n\n    private SingletonWithInitializationHooksExample5() {\n        initialize();\n    }\n\n    public static synchronized SingletonWithInitializationHooksExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithInitializationHooksExample5();\n        }\n        return instance;\n    }\n\n    private void initialize() {\n        System.out.println(\"Singleton Initialized\");\n    }\n\n}",
        "public class SingletonWithLifecycleCallbacksExample4 {\n\n    private static SingletonWithLifecycleCallbacksExample4 instance;\n\n    private SingletonWithLifecycleCallbacksExample4() {}\n\n    public static SingletonWithLifecycleCallbacksExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithLifecycleCallbacksExample4();\n            onCreate();\n        }\n        return instance;\n    }\n\n    public static void onCreate() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n}",
        "public class EagerSingletonWithStartupLoggingExample3 {\n\n    private static final EagerSingletonWithStartupLoggingExample3 instance = new EagerSingletonWithStartupLoggingExample3();\n\n    private EagerSingletonWithStartupLoggingExample3() {\n        System.out.println(\"Singleton initialized during class loading\");\n    }\n\n    public static EagerSingletonWithStartupLoggingExample3 getInstance() {\n        return instance;\n    }\n\n}",
        "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class EnvironmentBasedSingletonExample2 {\n\n    private static EnvironmentBasedSingletonExample2 instance;\n    private Properties properties;\n\n    private EnvironmentBasedSingletonExample2() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"app_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static EnvironmentBasedSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new EnvironmentBasedSingletonExample2();\n        }\n        return instance;\n    }\n\n    public String getEnvironment() {\n        return properties.getProperty(\"environment\");\n    }\n\n}",
        "public class StaticBlockSingletonExample3 {\n\n    private static StaticBlockSingletonExample3 instance;\n\n    private StaticBlockSingletonExample3() {}\n\n    static {\n        try {\n            instance = new StaticBlockSingletonExample3();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static StaticBlockSingletonExample3 getInstance() {\n        return instance;\n    }\n\n}",
        "public class LazySingletonWithReadResolveExample2 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static LazySingletonWithReadResolveExample2 instance;\n\n    private LazySingletonWithReadResolveExample2() {}\n\n    public static LazySingletonWithReadResolveExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithReadResolveExample2();\n        }\n        return instance;\n    }\n\n    protected Object readResolve() {\n        return getInstance();\n    }\n\n}",
        "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class DatabasePoolSingletonExample1 {\n\n    private static DatabasePoolSingletonExample1 instance;\n    private Connection connection;\n\n    private DatabasePoolSingletonExample1() {\n        try {\n            connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db\", \"user\", \"password\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static DatabasePoolSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new DatabasePoolSingletonExample1();\n        }\n        return instance;\n    }\n\n    public Connection getConnection() {\n        return connection;\n    }\n\n}",
        "public class EagerlyInitializedStaticBlockSingletonExample3 {\n\n    private static EagerlyInitializedStaticBlockSingletonExample3 instance;\n\n    private EagerlyInitializedStaticBlockSingletonExample3() {}\n\n    static {\n        try {\n            instance = new EagerlyInitializedStaticBlockSingletonExample3();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static EagerlyInitializedStaticBlockSingletonExample3 getInstance() {\n        return instance;\n    }\n\n}",
        "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class SingletonWithDynamicResourcePoolExample3 {\n\n    private static SingletonWithDynamicResourcePoolExample3 instance;\n    private Queue<String> resources;\n\n    private SingletonWithDynamicResourcePoolExample3() {\n        resources = new LinkedList<>();\n        resources.add(\"Resource1\");\n        resources.add(\"Resource2\");\n    }\n\n    public static synchronized SingletonWithDynamicResourcePoolExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithDynamicResourcePoolExample3();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return resources.poll();\n    }\n\n    public void releaseResource(String resource) {\n        resources.add(resource);\n    }\n\n}",
        "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ConfigurationCacheSingletonExample3 {\n\n    private static ConfigurationCacheSingletonExample3 instance;\n    private Map<String, String> cache;\n\n    private ConfigurationCacheSingletonExample3() {\n        cache = new HashMap<>();\n    }\n\n    public static ConfigurationCacheSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationCacheSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}",
        "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class Configuration {\n\n    private static Configuration instance;\n    private Properties properties;\n\n    private Configuration() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static Configuration getInstance() {\n        if (instance == null) {\n            instance = new Configuration();\n        }\n        return instance;\n    }\n\n    public String getConfig(String key) {\n        return properties.getProperty(key);\n    }\n\n}",
        "public class LazySingletonWithInitializationCheckExample3 {\n\n    private static LazySingletonWithInitializationCheckExample3 instance;\n\n    private LazySingletonWithInitializationCheckExample3() {}\n\n    public static synchronized LazySingletonWithInitializationCheckExample3 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithInitializationCheckExample3();\n        }\n        return instance;\n    }\n\n}",
        "public enum EnumSingletonExample3 {\n\n    INSTANCE(\"default\");\n\n    private String info;\n\n    private EnumSingletonExample3(String info) {\n        this.info = info;\n    }\n\n    public EnumSingletonExample3 getInstance() {\n        return INSTANCE;\n    }\n}",
        "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationManagerExample5 {\n\n    private static ConfigurationManagerExample5 instance;\n    private Properties properties;\n\n    private ConfigurationManagerExample5() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"app_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationManagerExample5 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationManagerExample5();\n        }\n        return instance;\n    }\n\n    public String getConfigValue(String key) {\n        return properties.getProperty(key);\n    }\n\n}",
        "public class ThreadLocalSingletonExample3 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample3> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample3::new);\n\n    private ThreadLocalSingletonExample3() {}\n\n    public static ThreadLocalSingletonExample3 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}",
        "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedCache {\n\n    private static DistributedCache instance;\n    private ConcurrentHashMap<String, String> cache;\n\n    private DistributedCache() {\n        cache = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedCache getInstance() {\n        if (instance == null) {\n            instance = new DistributedCache();\n        }\n        return instance;\n    }\n\n    public void addCacheEntry(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String getCacheEntry(String key) {\n        return cache.get(key);\n    }\n\n}",
        "import java.util.HashMap;\nimport java.util.Map;\n\npublic class Multiton {\n\n    private static final Map<String, Multiton> instances = new HashMap<>();\n\n    private Multiton() {}\n\n    public static Multiton getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new Multiton());\n    }\n\n}",
        "public class LazySingletonExample2 {\n\n    private static LazySingletonExample2 instance;\n\n    private LazySingletonExample2() {}\n\n    public static LazySingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonExample2();\n        }\n        return instance;\n    }\n\n}",
        "public class StaticBlockSingletonWithErrorHandlingExample5 {\n\n    private static StaticBlockSingletonWithErrorHandlingExample5 instance;\n\n    private StaticBlockSingletonWithErrorHandlingExample5() {}\n\n    static {\n        try {\n            instance = new StaticBlockSingletonWithErrorHandlingExample5();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error creating singleton instance\", e);\n        }\n    }\n\n    public static StaticBlockSingletonWithErrorHandlingExample5 getInstance() {\n        return instance;\n    }\n\n}",
        "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample3 {\n\n    private static LoggerSingletonExample3 instance;\n    private FileWriter fileWriter;\n\n    private LoggerSingletonExample3() {\n        try {\n            fileWriter = new FileWriter(\"application.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized LoggerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new LoggerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}",
        "public class StaticBlockInitializationSingletonExample3 {\n\n    private static StaticBlockInitializationSingletonExample3 instance;\n\n    static {\n        try {\n            instance = new StaticBlockInitializationSingletonExample3();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error initializing singleton\", e);\n        }\n    }\n\n    private StaticBlockInitializationSingletonExample3() {}\n\n    public static StaticBlockInitializationSingletonExample3 getInstance() {\n        return instance;\n    }\n\n}",
        "public class StaticBlockInitializationSingletonExample2 {\n\n    private static StaticBlockInitializationSingletonExample2 instance;\n\n    static {\n        try {\n            instance = new StaticBlockInitializationSingletonExample2();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error initializing singleton\", e);\n        }\n    }\n\n    private StaticBlockInitializationSingletonExample2() {}\n\n    public static StaticBlockInitializationSingletonExample2 getInstance() {\n        return instance;\n    }\n\n}",
        "public class SingletonWithLifecycleHooksExample3 {\n\n    private static SingletonWithLifecycleHooksExample3 instance;\n\n    private SingletonWithLifecycleHooksExample3() {\n        onCreate();\n    }\n\n    public static SingletonWithLifecycleHooksExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithLifecycleHooksExample3();\n        }\n        return instance;\n    }\n\n    private void onCreate() {\n        System.out.println(\"SingletonWithLifecycleHooksExample3 created\");\n    }\n\n    public static void onDestroy() {\n        System.out.println(\"SingletonWithLifecycleHooksExample3 destroyed\");\n        instance = null;\n    }\n\n}",
        "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ConfigurationCacheSingletonExample2 {\n\n    private static ConfigurationCacheSingletonExample2 instance;\n    private Map<String, String> cache;\n\n    private ConfigurationCacheSingletonExample2() {\n        cache = new HashMap<>();\n    }\n\n    public static ConfigurationCacheSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationCacheSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}",
        "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedLockManagerSingletonExample4 {\n\n    private static DistributedLockManagerSingletonExample4 instance;\n    private ConcurrentHashMap<String, Boolean> locks;\n\n    private DistributedLockManagerSingletonExample4() {\n        locks = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedLockManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new DistributedLockManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public boolean acquireLock(String key) {\n        return locks.putIfAbsent(key, true) == null;\n    }\n\n    public void releaseLock(String key) {\n        locks.remove(key);\n    }\n\n}",
        "public class ThreadSafeSingletonWithInitializationOnDemandExample5 {\n\n    private ThreadSafeSingletonWithInitializationOnDemandExample5() {}\n\n    private static class SingletonHelper {\n        private static final ThreadSafeSingletonWithInitializationOnDemandExample5 INSTANCE = new ThreadSafeSingletonWithInitializationOnDemandExample5();\n    }\n\n    public static ThreadSafeSingletonWithInitializationOnDemandExample5 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}",
        "public class MultithreadedLazySingletonExample3 {\n\n    private static MultithreadedLazySingletonExample3 instance;\n\n    private MultithreadedLazySingletonExample3() {}\n\n    public static MultithreadedLazySingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new MultithreadedLazySingletonExample3();\n        }\n        return instance;\n    }\n\n}",
        "public class ThreadLocalCounterSingletonExample5 {\n\n    private static final ThreadLocal<ThreadLocalCounterSingletonExample5> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalCounterSingletonExample5::new);\n\n    private int counter;\n\n    private ThreadLocalCounterSingletonExample5() {\n        counter = 0;\n    }\n\n    public static ThreadLocalCounterSingletonExample5 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public int incrementAndGet() {\n        return ++counter;\n    }\n\n}",
        "public class ThreadSafeLazySingletonExample5 {\n\n    private ThreadSafeLazySingletonExample5() {}\n\n    private static class LazySingletonHelper {\n        private static final ThreadSafeLazySingletonExample5 INSTANCE = new ThreadSafeLazySingletonExample5();\n    }\n\n    public static ThreadSafeLazySingletonExample5 getInstance() {\n        return LazySingletonHelper.INSTANCE;\n    }\n\n}",
        "import java.lang.ref.WeakReference;\n\npublic class SingletonWithWeakReference {\n\n    private static WeakReference<SingletonWithWeakReference> instance;\n\n    private SingletonWithWeakReference() {}\n\n    public static SingletonWithWeakReference getInstance() {\n        if (instance == null || instance.get() == null) {\n            instance = new WeakReference<>(new SingletonWithWeakReference());\n        }\n        return instance.get();\n    }\n\n}",
        "public enum EnumSingletonWithDataExample2 {\n\n    INSTANCE(\"default\");\n\n    private String data;\n\n    private EnumSingletonWithDataExample2(String data) {\n        this.data = data;\n    }\n\n    public String getData() {\n        return data;\n    }\n\n}",
        "import java.util.PriorityQueue;\n\npublic class PriorityBasedSingletonExample5 {\n\n    private static PriorityBasedSingletonExample5 instance;\n    private PriorityQueue<Integer> priorityQueue;\n\n    private PriorityBasedSingletonExample5() {\n        priorityQueue = new PriorityQueue<>();\n    }\n\n    public static PriorityBasedSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new PriorityBasedSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void addPriority(int priority) {\n        priorityQueue.add(priority);\n    }\n\n    public int getHighestPriority() {\n        return priorityQueue.poll();\n    }\n\n}",
        "public class SynchronizedAccessSingleton {\n\n    private static SynchronizedAccessSingleton instance;\n\n    private SynchronizedAccessSingleton() {}\n\n    public static synchronized SynchronizedAccessSingleton getInstance() {\n        if (instance == null) {\n            instance = new SynchronizedAccessSingleton();\n        }\n        return instance;\n    }\n\n}",
        "public class SerializableWithReadResolveSingleton implements Serializable {\n\n    private static final long serialVersionUID = 1911904003687931976L;\n\n    private static SerializableWithReadResolveSingleton instance;\n\n    private SerializableWithReadResolveSingleton() {}\n\n    public static synchronized SerializableWithReadResolveSingleton getInstance() {\n        if (instance == null) {\n            instance = new SerializableWithReadResolveSingleton();\n        }\n        return instance;\n    }\n\n}",
        "public class ThreadLocalSessionManagerSingletonExample2 {\n\n    private static final ThreadLocal<ThreadLocalSessionManagerSingletonExample2> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSessionManagerSingletonExample2::new);\n\n    private ThreadLocalSessionManagerSingletonExample2() {}\n\n    public static ThreadLocalSessionManagerSingletonExample2 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}",
        "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class DatabaseConnectionPoolSingletonExample4 {\n\n    private static DatabaseConnectionPoolSingletonExample4 instance;\n    private Queue<String> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample4() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static synchronized DatabaseConnectionPoolSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionPoolSingletonExample4();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}",
        "public class StaticBlockSingletonWithErrorHandlingExample3 {\n\n    private static StaticBlockSingletonWithErrorHandlingExample3 instance;\n\n    private StaticBlockSingletonWithErrorHandlingExample3() {}\n\n    static {\n        try {\n            instance = new StaticBlockSingletonWithErrorHandlingExample3();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error creating singleton instance\", e);\n        }\n    }\n\n    public static StaticBlockSingletonWithErrorHandlingExample3 getInstance() {\n        return instance;\n    }\n\n}",
        "public class ThreadSafeSingletonExample1 {\n\n    private static ThreadSafeSingletonExample1 instance;\n\n    private ThreadSafeSingletonExample1() {}\n\n    public static synchronized ThreadSafeSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonExample1();\n        }\n        return instance;\n    }\n\n}",
        "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ApplicationSettingsSingletonExample5 {\n\n    private static ApplicationSettingsSingletonExample5 instance;\n    private Properties properties;\n\n    private ApplicationSettingsSingletonExample5() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"appsettings.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized ApplicationSettingsSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new ApplicationSettingsSingletonExample5();\n        }\n        return instance;\n    }\n\n    public String getSetting(String key) {\n        return properties.getProperty(key);\n    }\n\n}",
        "import java.util.Optional;\n\npublic class SingletonWithOptionalInstanceExample3 {\n\n    private static SingletonWithOptionalInstanceExample3 instance;\n\n    private SingletonWithOptionalInstanceExample3() {}\n\n    public static Optional<SingletonWithOptionalInstanceExample3> getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithOptionalInstanceExample3();\n        }\n        return Optional.of(instance);\n    }\n\n}",
        "public class EagerlyInitializedSingletonExample2 {\n\n    private EagerlyInitializedSingletonExample2() {}\n\n    private static final EagerlyInitializedSingletonExample2 instance = new EagerlyInitializedSingletonExample2();\n\n    public static EagerlyInitializedSingletonExample2 getInstance() {\n        return instance;\n    }\n\n}",
        "import java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class SingletonWithTimeoutInitializationExample4 {\n\n    private static SingletonWithTimeoutInitializationExample4 instance;\n    private static final Lock lock = new ReentrantLock();\n\n    private SingletonWithTimeoutInitializationExample4() {}\n\n    public static SingletonWithTimeoutInitializationExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithTimeoutInitializationExample4();\n        }\n        return instance;\n    }\n\n    public static synchronized SingletonWithTimeoutInitializationExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithTimeoutInitializationExample4();\n        }\n        return instance;\n    }\n\n    public boolean isInitialized() {\n        return instance != null;\n    }\n\n}",
        "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationManager {\n\n    private static ConfigurationManager instance;\n    private Properties properties;\n\n    private ConfigurationManager() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"app_config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationManager getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationManager();\n        }\n        return instance;\n    }\n\n    public String getConfig(String key) {\n        return properties.getProperty(key);\n    }\n\n}",
        "public class OptimizedLazySingletonExample2 {\n\n    private static volatile OptimizedLazySingletonExample2 instance;\n\n    private OptimizedLazySingletonExample2() {}\n\n    public static OptimizedLazySingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (OptimizedLazySingletonExample2.class) {\n                if (instance == null) {\n                    instance = new OptimizedLazySingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n}",
        "public class EagerThreadSafeSingleton {\n\n    private static final EagerThreadSafeSingleton instance = new EagerThreadSafeSingleton();\n\n    private EagerThreadSafeSingleton() {}\n\n    public static EagerThreadSafeSingleton getInstance() {\n        return instance;\n    }\n\n}",
        "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SessionManagerSingletonExample5 {\n\n    private static SessionManagerSingletonExample5 instance;\n    private Map<String, String> activeSessions;\n\n    private SessionManagerSingletonExample5() {\n        activeSessions = new HashMap<>();\n    }\n\n    public static SessionManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new SessionManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        activeSessions.put(user, \"SessionActive\");\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return activeSessions.containsKey(user);\n    }\n\n}",
        "public class SingletonWithDynamicConfigurationExample4 {\n\n    private static SingletonWithDynamicConfigurationExample4 instance;\n    private String config;\n\n    private SingletonWithDynamicConfigurationExample4(String config) {\n        this.config = config;\n    }\n\n    public static SingletonWithDynamicConfigurationExample4 getInstance(String config) {\n        if (instance == null) {\n            instance = new SingletonWithDynamicConfigurationExample4(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}",
        "public class EagerlyInitializedStaticBlockSingleton {\n\n    private static EagerlyInitializedStaticBlockSingleton instance;\n\n    private EagerlyInitializedStaticBlockSingleton() {}\n\n    static {\n        try {\n            instance = new EagerlyInitializedStaticBlockSingleton();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static EagerlyInitializedStaticBlockSingleton getInstance() {\n        return instance;\n    }\n\n}",
        "public class LazySingletonWithCounterExample5 {\n\n    private static LazySingletonWithCounterExample5 instance;\n    private static int counter;\n\n    private LazySingletonWithCounterExample5() {\n        counter++;\n    }\n\n    public static LazySingletonWithCounterExample5 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithCounterExample5();\n        }\n        return instance;\n    }\n\n    public int getInstanceCount() {\n        return counter;\n    }\n\n}",
        "import java.util.HashMap;\nimport java.util.Map;\n\npublic class FileStorageManagerSingletonExample5 {\n\n    private static FileStorageManagerSingletonExample5 instance;\n    private Map<String, byte[]> fileStorage;\n\n    private FileStorageManagerSingletonExample5() {\n        fileStorage = new HashMap<>();\n    }\n\n    public static synchronized FileStorageManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new FileStorageManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void saveFile(String fileName, byte[] data) {\n        fileStorage.put(fileName, data);\n    }\n\n    public byte[] getFile(String fileName) {\n        return fileStorage.get(fileName);\n    }\n\n}",
        "public class SynchronizedMethodSingletonExample1 {\n\n    private static SynchronizedMethodSingletonExample1 instance;\n\n    private SynchronizedMethodSingletonExample1() {}\n\n    public static synchronized SynchronizedMethodSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new SynchronizedMethodSingletonExample1();\n        }\n        return instance;\n    }\n\n}",
        "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample3 {\n\n    private static SingletonWithMetricsCollectionExample3 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample3() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample3();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}",
        "public class StaticBlockSingletonExample4 {\n\n    private static StaticBlockSingletonExample4 instance;\n\n    private StaticBlockSingletonExample4() {}\n\n    static {\n        try {\n            instance = new StaticBlockSingletonExample4();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static StaticBlockSingletonExample4 getInstance() {\n        return instance;\n    }\n\n}",
        "public class VolatileLazyInitializationSingleton {\n\n    private static volatile VolatileLazyInitializationSingleton instance;\n\n    private VolatileLazyInitializationSingleton() {}\n\n    public static VolatileLazyInitializationSingleton getInstance() {\n        if (instance == null) {\n            synchronized (VolatileLazyInitializationSingleton.class) {\n                if (instance == null) {\n                    instance = new VolatileLazyInitializationSingleton();\n                }\n            }\n        }\n        return instance;\n    }\n\n}",
        "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class StatefulLoggerSingletonExample3 {\n\n    private static StatefulLoggerSingletonExample3 instance;\n    private FileWriter fileWriter;\n\n    private StatefulLoggerSingletonExample3() {\n        try {\n            fileWriter = new FileWriter(\"log.txt\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static StatefulLoggerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new StatefulLoggerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}",
        "public class LazySingletonWithInitializationCountExample2 {\n\n    private static LazySingletonWithInitializationCountExample2 instance;\n    private static int initializationCount = 0;\n\n    private LazySingletonWithInitializationCountExample2() {\n        initializationCount++;\n    }\n\n    public static LazySingletonWithInitializationCountExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithInitializationCountExample2();\n        }\n        return instance;\n    }\n\n    public int getInitializationCount() {\n        return initializationCount;\n    }\n\n}",
        "import java.util.Optional;\n\npublic class SingletonWithOptionalInstanceExample2 {\n\n    private static SingletonWithOptionalInstanceExample2 instance;\n\n    private SingletonWithOptionalInstanceExample2() {}\n\n    public static Optional<SingletonWithOptionalInstanceExample2> getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithOptionalInstanceExample2();\n        }\n        return Optional.of(instance);\n    }\n\n}",
        "public class SingletonWithRetryPolicyExample1 {\n\n    private static SingletonWithRetryPolicyExample1 instance;\n    private int retryCount;\n\n    private SingletonWithRetryPolicyExample1() {\n        retryCount = 0;\n    }\n\n    public static synchronized SingletonWithRetryPolicyExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithRetryPolicyExample1();\n        }\n        return instance;\n    }\n\n    public void retry(String task) {\n        retryCount++;\n        System.out.println(\"Retrying task: \" + task + \" - Retry Count: \" + retryCount);\n    }\n\n    public int getRetryCount() {\n        return retryCount;\n    }\n\n}",
        "public enum EnumBasedSingletonExample3 {\n\n    INSTANCE;\n\n    public void performAction() {\n        System.out.println(\"Action performed by Singleton\");\n    }\n\n}",
        "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EventHandler {\n\n    private static EventHandler instance;\n    private List<String> events;\n\n    private EventHandler() {\n        events = new ArrayList<>();\n    }\n\n    public static EventHandler getInstance() {\n        if (instance == null) {\n            instance = new EventHandler();\n        }\n        return instance;\n    }\n\n    public void handleEvent(String event) {\n        events.add(event);\n        System.out.println(\"Event handled: \" + event);\n    }\n\n    public List<String> getEvents() {\n        return events;\n    }\n\n}",
        "public class ThreadSafeSingletonWithLifecycleExample3 {\n\n    private ThreadSafeSingletonWithLifecycleExample3() {}\n\n    private static class SingletonHelper {\n        private static final ThreadSafeSingletonWithLifecycleExample3 INSTANCE = new ThreadSafeSingletonWithLifecycleExample3();\n    }\n\n    public static synchronized ThreadSafeSingletonWithLifecycleExample3 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}",
        "public class EagerThreadSafeSingletonExample5 {\n\n    private static final EagerThreadSafeSingletonExample5 instance = new EagerThreadSafeSingletonExample5();\n\n    private EagerThreadSafeSingletonExample5() {}\n\n    public static EagerThreadSafeSingletonExample5 getInstance() {\n        return instance;\n    }\n\n}",
        "public class LazySingletonWithInitializationCheckExample4 {\n\n    private static LazySingletonWithInitializationCheckExample4 instance;\n\n    private LazySingletonWithInitializationCheckExample4() {}\n\n    public static synchronized LazySingletonWithInitializationCheckExample4 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithInitializationCheckExample4();\n        }\n        return instance;\n    }\n\n}",
        "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ConfigurationCacheSingletonExample1 {\n\n    private static ConfigurationCacheSingletonExample1 instance;\n    private Map<String, String> cache;\n\n    private ConfigurationCacheSingletonExample1() {\n        cache = new HashMap<>();\n    }\n\n    public static ConfigurationCacheSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationCacheSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}",
        "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingletonWithBackgroundTask {\n\n    private static SingletonWithBackgroundTask instance;\n    private ExecutorService executorService;\n\n    private SingletonWithBackgroundTask() {\n        executorService = Executors.newSingleThreadExecutor();\n    }\n\n    public static SingletonWithBackgroundTask getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithBackgroundTask();\n        }\n        return instance;\n    }\n\n    public void runTask(Runnable task) {\n        executorService.submit(task);\n    }\n\n}",
        "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class LazyLoadedResourceManagerSingletonExample2 {\n\n    private static LazyLoadedResourceManagerSingletonExample2 instance;\n    private Queue<String> availableResources;\n\n    private LazyLoadedResourceManagerSingletonExample2() {\n        availableResources = new LinkedList<>();\n        availableResources.add(\"Resource1\");\n        availableResources.add(\"Resource2\");\n    }\n\n    public static synchronized LazyLoadedResourceManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazyLoadedResourceManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return availableResources.poll();\n    }\n\n}",
        "public class SynchronizedAccessSingletonExample5 {\n\n    private static SynchronizedAccessSingletonExample5 instance;\n\n    private SynchronizedAccessSingletonExample5() {}\n\n    public static synchronized SynchronizedAccessSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new SynchronizedAccessSingletonExample5();\n        }\n        return instance;\n    }\n\n}",
        "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample2 {\n\n    private static SingletonWithMetricsCollectionExample2 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample2() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample2();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getMetrics() {\n        return collectedMetrics;\n    }\n\n}",
        "import java.util.HashSet;\nimport java.util.Set;\n\npublic class NotificationServiceSingletonExample4 {\n\n    private static NotificationServiceSingletonExample4 instance;\n    private Set<String> registeredUsers;\n\n    private NotificationServiceSingletonExample4() {\n        registeredUsers = new HashSet<>();\n    }\n\n    public static synchronized NotificationServiceSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new NotificationServiceSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void registerUser(String user) {\n        registeredUsers.add(user);\n    }\n\n    public void sendNotification(String user, String message) {\n        if (registeredUsers.contains(user)) {\n            System.out.println(\"Notification sent to \" + user + \": \" + message);\n        } else {\n            System.out.println(\"User not registered: \" + user);\n        }\n    }\n\n}",
        "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SessionManagerSingletonExample2 {\n\n    private static SessionManagerSingletonExample2 instance;\n    private Map<String, String> activeSessions;\n\n    private SessionManagerSingletonExample2() {\n        activeSessions = new HashMap<>();\n    }\n\n    public static SessionManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new SessionManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        activeSessions.put(user, \"Active\");\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return activeSessions.containsKey(user);\n    }\n\n}",
        "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample5 {\n\n    private static SingletonWithMetricsCollectionExample5 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample5() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample5();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getMetrics() {\n        return collectedMetrics;\n    }\n\n}",
        "public class EagerlyInitializedStaticBlockSingletonExample5 {\n\n    private static EagerlyInitializedStaticBlockSingletonExample5 instance;\n\n    private EagerlyInitializedStaticBlockSingletonExample5() {}\n\n    static {\n        try {\n            instance = new EagerlyInitializedStaticBlockSingletonExample5();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static EagerlyInitializedStaticBlockSingletonExample5 getInstance() {\n        return instance;\n    }\n\n}",
        "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class ResourcePoolSingletonExample1 {\n\n    private static ResourcePoolSingletonExample1 instance;\n    private Queue<String> resources;\n\n    private ResourcePoolSingletonExample1() {\n        resources = new LinkedList<>();\n        resources.add(\"Resource1\");\n        resources.add(\"Resource2\");\n    }\n\n    public static synchronized ResourcePoolSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new ResourcePoolSingletonExample1();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return resources.poll();\n    }\n\n    public void releaseResource(String resource) {\n        resources.add(resource);\n    }\n\n}",
        "import java.util.HashSet;\nimport java.util.Set;\n\npublic class SessionTracker {\n\n    private static SessionTracker instance;\n    private Set<String> activeSessions;\n\n    private SessionTracker() {\n        activeSessions = new HashSet<>();\n    }\n\n    public static synchronized SessionTracker getInstance() {\n        if (instance == null) {\n            instance = new SessionTracker();\n        }\n        return instance;\n    }\n\n    public void trackSession(String sessionId) {\n        activeSessions.add(sessionId);\n        System.out.println(\"Session tracked: \" + sessionId);\n    }\n\n    public boolean isSessionActive(String sessionId) {\n        return activeSessions.contains(sessionId);\n    }\n\n}",
        "import java.util.HashMap;\nimport java.util.Map;\n\npublic class AuthenticationManagerSingletonExample4 {\n\n    private static AuthenticationManagerSingletonExample4 instance;\n    private Map<String, String> userDatabase;\n\n    private AuthenticationManagerSingletonExample4() {\n        userDatabase = new HashMap<>();\n        userDatabase.put(\"admin\", \"password123\");\n        userDatabase.put(\"user\", \"pass\");\n    }\n\n    public static synchronized AuthenticationManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new AuthenticationManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public boolean authenticate(String user, String password) {\n        return password.equals(userDatabase.get(user));\n    }\n\n}",
        "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class ClusteredSingleton {\n\n    private static final ConcurrentMap<String, ClusteredSingleton> instances = new ConcurrentHashMap<>();\n\n    private ClusteredSingleton() {}\n\n    public static ClusteredSingleton getInstance(String clusterKey) {\n        return instances.computeIfAbsent(clusterKey, k -> new ClusteredSingleton());\n    }\n\n}",
        "public class LazySingletonExample2 {\n\n    private static LazySingletonExample2 instance;\n\n    private LazySingletonExample2() {}\n\n    public static LazySingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonExample2();\n        }\n        return instance;\n    }\n\n}",
        "public class LazySingletonExample3 {\n\n    private static LazySingletonExample3 instance;\n\n    private LazySingletonExample3() {}\n\n    public static LazySingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonExample3();\n        }\n        return instance;\n    }\n\n}",
        "public class ThreadLocalSingletonExample4 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample4> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample4::new);\n\n    private ThreadLocalSingletonExample4() {}\n\n    public static ThreadLocalSingletonExample4 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
    ],
    "references": [
        [
            "public class LazyInitializedSingletonExample4 {\n\n    private static LazyInitializedSingletonExample4 instance;\n\n    private LazyInitializedSingletonExample4() {}\n\n    public static LazyInitializedSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new LazyInitializedSingletonExample4();\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "import java.util.HashMap;\nimport java.util.Map;\n\npublic class FeatureFlagManager {\n\n    private static FeatureFlagManager instance;\n    private Map<String, Boolean> featureFlags;\n\n    private FeatureFlagManager() {\n        featureFlags = new HashMap<>();\n        featureFlags.put(\"DarkMode\", true);\n        featureFlags.put(\"BetaFeatures\", false);\n    }\n\n    public static synchronized FeatureFlagManager getInstance() {\n        if (instance == null) {\n            instance = new FeatureFlagManager();\n        }\n        return instance;\n    }\n\n    public boolean isFeatureEnabled(String feature) {\n        return featureFlags.getOrDefault(feature, false);\n    }\n\n}"
        ],
        [
            "public class SingletonWithDynamicConfigurationExample3 {\n\n    private static SingletonWithDynamicConfigurationExample3 instance;\n    private String environment;\n\n    private SingletonWithDynamicConfigurationExample3(String environment) {\n        this.environment = environment;\n    }\n\n    public static SingletonWithDynamicConfigurationExample3 getInstance(String environment) {\n        if (instance == null) {\n            instance = new SingletonWithDynamicConfigurationExample3(environment);\n        }\n        return instance;\n    }\n\n    public String getEnvironment() {\n        return environment;\n    }\n\n}"
        ],
        [
            "import java.util.concurrent.CopyOnWriteArrayList;\n\npublic class EventBusSingletonExample2 {\n\n    private static EventBusSingletonExample2 instance;\n    private CopyOnWriteArrayList<String> subscribers;\n\n    private EventBusSingletonExample2() {\n        subscribers = new CopyOnWriteArrayList<>();\n    }\n\n    public static synchronized EventBusSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new EventBusSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void subscribe(String subscriber) {\n        subscribers.add(subscriber);\n    }\n\n    public void postEvent(String event) {\n        for (String subscriber : subscribers) {\n            System.out.println(\"Event sent to \" + subscriber + \": \" + event);\n        }\n    }\n\n}"
        ],
        [
            "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class TokenBucketRateLimiterSingletonExample3 {\n\n    private static TokenBucketRateLimiterSingletonExample3 instance;\n    private AtomicInteger tokens;\n    private static final int MAX_TOKENS = 10;\n\n    private TokenBucketRateLimiterSingletonExample3() {\n        tokens = new AtomicInteger(MAX_TOKENS);\n    }\n\n    public static TokenBucketRateLimiterSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new TokenBucketRateLimiterSingletonExample3();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest() {\n        if (tokens.get() > 0) {\n            tokens.decrementAndGet();\n            return true;\n        } else {\n            System.out.println(\"Request denied: Rate limit exceeded\");\n            return false;\n        }\n    }\n\n    public void refillTokens() {\n        tokens.set(MAX_TOKENS);\n    }\n\n}"
        ],
        [
            "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedLockManagerSingletonExample5 {\n\n    private static DistributedLockManagerSingletonExample5 instance;\n    private ConcurrentHashMap<String, Boolean> locks;\n\n    private DistributedLockManagerSingletonExample5() {\n        locks = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedLockManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new DistributedLockManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public boolean acquireLock(String key) {\n        return locks.putIfAbsent(key, true) == null;\n    }\n\n    public void releaseLock(String key) {\n        locks.remove(key);\n    }\n\n}"
        ],
        [
            "public class EagerThreadSafeSingletonExample4 {\n\n    private static final EagerThreadSafeSingletonExample4 INSTANCE = new EagerThreadSafeSingletonExample4();\n\n    private EagerThreadSafeSingletonExample4() {}\n\n    public static EagerThreadSafeSingletonExample4 getInstance() {\n        return INSTANCE;\n    }\n\n}"
        ],
        [
            "import java.util.HashSet;\nimport java.util.Set;\n\npublic class FileSystemCacheSingletonExample4 {\n\n    private static FileSystemCacheSingletonExample4 instance;\n    private Set<String> cachedFiles;\n\n    private FileSystemCacheSingletonExample4() {\n        cachedFiles = new HashSet<>();\n    }\n\n    public static synchronized FileSystemCacheSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new FileSystemCacheSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void cacheFile(String path) {\n        cachedFiles.add(path);\n        System.out.println(\"Caching file: \" + path);\n    }\n\n    public boolean isFileCached(String path) {\n        return cachedFiles.contains(path);\n    }\n\n}"
        ],
        [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithObserverPatternExample2 {\n\n    private static SingletonWithObserverPatternExample2 instance;\n    private List<Observer> observers;\n\n    private SingletonWithObserverPatternExample2() {\n        observers = new ArrayList<>();\n    }\n\n    public static SingletonWithObserverPatternExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithObserverPatternExample2();\n        }\n        return instance;\n    }\n\n    public void addObserver(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyObservers(String message) {\n        for (Observer observer : observers) {\n            observer.update(message);\n        }\n    }\n\n}\n\ninterface Observer {\n    void update(String message);\n}"
        ],
        [
            "import java.util.HashMap;\nimport java.util.Map;\n\npublic class CacheManagerSingletonExample4 {\n\n    private static CacheManagerSingletonExample4 instance;\n    private Map<String, String> cache;\n\n    private CacheManagerSingletonExample4() {\n        cache = new HashMap<>();\n    }\n\n    public static CacheManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new CacheManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
        ],
        [
            "public class BaseClass {\n\n    public BaseClass() {}\n\n}\n\npublic class DerivedSingleton extends BaseClass {\n\n    private static DerivedSingleton instance;\n\n    private DerivedSingleton() {}\n\n    public static DerivedSingleton getInstance() {\n        if (instance == null) {\n            instance = new DerivedSingleton();\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class ClusteredSingletonExample5 {\n\n    private static final ConcurrentMap<String, ClusteredSingletonExample5> instances = new ConcurrentHashMap<>();\n\n    private ClusteredSingletonExample5() {}\n\n    public static ClusteredSingletonExample5 getInstance(String clusterKey) {\n        return instances.computeIfAbsent(clusterKey, key -> new ClusteredSingletonExample5());\n    }\n\n}"
        ],
        [
            "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class ResourceAllocatorSingletonExample4 {\n\n    private static ResourceAllocatorSingletonExample4 instance;\n    private Queue<String> resources;\n\n    private ResourceAllocatorSingletonExample4() {\n        resources = new LinkedList<>();\n        resources.add(\"Resource1\");\n        resources.add(\"Resource2\");\n    }\n\n    public static synchronized ResourceAllocatorSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new ResourceAllocatorSingletonExample4();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return resources.poll();\n    }\n\n    public void releaseResource(String resourceName) {\n        resources.add(resourceName);\n    }\n\n}"
        ],
        [
            "import java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class TimedInitializer {\n\n    private static TimedInitializer instance;\n    private static final Lock lock = new ReentrantLock();\n\n    private TimedInitializer() {}\n\n    public static TimedInitializer getInstance() {\n        if (instance == null) {\n            try {\n                if (lock.tryLock()) {\n                    try {\n                        if (instance == null) {\n                            instance = new TimedInitializer();\n                        }\n                    } finally {\n                        lock.unlock();\n                    }\n                }\n            } catch (Exception e) {\n                System.out.println(\"Timeout during initialization\");\n            }\n        }\n        return instance;\n    }\n\n    public void initialize() {\n        System.out.println(\"Initialized\");\n    }\n\n}"
        ],
        [
            "import java.util.Timer;\nimport java.util.TimerTask;\n\npublic class SchedulerWithCronJobsSingletonExample5 {\n\n    private static SchedulerWithCronJobsSingletonExample5 instance;\n    private Timer timer;\n\n    private SchedulerWithCronJobsSingletonExample5() {\n        timer = new Timer(true);\n    }\n\n    public static synchronized SchedulerWithCronJobsSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new SchedulerWithCronJobsSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void addJob(String job, long delay) {\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                System.out.println(\"Executing job: \" + job);\n            }\n        }, delay);\n    }\n\n}"
        ],
        [
            "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class GlobalIdGeneratorSingletonExample4 {\n\n    private static GlobalIdGeneratorSingletonExample4 instance;\n    private AtomicInteger counter;\n\n    private GlobalIdGeneratorSingletonExample4() {\n        counter = new AtomicInteger(0);\n    }\n\n    public static GlobalIdGeneratorSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new GlobalIdGeneratorSingletonExample4();\n        }\n        return instance;\n    }\n\n    public int generate() {\n        return counter.incrementAndGet();\n    }\n\n}"
        ],
        [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample4 {\n\n    private static SingletonWithMetricsCollectionExample4 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample4() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample4();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
        ],
        [
            "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class RateLimiter {\n\n    private static RateLimiter instance;\n    private AtomicInteger tokens;\n    private static final int MAX_TOKENS = 10;\n\n    private RateLimiter() {\n        tokens = new AtomicInteger(MAX_TOKENS);\n    }\n\n    public static RateLimiter getInstance() {\n        if (instance == null) {\n            instance = new RateLimiter();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest() {\n        if (tokens.get() > 0) {\n            tokens.decrementAndGet();\n            return true;\n        } else {\n            System.out.println(\"Request denied: Rate limit exceeded\");\n            return false;\n        }\n    }\n\n    public void refillTokens() {\n        tokens.set(MAX_TOKENS);\n    }\n\n}"
        ],
        [
            "public enum EnumSingletonExample2 {\n\n    INSTANCE;\n\n    //other\n}"
        ],
        [
            "public class SingletonWithRetryPolicyExample4 {\n\n    private static SingletonWithRetryPolicyExample4 instance;\n    private int retryCount;\n\n    private SingletonWithRetryPolicyExample4() {\n        retryCount = 0;\n    }\n\n    public static synchronized SingletonWithRetryPolicyExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithRetryPolicyExample4();\n        }\n        return instance;\n    }\n\n    public void retry(String task) {\n        retryCount++;\n        System.out.println(\"Retrying task: \" + task + \" - Retry Count: \" + retryCount);\n    }\n\n    public int getRetryCount() {\n        return retryCount;\n    }\n\n}"
        ],
        [
            "import java.util.PriorityQueue;\n\npublic class PriorityBasedSingletonExample3 {\n\n    private static PriorityBasedSingletonExample3 instance;\n    private PriorityQueue<Integer> priorityQueue;\n\n    private PriorityBasedSingletonExample3() {\n        priorityQueue = new PriorityQueue<>();\n    }\n\n    public static PriorityBasedSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new PriorityBasedSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void addPriority(int priority) {\n        priorityQueue.add(priority);\n    }\n\n    public int getHighestPriority() {\n        return priorityQueue.poll();\n    }\n\n}"
        ],
        [
            "public class StaticBlockSingletonExample1 {\n    public static StaticBlockSingletonExample1 instance;\n\n    private StaticBlockSingletonExample1() {\n        // private constructor\n    }\n\n    static {\n        instance = new StaticBlockSingletonExample1();\n    }\n}"
        ],
        [
            "public class ThreadSafeSingletonWithLifecycleExample1 {\n\n    private static ThreadSafeSingletonWithLifecycleExample1 instance;\n\n    private ThreadSafeSingletonWithLifecycleExample1() {\n        onCreate();\n    }\n\n    public static synchronized ThreadSafeSingletonWithLifecycleExample1 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithLifecycleExample1();\n        }\n        return instance;\n    }\n\n    private void onCreate() {\n        System.out.println(\"Singleton created\");\n    }\n\n    public void onDestroy() {\n        System.out.println(\"Singleton destroyed\");\n        instance = null;\n    }\n\n}"
        ],
        [
            "public class StaticBlockSingletonExample5 {\n    public static StaticBlockSingletonExample5 instance;\n\n    private StaticBlockSingletonExample5() {\n        // private constructor\n    }\n\n    static {\n        instance = new StaticBlockSingletonExample5();\n    }\n}"
        ],
        [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationManagerSingletonExample5 {\n\n    private static NotificationManagerSingletonExample5 instance;\n    private List<String> notifications;\n\n    private NotificationManagerSingletonExample5() {\n        notifications = new ArrayList<>();\n    }\n\n    public static NotificationManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new NotificationManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void notify(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}"
        ],
        [
            "public class SingletonWithCyclicDependencyGuardExample4 {\n\n    private static SingletonWithCyclicDependencyGuardExample4 instance;\n    private static boolean isCreating;\n\n    private SingletonWithCyclicDependencyGuardExample4() {\n        if (isCreating) {\n            throw new IllegalStateException(\"Cyclic dependency detected!\");\n        }\n        isCreating = true;\n    }\n\n    public static synchronized SingletonWithCyclicDependencyGuardExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCyclicDependencyGuardExample4();\n            isCreating = false;\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "public class SingletonWithInitializationLoggingExample1 {\n\n    private static SingletonWithInitializationLoggingExample1 instance;\n\n    private SingletonWithInitializationLoggingExample1() {\n        System.out.println(\"SingletonWithInitializationLoggingExample1 initialized\");\n    }\n\n    public static SingletonWithInitializationLoggingExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithInitializationLoggingExample1();\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "public class LazySingletonWithInitializationCountExample3 {\n\n    private static LazySingletonWithInitializationCountExample3 instance;\n    private static int initializationCount = 0;\n\n    private LazySingletonWithInitializationCountExample3() {\n        initializationCount++;\n    }\n\n    public static LazySingletonWithInitializationCountExample3 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithInitializationCountExample3();\n        }\n        return instance;\n    }\n\n    public static int getInitializationCount() {\n        return initializationCount;\n    }\n\n}"
        ],
        [
            "public enum EnumSingletonExample5 {\n\n    INSTANCE;\n\n    //other\n}"
        ],
        [
            "import java.util.concurrent.CopyOnWriteArrayList;\n\npublic class RealTimeEventPublisherSingletonExample4 {\n\n    private static RealTimeEventPublisherSingletonExample4 instance;\n    private CopyOnWriteArrayList<String> eventListeners;\n\n    private RealTimeEventPublisherSingletonExample4() {\n        eventListeners = new CopyOnWriteArrayList<>();\n    }\n\n    public static RealTimeEventPublisherSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new RealTimeEventPublisherSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void addListener(String listener) {\n        eventListeners.add(listener);\n    }\n\n    public void publishEvent(String event) {\n        for (String listener : eventListeners) {\n            System.out.println(\"Notifying listener: \" + listener + \" of event: \" + event);\n        }\n    }\n\n}"
        ],
        [
            "public class EagerThreadSafeSingletonExample2 {\n\n    private static final EagerThreadSafeSingletonExample2 INSTANCE = new EagerThreadSafeSingletonExample2();\n\n    private EagerThreadSafeSingletonExample2() {}\n\n    public static EagerThreadSafeSingletonExample2 getInstance() {\n        return INSTANCE;\n    }\n\n}"
        ],
        [
            "public class DoubleCheckedLockingSingletonExample4 {\n\n    private static volatile DoubleCheckedLockingSingletonExample4 instance;\n\n    private DoubleCheckedLockingSingletonExample4() {}\n\n    public static DoubleCheckedLockingSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "public class SynchronizedDoubleCheckSingletonExample5 {\n\n    private static volatile SynchronizedDoubleCheckSingletonExample5 instance;\n\n    private SynchronizedDoubleCheckSingletonExample5() {}\n\n    public static SynchronizedDoubleCheckSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (SynchronizedDoubleCheckSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new SynchronizedDoubleCheckSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "public class EmailSenderSingletonExample1 {\n\n    private static EmailSenderSingletonExample1 instance;\n\n    private EmailSenderSingletonExample1() {}\n\n    public static synchronized EmailSenderSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new EmailSenderSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void sendEmail(String recipient, String subject, String body) {\n        System.out.println(\"Email sent to: \" + recipient + \" | Subject: \" + subject);\n    }\n\n}"
        ],
        [
            "public class EagerlyInitializedSingletonExample5 {\n\n    private EagerlyInitializedSingletonExample5() {}\n\n    private static final EagerlyInitializedSingletonExample5 instance = new EagerlyInitializedSingletonExample5();\n\n    public static EagerlyInitializedSingletonExample5 getInstance() {\n        return instance;\n    }\n\n}"
        ],
        [
            "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class DatabaseConnectionPool {\n\n    private static DatabaseConnectionPool instance;\n    private Queue<String> connectionPool;\n\n    private DatabaseConnectionPool() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static synchronized DatabaseConnectionPool getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionPool();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}"
        ],
        [
            "public class GlobalThemeManagerSingletonExample2 {\n\n    private static GlobalThemeManagerSingletonExample2 instance;\n    private String currentTheme;\n\n    private GlobalThemeManagerSingletonExample2() {\n        currentTheme = \"Light\";\n    }\n\n    public static synchronized GlobalThemeManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new GlobalThemeManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public String getCurrentTheme() {\n        return currentTheme;\n    }\n\n    public void setTheme(String theme) {\n        currentTheme = theme;\n        System.out.println(\"Theme updated to: \" + theme);\n    }\n\n}"
        ],
        [
            "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class EventLoggerSingletonExample2 {\n\n    private static EventLoggerSingletonExample2 instance;\n    private FileWriter writer;\n\n    private EventLoggerSingletonExample2() {\n        try {\n            writer = new FileWriter(\"events.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized EventLoggerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new EventLoggerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void logEvent(String event) {\n        try {\n            writer.write(event + \"\\n\");\n            writer.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
        ],
        [
            "public class LazilyInitializedSingletonExample1 {\n    private static LazilyInitializedSingletonExample1 instance;\n\n    private String name;\n    private int numberOfGalaxies;\n\n    private LazilyInitializedSingletonExample1(String name, int numberOfGalaxies) {\n        this.name = name;\n        this.numberOfGalaxies = numberOfGalaxies;\n    }\n\n    public static LazilyInitializedSingletonExample1 getInstance(String name, int numberOfGalaxies) {\n        if (instance == null) {\n            instance = new LazilyInitializedSingletonExample1(name, numberOfGalaxies);\n        }\n        return instance;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public int getNumberOfGalaxies() {\n        return this.numberOfGalaxies;\n    }\n\n    public void setName(String aNewName) {\n        this.name = aNewName;\n    }\n}\n\npublic class BigBang {\n    public BigBang() {}\n\n    public LazilyInitializedSingletonExample1 makeLazilyInitializedSingletonExample1(String name, int numberOfGalaxies) {\n        return LazilyInitializedSingletonExample1.getInstance(name, numberOfGalaxies);\n    }\n}"
        ],
        [
            "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class LazySingletonWithPropertiesFileExample2 {\n\n    private static LazySingletonWithPropertiesFileExample2 instance;\n    private Properties properties;\n\n    private LazySingletonWithPropertiesFileExample2() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LazySingletonWithPropertiesFileExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithPropertiesFileExample2();\n        }\n        return instance;\n    }\n\n    public Properties getProperties() {\n        return properties;\n    }\n\n}"
        ],
        [
            "public class SingletonWithStateTrackingExample5 {\n\n    private static SingletonWithStateTrackingExample5 instance;\n    private int state;\n\n    private SingletonWithStateTrackingExample5() {\n        state = 0;\n    }\n\n    public static SingletonWithStateTrackingExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithStateTrackingExample5();\n        }\n        return instance;\n    }\n\n    public void incrementState() {\n        state++;\n    }\n\n    public int getState() {\n        return state;\n    }\n\n}"
        ],
        [
            "import java.util.concurrent.atomic.AtomicInteger;\n\npublic class APIRequestRateLimiterSingletonExample5 {\n\n    private static APIRequestRateLimiterSingletonExample5 instance;\n    private AtomicInteger tokenCount;\n    private static final int MAX_TOKENS = 100;\n\n    private APIRequestRateLimiterSingletonExample5() {\n        tokenCount = new AtomicInteger(MAX_TOKENS);\n    }\n\n    public static synchronized APIRequestRateLimiterSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new APIRequestRateLimiterSingletonExample5();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest() {\n        if (tokenCount.get() > 0) {\n            tokenCount.decrementAndGet();\n            return true;\n        }\n        return false;\n    }\n\n    public void refillTokens() {\n        tokenCount.set(MAX_TOKENS);\n    }\n\n}"
        ],
        [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithObserverLifecycleExample2 {\n\n    private static SingletonWithObserverLifecycleExample2 instance;\n    private List<String> events;\n\n    private SingletonWithObserverLifecycleExample2() {\n        events = new ArrayList<>();\n        onStart();\n    }\n\n    public static synchronized SingletonWithObserverLifecycleExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithObserverLifecycleExample2();\n        }\n        return instance;\n    }\n\n    public void onStart() {\n        System.out.println(\"Singleton started\");\n    }\n\n    public void onEvent(String event) {\n        events.add(event);\n        System.out.println(\"Event captured: \" + event);\n    }\n\n    public void onStop() {\n        events.clear();\n        System.out.println(\"Singleton stopped\");\n    }\n\n}"
        ],
        [
            "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class SessionManager {\n\n    private static SessionManager instance;\n    private Map<String, Long> sessions;\n    private ScheduledExecutorService scheduler;\n\n    private SessionManager() {\n        sessions = new HashMap<>();\n        scheduler = Executors.newScheduledThreadPool(1);\n        scheduler.scheduleAtFixedRate(() -> {\n            long currentTime = System.currentTimeMillis();\n            sessions.entrySet().removeIf(entry -> currentTime - entry.getValue() > 30000);\n        }, 0, 10, TimeUnit.SECONDS);\n    }\n\n    public static synchronized SessionManager getInstance() {\n        if (instance == null) {\n            instance = new SessionManager();\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        sessions.put(user, System.currentTimeMillis());\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return sessions.containsKey(user);\n    }\n\n}"
        ],
        [
            "import java.lang.ref.WeakReference;\n\npublic class SingletonWithWeakReferenceExample5 {\n\n    private static WeakReference<SingletonWithWeakReferenceExample5> instance;\n\n    private SingletonWithWeakReferenceExample5() {}\n\n    public static SingletonWithWeakReferenceExample5 getInstance() {\n        if (instance == null || instance.get() == null) {\n            instance = new WeakReference<>(new SingletonWithWeakReferenceExample5());\n        }\n        return instance.get();\n    }\n\n}"
        ],
        [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample3 {\n\n    private static SingletonWithMetricsCollectionExample3 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample3() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample3();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
        ],
        [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample3 {\n\n    private static SingletonWithMetricsCollectionExample3 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample3() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample3();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
        ],
        [
            "import java.util.HashMap;\nimport java.util.Map;\n\npublic class AuthenticationManagerSingletonExample5 {\n\n    private static AuthenticationManagerSingletonExample5 instance;\n    private Map<String, String> userDatabase;\n\n    private AuthenticationManagerSingletonExample5() {\n        userDatabase = new HashMap<>();\n        userDatabase.put(\"admin\", \"password123\");\n        userDatabase.put(\"user\", \"pass\");\n    }\n\n    public static synchronized AuthenticationManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new AuthenticationManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public boolean authenticate(String user, String password) {\n        return password.equals(userDatabase.get(user));\n    }\n\n}"
        ],
        [
            "public class SingletonWithDynamicConfigurationExample5 {\n\n    private static SingletonWithDynamicConfigurationExample5 instance;\n    private String environment;\n\n    private SingletonWithDynamicConfigurationExample5(String environment) {\n        this.environment = environment;\n    }\n\n    public static SingletonWithDynamicConfigurationExample5 getInstance(String environment) {\n        if (instance == null) {\n            instance = new SingletonWithDynamicConfigurationExample5(environment);\n        }\n        return instance;\n    }\n\n    public String getEnvironment() {\n        return environment;\n    }\n\n}"
        ],
        [
            "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingleton {\n    private static LoggerSingleton instance;\n    private FileWriter fileWriter;\n\n    private LoggerSingleton() {\n        try {\n            fileWriter = new FileWriter(\"application.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggerSingleton getInstance() {\n        if (instance == null) {\n            synchronized (LoggerSingleton.class) {\n                if (instance == null) {\n                    instance = new LoggerSingleton();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public synchronized void log(String level, String message) {\n        try {\n            fileWriter.write(level + \": \" + message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
        ],
        [
            "public class OptimizedLazySingletonExample3 {\n\n    private static final Object lock = new Object();\n    private static volatile OptimizedLazySingletonExample3 instance;\n\n    public static OptimizedLazySingletonExample3 getInstance() {\n        OptimizedLazySingletonExample3 r = instance;\n        if (r == null) {\n            synchronized (lock) {\n                r = instance;\n                if (r == null) {\n                    r = new OptimizedLazySingletonExample3();\n                    instance = r;\n                }\n            }\n        }\n        return r;\n    }\n}"
        ],
        [
            "public class DoubleCheckedLockingSingletonExample2 {\n    private static volatile DoubleCheckedLockingSingletonExample2 instance = null;\n\n    private DoubleCheckedLockingSingletonExample2() {\n        // private constructor\n    }\n\n    public static DoubleCheckedLockingSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n}"
        ],
        [
            "public class LazilyInitializedSingletonExample3 {\n    private static LazilyInitializedSingletonExample3 instance;\n\n    private String name;\n    private int numberOfGalaxies;\n\n    private LazilyInitializedSingletonExample3(String name, int numberOfGalaxies) {\n        this.name = name;\n        this.numberOfGalaxies = numberOfGalaxies;\n    }\n\n    public static LazilyInitializedSingletonExample3 getInstance(String name, int numberOfGalaxies) {\n        if (instance == null) {\n            instance = new LazilyInitializedSingletonExample3(name, numberOfGalaxies);\n        }\n        return instance;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public int getNumberOfGalaxies() {\n        return this.numberOfGalaxies;\n    }\n\n    public void setName(String aNewName) {\n        this.name = aNewName;\n    }\n}\n\npublic class BigBang {\n    public BigBang() {}\n\n    public LazilyInitializedSingletonExample3 makeLazilyInitializedSingletonExample3(String name, int numberOfGalaxies) {\n        return LazilyInitializedSingletonExample3.getInstance(name, numberOfGalaxies);\n    }\n}"
        ],
        [
            "public class GlobalThemeManagerSingletonExample1 {\n\n    private static GlobalThemeManagerSingletonExample1 instance;\n    private String currentTheme;\n\n    private GlobalThemeManagerSingletonExample1() {\n        currentTheme = \"Light\";\n    }\n\n    public static synchronized GlobalThemeManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new GlobalThemeManagerSingletonExample1();\n        }\n        return instance;\n    }\n\n    public String getCurrentTheme() {\n        return currentTheme;\n    }\n\n    public void setTheme(String theme) {\n        currentTheme = theme;\n        System.out.println(\"Theme updated to: \" + theme);\n    }\n\n}"
        ],
        [
            "import java.util.HashMap;\nimport java.util.Map;\n\npublic class LocalizationManagerSingletonExample5 {\n\n    private static LocalizationManagerSingletonExample5 instance;\n    private Map<String, String> translations;\n\n    private LocalizationManagerSingletonExample5() {\n        translations = new HashMap<>();\n        translations.put(\"hello\", \"Hello\");\n        translations.put(\"goodbye\", \"Goodbye\");\n    }\n\n    public static synchronized LocalizationManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new LocalizationManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public String getTranslation(String key) {\n        return translations.getOrDefault(key, \"Translation not found\");\n    }\n\n}"
        ],
        [
            "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingletonWithBackgroundTaskExample5 {\n\n    private static SingletonWithBackgroundTaskExample5 instance;\n    private ExecutorService executorService;\n\n    private SingletonWithBackgroundTaskExample5() {\n        executorService = Executors.newSingleThreadExecutor();\n    }\n\n    public static SingletonWithBackgroundTaskExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithBackgroundTaskExample5();\n        }\n        return instance;\n    }\n\n    public void runTask(Runnable task) {\n        executorService.submit(task);\n    }\n\n}"
        ],
        [
            "public class ThreadSafeSingletonWithInitializationOnDemandExample3 {\n\n    private ThreadSafeSingletonWithInitializationOnDemandExample3() {}\n\n    private static class SingletonHelper {\n        private static final ThreadSafeSingletonWithInitializationOnDemandExample3 INSTANCE = new ThreadSafeSingletonWithInitializationOnDemandExample3();\n    }\n\n    public static ThreadSafeSingletonWithInitializationOnDemandExample3 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
        ],
        [
            "public class LazySingletonWithParameter {\n\n    private static LazySingletonWithParameter instance;\n    private String config;\n\n    private LazySingletonWithParameter(String config) {\n        this.config = config;\n    }\n\n    public static LazySingletonWithParameter getInstance(String config) {\n        if (instance == null) {\n            instance = new LazySingletonWithParameter(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
        ],
        [
            "public class ThreadLocalCounter {\n\n    private static final ThreadLocal<ThreadLocalCounter> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalCounter::new);\n    private int counter;\n\n    private ThreadLocalCounter() {\n        counter = 0;\n    }\n\n    public static ThreadLocalCounter getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public int incrementAndGet() {\n        return ++counter;\n    }\n\n}"
        ],
        [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample1 {\n\n    private static SingletonWithMetricsCollectionExample1 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample1() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample1();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n    }\n\n    public List<String> getMetrics() {\n        return collectedMetrics;\n    }\n\n}"
        ],
        [
            "public class ThreadSafeSingletonWithLifecycleExample5 {\n\n    private static ThreadSafeSingletonWithLifecycleExample5 instance;\n\n    private ThreadSafeSingletonWithLifecycleExample5() {\n        onCreate();\n    }\n\n    public static synchronized ThreadSafeSingletonWithLifecycleExample5 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithLifecycleExample5();\n        }\n        return instance;\n    }\n\n    private void onCreate() {\n        System.out.println(\"Singleton created\");\n    }\n\n    public void onDestroy() {\n        System.out.println(\"Singleton destroyed\");\n        instance = null;\n    }\n\n}"
        ],
        [
            "public class LazilyInitializedSingletonExample2 {\n\n    private static LazilyInitializedSingletonExample2 instance;\n\n    private LazilyInitializedSingletonExample2() {}\n\n    public static synchronized LazilyInitializedSingletonExample2 getInstance() {\n        if(instance == null) {\n            instance = new LazilyInitializedSingletonExample2();\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "public class ThreadSafeDoubleCheckedLockingSingletonExample3 {\n    private static volatile ThreadSafeDoubleCheckedLockingSingletonExample3 instance = null;\n\n    private ThreadSafeDoubleCheckedLockingSingletonExample3() {}\n\n    public static ThreadSafeDoubleCheckedLockingSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (ThreadSafeDoubleCheckedLockingSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new ThreadSafeDoubleCheckedLockingSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n}"
        ],
        [
            "public class StaticBlockSingletonWithErrorHandlingExample4 {\n\n    private static StaticBlockSingletonWithErrorHandlingExample4 instance;\n\n    private StaticBlockSingletonWithErrorHandlingExample4() {}\n\n    static {\n        try {\n            instance = new StaticBlockSingletonWithErrorHandlingExample4();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error creating singleton instance\", e);\n        }\n    }\n\n    public static StaticBlockSingletonWithErrorHandlingExample4 getInstance() {\n        return instance;\n    }\n\n}"
        ],
        [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample5 {\n\n    private static SingletonWithMetricsCollectionExample5 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample5() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample5();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
        ],
        [
            "public class LazilyInitializedDoubleCheckedLockingSingletonExample5 {\n\n    private static volatile LazilyInitializedDoubleCheckedLockingSingletonExample5 instance;\n\n    private LazilyInitializedDoubleCheckedLockingSingletonExample5() {}\n\n    public static LazilyInitializedDoubleCheckedLockingSingletonExample5 getInstance() {\n        if(instance == null) {\n            synchronized (LazilyInitializedDoubleCheckedLockingSingletonExample5.class) {\n                if(instance == null) {\n                    instance = new LazilyInitializedDoubleCheckedLockingSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class TaskQueueSingletonExample4 {\n\n    private static TaskQueueSingletonExample4 instance;\n    private Queue<String> tasks;\n\n    private TaskQueueSingletonExample4() {\n        tasks = new LinkedList<>();\n    }\n\n    public static TaskQueueSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new TaskQueueSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void addTask(String task) {\n        tasks.add(task);\n    }\n\n    public String getNextTask() {\n        return tasks.poll();\n    }\n\n}"
        ],
        [
            "import java.util.concurrent.atomic.AtomicReference;\n\npublic class AtomicReferenceSingletonExample5 {\n\n    private static final AtomicReference<AtomicReferenceSingletonExample5> INSTANCE = new AtomicReference<>();\n\n    private AtomicReferenceSingletonExample5() {}\n\n    public static AtomicReferenceSingletonExample5 getInstance() {\n        if (INSTANCE.get() == null) {\n            INSTANCE.compareAndSet(null, new AtomicReferenceSingletonExample5());\n        }\n        return INSTANCE.get();\n    }\n\n}"
        ],
        [
            "public class DynamicConfigSingleton {\n\n    private static DynamicConfigSingleton instance;\n    private String environment;\n\n    private DynamicConfigSingleton(String environment) {\n        this.environment = environment;\n    }\n\n    public static DynamicConfigSingleton getInstance(String environment) {\n        if (instance == null) {\n            instance = new DynamicConfigSingleton(environment);\n        }\n        return instance;\n    }\n\n    public String getEnvironment() {\n        return environment;\n    }\n\n}"
        ],
        [
            "public enum SingletonWithEnumAndMethodExample5 {\n\n    INSTANCE;\n\n    public void performAction() {\n        System.out.println(\"Action performed by SingletonWithEnumAndMethodExample5\");\n    }\n\n}"
        ],
        [
            "public class SerializableWithReadResolveSingletonExample5 implements Serializable {\n\n    private static final long serialVersionUID = 1911904003687931976L;\n\n    private static SerializableWithReadResolveSingletonExample5 instance;\n\n    private SerializableWithReadResolveSingletonExample5() {}\n\n    protected Object readResolve() {\n        return instance;\n    }\n\n    public static synchronized SerializableWithReadResolveSingletonExample5 getInstance() {\n        if(instance == null) {\n            instance = new SerializableWithReadResolveSingletonExample5();\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "public class SingletonWithDynamicConfigurationExample1 {\n\n    private static SingletonWithDynamicConfigurationExample1 instance;\n    private String environment;\n\n    private SingletonWithDynamicConfigurationExample1(String environment) {\n        this.environment = environment;\n    }\n\n    public static SingletonWithDynamicConfigurationExample1 getInstance(String environment) {\n        if (instance == null) {\n            instance = new SingletonWithDynamicConfigurationExample1(environment);\n        }\n        return instance;\n    }\n\n    public String getEnvironment() {\n        return environment;\n    }\n\n}"
        ],
        [
            "public class ThreadLocalSingletonExample5 {\n    private static final ThreadLocal<ThreadLocalSingletonExample5> threadLocalInstance =\n            ThreadLocal.withInitial(ThreadLocalSingletonExample5::new);\n\n    private ThreadLocalSingletonExample5() {\n    }\n\n    public static ThreadLocalSingletonExample5 getInstance() {\n        return threadLocalInstance.get();\n    }\n}"
        ],
        [
            "public class DoubleCheckedLockingWithLazyInitializationExample3 {\n\n    private static volatile DoubleCheckedLockingWithLazyInitializationExample3 instance;\n\n    private DoubleCheckedLockingWithLazyInitializationExample3() {}\n\n    public static DoubleCheckedLockingWithLazyInitializationExample3 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingWithLazyInitializationExample3.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingWithLazyInitializationExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingletonWithBackgroundTaskExample1 {\n\n    private static SingletonWithBackgroundTaskExample1 instance;\n    private ExecutorService executorService;\n\n    private SingletonWithBackgroundTaskExample1() {\n        executorService = Executors.newSingleThreadExecutor();\n    }\n\n    public static SingletonWithBackgroundTaskExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithBackgroundTaskExample1();\n        }\n        return instance;\n    }\n\n    public void runTask(Runnable task) {\n        executorService.submit(task);\n    }\n\n}"
        ],
        [
            "public class ThreadLocalLogger {\n\n    private static final ThreadLocal<ThreadLocalLogger> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalLogger::new);\n\n    private ThreadLocalLogger() {}\n\n    public static ThreadLocalLogger getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public void log(String message) {\n        System.out.println(Thread.currentThread().getName() + \": \" + message);\n    }\n\n}"
        ],
        [
            "public class ThreadSafeSingletonExample2 {\n\n    private static ThreadSafeSingletonExample2 instance;\n\n    private ThreadSafeSingletonExample2() {}\n\n    public static synchronized ThreadSafeSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonExample2();\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "public class LazySingletonWithOnDemandInitializationExample5 {\n\n    private static LazySingletonWithOnDemandInitializationExample5 instance;\n\n    private LazySingletonWithOnDemandInitializationExample5() {}\n\n    public static LazySingletonWithOnDemandInitializationExample5 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithOnDemandInitializationExample5();\n        }\n        return instance;\n    }\n\n    public String fetchData() {\n        return \"Fetched on-demand data\";\n    }\n\n}"
        ],
        [
            "public class DoubleCheckedLockingSingletonExample5 {\n\n    private static volatile DoubleCheckedLockingSingletonExample5 instance;\n\n    private DoubleCheckedLockingSingletonExample5() {}\n\n    public static DoubleCheckedLockingSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (DoubleCheckedLockingSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new DoubleCheckedLockingSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "public class SerializableSingletonExample3 implements Serializable {\n\n    private static final long serialVersionUID = -6265755052204900542L;\n\n    private static SerializableSingletonExample3 instance;\n\n    private SerializableSingletonExample3() {}\n\n    public static synchronized SerializableSingletonExample3 getInstance() {\n        if(instance == null) {\n            instance = new SerializableSingletonExample3();\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "public class SerializableSingleton implements Serializable {\n\n    private static final long serialVersionUID = -6265755052204900542L;\n\n    private static SerializableSingleton instance;\n\n    private SerializableSingleton() {}\n\n    public static synchronized SerializableSingleton getInstance() {\n        if(instance == null) {\n            instance = new SerializableSingleton();\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "import java.util.concurrent.CopyOnWriteArrayList;\n\npublic class EventBusSingletonExample4 {\n\n    private static EventBusSingletonExample4 instance;\n    private CopyOnWriteArrayList<String> subscribers;\n\n    private EventBusSingletonExample4() {\n        subscribers = new CopyOnWriteArrayList<>();\n    }\n\n    public static synchronized EventBusSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new EventBusSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void subscribe(String subscriber) {\n        subscribers.add(subscriber);\n    }\n\n    public void postEvent(String event) {\n        for (String subscriber : subscribers) {\n            System.out.println(\"Event sent to \" + subscriber + \": \" + event);\n        }\n    }\n\n}"
        ],
        [
            "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class DatabaseConnectionSingletonExample3 {\n\n    private static DatabaseConnectionSingletonExample3 instance;\n    private Connection connection;\n\n    private DatabaseConnectionSingletonExample3() {\n        try {\n            connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db\", \"user\", \"password\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static DatabaseConnectionSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionSingletonExample3();\n        }\n        return instance;\n    }\n\n    public Connection getConnection() {\n        return connection;\n    }\n\n}"
        ],
        [
            "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class RateLimiter {\n\n    private static RateLimiter instance;\n    private ConcurrentHashMap<String, AtomicInteger> clientRequests;\n    private static final int MAX_REQUESTS = 5;\n\n    private RateLimiter() {\n        clientRequests = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized RateLimiter getInstance() {\n        if (instance == null) {\n            instance = new RateLimiter();\n        }\n        return instance;\n    }\n\n    public boolean allowRequest(String clientId) {\n        clientRequests.putIfAbsent(clientId, new AtomicInteger(0));\n        AtomicInteger requestCount = clientRequests.get(clientId);\n        if (requestCount.get() < MAX_REQUESTS) {\n            requestCount.incrementAndGet();\n            return true;\n        } else {\n            System.out.println(\"Rate limit exceeded for: \" + clientId);\n            return false;\n        }\n    }\n\n}"
        ],
        [
            "public class SynchronizedDoubleCheckSingletonExample4 {\n\n    private static volatile SynchronizedDoubleCheckSingletonExample4 instance;\n\n    private SynchronizedDoubleCheckSingletonExample4() {}\n\n    public static SynchronizedDoubleCheckSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (SynchronizedDoubleCheckSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new SynchronizedDoubleCheckSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "import java.util.HashMap;\nimport java.util.Map;\n\npublic class MultitonSingletonExample4 {\n\n    private static final Map<String, MultitonSingletonExample4> instances = new HashMap<>();\n\n    private MultitonSingletonExample4() {}\n\n    public static MultitonSingletonExample4 getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new MultitonSingletonExample4());\n    }\n\n}"
        ],
        [
            "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggingSingletonExample1 {\n\n    private static LoggingSingletonExample1 instance;\n    private FileWriter fileWriter;\n\n    private LoggingSingletonExample1() {\n        try {\n            fileWriter = new FileWriter(\"app.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggingSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new LoggingSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
        ],
        [
            "public class ThreadSafeSingletonExample5 {\n\n    private static ThreadSafeSingletonExample5 instance;\n\n    private ThreadSafeSingletonExample5() {}\n\n    public static synchronized ThreadSafeSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonExample5();\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "public class StaticBlockWithInstanceValidationExample1 {\n\n    private static StaticBlockWithInstanceValidationExample1 instance;\n\n    private StaticBlockWithInstanceValidationExample1() {}\n\n    static {\n        try {\n            instance = new StaticBlockWithInstanceValidationExample1();\n        } catch (Exception e) {\n            System.err.println(\"Error during instance initialization: \" + e.getMessage());\n        }\n    }\n\n    public static StaticBlockWithInstanceValidationExample1 getInstance() {\n        return instance;\n    }\n\n}"
        ],
        [
            "public class ThreadLocalSingletonExample5 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample5> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample5::new);\n\n    private ThreadLocalSingletonExample5() {}\n\n    public static ThreadLocalSingletonExample5 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
        ],
        [
            "public class SingletonWithRuntimeExceptionProtectionExample1 {\n\n    private static SingletonWithRuntimeExceptionProtectionExample1 instance;\n\n    private SingletonWithRuntimeExceptionProtectionExample1() {\n        if (instance != null) {\n            throw new RuntimeException(\"Instance already created\");\n        }\n    }\n\n    public static synchronized SingletonWithRuntimeExceptionProtectionExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithRuntimeExceptionProtectionExample1();\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "public class SynchronizedMethodSingletonExample3 {\n\n    private static SynchronizedMethodSingletonExample3 instance;\n\n    private SynchronizedMethodSingletonExample3() {}\n\n    public static synchronized SynchronizedMethodSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new SynchronizedMethodSingletonExample3();\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "public class BillPughSingletonExample2 {\n\n    private BillPughSingletonExample2() {}\n\n    private static class SingletonHelper {\n        private static final BillPughSingletonExample2 INSTANCE = new BillPughSingletonExample2();\n    }\n\n    public static BillPughSingletonExample2 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
        ],
        [
            "import java.util.HashMap;\nimport java.util.Map;\n\npublic class CacheManagerSingletonExample5 {\n\n    private static CacheManagerSingletonExample5 instance;\n    private Map<String, String> cache;\n\n    private CacheManagerSingletonExample5() {\n        cache = new HashMap<>();\n    }\n\n    public static CacheManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new CacheManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
        ],
        [
            "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class ClusteredSingletonExample2 {\n\n    private static final ConcurrentMap<String, ClusteredSingletonExample2> instances = new ConcurrentHashMap<>();\n\n    private ClusteredSingletonExample2() {}\n\n    public static ClusteredSingletonExample2 getInstance(String clusterKey) {\n        return instances.computeIfAbsent(clusterKey, key -> new ClusteredSingletonExample2());\n    }\n\n}"
        ],
        [
            "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedCacheSingletonExample4 {\n\n    private static DistributedCacheSingletonExample4 instance;\n    private ConcurrentHashMap<String, String> cache;\n\n    private DistributedCacheSingletonExample4() {\n        cache = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedCacheSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new DistributedCacheSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void addCacheEntry(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String getCacheEntry(String key) {\n        return cache.get(key);\n    }\n\n}"
        ],
        [
            "public class SingletonWithInitializationHooksExample5 {\n\n    private static SingletonWithInitializationHooksExample5 instance;\n\n    private SingletonWithInitializationHooksExample5() {\n        initialize();\n    }\n\n    public static synchronized SingletonWithInitializationHooksExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithInitializationHooksExample5();\n        }\n        return instance;\n    }\n\n    private void initialize() {\n        System.out.println(\"Singleton Initialized\");\n    }\n\n}"
        ],
        [
            "public class SingletonWithLifecycleCallbacksExample4 {\n\n    private static SingletonWithLifecycleCallbacksExample4 instance;\n\n    private SingletonWithLifecycleCallbacksExample4() {}\n\n    public static SingletonWithLifecycleCallbacksExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithLifecycleCallbacksExample4();\n            onCreate();\n        }\n        return instance;\n    }\n\n    public static void onCreate() {\n        System.out.println(\"Singleton instance created\");\n    }\n\n    public static void onDestroy() {\n        System.out.println(\"Singleton instance destroyed\");\n    }\n\n}"
        ],
        [
            "public class EagerSingletonWithStartupLoggingExample3 {\n\n    private static final EagerSingletonWithStartupLoggingExample3 instance = new EagerSingletonWithStartupLoggingExample3();\n\n    private EagerSingletonWithStartupLoggingExample3() {\n        System.out.println(\"Singleton initialized during class loading\");\n    }\n\n    public static EagerSingletonWithStartupLoggingExample3 getInstance() {\n        return instance;\n    }\n\n}"
        ],
        [
            "public class EnvironmentBasedSingletonExample2 {\n\n    private static EnvironmentBasedSingletonExample2 instance;\n    private String environment;\n\n    private EnvironmentBasedSingletonExample2(String environment) {\n        this.environment = environment;\n    }\n\n    public static EnvironmentBasedSingletonExample2 getInstance(String environment) {\n        if (instance == null) {\n            instance = new EnvironmentBasedSingletonExample2(environment);\n        }\n        return instance;\n    }\n\n    public String getEnvironment() {\n        return environment;\n    }\n\n}"
        ],
        [
            "public class StaticBlockSingletonExample3 {\n\n    private static StaticBlockSingletonExample3 instance;\n\n    static {\n        try {\n            instance = new StaticBlockSingletonExample3();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private StaticBlockSingletonExample3() {}\n\n    public static StaticBlockSingletonExample3 getInstance() {\n        return instance;\n    }\n\n}"
        ],
        [
            "public class LazySingletonWithReadResolveExample2 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static LazySingletonWithReadResolveExample2 instance;\n\n    private LazySingletonWithReadResolveExample2() {}\n\n    public static LazySingletonWithReadResolveExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithReadResolveExample2();\n        }\n        return instance;\n    }\n\n    protected Object readResolve() {\n        return getInstance();\n    }\n\n}"
        ],
        [
            "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class DatabasePoolSingletonExample1 {\n    private static DatabasePoolSingletonExample1 instance;\n    private BlockingQueue<Connection> connectionPool;\n\n    private DatabasePoolSingletonExample1() {\n        connectionPool = new ArrayBlockingQueue<>(5);\n        try {\n            for (int i = 0; i < 5; i++) {\n                connectionPool.add(DriverManager.getConnection(\"jdbc:mysql://localhost:3306/db\", \"user\", \"password\"));\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized DatabasePoolSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new DatabasePoolSingletonExample1();\n        }\n        return instance;\n    }\n\n    public Connection getConnection() {\n        try {\n            return connectionPool.take();\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"No connections available\");\n        }\n    }\n\n    public void releaseConnection(Connection connection) {\n        connectionPool.offer(connection);\n    }\n}"
        ],
        [
            "public class EagerlyInitializedStaticBlockSingletonExample3 {\n\n    private static EagerlyInitializedStaticBlockSingletonExample3 instance;\n\n    private EagerlyInitializedStaticBlockSingletonExample3() {}\n\n    static {\n        try {\n            instance = new EagerlyInitializedStaticBlockSingletonExample3();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    public static EagerlyInitializedStaticBlockSingletonExample3 getInstance() {\n        return instance;\n    }\n\n}"
        ],
        [
            "import java.util.concurrent.ConcurrentLinkedQueue;\n\npublic class SingletonWithDynamicResourcePoolExample3 {\n\n    private static SingletonWithDynamicResourcePoolExample3 instance;\n    private ConcurrentLinkedQueue<String> resources;\n\n    private SingletonWithDynamicResourcePoolExample3() {\n        resources = new ConcurrentLinkedQueue<>();\n    }\n\n    public static synchronized SingletonWithDynamicResourcePoolExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithDynamicResourcePoolExample3();\n        }\n        return instance;\n    }\n\n    public void addResource(String resource) {\n        resources.add(resource);\n    }\n\n    public String getResource() {\n        return resources.poll();\n    }\n\n}"
        ],
        [
            "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ConfigurationCacheSingletonExample3 {\n\n    private static ConfigurationCacheSingletonExample3 instance;\n    private Map<String, String> cache;\n\n    private ConfigurationCacheSingletonExample3() {\n        cache = new HashMap<>();\n    }\n\n    public static synchronized ConfigurationCacheSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationCacheSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
        ],
        [
            "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class Configuration {\n\n    private static Configuration instance;\n    private Properties properties;\n\n    private Configuration() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"config.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static Configuration getInstance() {\n        if (instance == null) {\n            instance = new Configuration();\n        }\n        return instance;\n    }\n\n    public String getConfig(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
        ],
        [
            "public class LazySingletonWithInitializationCheckExample3 {\n\n    private static LazySingletonWithInitializationCheckExample3 instance;\n\n    private LazySingletonWithInitializationCheckExample3() {}\n\n    public static synchronized LazySingletonWithInitializationCheckExample3 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithInitializationCheckExample3();\n        }\n        return instance;\n    }\n\n    public boolean isInitialized() {\n        return instance != null;\n    }\n\n}"
        ],
        [
            "public enum EnumSingletonExample3 {\n\n    INSTANCE(\"property want to initialize at once\");\n\n    private String info;\n\n    private EnumSingletonExample3(String info) {\n        this.info = info;\n    }\n\n    public EnumSingletonExample3 getInstance() {\n        return INSTANCE;\n    }\n}"
        ],
        [
            "public enum ConfigurationManagerExample5 {\n    INSTANCE;\n\n    private Map<String, String> config;\n\n    ConfigurationManagerExample5() {\n        config = new HashMap<>();\n        config.put(\"url\", \"http://example.com\");\n        config.put(\"timeout\", \"5000\");\n    }\n\n    public String getConfig(String key) {\n        return config.get(key);\n    }\n\n    public void setConfig(String key, String value) {\n        config.put(key, value);\n    }\n}"
        ],
        [
            "public class ThreadLocalSingletonExample3 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample3> instance = ThreadLocal.withInitial(ThreadLocalSingletonExample3::new);\n\n    private ThreadLocalSingletonExample3() {}\n\n    public static ThreadLocalSingletonExample3 getInstance() {\n        return instance.get();\n    }\n\n}"
        ],
        [
            "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedCache {\n\n    private static DistributedCache instance;\n    private ConcurrentHashMap<String, String> cache;\n\n    private DistributedCache() {\n        cache = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedCache getInstance() {\n        if (instance == null) {\n            instance = new DistributedCache();\n        }\n        return instance;\n    }\n\n    public void addCacheEntry(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String getCacheEntry(String key) {\n        return cache.get(key);\n    }\n\n}"
        ],
        [
            "import java.util.HashMap;\nimport java.util.Map;\n\npublic class Multiton {\n\n    private static final Map<String, Multiton> instances = new HashMap<>();\n\n    private Multiton() {}\n\n    public static Multiton getInstance(String key) {\n        return instances.computeIfAbsent(key, k -> new Multiton());\n    }\n\n}"
        ],
        [
            "public class LazySingletonExample2 {\n    private static LazySingletonExample2 instance;\n\n    private LazySingletonExample2() {\n        // private constructor\n    }\n\n    public static LazySingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonExample2();\n        }\n        return instance;\n    }\n}"
        ],
        [
            "public class StaticBlockSingletonWithErrorHandlingExample5 {\n\n    private static StaticBlockSingletonWithErrorHandlingExample5 instance;\n\n    private StaticBlockSingletonWithErrorHandlingExample5() {}\n\n    static {\n        try {\n            instance = new StaticBlockSingletonWithErrorHandlingExample5();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error creating singleton instance\", e);\n        }\n    }\n\n    public static StaticBlockSingletonWithErrorHandlingExample5 getInstance() {\n        return instance;\n    }\n\n}"
        ],
        [
            "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample3 {\n\n    private static LoggerSingletonExample3 instance;\n    private FileWriter fileWriter;\n\n    private LoggerSingletonExample3() {\n        try {\n            fileWriter = new FileWriter(\"log.txt\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized LoggerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new LoggerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        try {\n            fileWriter.write(message + \"\\n\");\n            fileWriter.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
        ],
        [
            "public class StaticBlockInitializationSingletonExample3 {\n\n    private static StaticBlockInitializationSingletonExample3 instance;\n\n    static {\n        try {\n            instance = new StaticBlockInitializationSingletonExample3();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error initializing singleton\", e);\n        }\n    }\n\n    private StaticBlockInitializationSingletonExample3() {}\n\n    public static StaticBlockInitializationSingletonExample3 getInstance() {\n        return instance;\n    }\n\n}"
        ],
        [
            "public class StaticBlockInitializationSingletonExample2 {\n\n    private static StaticBlockInitializationSingletonExample2 instance;\n\n    static {\n        try {\n            instance = new StaticBlockInitializationSingletonExample2();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error initializing singleton\", e);\n        }\n    }\n\n    private StaticBlockInitializationSingletonExample2() {}\n\n    public static StaticBlockInitializationSingletonExample2 getInstance() {\n        return instance;\n    }\n\n}"
        ],
        [
            "public class SingletonWithLifecycleHooksExample3 {\n\n    private static SingletonWithLifecycleHooksExample3 instance;\n\n    private SingletonWithLifecycleHooksExample3() {\n        onCreate();\n    }\n\n    public static SingletonWithLifecycleHooksExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithLifecycleHooksExample3();\n        }\n        return instance;\n    }\n\n    private void onCreate() {\n        System.out.println(\"SingletonWithLifecycleHooksExample3 created\");\n    }\n\n    public void onDestroy() {\n        System.out.println(\"SingletonWithLifecycleHooksExample3 destroyed\");\n        instance = null;\n    }\n\n}"
        ],
        [
            "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ConfigurationCacheSingletonExample2 {\n\n    private static ConfigurationCacheSingletonExample2 instance;\n    private Map<String, String> cache;\n\n    private ConfigurationCacheSingletonExample2() {\n        cache = new HashMap<>();\n    }\n\n    public static synchronized ConfigurationCacheSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationCacheSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
        ],
        [
            "import java.util.concurrent.ConcurrentHashMap;\n\npublic class DistributedLockManagerSingletonExample4 {\n\n    private static DistributedLockManagerSingletonExample4 instance;\n    private ConcurrentHashMap<String, Boolean> locks;\n\n    private DistributedLockManagerSingletonExample4() {\n        locks = new ConcurrentHashMap<>();\n    }\n\n    public static synchronized DistributedLockManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new DistributedLockManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public boolean acquireLock(String key) {\n        return locks.putIfAbsent(key, true) == null;\n    }\n\n    public void releaseLock(String key) {\n        locks.remove(key);\n    }\n\n}"
        ],
        [
            "public class ThreadSafeSingletonWithInitializationOnDemandExample5 {\n\n    private ThreadSafeSingletonWithInitializationOnDemandExample5() {}\n\n    private static class SingletonHelper {\n        private static final ThreadSafeSingletonWithInitializationOnDemandExample5 INSTANCE = new ThreadSafeSingletonWithInitializationOnDemandExample5();\n    }\n\n    public static ThreadSafeSingletonWithInitializationOnDemandExample5 getInstance() {\n        return SingletonHelper.INSTANCE;\n    }\n\n}"
        ],
        [
            "public class MultithreadedLazySingletonExample3 {\n\n    private static MultithreadedLazySingletonExample3 instance;\n\n    private MultithreadedLazySingletonExample3() {}\n\n    public static MultithreadedLazySingletonExample3 getInstance() {\n        synchronized (MultithreadedLazySingletonExample3.class) {\n            if (instance == null) {\n                instance = new MultithreadedLazySingletonExample3();\n            }\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "public class ThreadLocalCounterSingletonExample5 {\n\n    private static final ThreadLocal<ThreadLocalCounterSingletonExample5> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalCounterSingletonExample5::new);\n    private int counter;\n\n    private ThreadLocalCounterSingletonExample5() {\n        counter = 0;\n    }\n\n    public static ThreadLocalCounterSingletonExample5 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public int incrementAndGet() {\n        return ++counter;\n    }\n\n}"
        ],
        [
            "public class ThreadSafeLazySingletonExample5 {\n\n    private static volatile ThreadSafeLazySingletonExample5 instance;\n\n    private ThreadSafeLazySingletonExample5() {}\n\n    public static ThreadSafeLazySingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (ThreadSafeLazySingletonExample5.class) {\n                if (instance == null) {\n                    instance = new ThreadSafeLazySingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "import java.lang.ref.WeakReference;\n\npublic class SingletonWithWeakReference {\n\n    private static WeakReference<SingletonWithWeakReference> instance;\n\n    private SingletonWithWeakReference() {}\n\n    public static SingletonWithWeakReference getInstance() {\n        if (instance == null || instance.get() == null) {\n            instance = new WeakReference<>(new SingletonWithWeakReference());\n        }\n        return instance.get();\n    }\n\n}"
        ],
        [
            "public enum EnumSingletonWithDataExample2 {\n\n    INSTANCE(\"default\");\n\n    private String data;\n\n    private EnumSingletonWithDataExample2(String data) {\n        this.data = data;\n    }\n\n    public String getData() {\n        return data;\n    }\n\n    public void setData(String data) {\n        this.data = data;\n    }\n\n}"
        ],
        [
            "import java.util.PriorityQueue;\n\npublic class PriorityBasedSingletonExample5 {\n\n    private static PriorityBasedSingletonExample5 instance;\n    private PriorityQueue<Integer> priorityQueue;\n\n    private PriorityBasedSingletonExample5() {\n        priorityQueue = new PriorityQueue<>();\n    }\n\n    public static PriorityBasedSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new PriorityBasedSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void addPriority(int priority) {\n        priorityQueue.add(priority);\n    }\n\n    public int getHighestPriority() {\n        return priorityQueue.poll();\n    }\n\n}"
        ],
        [
            "public class SynchronizedAccessSingleton {\n\n    private static SynchronizedAccessSingleton instance;\n\n    private SynchronizedAccessSingleton() {}\n\n    public static SynchronizedAccessSingleton getInstance() {\n        synchronized (SynchronizedAccessSingleton.class) {\n            if (instance == null) {\n                instance = new SynchronizedAccessSingleton();\n            }\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "public class SerializableWithReadResolveSingleton implements Serializable {\n\n    private static final long serialVersionUID = 1911904003687931976L;\n\n    private static SerializableWithReadResolveSingleton instance;\n\n    private SerializableWithReadResolveSingleton() {}\n\n    protected Object readResolve() {\n        return instance;\n    }\n\n    public static synchronized SerializableWithReadResolveSingleton getInstance() {\n        if(instance == null) {\n            instance = new SerializableWithReadResolveSingleton();\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "public class ThreadLocalSessionManagerSingletonExample2 {\n\n    private static final ThreadLocal<ThreadLocalSessionManagerSingletonExample2> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSessionManagerSingletonExample2::new);\n\n    private ThreadLocalSessionManagerSingletonExample2() {}\n\n    public static ThreadLocalSessionManagerSingletonExample2 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n    public void createSession(String sessionId) {\n        System.out.println(Thread.currentThread().getName() + \" - Session Created: \" + sessionId);\n    }\n\n}"
        ],
        [
            "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class DatabaseConnectionPoolSingletonExample4 {\n\n    private static DatabaseConnectionPoolSingletonExample4 instance;\n    private Queue<String> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample4() {\n        connectionPool = new LinkedList<>();\n        connectionPool.add(\"Connection1\");\n        connectionPool.add(\"Connection2\");\n    }\n\n    public static DatabaseConnectionPoolSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new DatabaseConnectionPoolSingletonExample4();\n        }\n        return instance;\n    }\n\n    public String getConnection() {\n        return connectionPool.poll();\n    }\n\n    public void releaseConnection(String connection) {\n        connectionPool.add(connection);\n    }\n\n}"
        ],
        [
            "public class StaticBlockSingletonWithErrorHandlingExample3 {\n\n    private static StaticBlockSingletonWithErrorHandlingExample3 instance;\n\n    private StaticBlockSingletonWithErrorHandlingExample3() {}\n\n    static {\n        try {\n            instance = new StaticBlockSingletonWithErrorHandlingExample3();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error creating singleton instance\", e);\n        }\n    }\n\n    public static StaticBlockSingletonWithErrorHandlingExample3 getInstance() {\n        return instance;\n    }\n\n}"
        ],
        [
            "public class ThreadSafeSingletonExample1 {\n\n    private static ThreadSafeSingletonExample1 instance;\n\n    private ThreadSafeSingletonExample1() {}\n\n    public static synchronized ThreadSafeSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonExample1();\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ApplicationSettingsSingletonExample5 {\n\n    private static ApplicationSettingsSingletonExample5 instance;\n    private Properties properties;\n\n    private ApplicationSettingsSingletonExample5() {\n        properties = new Properties();\n        try {\n            properties.load(new FileInputStream(\"appsettings.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static synchronized ApplicationSettingsSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new ApplicationSettingsSingletonExample5();\n        }\n        return instance;\n    }\n\n    public String getSetting(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
        ],
        [
            "import java.util.Optional;\n\npublic class SingletonWithOptionalInstanceExample3 {\n\n    private static SingletonWithOptionalInstanceExample3 instance;\n\n    private SingletonWithOptionalInstanceExample3() {}\n\n    public static Optional<SingletonWithOptionalInstanceExample3> getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithOptionalInstanceExample3();\n        }\n        return Optional.of(instance);\n    }\n\n}"
        ],
        [
            "public class EagerlyInitializedSingletonExample2 {\n\n    private EagerlyInitializedSingletonExample2() {}\n\n    private static final EagerlyInitializedSingletonExample2 instance = new EagerlyInitializedSingletonExample2();\n\n    public static EagerlyInitializedSingletonExample2 getInstance() {\n        return instance;\n    }\n\n}"
        ],
        [
            "import java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class SingletonWithTimeoutInitializationExample4 {\n\n    private static SingletonWithTimeoutInitializationExample4 instance;\n    private static final Lock lock = new ReentrantLock();\n\n    private SingletonWithTimeoutInitializationExample4() {}\n\n    public static SingletonWithTimeoutInitializationExample4 getInstance() {\n        if (instance == null) {\n            try {\n                if (lock.tryLock()) {\n                    try {\n                        if (instance == null) {\n                            instance = new SingletonWithTimeoutInitializationExample4();\n                        }\n                    } finally {\n                        lock.unlock();\n                    }\n                }\n            } catch (Exception e) {\n                System.out.println(\"Timeout during initialization\");\n            }\n        }\n        return instance;\n    }\n\n    public void initialize() {\n        System.out.println(\"Initialized\");\n    }\n\n}"
        ],
        [
            "public enum ConfigurationManager {\n    INSTANCE;\n\n    private Map<String, String> config;\n\n    ConfigurationManager() {\n        config = new HashMap<>();\n        config.put(\"url\", \"http://example.com\");\n        config.put(\"timeout\", \"5000\");\n    }\n\n    public String getConfig(String key) {\n        return config.get(key);\n    }\n\n    public void setConfig(String key, String value) {\n        config.put(key, value);\n    }\n}"
        ],
        [
            "public class OptimizedLazySingletonExample2 {\n\n    private static final Object lock = new Object();\n    private static volatile OptimizedLazySingletonExample2 instance;\n\n    public static OptimizedLazySingletonExample2 getInstance() {\n        OptimizedLazySingletonExample2 r = instance;\n        if (r == null) {\n            synchronized (lock) {\n                r = instance;\n                if (r == null) {\n                    r = new OptimizedLazySingletonExample2();\n                    instance = r;\n                }\n            }\n        }\n        return r;\n    }\n}"
        ],
        [
            "public class EagerThreadSafeSingleton {\n\n    private static final EagerThreadSafeSingleton INSTANCE = new EagerThreadSafeSingleton();\n\n    private EagerThreadSafeSingleton() {}\n\n    public static EagerThreadSafeSingleton getInstance() {\n        return INSTANCE;\n    }\n\n}"
        ],
        [
            "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SessionManagerSingletonExample5 {\n\n    private static SessionManagerSingletonExample5 instance;\n    private Map<String, String> sessions;\n\n    private SessionManagerSingletonExample5() {\n        sessions = new HashMap<>();\n    }\n\n    public static SessionManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (SessionManagerSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new SessionManagerSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        sessions.put(user, \"Active\");\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return sessions.containsKey(user);\n    }\n\n}"
        ],
        [
            "public class SingletonWithDynamicConfigurationExample4 {\n\n    private static SingletonWithDynamicConfigurationExample4 instance;\n    private String config;\n\n    private SingletonWithDynamicConfigurationExample4(String config) {\n        this.config = config;\n    }\n\n    public static SingletonWithDynamicConfigurationExample4 getInstance(String config) {\n        if (instance == null) {\n            instance = new SingletonWithDynamicConfigurationExample4(config);\n        }\n        return instance;\n    }\n\n    public String getConfig() {\n        return config;\n    }\n\n}"
        ],
        [
            "public class EagerlyInitializedStaticBlockSingleton {\n\n    private static EagerlyInitializedStaticBlockSingleton instance;\n\n    private EagerlyInitializedStaticBlockSingleton() {}\n\n    static {\n        try {\n            instance = new EagerlyInitializedStaticBlockSingleton();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    public static EagerlyInitializedStaticBlockSingleton getInstance() {\n        return instance;\n    }\n\n}"
        ],
        [
            "public class LazySingletonWithCounterExample5 {\n\n    private static LazySingletonWithCounterExample5 instance;\n    private static int counter;\n\n    private LazySingletonWithCounterExample5() {\n        counter++;\n    }\n\n    public static LazySingletonWithCounterExample5 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithCounterExample5();\n        }\n        return instance;\n    }\n\n    public int getInstanceCount() {\n        return counter;\n    }\n\n}"
        ],
        [
            "import java.util.HashMap;\nimport java.util.Map;\n\npublic class FileStorageManagerSingletonExample5 {\n\n    private static FileStorageManagerSingletonExample5 instance;\n    private Map<String, byte[]> fileStorage;\n\n    private FileStorageManagerSingletonExample5() {\n        fileStorage = new HashMap<>();\n    }\n\n    public static synchronized FileStorageManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            instance = new FileStorageManagerSingletonExample5();\n        }\n        return instance;\n    }\n\n    public void saveFile(String fileName, byte[] data) {\n        fileStorage.put(fileName, data);\n        System.out.println(\"File saved: \" + fileName);\n    }\n\n    public byte[] getFile(String fileName) {\n        return fileStorage.get(fileName);\n    }\n\n}"
        ],
        [
            "public class SynchronizedMethodSingletonExample1 {\n\n    private static SynchronizedMethodSingletonExample1 instance;\n\n    private SynchronizedMethodSingletonExample1() {}\n\n    public static synchronized SynchronizedMethodSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new SynchronizedMethodSingletonExample1();\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample3 {\n\n    private static SingletonWithMetricsCollectionExample3 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample3() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample3();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
        ],
        [
            "public class StaticBlockSingletonExample4 {\n    public static StaticBlockSingletonExample4 instance;\n\n    private StaticBlockSingletonExample4() {\n        // private constructor\n    }\n\n    static {\n        instance = new StaticBlockSingletonExample4();\n    }\n}"
        ],
        [
            "public class VolatileLazyInitializationSingleton {\n\n    private static volatile VolatileLazyInitializationSingleton instance;\n\n    private VolatileLazyInitializationSingleton() {}\n\n    public static VolatileLazyInitializationSingleton getInstance() {\n        if (instance == null) {\n            synchronized (VolatileLazyInitializationSingleton.class) {\n                if (instance == null) {\n                    instance = new VolatileLazyInitializationSingleton();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "public class StatefulLoggerSingletonExample3 {\n\n    private static StatefulLoggerSingletonExample3 instance;\n    private int logCount;\n\n    private StatefulLoggerSingletonExample3() {\n        logCount = 0;\n    }\n\n    public static StatefulLoggerSingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new StatefulLoggerSingletonExample3();\n        }\n        return instance;\n    }\n\n    public void log(String message) {\n        logCount++;\n        System.out.println(logCount + \": \" + message);\n    }\n\n    public int getLogCount() {\n        return logCount;\n    }\n\n}"
        ],
        [
            "public class LazySingletonWithInitializationCountExample2 {\n\n    private static LazySingletonWithInitializationCountExample2 instance;\n    private static int initializationCount = 0;\n\n    private LazySingletonWithInitializationCountExample2() {\n        initializationCount++;\n    }\n\n    public static LazySingletonWithInitializationCountExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithInitializationCountExample2();\n        }\n        return instance;\n    }\n\n    public static int getInitializationCount() {\n        return initializationCount;\n    }\n\n}"
        ],
        [
            "import java.util.Optional;\n\npublic class SingletonWithOptionalInstanceExample2 {\n\n    private static SingletonWithOptionalInstanceExample2 instance;\n\n    private SingletonWithOptionalInstanceExample2() {}\n\n    public static Optional<SingletonWithOptionalInstanceExample2> getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithOptionalInstanceExample2();\n        }\n        return Optional.of(instance);\n    }\n\n}"
        ],
        [
            "public class SingletonWithRetryPolicyExample1 {\n\n    private static SingletonWithRetryPolicyExample1 instance;\n    private int retryCount;\n\n    private SingletonWithRetryPolicyExample1() {\n        retryCount = 0;\n    }\n\n    public static synchronized SingletonWithRetryPolicyExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithRetryPolicyExample1();\n        }\n        return instance;\n    }\n\n    public void retry(String task) {\n        retryCount++;\n        System.out.println(\"Retrying task: \" + task + \" - Retry Count: \" + retryCount);\n    }\n\n    public int getRetryCount() {\n        return retryCount;\n    }\n\n}"
        ],
        [
            "public enum EnumBasedSingletonExample3 {\n\n    INSTANCE;\n\n    public void performAction() {\n        System.out.println(\"Action performed by Singleton\");\n    }\n\n}"
        ],
        [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class EventHandler {\n\n    private static EventHandler instance;\n    private List<String> eventQueue;\n\n    private EventHandler() {\n        eventQueue = new ArrayList<>();\n    }\n\n    public static EventHandler getInstance() {\n        if (instance == null) {\n            instance = new EventHandler();\n        }\n        return instance;\n    }\n\n    public void handleEvent(String event) {\n        eventQueue.add(event);\n        System.out.println(\"Event handled: \" + event);\n    }\n\n    public List<String> getEventQueue() {\n        return eventQueue;\n    }\n\n}"
        ],
        [
            "public class ThreadSafeSingletonWithLifecycleExample3 {\n\n    private static ThreadSafeSingletonWithLifecycleExample3 instance;\n\n    private ThreadSafeSingletonWithLifecycleExample3() {\n        onCreate();\n    }\n\n    public static synchronized ThreadSafeSingletonWithLifecycleExample3 getInstance() {\n        if (instance == null) {\n            instance = new ThreadSafeSingletonWithLifecycleExample3();\n        }\n        return instance;\n    }\n\n    private void onCreate() {\n        System.out.println(\"Singleton created\");\n    }\n\n    public void onDestroy() {\n        System.out.println(\"Singleton destroyed\");\n        instance = null;\n    }\n\n}"
        ],
        [
            "public class EagerThreadSafeSingletonExample5 {\n\n    private static final EagerThreadSafeSingletonExample5 INSTANCE = new EagerThreadSafeSingletonExample5();\n\n    private EagerThreadSafeSingletonExample5() {}\n\n    public static EagerThreadSafeSingletonExample5 getInstance() {\n        return INSTANCE;\n    }\n\n}"
        ],
        [
            "public class LazySingletonWithInitializationCheckExample4 {\n\n    private static LazySingletonWithInitializationCheckExample4 instance;\n\n    private LazySingletonWithInitializationCheckExample4() {}\n\n    public static synchronized LazySingletonWithInitializationCheckExample4 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonWithInitializationCheckExample4();\n        }\n        return instance;\n    }\n\n    public boolean isInitialized() {\n        return instance != null;\n    }\n\n}"
        ],
        [
            "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ConfigurationCacheSingletonExample1 {\n\n    private static ConfigurationCacheSingletonExample1 instance;\n    private Map<String, String> cache;\n\n    private ConfigurationCacheSingletonExample1() {\n        cache = new HashMap<>();\n    }\n\n    public static synchronized ConfigurationCacheSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new ConfigurationCacheSingletonExample1();\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
        ],
        [
            "import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class SingletonWithBackgroundTask {\n\n    private static SingletonWithBackgroundTask instance;\n    private ExecutorService executorService;\n\n    private SingletonWithBackgroundTask() {\n        executorService = Executors.newSingleThreadExecutor();\n    }\n\n    public static SingletonWithBackgroundTask getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithBackgroundTask();\n        }\n        return instance;\n    }\n\n    public void runTask(Runnable task) {\n        executorService.submit(task);\n    }\n\n}"
        ],
        [
            "import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class LazyLoadedResourceManagerSingletonExample2 {\n\n    private static LazyLoadedResourceManagerSingletonExample2 instance;\n    private Queue<String> availableResources;\n\n    private LazyLoadedResourceManagerSingletonExample2() {\n        availableResources = new LinkedList<>();\n        availableResources.add(\"Resource1\");\n        availableResources.add(\"Resource2\");\n    }\n\n    public static synchronized LazyLoadedResourceManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new LazyLoadedResourceManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return availableResources.poll();\n    }\n\n    public void releaseResource(String resource) {\n        availableResources.add(resource);\n    }\n\n}"
        ],
        [
            "public class SynchronizedAccessSingletonExample5 {\n\n    private static SynchronizedAccessSingletonExample5 instance;\n\n    private SynchronizedAccessSingletonExample5() {}\n\n    public static SynchronizedAccessSingletonExample5 getInstance() {\n        synchronized (SynchronizedAccessSingletonExample5.class) {\n            if (instance == null) {\n                instance = new SynchronizedAccessSingletonExample5();\n            }\n        }\n        return instance;\n    }\n\n}"
        ],
        [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class SingletonWithMetricsCollectionExample2 {\n\n    private static SingletonWithMetricsCollectionExample2 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample2() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample2();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
        ],
        [
            "import java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationServiceSingletonExample4 {\n\n    private static NotificationServiceSingletonExample4 instance;\n    private List<String> notifications;\n\n    private NotificationServiceSingletonExample4() {\n        notifications = new ArrayList<>();\n    }\n\n    public static synchronized NotificationServiceSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new NotificationServiceSingletonExample4();\n        }\n        return instance;\n    }\n\n    public void sendNotification(String message) {\n        notifications.add(message);\n        System.out.println(\"Notification sent: \" + message);\n    }\n\n    public List<String> getNotifications() {\n        return notifications;\n    }\n\n}"
        ],
        [
            "import java.util.HashMap;\nimport java.util.Map;\n\npublic class SessionManagerSingletonExample2 {\n\n    private static SessionManagerSingletonExample2 instance;\n    private Map<String, String> activeSessions;\n\n    private SessionManagerSingletonExample2() {\n        activeSessions = new HashMap<>();\n    }\n\n    public static SessionManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            instance = new SessionManagerSingletonExample2();\n        }\n        return instance;\n    }\n\n    public void createSession(String user) {\n        activeSessions.put(user, \"SessionActive\");\n        System.out.println(\"Session created for: \" + user);\n    }\n\n    public boolean isSessionActive(String user) {\n        return activeSessions.containsKey(user);\n    }\n\n}"
        ],
        [
            "import java.util.ArrayList;\n   private static SingletonWithMetricsCollectionExample5 instance;\n    private List<String> collectedMetrics;\n\n    private SingletonWithMetricsCollectionExample5() {\n        collectedMetrics = new ArrayList<>();\n    }\n\n    public static SingletonWithMetricsCollectionExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithMetricsCollectionExample5();\n        }\n        return instance;\n    }\n\n    public void collectMetric(String metric) {\n        collectedMetrics.add(metric);\n        System.out.println(\"Collected metric: \" + metric);\n    }\n\n    public List<String> getCollectedMetrics() {\n        return collectedMetrics;\n    }\n\n}"
        ],
        [
            "public class EagerlyInitializedStaticBlockSingletonExample5 {\n\n    private static EagerlyInitializedStaticBlockSingletonExample5 instance;\n\n    private EagerlyInitializedStaticBlockSingletonExample5() {}\n\n    static {\n        try {\n            instance = new EagerlyInitializedStaticBlockSingletonExample5();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    public static EagerlyInitializedStaticBlockSingletonExample5 getInstance() {\n        return instance;\n    }\n\n}"
        ],
        [
            "import java.util.Queue;\nimport java.util.LinkedList;\n\npublic class ResourcePoolSingletonExample1 {\n\n    private static ResourcePoolSingletonExample1 instance;\n    private Queue<String> availableResources;\n\n    private ResourcePoolSingletonExample1() {\n        availableResources = new LinkedList<>();\n        availableResources.add(\"Resource1\");\n        availableResources.add(\"Resource2\");\n    }\n\n    public static ResourcePoolSingletonExample1 getInstance() {\n        if (instance == null) {\n            instance = new ResourcePoolSingletonExample1();\n        }\n        return instance;\n    }\n\n    public String allocateResource() {\n        return availableResources.poll();\n    }\n\n    public void releaseResource(String resource) {\n        availableResources.add(resource);\n    }\n\n}"
        ],
        [
            "import java.util.HashSet;\nimport java.util.Set;\n\npublic class SessionTracker {\n\n    private static SessionTracker instance;\n    private Set<String> activeSessions;\n\n    private SessionTracker() {\n        activeSessions = new HashSet<>();\n    }\n\n    public static synchronized SessionTracker getInstance() {\n        if (instance == null) {\n            instance = new SessionTracker();\n        }\n        return instance;\n    }\n\n    public void trackSession(String sessionId) {\n        activeSessions.add(sessionId);\n        System.out.println(\"Session tracked: \" + sessionId);\n    }\n\n    public boolean isSessionActive(String sessionId) {\n        return activeSessions.contains(sessionId);\n    }\n\n}"
        ],
        [
            "import java.util.HashMap;\nimport java.util.Map;\n\npublic class AuthenticationManagerSingletonExample4 {\n\n    private static AuthenticationManagerSingletonExample4 instance;\n    private Map<String, String> userDatabase;\n\n    private AuthenticationManagerSingletonExample4() {\n        userDatabase = new HashMap<>();\n        userDatabase.put(\"admin\", \"password123\");\n        userDatabase.put(\"user\", \"pass\");\n    }\n\n    public static synchronized AuthenticationManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            instance = new AuthenticationManagerSingletonExample4();\n        }\n        return instance;\n    }\n\n    public boolean authenticate(String user, String password) {\n        return password.equals(userDatabase.get(user));\n    }\n\n}"
        ],
        [
            "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class ClusteredSingleton {\n\n    private static final ConcurrentMap<String, ClusteredSingleton> instances = new ConcurrentHashMap<>();\n\n    private ClusteredSingleton() {}\n\n    public static ClusteredSingleton getInstance(String clusterKey) {\n        return instances.computeIfAbsent(clusterKey, key -> new ClusteredSingleton());\n    }\n\n}"
        ],
        [
            "public class LazySingletonExample2 {\n    \n    private static LazySingletonExample2 instanciaUnica;\n\n    private LazySingletonExample2() {\n        // private constructor\n    }\n\n    public static LazySingletonExample2 getInstancia() {\n        if (instanciaUnica == null) {\n            instanciaUnica = new LazySingletonExample2();\n        }\n        return instanciaUnica;\n    }\n\n    public void mostrarMensagem() {\n        System.out.println(\"Exemplo de LazySingletonExample2!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        LazySingletonExample2 instancia = LazySingletonExample2.getInstancia();\n        instancia.mostrarMensagem();\n    }\n}"
        ],
        [
            "public class LazySingletonExample3 {\n    private static LazySingletonExample3 instance;\n\n    private LazySingletonExample3() {\n        // private constructor\n    }\n\n    public static LazySingletonExample3 getInstance() {\n        if (instance == null) {\n            instance = new LazySingletonExample3();\n        }\n        return instance;\n    }\n}"
        ],
        [
            "public class ThreadLocalSingletonExample4 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample4> instance = ThreadLocal.withInitial(ThreadLocalSingletonExample4::new);\n\n    private ThreadLocalSingletonExample4() {}\n\n    public static ThreadLocalSingletonExample4 getInstance() {\n        return instance.get();\n    }\n\n}"
        ]
    ]
}
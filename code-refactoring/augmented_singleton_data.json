[
    {
        "type": "MultithreadedLazySingleton",
        "input": "public class MultithreadedLazySingletonExample1 {\n\n    public MultithreadedLazySingletonExample1() {}\n\n}",
        "output": "public class MultithreadedLazySingletonExample1 {\n\n    private static volatile MultithreadedLazySingletonExample1 instance;\n\n    private MultithreadedLazySingletonExample1() {}\n\n    public static MultithreadedLazySingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (MultithreadedLazySingletonExample1.class) {\n                if (instance == null) {\n                    instance = new MultithreadedLazySingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
    },
    {
        "type": "MultithreadedLazySingleton",
        "input": "public class MultithreadedLazySingletonExample2 {\n\n    public MultithreadedLazySingletonExample2() {}\n\n}",
        "output": "public class MultithreadedLazySingletonExample2 {\n\n    private static volatile MultithreadedLazySingletonExample2 instance;\n\n    private MultithreadedLazySingletonExample2() {}\n\n    public static MultithreadedLazySingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (MultithreadedLazySingletonExample2.class) {\n                if (instance == null) {\n                    instance = new MultithreadedLazySingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
    },
    {
        "type": "MultithreadedLazySingleton",
        "input": "public class MultithreadedLazySingletonExample3 {\n\n    public MultithreadedLazySingletonExample3() {}\n\n}",
        "output": "public class MultithreadedLazySingletonExample3 {\n\n    private static volatile MultithreadedLazySingletonExample3 instance;\n\n    private MultithreadedLazySingletonExample3() {}\n\n    public static MultithreadedLazySingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (MultithreadedLazySingletonExample3.class) {\n                if (instance == null) {\n                    instance = new MultithreadedLazySingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
    },
    {
        "type": "MultithreadedLazySingleton",
        "input": "public class MultithreadedLazySingletonExample4 {\n\n    public MultithreadedLazySingletonExample4() {}\n\n}",
        "output": "public class MultithreadedLazySingletonExample4 {\n\n    private static volatile MultithreadedLazySingletonExample4 instance;\n\n    private MultithreadedLazySingletonExample4() {}\n\n    public static MultithreadedLazySingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (MultithreadedLazySingletonExample4.class) {\n                if (instance == null) {\n                    instance = new MultithreadedLazySingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
    },
    {
        "type": "MultithreadedLazySingleton",
        "input": "public class MultithreadedLazySingletonExample5 {\n\n    public MultithreadedLazySingletonExample5() {}\n\n}",
        "output": "public class MultithreadedLazySingletonExample5 {\n\n    private static volatile MultithreadedLazySingletonExample5 instance;\n\n    private MultithreadedLazySingletonExample5() {}\n\n    public static MultithreadedLazySingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (MultithreadedLazySingletonExample5.class) {\n                if (instance == null) {\n                    instance = new MultithreadedLazySingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n}"
    },
    {
        "type": "SerializationSafeSingleton",
        "input": "public class SerializationSafeSingletonExample1 {\n\n    public SerializationSafeSingletonExample1() {}\n\n}",
        "output": "import java.io.Serializable;\n\npublic class SerializationSafeSingletonExample1 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static final SerializationSafeSingletonExample1 INSTANCE = new SerializationSafeSingletonExample1();\n\n    private SerializationSafeSingletonExample1() {}\n\n    public static SerializationSafeSingletonExample1 getInstance() {\n        return INSTANCE;\n    }\n\n    protected Object readResolve() {\n        return INSTANCE;\n    }\n\n}"
    },
    {
        "type": "SerializationSafeSingleton",
        "input": "public class SerializationSafeSingletonExample2 {\n\n    public SerializationSafeSingletonExample2() {}\n\n}",
        "output": "import java.io.Serializable;\n\npublic class SerializationSafeSingletonExample2 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static final SerializationSafeSingletonExample2 INSTANCE = new SerializationSafeSingletonExample2();\n\n    private SerializationSafeSingletonExample2() {}\n\n    public static SerializationSafeSingletonExample2 getInstance() {\n        return INSTANCE;\n    }\n\n    protected Object readResolve() {\n        return INSTANCE;\n    }\n\n}"
    },
    {
        "type": "SerializationSafeSingleton",
        "input": "public class SerializationSafeSingletonExample3 {\n\n    public SerializationSafeSingletonExample3() {}\n\n}",
        "output": "import java.io.Serializable;\n\npublic class SerializationSafeSingletonExample3 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static final SerializationSafeSingletonExample3 INSTANCE = new SerializationSafeSingletonExample3();\n\n    private SerializationSafeSingletonExample3() {}\n\n    public static SerializationSafeSingletonExample3 getInstance() {\n        return INSTANCE;\n    }\n\n    protected Object readResolve() {\n        return INSTANCE;\n    }\n\n}"
    },
    {
        "type": "SerializationSafeSingleton",
        "input": "public class SerializationSafeSingletonExample4 {\n\n    public SerializationSafeSingletonExample4() {}\n\n}",
        "output": "import java.io.Serializable;\n\npublic class SerializationSafeSingletonExample4 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static final SerializationSafeSingletonExample4 INSTANCE = new SerializationSafeSingletonExample4();\n\n    private SerializationSafeSingletonExample4() {}\n\n    public static SerializationSafeSingletonExample4 getInstance() {\n        return INSTANCE;\n    }\n\n    protected Object readResolve() {\n        return INSTANCE;\n    }\n\n}"
    },
    {
        "type": "SerializationSafeSingleton",
        "input": "public class SerializationSafeSingletonExample5 {\n\n    public SerializationSafeSingletonExample5() {}\n\n}",
        "output": "import java.io.Serializable;\n\npublic class SerializationSafeSingletonExample5 implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n    private static final SerializationSafeSingletonExample5 INSTANCE = new SerializationSafeSingletonExample5();\n\n    private SerializationSafeSingletonExample5() {}\n\n    public static SerializationSafeSingletonExample5 getInstance() {\n        return INSTANCE;\n    }\n\n    protected Object readResolve() {\n        return INSTANCE;\n    }\n\n}"
    },
    {
        "type": "EnumBasedSingleton",
        "input": "public class EnumBasedSingletonExample1 {\n\n    public EnumBasedSingletonExample1() {}\n\n}",
        "output": "public enum EnumBasedSingletonExample1 {\n\n    INSTANCE;\n\n    public void someMethod() {\n        System.out.println(\"Singleton with enum\");\n    }\n\n}"
    },
    {
        "type": "EnumBasedSingleton",
        "input": "public class EnumBasedSingletonExample2 {\n\n    public EnumBasedSingletonExample2() {}\n\n}",
        "output": "public enum EnumBasedSingletonExample2 {\n\n    INSTANCE;\n\n    public void someMethod() {\n        System.out.println(\"Singleton with enum\");\n    }\n\n}"
    },
    {
        "type": "EnumBasedSingleton",
        "input": "public class EnumBasedSingletonExample3 {\n\n    public EnumBasedSingletonExample3() {}\n\n}",
        "output": "public enum EnumBasedSingletonExample3 {\n\n    INSTANCE;\n\n    public void someMethod() {\n        System.out.println(\"Singleton with enum\");\n    }\n\n}"
    },
    {
        "type": "EnumBasedSingleton",
        "input": "public class EnumBasedSingletonExample4 {\n\n    public EnumBasedSingletonExample4() {}\n\n}",
        "output": "public enum EnumBasedSingletonExample4 {\n\n    INSTANCE;\n\n    public void someMethod() {\n        System.out.println(\"Singleton with enum\");\n    }\n\n}"
    },
    {
        "type": "EnumBasedSingleton",
        "input": "public class EnumBasedSingletonExample5 {\n\n    public EnumBasedSingletonExample5() {}\n\n}",
        "output": "public enum EnumBasedSingletonExample5 {\n\n    INSTANCE;\n\n    public void someMethod() {\n        System.out.println(\"Singleton with enum\");\n    }\n\n}"
    },
    {
        "type": "RetryFallbackSingleton",
        "input": "public class RetryFallbackSingletonExample1 {\n\n    public RetryFallbackSingletonExample1() {}\n\n}",
        "output": "public class RetryFallbackSingletonExample1 {\n\n    private static RetryFallbackSingletonExample1 instance;\n\n    private RetryFallbackSingletonExample1() {}\n\n    public static RetryFallbackSingletonExample1 getInstance() {\n        if (instance == null) {\n            for (int retries = 0; retries < 3; retries++) {\n                try {\n                    instance = new RetryFallbackSingletonExample1();\n                    break;\n                } catch (Exception e) {\n                    System.out.println(\"Retrying...\" + retries);\n                }\n            }\n            if (instance == null) {\n                instance = new RetryFallbackSingletonExample1(); // Fallback logic\n            }\n        }\n        return instance;\n    }\n\n}"
    },
    {
        "type": "RetryFallbackSingleton",
        "input": "public class RetryFallbackSingletonExample2 {\n\n    public RetryFallbackSingletonExample2() {}\n\n}",
        "output": "public class RetryFallbackSingletonExample2 {\n\n    private static RetryFallbackSingletonExample2 instance;\n\n    private RetryFallbackSingletonExample2() {}\n\n    public static RetryFallbackSingletonExample2 getInstance() {\n        if (instance == null) {\n            for (int retries = 0; retries < 3; retries++) {\n                try {\n                    instance = new RetryFallbackSingletonExample2();\n                    break;\n                } catch (Exception e) {\n                    System.out.println(\"Retrying...\" + retries);\n                }\n            }\n            if (instance == null) {\n                instance = new RetryFallbackSingletonExample2(); // Fallback logic\n            }\n        }\n        return instance;\n    }\n\n}"
    },
    {
        "type": "RetryFallbackSingleton",
        "input": "public class RetryFallbackSingletonExample3 {\n\n    public RetryFallbackSingletonExample3() {}\n\n}",
        "output": "public class RetryFallbackSingletonExample3 {\n\n    private static RetryFallbackSingletonExample3 instance;\n\n    private RetryFallbackSingletonExample3() {}\n\n    public static RetryFallbackSingletonExample3 getInstance() {\n        if (instance == null) {\n            for (int retries = 0; retries < 3; retries++) {\n                try {\n                    instance = new RetryFallbackSingletonExample3();\n                    break;\n                } catch (Exception e) {\n                    System.out.println(\"Retrying...\" + retries);\n                }\n            }\n            if (instance == null) {\n                instance = new RetryFallbackSingletonExample3(); // Fallback logic\n            }\n        }\n        return instance;\n    }\n\n}"
    },
    {
        "type": "RetryFallbackSingleton",
        "input": "public class RetryFallbackSingletonExample4 {\n\n    public RetryFallbackSingletonExample4() {}\n\n}",
        "output": "public class RetryFallbackSingletonExample4 {\n\n    private static RetryFallbackSingletonExample4 instance;\n\n    private RetryFallbackSingletonExample4() {}\n\n    public static RetryFallbackSingletonExample4 getInstance() {\n        if (instance == null) {\n            for (int retries = 0; retries < 3; retries++) {\n                try {\n                    instance = new RetryFallbackSingletonExample4();\n                    break;\n                } catch (Exception e) {\n                    System.out.println(\"Retrying...\" + retries);\n                }\n            }\n            if (instance == null) {\n                instance = new RetryFallbackSingletonExample4(); // Fallback logic\n            }\n        }\n        return instance;\n    }\n\n}"
    },
    {
        "type": "RetryFallbackSingleton",
        "input": "public class RetryFallbackSingletonExample5 {\n\n    public RetryFallbackSingletonExample5() {}\n\n}",
        "output": "public class RetryFallbackSingletonExample5 {\n\n    private static RetryFallbackSingletonExample5 instance;\n\n    private RetryFallbackSingletonExample5() {}\n\n    public static RetryFallbackSingletonExample5 getInstance() {\n        if (instance == null) {\n            for (int retries = 0; retries < 3; retries++) {\n                try {\n                    instance = new RetryFallbackSingletonExample5();\n                    break;\n                } catch (Exception e) {\n                    System.out.println(\"Retrying...\" + retries);\n                }\n            }\n            if (instance == null) {\n                instance = new RetryFallbackSingletonExample5(); // Fallback logic\n            }\n        }\n        return instance;\n    }\n\n}"
    },
    {
        "type": "ThreadLocalSingleton",
        "input": "public class ThreadLocalSingletonExample1 {\n\n    public ThreadLocalSingletonExample1() {}\n\n}",
        "output": "public class ThreadLocalSingletonExample1 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample1> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample1::new);\n\n    private ThreadLocalSingletonExample1() {}\n\n    public static ThreadLocalSingletonExample1 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
    },
    {
        "type": "ThreadLocalSingleton",
        "input": "public class ThreadLocalSingletonExample2 {\n\n    public ThreadLocalSingletonExample2() {}\n\n}",
        "output": "public class ThreadLocalSingletonExample2 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample2> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample2::new);\n\n    private ThreadLocalSingletonExample2() {}\n\n    public static ThreadLocalSingletonExample2 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
    },
    {
        "type": "ThreadLocalSingleton",
        "input": "public class ThreadLocalSingletonExample3 {\n\n    public ThreadLocalSingletonExample3() {}\n\n}",
        "output": "public class ThreadLocalSingletonExample3 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample3> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample3::new);\n\n    private ThreadLocalSingletonExample3() {}\n\n    public static ThreadLocalSingletonExample3 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
    },
    {
        "type": "ThreadLocalSingleton",
        "input": "public class ThreadLocalSingletonExample4 {\n\n    public ThreadLocalSingletonExample4() {}\n\n}",
        "output": "public class ThreadLocalSingletonExample4 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample4> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample4::new);\n\n    private ThreadLocalSingletonExample4() {}\n\n    public static ThreadLocalSingletonExample4 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
    },
    {
        "type": "ThreadLocalSingleton",
        "input": "public class ThreadLocalSingletonExample5 {\n\n    public ThreadLocalSingletonExample5() {}\n\n}",
        "output": "public class ThreadLocalSingletonExample5 {\n\n    private static final ThreadLocal<ThreadLocalSingletonExample5> threadLocalInstance = ThreadLocal.withInitial(ThreadLocalSingletonExample5::new);\n\n    private ThreadLocalSingletonExample5() {}\n\n    public static ThreadLocalSingletonExample5 getInstance() {\n        return threadLocalInstance.get();\n    }\n\n}"
    },
    {
        "type": "SingletonWithCounter",
        "input": "public class SingletonWithCounterExample1 {\n\n    public SingletonWithCounterExample1() {}\n\n}",
        "output": "public class SingletonWithCounterExample1 {\n\n    private static SingletonWithCounterExample1 instance;\n    private static int counter = 0;\n\n    private SingletonWithCounterExample1() {\n        counter++;\n    }\n\n    public static SingletonWithCounterExample1 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCounterExample1();\n        }\n        return instance;\n    }\n\n    public int getInstanceCount() {\n        return counter;\n    }\n\n}"
    },
    {
        "type": "SingletonWithCounter",
        "input": "public class SingletonWithCounterExample2 {\n\n    public SingletonWithCounterExample2() {}\n\n}",
        "output": "public class SingletonWithCounterExample2 {\n\n    private static SingletonWithCounterExample2 instance;\n    private static int counter = 0;\n\n    private SingletonWithCounterExample2() {\n        counter++;\n    }\n\n    public static SingletonWithCounterExample2 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCounterExample2();\n        }\n        return instance;\n    }\n\n    public int getInstanceCount() {\n        return counter;\n    }\n\n}"
    },
    {
        "type": "SingletonWithCounter",
        "input": "public class SingletonWithCounterExample3 {\n\n    public SingletonWithCounterExample3() {}\n\n}",
        "output": "public class SingletonWithCounterExample3 {\n\n    private static SingletonWithCounterExample3 instance;\n    private static int counter = 0;\n\n    private SingletonWithCounterExample3() {\n        counter++;\n    }\n\n    public static SingletonWithCounterExample3 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCounterExample3();\n        }\n        return instance;\n    }\n\n    public int getInstanceCount() {\n        return counter;\n    }\n\n}"
    },
    {
        "type": "SingletonWithCounter",
        "input": "public class SingletonWithCounterExample4 {\n\n    public SingletonWithCounterExample4() {}\n\n}",
        "output": "public class SingletonWithCounterExample4 {\n\n    private static SingletonWithCounterExample4 instance;\n    private static int counter = 0;\n\n    private SingletonWithCounterExample4() {\n        counter++;\n    }\n\n    public static SingletonWithCounterExample4 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCounterExample4();\n        }\n        return instance;\n    }\n\n    public int getInstanceCount() {\n        return counter;\n    }\n\n}"
    },
    {
        "type": "SingletonWithCounter",
        "input": "public class SingletonWithCounterExample5 {\n\n    public SingletonWithCounterExample5() {}\n\n}",
        "output": "public class SingletonWithCounterExample5 {\n\n    private static SingletonWithCounterExample5 instance;\n    private static int counter = 0;\n\n    private SingletonWithCounterExample5() {\n        counter++;\n    }\n\n    public static SingletonWithCounterExample5 getInstance() {\n        if (instance == null) {\n            instance = new SingletonWithCounterExample5();\n        }\n        return instance;\n    }\n\n    public int getInstanceCount() {\n        return counter;\n    }\n\n}"
    },
    {
        "type": "MultiTenantSingleton",
        "input": "public class MultiTenantSingletonExample1 {\n\n    public MultiTenantSingletonExample1() {}\n\n}",
        "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class MultiTenantSingletonExample1 {\n\n    private static final Map<String, MultiTenantSingletonExample1> instances = new HashMap<>();\n\n    private MultiTenantSingletonExample1() {}\n\n    public static MultiTenantSingletonExample1 getInstance(String tenantId) {\n        synchronized (instances) {\n            return instances.computeIfAbsent(tenantId, k -> new MultiTenantSingletonExample1());\n        }\n    }\n\n    public static int getTenantCount() {\n        return instances.size();\n    }\n\n}"
    },
    {
        "type": "MultiTenantSingleton",
        "input": "public class MultiTenantSingletonExample2 {\n\n    public MultiTenantSingletonExample2() {}\n\n}",
        "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class MultiTenantSingletonExample2 {\n\n    private static final Map<String, MultiTenantSingletonExample2> instances = new HashMap<>();\n\n    private MultiTenantSingletonExample2() {}\n\n    public static MultiTenantSingletonExample2 getInstance(String tenantId) {\n        synchronized (instances) {\n            return instances.computeIfAbsent(tenantId, k -> new MultiTenantSingletonExample2());\n        }\n    }\n\n    public static int getTenantCount() {\n        return instances.size();\n    }\n\n}"
    },
    {
        "type": "MultiTenantSingleton",
        "input": "public class MultiTenantSingletonExample3 {\n\n    public MultiTenantSingletonExample3() {}\n\n}",
        "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class MultiTenantSingletonExample3 {\n\n    private static final Map<String, MultiTenantSingletonExample3> instances = new HashMap<>();\n\n    private MultiTenantSingletonExample3() {}\n\n    public static MultiTenantSingletonExample3 getInstance(String tenantId) {\n        synchronized (instances) {\n            return instances.computeIfAbsent(tenantId, k -> new MultiTenantSingletonExample3());\n        }\n    }\n\n    public static int getTenantCount() {\n        return instances.size();\n    }\n\n}"
    },
    {
        "type": "MultiTenantSingleton",
        "input": "public class MultiTenantSingletonExample4 {\n\n    public MultiTenantSingletonExample4() {}\n\n}",
        "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class MultiTenantSingletonExample4 {\n\n    private static final Map<String, MultiTenantSingletonExample4> instances = new HashMap<>();\n\n    private MultiTenantSingletonExample4() {}\n\n    public static MultiTenantSingletonExample4 getInstance(String tenantId) {\n        synchronized (instances) {\n            return instances.computeIfAbsent(tenantId, k -> new MultiTenantSingletonExample4());\n        }\n    }\n\n    public static int getTenantCount() {\n        return instances.size();\n    }\n\n}"
    },
    {
        "type": "MultiTenantSingleton",
        "input": "public class MultiTenantSingletonExample5 {\n\n    public MultiTenantSingletonExample5() {}\n\n}",
        "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class MultiTenantSingletonExample5 {\n\n    private static final Map<String, MultiTenantSingletonExample5> instances = new HashMap<>();\n\n    private MultiTenantSingletonExample5() {}\n\n    public static MultiTenantSingletonExample5 getInstance(String tenantId) {\n        synchronized (instances) {\n            return instances.computeIfAbsent(tenantId, k -> new MultiTenantSingletonExample5());\n        }\n    }\n\n    public static int getTenantCount() {\n        return instances.size();\n    }\n\n}"
    },
    {
        "type": "ReflectionProofSingleton",
        "input": "public class ReflectionProofSingletonExample1 {\n\n    public ReflectionProofSingletonExample1() {}\n\n}",
        "output": "public class ReflectionProofSingletonExample1 {\n\n    private static final ReflectionProofSingletonExample1 instance = new ReflectionProofSingletonExample1();\n\n    private ReflectionProofSingletonExample1() {\n        if (instance != null) {\n            throw new IllegalStateException(\"Singleton instance already created\");\n        }\n    }\n\n    public static ReflectionProofSingletonExample1 getInstance() {\n        return instance;\n    }\n\n}"
    },
    {
        "type": "ReflectionProofSingleton",
        "input": "public class ReflectionProofSingletonExample2 {\n\n    public ReflectionProofSingletonExample2() {}\n\n}",
        "output": "public class ReflectionProofSingletonExample2 {\n\n    private static final ReflectionProofSingletonExample2 instance = new ReflectionProofSingletonExample2();\n\n    private ReflectionProofSingletonExample2() {\n        if (instance != null) {\n            throw new IllegalStateException(\"Singleton instance already created\");\n        }\n    }\n\n    public static ReflectionProofSingletonExample2 getInstance() {\n        return instance;\n    }\n\n}"
    },
    {
        "type": "ReflectionProofSingleton",
        "input": "public class ReflectionProofSingletonExample3 {\n\n    public ReflectionProofSingletonExample3() {}\n\n}",
        "output": "public class ReflectionProofSingletonExample3 {\n\n    private static final ReflectionProofSingletonExample3 instance = new ReflectionProofSingletonExample3();\n\n    private ReflectionProofSingletonExample3() {\n        if (instance != null) {\n            throw new IllegalStateException(\"Singleton instance already created\");\n        }\n    }\n\n    public static ReflectionProofSingletonExample3 getInstance() {\n        return instance;\n    }\n\n}"
    },
    {
        "type": "ReflectionProofSingleton",
        "input": "public class ReflectionProofSingletonExample4 {\n\n    public ReflectionProofSingletonExample4() {}\n\n}",
        "output": "public class ReflectionProofSingletonExample4 {\n\n    private static final ReflectionProofSingletonExample4 instance = new ReflectionProofSingletonExample4();\n\n    private ReflectionProofSingletonExample4() {\n        if (instance != null) {\n            throw new IllegalStateException(\"Singleton instance already created\");\n        }\n    }\n\n    public static ReflectionProofSingletonExample4 getInstance() {\n        return instance;\n    }\n\n}"
    },
    {
        "type": "ReflectionProofSingleton",
        "input": "public class ReflectionProofSingletonExample5 {\n\n    public ReflectionProofSingletonExample5() {}\n\n}",
        "output": "public class ReflectionProofSingletonExample5 {\n\n    private static final ReflectionProofSingletonExample5 instance = new ReflectionProofSingletonExample5();\n\n    private ReflectionProofSingletonExample5() {\n        if (instance != null) {\n            throw new IllegalStateException(\"Singleton instance already created\");\n        }\n    }\n\n    public static ReflectionProofSingletonExample5 getInstance() {\n        return instance;\n    }\n\n}"
    },
    {
        "type": "LoggerSingleton",
        "input": "public class LoggerSingletonExample1 {\n\n    public LoggerSingletonExample1() {}\n\n}",
        "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample1 {\n\n    private static volatile LoggerSingletonExample1 instance;\n    private FileWriter writer;\n\n    private LoggerSingletonExample1() {\n        try {\n            writer = new FileWriter(\"application.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggerSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (LoggerSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new LoggerSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public synchronized void log(String message, String level) {\n        try {\n            writer.write(level + \": \" + message + \"\\n\");\n            writer.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        try {\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
    },
    {
        "type": "LoggerSingleton",
        "input": "public class LoggerSingletonExample2 {\n\n    public LoggerSingletonExample2() {}\n\n}",
        "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample2 {\n\n    private static volatile LoggerSingletonExample2 instance;\n    private FileWriter writer;\n\n    private LoggerSingletonExample2() {\n        try {\n            writer = new FileWriter(\"application.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggerSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (LoggerSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new LoggerSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public synchronized void log(String message, String level) {\n        try {\n            writer.write(level + \": \" + message + \"\\n\");\n            writer.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        try {\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
    },
    {
        "type": "LoggerSingleton",
        "input": "public class LoggerSingletonExample3 {\n\n    public LoggerSingletonExample3() {}\n\n}",
        "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample3 {\n\n    private static volatile LoggerSingletonExample3 instance;\n    private FileWriter writer;\n\n    private LoggerSingletonExample3() {\n        try {\n            writer = new FileWriter(\"application.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggerSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (LoggerSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new LoggerSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public synchronized void log(String message, String level) {\n        try {\n            writer.write(level + \": \" + message + \"\\n\");\n            writer.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        try {\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
    },
    {
        "type": "LoggerSingleton",
        "input": "public class LoggerSingletonExample4 {\n\n    public LoggerSingletonExample4() {}\n\n}",
        "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample4 {\n\n    private static volatile LoggerSingletonExample4 instance;\n    private FileWriter writer;\n\n    private LoggerSingletonExample4() {\n        try {\n            writer = new FileWriter(\"application.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggerSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (LoggerSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new LoggerSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public synchronized void log(String message, String level) {\n        try {\n            writer.write(level + \": \" + message + \"\\n\");\n            writer.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        try {\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
    },
    {
        "type": "LoggerSingleton",
        "input": "public class LoggerSingletonExample5 {\n\n    public LoggerSingletonExample5() {}\n\n}",
        "output": "import java.io.FileWriter;\nimport java.io.IOException;\n\npublic class LoggerSingletonExample5 {\n\n    private static volatile LoggerSingletonExample5 instance;\n    private FileWriter writer;\n\n    private LoggerSingletonExample5() {\n        try {\n            writer = new FileWriter(\"application.log\", true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static LoggerSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (LoggerSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new LoggerSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public synchronized void log(String message, String level) {\n        try {\n            writer.write(level + \": \" + message + \"\\n\");\n            writer.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        try {\n            writer.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}"
    },
    {
        "type": "DatabaseConnectionPoolSingleton",
        "input": "public class DatabaseConnectionPoolSingletonExample1 {\n\n    public DatabaseConnectionPoolSingletonExample1() {}\n\n}",
        "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class DatabaseConnectionPoolSingletonExample1 {\n\n    private static final int POOL_SIZE = 5;\n    private static DatabaseConnectionPoolSingletonExample1 instance;\n    private BlockingQueue<Connection> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample1() {\n        connectionPool = new ArrayBlockingQueue<>(POOL_SIZE);\n        for (int i = 0; i < POOL_SIZE; i++) {\n            try {\n                connectionPool.add(DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mydb\", \"user\", \"password\"));\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static DatabaseConnectionPoolSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (DatabaseConnectionPoolSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new DatabaseConnectionPoolSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public Connection getConnection() throws InterruptedException {\n        return connectionPool.take();\n    }\n\n    public void releaseConnection(Connection connection) {\n        connectionPool.offer(connection);\n    }\n\n}"
    },
    {
        "type": "DatabaseConnectionPoolSingleton",
        "input": "public class DatabaseConnectionPoolSingletonExample2 {\n\n    public DatabaseConnectionPoolSingletonExample2() {}\n\n}",
        "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class DatabaseConnectionPoolSingletonExample2 {\n\n    private static final int POOL_SIZE = 5;\n    private static DatabaseConnectionPoolSingletonExample2 instance;\n    private BlockingQueue<Connection> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample2() {\n        connectionPool = new ArrayBlockingQueue<>(POOL_SIZE);\n        for (int i = 0; i < POOL_SIZE; i++) {\n            try {\n                connectionPool.add(DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mydb\", \"user\", \"password\"));\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static DatabaseConnectionPoolSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (DatabaseConnectionPoolSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new DatabaseConnectionPoolSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public Connection getConnection() throws InterruptedException {\n        return connectionPool.take();\n    }\n\n    public void releaseConnection(Connection connection) {\n        connectionPool.offer(connection);\n    }\n\n}"
    },
    {
        "type": "DatabaseConnectionPoolSingleton",
        "input": "public class DatabaseConnectionPoolSingletonExample3 {\n\n    public DatabaseConnectionPoolSingletonExample3() {}\n\n}",
        "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class DatabaseConnectionPoolSingletonExample3 {\n\n    private static final int POOL_SIZE = 5;\n    private static DatabaseConnectionPoolSingletonExample3 instance;\n    private BlockingQueue<Connection> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample3() {\n        connectionPool = new ArrayBlockingQueue<>(POOL_SIZE);\n        for (int i = 0; i < POOL_SIZE; i++) {\n            try {\n                connectionPool.add(DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mydb\", \"user\", \"password\"));\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static DatabaseConnectionPoolSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (DatabaseConnectionPoolSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new DatabaseConnectionPoolSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public Connection getConnection() throws InterruptedException {\n        return connectionPool.take();\n    }\n\n    public void releaseConnection(Connection connection) {\n        connectionPool.offer(connection);\n    }\n\n}"
    },
    {
        "type": "DatabaseConnectionPoolSingleton",
        "input": "public class DatabaseConnectionPoolSingletonExample4 {\n\n    public DatabaseConnectionPoolSingletonExample4() {}\n\n}",
        "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class DatabaseConnectionPoolSingletonExample4 {\n\n    private static final int POOL_SIZE = 5;\n    private static DatabaseConnectionPoolSingletonExample4 instance;\n    private BlockingQueue<Connection> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample4() {\n        connectionPool = new ArrayBlockingQueue<>(POOL_SIZE);\n        for (int i = 0; i < POOL_SIZE; i++) {\n            try {\n                connectionPool.add(DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mydb\", \"user\", \"password\"));\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static DatabaseConnectionPoolSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (DatabaseConnectionPoolSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new DatabaseConnectionPoolSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public Connection getConnection() throws InterruptedException {\n        return connectionPool.take();\n    }\n\n    public void releaseConnection(Connection connection) {\n        connectionPool.offer(connection);\n    }\n\n}"
    },
    {
        "type": "DatabaseConnectionPoolSingleton",
        "input": "public class DatabaseConnectionPoolSingletonExample5 {\n\n    public DatabaseConnectionPoolSingletonExample5() {}\n\n}",
        "output": "import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.BlockingQueue;\n\npublic class DatabaseConnectionPoolSingletonExample5 {\n\n    private static final int POOL_SIZE = 5;\n    private static DatabaseConnectionPoolSingletonExample5 instance;\n    private BlockingQueue<Connection> connectionPool;\n\n    private DatabaseConnectionPoolSingletonExample5() {\n        connectionPool = new ArrayBlockingQueue<>(POOL_SIZE);\n        for (int i = 0; i < POOL_SIZE; i++) {\n            try {\n                connectionPool.add(DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mydb\", \"user\", \"password\"));\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static DatabaseConnectionPoolSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (DatabaseConnectionPoolSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new DatabaseConnectionPoolSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public Connection getConnection() throws InterruptedException {\n        return connectionPool.take();\n    }\n\n    public void releaseConnection(Connection connection) {\n        connectionPool.offer(connection);\n    }\n\n}"
    },
    {
        "type": "ConfigurationManagerSingleton",
        "input": "public class ConfigurationManagerSingletonExample1 {\n\n    public ConfigurationManagerSingletonExample1() {}\n\n}",
        "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationManagerSingletonExample1 {\n\n    private static ConfigurationManagerSingletonExample1 instance;\n    private Properties properties;\n\n    private ConfigurationManagerSingletonExample1() {\n        properties = new Properties();\n        try (FileInputStream fis = new FileInputStream(\"application.properties\")) {\n            properties.load(fis);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationManagerSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (ConfigurationManagerSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new ConfigurationManagerSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public String getProperty(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
    },
    {
        "type": "ConfigurationManagerSingleton",
        "input": "public class ConfigurationManagerSingletonExample2 {\n\n    public ConfigurationManagerSingletonExample2() {}\n\n}",
        "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationManagerSingletonExample2 {\n\n    private static ConfigurationManagerSingletonExample2 instance;\n    private Properties properties;\n\n    private ConfigurationManagerSingletonExample2() {\n        properties = new Properties();\n        try (FileInputStream fis = new FileInputStream(\"application.properties\")) {\n            properties.load(fis);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationManagerSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (ConfigurationManagerSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new ConfigurationManagerSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public String getProperty(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
    },
    {
        "type": "ConfigurationManagerSingleton",
        "input": "public class ConfigurationManagerSingletonExample3 {\n\n    public ConfigurationManagerSingletonExample3() {}\n\n}",
        "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationManagerSingletonExample3 {\n\n    private static ConfigurationManagerSingletonExample3 instance;\n    private Properties properties;\n\n    private ConfigurationManagerSingletonExample3() {\n        properties = new Properties();\n        try (FileInputStream fis = new FileInputStream(\"application.properties\")) {\n            properties.load(fis);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationManagerSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (ConfigurationManagerSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new ConfigurationManagerSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public String getProperty(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
    },
    {
        "type": "ConfigurationManagerSingleton",
        "input": "public class ConfigurationManagerSingletonExample4 {\n\n    public ConfigurationManagerSingletonExample4() {}\n\n}",
        "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationManagerSingletonExample4 {\n\n    private static ConfigurationManagerSingletonExample4 instance;\n    private Properties properties;\n\n    private ConfigurationManagerSingletonExample4() {\n        properties = new Properties();\n        try (FileInputStream fis = new FileInputStream(\"application.properties\")) {\n            properties.load(fis);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationManagerSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (ConfigurationManagerSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new ConfigurationManagerSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public String getProperty(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
    },
    {
        "type": "ConfigurationManagerSingleton",
        "input": "public class ConfigurationManagerSingletonExample5 {\n\n    public ConfigurationManagerSingletonExample5() {}\n\n}",
        "output": "import java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ConfigurationManagerSingletonExample5 {\n\n    private static ConfigurationManagerSingletonExample5 instance;\n    private Properties properties;\n\n    private ConfigurationManagerSingletonExample5() {\n        properties = new Properties();\n        try (FileInputStream fis = new FileInputStream(\"application.properties\")) {\n            properties.load(fis);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static ConfigurationManagerSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (ConfigurationManagerSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new ConfigurationManagerSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public String getProperty(String key) {\n        return properties.getProperty(key);\n    }\n\n}"
    },
    {
        "type": "ServiceLocatorSingleton",
        "input": "public class ServiceLocatorSingletonExample1 {\n\n    public ServiceLocatorSingletonExample1() {}\n\n}",
        "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ServiceLocatorSingletonExample1 {\n\n    private static ServiceLocatorSingletonExample1 instance;\n    private Map<String, Object> services;\n\n    private ServiceLocatorSingletonExample1() {\n        services = new HashMap<>();\n    }\n\n    public static ServiceLocatorSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (ServiceLocatorSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new ServiceLocatorSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void registerService(String name, Object service) {\n        services.put(name, service);\n    }\n\n    public Object getService(String name) {\n        return services.get(name);\n    }\n\n}"
    },
    {
        "type": "ServiceLocatorSingleton",
        "input": "public class ServiceLocatorSingletonExample2 {\n\n    public ServiceLocatorSingletonExample2() {}\n\n}",
        "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ServiceLocatorSingletonExample2 {\n\n    private static ServiceLocatorSingletonExample2 instance;\n    private Map<String, Object> services;\n\n    private ServiceLocatorSingletonExample2() {\n        services = new HashMap<>();\n    }\n\n    public static ServiceLocatorSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (ServiceLocatorSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new ServiceLocatorSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void registerService(String name, Object service) {\n        services.put(name, service);\n    }\n\n    public Object getService(String name) {\n        return services.get(name);\n    }\n\n}"
    },
    {
        "type": "ServiceLocatorSingleton",
        "input": "public class ServiceLocatorSingletonExample3 {\n\n    public ServiceLocatorSingletonExample3() {}\n\n}",
        "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ServiceLocatorSingletonExample3 {\n\n    private static ServiceLocatorSingletonExample3 instance;\n    private Map<String, Object> services;\n\n    private ServiceLocatorSingletonExample3() {\n        services = new HashMap<>();\n    }\n\n    public static ServiceLocatorSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (ServiceLocatorSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new ServiceLocatorSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void registerService(String name, Object service) {\n        services.put(name, service);\n    }\n\n    public Object getService(String name) {\n        return services.get(name);\n    }\n\n}"
    },
    {
        "type": "ServiceLocatorSingleton",
        "input": "public class ServiceLocatorSingletonExample4 {\n\n    public ServiceLocatorSingletonExample4() {}\n\n}",
        "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ServiceLocatorSingletonExample4 {\n\n    private static ServiceLocatorSingletonExample4 instance;\n    private Map<String, Object> services;\n\n    private ServiceLocatorSingletonExample4() {\n        services = new HashMap<>();\n    }\n\n    public static ServiceLocatorSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (ServiceLocatorSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new ServiceLocatorSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void registerService(String name, Object service) {\n        services.put(name, service);\n    }\n\n    public Object getService(String name) {\n        return services.get(name);\n    }\n\n}"
    },
    {
        "type": "ServiceLocatorSingleton",
        "input": "public class ServiceLocatorSingletonExample5 {\n\n    public ServiceLocatorSingletonExample5() {}\n\n}",
        "output": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class ServiceLocatorSingletonExample5 {\n\n    private static ServiceLocatorSingletonExample5 instance;\n    private Map<String, Object> services;\n\n    private ServiceLocatorSingletonExample5() {\n        services = new HashMap<>();\n    }\n\n    public static ServiceLocatorSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (ServiceLocatorSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new ServiceLocatorSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void registerService(String name, Object service) {\n        services.put(name, service);\n    }\n\n    public Object getService(String name) {\n        return services.get(name);\n    }\n\n}"
    },
    {
        "type": "CacheSingleton",
        "input": "public class CacheSingletonExample1 {\n\n    public CacheSingletonExample1() {}\n\n}",
        "output": "import java.util.LinkedHashMap;\nimport java.util.Map;\n\npublic class CacheSingletonExample1 {\n\n    private static CacheSingletonExample1 instance;\n    private final int CACHE_SIZE = 5;\n    private Map<String, String> cache;\n\n    private CacheSingletonExample1() {\n        cache = new LinkedHashMap<String, String>(CACHE_SIZE, 0.75f, true) {\n            protected boolean removeEldestEntry(Map.Entry<String, String> eldest) {\n                return size() > CACHE_SIZE;\n            }\n        };\n    }\n\n    public static CacheSingletonExample1 getInstance() {\n        if (instance == null) {\n            synchronized (CacheSingletonExample1.class) {\n                if (instance == null) {\n                    instance = new CacheSingletonExample1();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
    },
    {
        "type": "CacheSingleton",
        "input": "public class CacheSingletonExample2 {\n\n    public CacheSingletonExample2() {}\n\n}",
        "output": "import java.util.LinkedHashMap;\nimport java.util.Map;\n\npublic class CacheSingletonExample2 {\n\n    private static CacheSingletonExample2 instance;\n    private final int CACHE_SIZE = 5;\n    private Map<String, String> cache;\n\n    private CacheSingletonExample2() {\n        cache = new LinkedHashMap<String, String>(CACHE_SIZE, 0.75f, true) {\n            protected boolean removeEldestEntry(Map.Entry<String, String> eldest) {\n                return size() > CACHE_SIZE;\n            }\n        };\n    }\n\n    public static CacheSingletonExample2 getInstance() {\n        if (instance == null) {\n            synchronized (CacheSingletonExample2.class) {\n                if (instance == null) {\n                    instance = new CacheSingletonExample2();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
    },
    {
        "type": "CacheSingleton",
        "input": "public class CacheSingletonExample3 {\n\n    public CacheSingletonExample3() {}\n\n}",
        "output": "import java.util.LinkedHashMap;\nimport java.util.Map;\n\npublic class CacheSingletonExample3 {\n\n    private static CacheSingletonExample3 instance;\n    private final int CACHE_SIZE = 5;\n    private Map<String, String> cache;\n\n    private CacheSingletonExample3() {\n        cache = new LinkedHashMap<String, String>(CACHE_SIZE, 0.75f, true) {\n            protected boolean removeEldestEntry(Map.Entry<String, String> eldest) {\n                return size() > CACHE_SIZE;\n            }\n        };\n    }\n\n    public static CacheSingletonExample3 getInstance() {\n        if (instance == null) {\n            synchronized (CacheSingletonExample3.class) {\n                if (instance == null) {\n                    instance = new CacheSingletonExample3();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
    },
    {
        "type": "CacheSingleton",
        "input": "public class CacheSingletonExample4 {\n\n    public CacheSingletonExample4() {}\n\n}",
        "output": "import java.util.LinkedHashMap;\nimport java.util.Map;\n\npublic class CacheSingletonExample4 {\n\n    private static CacheSingletonExample4 instance;\n    private final int CACHE_SIZE = 5;\n    private Map<String, String> cache;\n\n    private CacheSingletonExample4() {\n        cache = new LinkedHashMap<String, String>(CACHE_SIZE, 0.75f, true) {\n            protected boolean removeEldestEntry(Map.Entry<String, String> eldest) {\n                return size() > CACHE_SIZE;\n            }\n        };\n    }\n\n    public static CacheSingletonExample4 getInstance() {\n        if (instance == null) {\n            synchronized (CacheSingletonExample4.class) {\n                if (instance == null) {\n                    instance = new CacheSingletonExample4();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
    },
    {
        "type": "CacheSingleton",
        "input": "public class CacheSingletonExample5 {\n\n    public CacheSingletonExample5() {}\n\n}",
        "output": "import java.util.LinkedHashMap;\nimport java.util.Map;\n\npublic class CacheSingletonExample5 {\n\n    private static CacheSingletonExample5 instance;\n    private final int CACHE_SIZE = 5;\n    private Map<String, String> cache;\n\n    private CacheSingletonExample5() {\n        cache = new LinkedHashMap<String, String>(CACHE_SIZE, 0.75f, true) {\n            protected boolean removeEldestEntry(Map.Entry<String, String> eldest) {\n                return size() > CACHE_SIZE;\n            }\n        };\n    }\n\n    public static CacheSingletonExample5 getInstance() {\n        if (instance == null) {\n            synchronized (CacheSingletonExample5.class) {\n                if (instance == null) {\n                    instance = new CacheSingletonExample5();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void put(String key, String value) {\n        cache.put(key, value);\n    }\n\n    public String get(String key) {\n        return cache.get(key);\n    }\n\n}"
    }
]
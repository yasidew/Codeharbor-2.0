[
  {
    "func": "def sql_injection(user_input):\n    query = 'SELECT * FROM users WHERE name = ' + user_input\n    return query",
    "target": "Avoid string concatenation in SQL queries. Use parameterized queries to prevent SQL injection."
  },
  {
    "func": "def risky_eval(data):\n    return eval(data)",
    "target": "Avoid using eval as it can execute arbitrary code. Use ast.literal_eval for safer parsing."
  },
  {
    "func": "def unused_variable():\n    x = 10\n    return 5",
    "target": "No specific issue detected."
  },
  {
    "func": "def long_function():\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n",
    "target": "Function length exceeds recommended limits. Split into smaller functions."
  },
  {
    "func": "def too_many_params(a, b, c, d, e, f, g):\n    return a + b + c + d + e + f + g",
    "target": "Avoid using too many parameters in a function. Consider using a data structure like a dictionary."
  },
  {
    "func": "def nested_loops():\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                for m in range(10):\n                    for n in range(10):\n                        print(i, j, k, m, n)",
    "target": "Avoid deep nesting in loops (5 levels detected). Consider breaking it into functions or using iterators."
  },
  {
    "func": "def hard_coded_secret():\n    secret = 'password_2123'\n    return secret",
    "target": "Avoid hardcoding secrets in code. Use environment variables or secret management tools."
  },
  {
    "func": "def sql_injection(user_input):\n    query = 'SELECT * FROM users WHERE name = ' + user_input\n    return query",
    "target": "Avoid string concatenation in SQL queries. Use parameterized queries to prevent SQL injection."
  },
  {
    "func": "def insecure_file_handling():\n    with open('data.txt', 'w') as file:\n        file.write(data)\n    return True",
    "target": "Validate file paths to prevent directory traversal vulnerabilities."
  },
  {
    "func": "def weak_cryptography(password):\n    return hashlib.md5(password.encode()).hexdigest()",
    "target": "Avoid using MD5 for hashing. Use a secure hashing algorithm like bcrypt or SHA-256."
  },
  {
    "func": "def empty_exception_handling():\n    try:\n        risky_code()\n    except:\n        pass",
    "target": "Avoid empty exception handling blocks. Provide specific error-handling logic."
  },
  {
    "func": "def magic_numbers():\n    if x == 42:\n        return True",
    "target": "Avoid using magic numbers. Define constants with meaningful names."
  },
  {
    "func": "def chained_calls():\n    return obj.method1().method2().method3().method4()",
    "target": "Avoid long chains of method calls. Break into intermediate steps."
  },
  {
    "func": "def deprecated_library_usage():\n    import cgi\n    return cgi.escape('<html>')",
    "target": "Avoid using deprecated libraries. Replace with modern alternatives."
  },
  {
    "func": "def excessive_globals():\n    global x\n    x = 42\n    return x",
    "target": "Avoid excessive use of global variables. Use function parameters or class attributes."
  },
  {
    "func": "def resource_leak():\n    file = open('data.txt', 'r')\n    data = file.read()\n    return data",
    "target": "Ensure proper resource management by using context managers."
  },
  {
    "func": "def circular_imports():\n    import module_a\n    return module_a.value",
    "target": "Avoid circular imports by refactoring dependencies."
  },
  {
    "func": "def missing_exception_message():\n    raise Exception()",
    "target": "Provide meaningful messages in exception-raising to improve debugging."
  },
  {
    "func": "def unreachable_code():\n    return\n    print('This will never run')",
    "target": "Remove unreachable code to keep the codebase clean."
  },
  {
    "func": "def variable_shadowing():\n    x = 10\n    def inner():\n        x = 5\n        return x\n    return inner()",
    "target": "Avoid variable shadowing. Use distinct variable names."
  },
  {
    "func": "def naming_conventions():\n    VarName = 10\n    return VarName",
    "target": "Follow consistent naming conventions like snake_case for better readability."
  },
  {
    "func": "def inconsistent_return():\n    if condition:\n        return True\n    else:\n        return 1",
    "target": "Ensure consistent return types for better code understanding."
  },
  {
    "func": "def unused_imports():\n    import math\n    return 42",
    "target": "Remove unused imports to reduce clutter and improve performance."
  },
  {
    "func": "def excessive_comments():\n    # This function adds two numbers\n    def add(a, b):\n        return a + b",
    "target": "Avoid excessive comments. Write self-explanatory code instead."
  },
  {
    "func": "def inconsistent_whitespace():\n    x=10\n    return x",
    "target": "Use consistent whitespace for better code readability."
  },
  {
    "func": "def inconsistent_indentation():\n    if condition:\n    return True",
    "target": "Use consistent indentation to improve code structure and readability."
  },
  {
    "func": "def inconsistent_quotes():\n    return 'Hello'",
    "target": "Use consistent quotes for strings in the codebase."
  },
  {
    "func": "def inconsistent_newlines():\n    return 42\n",
    "target": "Use consistent newline characters at the end of files."
  },
  {
    "func": "def inconsistent_line_length():\n    return 'This is a very long line that exceeds the recommended line length'",
    "target": "Ensure consistent line lengths for better code readability."
  },
  {
    "func": "def inconsistent_function_calls():\n    return math.sqrt (x)",
    "target": "Use consistent spacing around function calls for better code readability."
  },
  {
    "func": "def inconsistent_function_def():\n    def func (x, y):\n        return x + y",
    "target": "Use consistent spacing around function definitions for better code readability."
  },
  {
    "func": "def inconsistent_list_comprehension():\n    return [ x for x in range(10) ]",
    "target": "Use consistent spacing in list comprehensions for better code readability."
  },
  {
    "func": "def sql_injection_vulnerability(user_input):\n    query = f\"SELECT * FROM users WHERE name = '{user_input}'\"\n    return query",
    "target": "Avoid SQL injection by using prepared statements and parameterized queries."
  },
  {
    "func": "def risky_exec(data):\n    exec(data)",
    "target": "Avoid using exec as it can execute arbitrary code. Refactor to use safer alternatives."
  },
  {
    "func": "def lack_of_comments(x):\n    return x * x",
    "target": "Add comments to clarify the purpose and functionality of the code."
  },
  {
    "func": "def excessive_recursion(n):\n    if n == 0:\n        return 1\n    else:\n        return n * excessive_recursion(n-1)",
    "target": "Avoid excessive recursion; it may lead to stack overflow. Use iterative solutions where possible."
  },
  {
    "func": "def insecure_random():\n    return random.random()",
    "target": "Avoid using insecure random number generators for cryptographic purposes. Use secrets or os.urandom."
  },
  {
    "func": "def improper_sanitization(user_input):\n    os.system('rm -rf ' + user_input)",
    "target": "Validate and sanitize inputs to avoid command injection vulnerabilities."
  },
  {
    "func": "def overly_complex_conditions(a, b):\n    if a > 10 and b < 5 and a + b > 15 and a - b < 0:\n        return True",
    "target": "Simplify complex conditions to improve readability and maintainability."
  },
  {
    "func": "def non_descriptive_variables(x, y):\n    return x + y",
    "target": "Use descriptive variable names to improve code readability."
  },
  {
    "func": "def insecure_protocol(url):\n    if url.startswith('http:'):\n        return 'Insecure URL detected'",
    "target": "Avoid insecure protocols. Use HTTPS instead of HTTP."
  },
  {
    "func": "def redundant_code():\n    x = 5\n    y = 5\n    return x + y",
    "target": "Remove redundant code to improve efficiency and reduce clutter."
  },
  {
    "func": "def missing_return():\n    if condition:\n        return True",
    "target": "Ensure all branches of a function have return statements."
  },
  {
    "func": "def outdated_function_usage():\n    return 'Hello, %s' % 'World'",
    "target": "Avoid outdated string formatting. Use f-strings or format() instead."
  },
  {
    "func": "def no_docstring():\n    return 42",
    "target": "Add a docstring to explain the function's purpose and usage."
  },
  {
    "func": "def improper_file_permissions():\n    os.chmod('file.txt', 0o777)",
    "target": "Avoid setting overly permissive file permissions. Use the least privilege principle."
  },
  {
    "func": "def large_hardcoded_data():\n    data = [1, 2, 3, 4, 5, ...]  # Thousands of entries\n    return data",
    "target": "Avoid hardcoding large datasets. Use external files or databases."
  },
  {
    "func": "def excessive_logging():\n    for i in range(1000000):\n        print(i)",
    "target": "Avoid excessive logging as it can reduce performance and clutter logs."
  },
  {
    "func": "def blocking_code():\n    time.sleep(10)\n    return 'Done'",
    "target": "Avoid blocking code in asynchronous contexts. Use non-blocking alternatives."
  },
  {
    "func": "def unsafe_path_construction(base, filename):\n    return base + '/' + filename",
    "target": "Validate paths to prevent directory traversal vulnerabilities."
  },
  {
    "func": "def unchecked_cast(x):\n    return int(x)",
    "target": "Validate data before casting to prevent unexpected errors."
  },
  {
    "func": "def unhandled_exceptions():\n    return 10 / 0",
    "target": "Handle exceptions properly to prevent runtime crashes."
  },
  {
    "func": "def hardcoded_credentials():\n    return 'admin:password'",
    "target": "Avoid hardcoding credentials in code. Use secure storage solutions."
  },
  {
    "func": "def excessive_memory_usage():\n    data = [i for i in range(1000000)]\n    return sum(data)",
    "target": "Avoid excessive memory usage. Optimize data structures and algorithms."
  },
  {
    "func": "def excessive_function_calls():\n    return func1(func2(func3(func4(func5(x))))",
    "target": "Avoid excessive function calls. Use intermediate variables for clarity."
  },
  {
    "func": "def excessive_string_operations():\n    return 'a' + 'b' + 'c' + 'd' + 'e' + 'f' + 'g'",
    "target": "Avoid excessive string operations. Use string formatting or join methods."
  },
  {
    "func": "def excessive_list_operations():\n    data = [1, 2, 3]\n    return data + data + data + data",
    "target": "Avoid excessive list operations. Use list comprehensions or generators."
  },
  {
    "func": "def excessive_dict_operations():\n    data = {1: 'a', 2: 'b', 3: 'c'}\n    return data.keys() + data.values()",
    "target": "Avoid excessive dictionary operations. Use dict comprehensions or methods."
  },
  {
    "func": "def excessive_math_operations():\n    return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10",
    "target": "Avoid excessive math operations. Use built-in functions or loops."
  },
  {
    "func": "def excessive_file_operations():\n    with open('data.txt', 'r') as file:\n        data = file.read()\n    return data + data + data + data",
    "target": "Avoid excessive file operations. Read data once and reuse it."
  },
  {
    "func": "def insecure_deserialization(data):\n    return pickle.loads(data)",
    "target": "Avoid using pickle for deserialization as it can execute arbitrary code. Use safer libraries like json."
  },
  {
    "func": "def missing_input_validation(data):\n    return data[0]",
    "target": "Validate input to ensure it meets the expected format and constraints."
  },
  {
    "func": "def inefficient_loop():\n    for i in range(1000000):\n        for j in range(len(data)):\n            process(data[j])",
    "target": "Optimize nested loops to avoid performance bottlenecks."
  },
  {
    "func": "def lack_of_unit_tests():\n    def add(a, b):\n        return a + b\n    return add",
    "target": "Add unit tests to ensure code correctness and prevent regressions."
  },
  {
    "func": "def missing_logging():\n    try:\n        risky_operation()\n    except Exception:\n        pass",
    "target": "Add logging to capture exception details for debugging and monitoring."
  },
  {
    "func": "def improper_exception_handling():\n    try:\n        risky_code()\n    except KeyError:\n        return 'Error occurred'",
    "target": "Catch specific exceptions and handle them appropriately."
  },
  {
    "func": "def missing_context_manager():\n    file = open('data.txt', 'r')\n    data = file.read()\n    file.close()\n    return data",
    "target": "Use context managers to ensure resources are properly closed after use."
  },
  {
    "func": "def potential_divide_by_zero(x):\n    return 10 / x",
    "target": "Check for zero before performing division to avoid runtime errors."
  },
  {
    "func": "def insufficient_password_complexity(password):\n    if len(password) > 8:\n        return True\n    return False",
    "target": "Enforce stronger password policies, including special characters, numbers, and case sensitivity."
  },
  {
    "func": "def hardcoded_api_key():\n    api_key = '12345-abcdef-67890'\n    return api_key",
    "target": "Avoid hardcoding API keys. Use environment variables or secure vaults."
  },
  {
    "func": "def redundant_else_in_return():\n    if condition:\n        return True\n    else:\n        return False",
    "target": "Remove redundant else statements after return for cleaner code."
  },
  {
    "func": "def no_error_handling():\n    return risky_function()",
    "target": "Add error handling to manage unexpected scenarios gracefully."
  },
  {
    "func": "def ineffective_data_structure():\n    data = []\n    for i in range(1000):\n        data.append(i)",
    "target": "Use efficient data structures, such as range or generators, for large datasets."
  },
  {
    "func": "def improper_object_initialization():\n    obj = CustomObject()\n    obj.value = 10\n    return obj",
    "target": "Use proper initialization methods to avoid incomplete or inconsistent states."
  },
  {
    "func": "def unclear_function_purpose(x):\n    return x * x",
    "target": "Add descriptive function names and docstrings to clarify functionality."
  },
  {
    "func": "def insufficient_privilege_check():\n    perform_admin_action(user)",
    "target": "Ensure privilege checks are implemented before performing sensitive actions."
  },
  {
    "func": "def memory_leak_example():\n    data = []\n    while True:\n        data.append('memory leak!')",
    "target": "Avoid unbounded memory usage. Implement limits or periodic cleanup."
  },
  {
    "func": "def risky_temp_file():\n    with open('/tmp/tempfile', 'w') as file:\n        file.write('data')",
    "target": "Use secure methods for creating temporary files to prevent race conditions."
  },
  {
    "func": "def unused_parameters(a, b):\n    return b",
    "target": "Remove unused parameters to improve code clarity and reduce confusion."
  },
  {
    "func": "def inconsistent_indentation():\n    def example():\n      return True",
    "target": "Ensure consistent indentation for better readability and maintainability."
  },
  {
    "func": "def inadequate_error_messages():\n    try:\n        risky_code()\n    except ValueError:\n        raise Exception('Error')",
    "target": "Provide detailed error messages to aid in debugging."
  },
  {
    "func": "def improper_assert_usage():\n    assert x > 0\n    return x",
    "target": "Avoid using assert statements in production code. Use explicit error handling."
  },
  {
    "func": "def improper_string_concat(name):\n    return 'Hello, ' + name + '!'",
    "target": "Use f-strings or string formatting for cleaner and more efficient string concatenation."
  },
  {
    "func": "def repeated_code():\n    print('Hello')\n    print('Hello')",
    "target": "Refactor repeated code into reusable functions or constants."
  },
  {
    "func": "def inefficient_sorting(data):\n    for i in range(len(data)):\n        for j in range(i + 1, len(data)):\n            if data[i] > data[j]:\n                data[i], data[j] = data[j], data[i]",
    "target": "Use built-in sorting methods like sorted() or list.sort() for better performance."
  },
  {
    "func": "def improper_exception_raising():\n    raise 'Error'",
    "target": "Raise exceptions using Exception classes for proper error handling."
  },
  {
    "func": "def improper_logging_level():\n    logging.debug('Debug message')",
    "target": "Use appropriate logging levels to provide the right level of detail."
  },
  {
    "func": "def improper_file_handling():\n    file = open('data.txt', 'w')\n    file.write('data')\n    file.close()",
    "target": "Use context managers to ensure files are properly closed after use."
  },
  {
    "func": "def improper_exception_catching():\n    try:\n        risky_code()\n    except:\n        pass",
    "target": "Catch specific exceptions to handle errors effectively."
  },
  {
    "func": "def improper_variable_naming():\n    VarName = 10\n    return VarName",
    "target": "Use consistent naming conventions like snake_case for variables."
  },
  {
    "func": "def improper_function_naming():\n    def FuncName():\n        return True",
    "target": "Use descriptive function names to clarify their purpose and usage."
  },
  {
    "func": "def improper_class_naming():\n    class ClassName:\n        def __init__(self):\n            pass",
    "target": "Use descriptive class names to indicate their purpose and contents."
  },
  {
    "func": "def improper_constant_naming():\n    CONSTANT_NAME = 42\n    return CONSTANT_NAME",
    "target": "Use consistent naming conventions like UPPER_CASE for constants."
  },
  {
    "func": "def improper_module_naming():\n    pass",
    "target": "Use descriptive module names to indicate their contents and purpose."
  },
  {
    "func": "def improper_package_naming():\n    pass",
    "target": "Use descriptive package names to indicate their contents and purpose."
  },
  {
    "func": "def improper_parameter_naming(x):\n    return x",
    "target": "Use descriptive parameter names to clarify their purpose and usage."
  },
  {
    "func": "def insecure_redirect(url):\n    return redirect(url)",
    "target": "Validate and sanitize user-provided URLs to prevent open redirect vulnerabilities."
  },
  {
    "func": "def no_rate_limiting():\n    for _ in range(1000):\n        process_request()",
    "target": "Implement rate limiting to prevent abuse and denial-of-service attacks."
  },
  {
    "func": "def csrf_vulnerable(request):\n    if request.method == 'POST':\n        perform_sensitive_action(request.user)",
    "target": "Use CSRF tokens to protect against cross-site request forgery attacks."
  },
  {
    "func": "def weak_session_id():\n    session_id = str(random.randint(1000, 9999))\n    return session_id",
    "target": "Use secure, cryptographically random session IDs to prevent session hijacking."
  },
  {
    "func": "def direct_object_reference(user_id):\n    return f'/user/{user_id}/profile'",
    "target": "Validate access control to prevent insecure direct object references."
  },
  {
    "func": "def missing_secure_headers():\n    return render_template('index.html')",
    "target": "Add security headers like Content-Security-Policy and X-Content-Type-Options to prevent attacks."
  },
  {
    "func": "def vulnerable_jwt(jwt_token):\n    payload = jwt.decode(jwt_token, verify=False)\n    return payload",
    "target": "Always verify JWT signatures to prevent token tampering."
  },
  {
    "func": "def hardcoded_sensitive_url():\n    url = 'http://example.com/api_key=123456'\n    return url",
    "target": "Avoid hardcoding sensitive URLs. Use secure configurations or environment variables."
  },
  {
    "func": "def missing_output_encoding(data):\n    return f'<div>{data}</div>'",
    "target": "Apply output encoding to prevent cross-site scripting (XSS) attacks."
  },
  {
    "func": "def unsafe_file_upload(file):\n    file.save(f'/uploads/{file.filename}')",
    "target": "Validate file extensions and scan uploads to prevent malicious file execution."
  },
  {
    "func": "def weak_password_storage(password):\n    hashed = hashlib.sha256(password.encode()).hexdigest()\n    return hashed",
    "target": "Use a password hashing library like bcrypt with salting for secure storage."
  },
  {
    "func": "def sensitive_data_exposure():\n    return f'Error: {error_detail}'",
    "target": "Avoid exposing sensitive details in error messages. Use generic error messages."
  },
  {
    "func": "def missing_authentication():\n    return perform_admin_action()",
    "target": "Implement proper authentication to restrict unauthorized access."
  },
  {
    "func": "def missing_authorization(user):\n    return perform_sensitive_action(user)",
    "target": "Add authorization checks to ensure only permitted users can perform certain actions."
  },
  {
    "func": "def insecure_command_execution(command):\n    os.system(command)",
    "target": "Avoid using os.system for command execution. Use safer alternatives like subprocess with sanitization."
  },
  {
    "func": "def unsafe_deserialization(data):\n    obj = pickle.loads(data)\n    return obj",
    "target": "Validate and sanitize data before deserialization to prevent remote code execution."
  },
  {
    "func": "def insecure_cookie():\n    response.set_cookie('session', 'value')\n    return response",
    "target": "Set cookies with HttpOnly, Secure, and SameSite attributes to prevent attacks."
  },
  {
    "func": "def missing_https():\n    url = 'http://example.com/login'\n    return url",
    "target": "Always use HTTPS to encrypt sensitive data during transmission."
  },
  {
    "func": "def improper_access_control(request):\n    if request.user == 'admin':\n        return 'Access granted'\n    return 'Access denied'",
    "target": "Enforce role-based access control to secure sensitive resources."
  },
  {
    "func": "def missing_account_lockout():\n    for _ in range(100):\n        attempt_login()",
    "target": "Implement account lockout mechanisms to prevent brute force attacks."
  },
  {
    "func": "def no_logging():\n    pass",
    "target": "Implement logging for security-critical events to detect and respond to incidents."
  },
  {
    "func": "def missing_encryption(data):\n    with open('data.txt', 'w') as file:\n        file.write(data)",
    "target": "Encrypt sensitive data at rest to prevent unauthorized access."
  },
  {
    "func": "def sql_query(user_id):\n    query = f'SELECT * FROM users WHERE id = {user_id}'\n    return query",
    "target": "Use parameterized queries to prevent SQL injection attacks."
  },
  {
    "func": "def weak_captcha():\n    return 'What is 2+2?'",
    "target": "Use strong CAPTCHA systems to prevent automated attacks."
  },
  {
    "func": "def insufficient_api_security():\n    return api_call()",
    "target": "Implement API authentication and rate limiting to secure endpoints."
  },
  {
    "func": "def insecure_data_validation(data):\n    if data['role'] == 'admin':\n        return 'Access granted'\n    return 'Access denied'",
    "target": "Validate and sanitize user input to prevent injection attacks."
  },
  {
    "func": "def missing_csrf_protection():\n    return render_template('form.html')",
    "target": "Add CSRF tokens to protect against cross-site request forgery attacks."
  },
  {
    "func": "def duplicate_code():\n    x = 10\n    y = 20\n    z = x + y\n    a = 10\n    b = 20\n    c = a + b\n    return z, c",
    "target": "Avoid duplicate code by refactoring common logic into reusable functions."
  },
  {
    "func": "def empty_if_block():\n    if condition:\n        pass",
    "target": "Avoid empty if statements. Add logic or remove unnecessary code."
  },
  {
    "func": "def commented_out_code():\n    # print('Debugging output')\n    return 42",
    "target": "Remove commented-out code to keep the codebase clean."
  },
  {
    "func": "def constant_mutation():\n    PI = 3.14\n    PI = 3.14159\n    return PI",
    "target": "Avoid reassigning constants. Define them as immutable."
  },
  {
    "func": "def unused_function():\n    def helper():\n        pass\n    return True",
    "target": "Remove unused functions to reduce code complexity."
  },
  {
    "func": "def catch_generic_exception():\n    try:\n        risky_operation()\n    except Exception:\n        handle_error()",
    "target": "Avoid catching generic exceptions. Catch specific exceptions instead."
  },
  {
    "func": "def hardcoded_file_path():\n    file_path = '/tmp/data.txt'\n    return file_path",
    "target": "Avoid hardcoding file paths. Use configuration files or environment variables."
  },
  {
    "func": "def large_class():\n    class LargeClass:\n        def __init__(self):\n            self.attr1 = None\n            self.attr2 = None\n            self.attr3 = None\n            # 50 more attributes\n    return LargeClass()",
    "target": "Avoid large classes. Refactor into smaller, cohesive classes."
  },
  {
    "func": "def excessive_parameters(a, b, c, d, e, f, g):\n    return a + b + c + d + e + f + g",
    "target": "Avoid excessive parameters in functions. Use data structures for grouping."
  },
  {
    "func": "def long_line_of_code():\n    result = [x for x in range(1000) if x % 2 == 0 and x > 100 and x < 900]",
    "target": "Avoid long lines of code. Break them into smaller, readable statements."
  },
  {
    "func": "def non_descriptive_variable_names():\n    a = 10\n    b = 20\n    return a + b",
    "target": "Use descriptive variable names to improve code readability."
  },
  {
    "func": "def deeply_nested_conditionals():\n    if a:\n        if b:\n            if c:\n                if d:\n                    if e:\n                        return True",
    "target": "Avoid deep nesting in conditionals (5 levels detected). Use guard clauses or early returns."
  },
  {
    "func": "def return_in_finally():\n    try:\n        return 1\n    finally:\n        return 2",
    "target": "Avoid return statements in finally blocks. It can lead to unexpected behavior."
  },
  {
    "func": "def use_of_print():\n    print('Debugging message')",
    "target": "Avoid using print statements in production code. Use a proper logging framework."
  },
  {
    "func": "def improper_collection_initialization():\n    list_var = list()\n    return list_var",
    "target": "Use direct initialization (e.g., []) for better performance and readability."
  },
  {
    "func": "def hardcoded_ip_address():\n    ip = '192.168.1.1'\n    return ip",
    "target": "Avoid hardcoding IP addresses. Use configuration files or constants."
  },
  {
    "func": "def unused_catch_variable():\n    try:\n        risky_operation()\n    except Exception as e:\n        pass",
    "target": "Use or remove unused exception variables to avoid confusion."
  },
  {
    "func": "def excessive_cyclomatic_complexity(a, b, c):\n    if a:\n        if b:\n            if c:\n                return True\n    return False",
    "target": "Reduce cyclomatic complexity by refactoring into simpler functions."
  },
  {
    "func": "def missing_default_case_in_switch(value):\n    match value:\n        case 1:\n            return 'One'\n        case 2:\n            return 'Two'",
    "target": "Add a default case in switch statements to handle unexpected values."
  },
  {
    "func": "def improper_exception_message():\n    raise ValueError",
    "target": "Provide meaningful messages in exceptions for easier debugging."
  },
  {
    "func": "def duplicate_import():\n    import os\n    import os",
    "target": "Avoid duplicate imports. They add unnecessary clutter."
  },
  {
    "func": "def redundant_boolean_comparison(value):\n    return value == True",
    "target": "Avoid redundant comparisons to True or False. Use the value directly."
  },
  {
    "func": "def improper_resource_cleanup():\n    file = open('data.txt', 'r')\n    return file.read()",
    "target": "Ensure proper resource cleanup using context managers."
  },
  {
    "func": "def mutable_default_argument(data=[]):\n    data.append(1)\n    return data",
    "target": "Avoid mutable default arguments. It can lead to unexpected behavior."
  },
  {
    "func": "def unused_return_value():\n    result = calculate()\n    return 42",
    "target": "Do not ignore or overwrite return values from function calls."
  },
  {
    "func": "def missing_type_annotations(a, b):\n    return a + b",
    "target": "Add type annotations for function arguments and return values."
  },
  {
    "func": "def large_return_tuple():\n    return 1, 2, 3, 4, 5, 6, 7, 8, 9, 10",
    "target": "Avoid large return tuples. Use data structures for better clarity."
  },
  {
    "func": "def unnecessary_else_after_return(value):\n    if value:\n        return True\n    else:\n        return False",
    "target": "Avoid unnecessary else blocks after return statements."
  },
  {
    "func": "def dead_code():\n    if False:\n        return 'This will never run'\n    return 'Hello, World!'",
    "target": "Remove unreachable (dead) code to maintain codebase cleanliness."
  },
  {
    "func": "def excessive_logging():\n    for i in range(1000):\n        print(f'Processing {i}')",
    "target": "Avoid excessive logging in loops to prevent performance issues."
  },
  {
    "func": "def ambiguous_condition(a, b):\n    if a == b:\n        return 'Equal'\n    elif a == 10:\n        return 'Ten'\n    elif a == b:\n        return 'Still Equal'\n    return 'Different'",
    "target": "Avoid ambiguous conditions with overlapping logic. Ensure all conditions are unique."
  },
  {
    "func": "def implicit_type_conversion(a, b):\n    return a + b",
    "target": "Avoid implicit type conversions. Use explicit casting for clarity."
  },
  {
    "func": "def magic_strings():\n    if user_input == 'admin':\n        return 'Admin access granted'",
    "target": "Avoid using magic strings. Use constants with meaningful names."
  },
  {
    "func": "def improper_error_escalation():\n    try:\n        risky_operation()\n    except ValueError:\n        raise Exception('Error occurred')",
    "target": "Preserve the original exception when escalating to retain debugging context."
  },
  {
    "func": "def inconsistent_indentation():\n    if True:\n      print('Inconsistent')",
    "target": "Ensure consistent indentation for better readability and maintainability."
  },
  {
    "func": "def ambiguous_function_name():\n    def func1():\n        return True\n    return func1()",
    "target": "Use descriptive function names to clarify their purpose."
  },
  {
    "func": "def unnecessary_singleton():\n    class Singleton:\n        _instance = None\n\n        @staticmethod\n        def instance():\n            if Singleton._instance is None:\n                Singleton._instance = Singleton()\n            return Singleton._instance\n\n    return Singleton.instance()",
    "target": "Avoid unnecessary singleton patterns unless absolutely required."
  },
  {
    "func": "def inefficient_list_search():\n    data = [1, 2, 3, 4, 5]\n    for item in data:\n        if item == 3:\n            return True",
    "target": "Use efficient search methods like `in` for list lookups."
  },
  {
    "func": "def outdated_library_usage():\n    import urllib2\n    response = urllib2.urlopen('http://example.com')\n    return response.read()",
    "target": "Avoid outdated libraries. Use modern alternatives like `requests`."
  },
  {
    "func": "def redundant_variable_assignment():\n    a = 5\n    b = a\n    return b",
    "target": "Avoid redundant variable assignments. Use variables only when necessary."
  },
  {
    "func": "def incomplete_docstring():\n    \"\"\"This function does something\"\"\"\n    return True",
    "target": "Provide detailed docstrings explaining parameters, return values, and functionality."
  },
  {
    "func": "def redundant_code_block():\n    if condition:\n        if condition:\n            return True",
    "target": "Simplify redundant nested conditions to improve readability."
  },
  {
    "func": "def implicit_context_dependency():\n    config = get_global_config()\n    return config.value",
    "target": "Avoid implicit context dependencies. Pass configuration explicitly."
  },
  {
    "func": "def inefficient_data_structure():\n    data = [1, 2, 3, 4, 5]\n    if 3 in data:\n        return True",
    "target": "Use appropriate data structures like sets for faster lookups."
  },
  {
    "func": "def inconsistent_test_logic():\n    if condition:\n        assert True\n    else:\n        assert False",
    "target": "Avoid redundant assertions. Use meaningful test cases."
  },
  {
    "func": "def missing_context_in_logging():\n    logger.info('Operation completed')",
    "target": "Include contextual information in log messages to aid debugging."
  },
  {
    "func": "def overcomplicated_boolean_expression():\n    if (a and not b) or (not a and b):\n        return True",
    "target": "Simplify boolean expressions for clarity."
  },
  {
    "func": "def unsafe_dynamic_import(module_name):\n    return __import__(module_name)",
    "target": "Avoid dynamic imports unless absolutely necessary. Validate input if used."
  },
  {
    "func": "def insecure_api_endpoint():\n    return 'http://api.example.com/data'",
    "target": "Avoid hardcoding insecure API endpoints. Use secure (HTTPS) connections."
  },
  {
    "func": "def duplicate_loop_logic():\n    for i in range(10):\n        print(i)\n    for i in range(10):\n        print(i)",
    "target": "Consolidate duplicate loop logic to reduce redundancy."
  },
  {
    "func": "def overuse_of_static_methods():\n    @staticmethod\n    def helper():\n        return True",
    "target": "Limit the use of static methods. Use instance methods for better design."
  },
  {
    "func": "def inefficient_string_concatenation():\n    result = ''\n    for i in range(1000):\n        result += str(i)",
    "target": "Use efficient string concatenation methods like `join()`."
  },
  {
    "func": "def undocumented_side_effects(a):\n    a.append(1)\n    return a",
    "target": "Document side effects in function docstrings to inform users."
  },
  {
    "func": "def improper_exception_silencing():\n    try:\n        risky_operation()\n    except Exception:\n        pass",
    "target": "Avoid silencing exceptions. Log them for debugging purposes."
  },
  {
    "func": "def no_exit_on_error():\n    try:\n        risky_operation()\n    except Exception as e:\n        logger.error(e)",
    "target": "Handle critical errors gracefully and exit when necessary."
  },
  {
    "func": "def untested_code_path():\n    if a == 10:\n        return 'Tested'\n    else:\n        return 'Untested'",
    "target": "Ensure all code paths are covered in tests."
  },
  {
    "func": "def inefficient_memory_usage():\n    data = [x for x in range(10**6)]\n    return sum(data)",
    "target": "Use generators or efficient memory usage techniques for large data."
  },
  {
    "func": "def implicit_dependency_on_global():\n    def inner():\n        return global_variable\n    return inner()",
    "target": "Avoid implicit dependencies on global variables. Pass them explicitly."
  },
  {
    "func": "def inappropriate_abstraction():\n    class OneMethod:\n        def method(self):\n            return True\n    return OneMethod()",
    "target": "Avoid unnecessary abstractions. Keep the design simple and direct."
  },
  {
    "func": "def inconsistent_data_format():\n    return {'id': 1, 'Name': 'John'}",
    "target": "Ensure consistent data format in structures for maintainability."
  },
  {
    "func": "def complex_method():\n    data = []\n    for i in range(10):\n        for j in range(10):\n            data.append((i, j))\n    return data",
    "target": "Break complex methods into smaller, reusable functions for better readability."
  },
  {
    "func": "def unclear_variable_names():\n    x = 10\n    y = 20\n    return x + y",
    "target": "Use descriptive variable names to improve code clarity."
  },
  {
    "func": "def unstructured_code():\n    if condition:\n        print('A')\n    else:\n        print('B')\n    print('Done')",
    "target": "Structure code into functions or methods to separate responsibilities."
  },
  {
    "func": "def unused_function():\n    def helper():\n        return True\n    return 42",
    "target": "Remove unused functions to reduce code clutter."
  },
  {
    "func": "def missing_docstring():\n    def calculate_sum(a, b):\n        return a + b",
    "target": "Provide a docstring to explain the purpose and parameters of the function."
  },
  {
    "func": "def inconsistent_spacing():\n    a=10\n    b = 20\n    return a+b",
    "target": "Ensure consistent spacing around operators for better readability."
  },
  {
    "func": "def overly_nested_conditions():\n    if condition1:\n        if condition2:\n            if condition3:\n                return True",
    "target": "Flatten nested conditions to improve readability."
  },
  {
    "func": "def long_line_of_code():\n    return 'This is a very long line of code that exceeds the recommended character limit for a single line in most coding standards.'",
    "target": "Break long lines into multiple lines for better readability."
  },
  {
    "func": "def improper_function_comments():\n    # Add two numbers\n    def add(a, b):\n        return a + b",
    "target": "Write comments that describe the purpose, not the implementation."
  },
  {
    "func": "def hard_to_understand_logic():\n    result = not (a and b) or (c and d)",
    "target": "Use parentheses and simplify complex logical expressions for clarity."
  },
  {
    "func": "def redundant_else():\n    if condition:\n        return True\n    else:\n        return False",
    "target": "Remove redundant `else` after `return` for simplicity."
  },
  {
    "func": "def inconsistent_function_order():\n    def helper():\n        return True\n\n    def main():\n        return helper()\n\n    return main()",
    "target": "Order functions logically, with main functions at the top or bottom."
  },
  {
    "func": "def overly_generic_names():\n    def process_data(data):\n        return data",
    "target": "Use specific names for functions and variables to improve understanding."
  },
  {
    "func": "def redundant_comments():\n    # This adds two numbers\n    return a + b",
    "target": "Avoid redundant comments that repeat the code."
  },
  {
    "func": "def inconsistent_casing():\n    variableName = 10\n    variable_name = 20\n    return variableName + variable_name",
    "target": "Follow consistent naming conventions throughout the codebase."
  },
  {
    "func": "def missing_type_annotations(a, b):\n    return a + b",
    "target": "Use type annotations for better code understanding and error checking."
  },
  {
    "func": "def repetitive_code():\n    print('Start')\n    print('Processing')\n    print('End')",
    "target": "Replace repetitive code with loops or helper functions."
  },
  {
    "func": "def hidden_side_effects():\n    global counter\n    counter += 1\n    return counter",
    "target": "Avoid hidden side effects. Make changes explicit."
  },
  {
    "func": "def unclear_return_values():\n    if condition:\n        return 1\n    else:\n        return 0",
    "target": "Use enums or constants to represent meaningful return values."
  },
  {
    "func": "def no_error_handling():\n    result = risky_operation()\n    return result",
    "target": "Add error handling to improve code robustness."
  },
  {
    "func": "def deep_hierarchy_class():\n    class A:\n        pass\n    class B(A):\n        pass\n    class C(B):\n        pass",
    "target": "Avoid deep inheritance hierarchies. Prefer composition over inheritance."
  },
  {
    "func": "def unnecessary_single_return_point():\n    if condition:\n        result = True\n    else:\n        result = False\n    return result",
    "target": "Simplify logic to reduce unnecessary return points."
  },
  {
    "func": "def missing_constants():\n    if value == 42:\n        return 'Answer'",
    "target": "Define constants for magic numbers to improve readability."
  },
  {
    "func": "def improper_file_structure():\n    def helper1():\n        return True\n\n    def helper2():\n        return False",
    "target": "Organize functions into appropriate files for maintainability."
  },
  {
    "func": "def overly_complex_parameters():\n    def process(data, config, env, context):\n        return True",
    "target": "Simplify parameters by grouping related items into objects or dictionaries."
  },
  {
    "func": "def large_if_else_chain():\n    if condition1:\n        return 'A'\n    elif condition2:\n        return 'B'\n    elif condition3:\n        return 'C'\n    else:\n        return 'D'",
    "target": "Replace long `if-else` chains with switch-case constructs or mapping."
  },
  {
    "func": "def inconsistent_loop_styles():\n    for i in range(10):\n        print(i)\n    j = 0\n    while j < 10:\n        print(j)\n        j += 1",
    "target": "Use consistent looping styles throughout the code."
  },
  {
    "func": "def ignored_todo():\n    # TODO: Refactor this function\n    pass",
    "target": "Address or remove TODO comments to keep the code clean."
  },
  {
    "func": "def duplicate_functionality():\n    def add(a, b):\n        return a + b\n    def sum(a, b):\n        return a + b",
    "target": "Consolidate duplicate functions into a single implementation."
  },
  {
    "func": "def mixed_indentation():\n    if condition:\n      print('Bad')\n        print('Indentation')",
    "target": "Use consistent indentation (spaces or tabs) throughout the code."
  },
  {
    "func": "def inconsistent_variable_names():\n    userName = 'John'\n    user_email = 'john@example.com'\n    return userName, user_email",
    "target": "Ensure consistent naming conventions (e.g., snake_case or camelCase)."
  },
  {
    "func": "def unhandled_exceptions():\n    result = risky_function()\n    return result",
    "target": "Add try-except blocks to handle potential exceptions."
  },
  {
    "func": "def commented_out_code():\n    # print('This is commented out')\n    return True",
    "target": "Remove commented-out code to reduce clutter."
  },
  {
    "func": "def large_class():\n    class User:\n        def login(self): pass\n        def logout(self): pass\n        def update_profile(self): pass\n        def delete_account(self): pass\n        def reset_password(self): pass",
    "target": "Split large classes into smaller, focused classes adhering to the Single Responsibility Principle."
  },
  {
    "func": "def hard_to_find_bug():\n    x = 0.1 + 0.2\n    if x == 0.3:\n        print('Equal')",
    "target": "Avoid floating-point equality checks; use a tolerance or rounding."
  },
  {
    "func": "def redundant_return():\n    if condition:\n        return True\n    return False",
    "target": "Simplify return statements by directly returning the condition."
  },
  {
    "func": "def excessive_comments():\n    # This function adds two numbers\n    # The parameters are a and b\n    # The result is their sum\n    return a + b",
    "target": "Avoid excessive comments. Focus on meaningful, concise explanations."
  },
  {
    "func": "def inconsistent_error_messages():\n    if condition1:\n        raise ValueError('Error 1')\n    if condition2:\n        raise Exception('Something went wrong')",
    "target": "Use consistent error messages and types for better debugging."
  },
  {
    "func": "def unused_constants():\n    PI = 3.14159\n    return 42",
    "target": "Remove unused constants or variables to avoid confusion."
  },
  {
    "func": "def overly_generic_exceptions():\n    try:\n        risky_operation()\n    except Exception:\n        pass",
    "target": "Catch specific exceptions instead of the generic `Exception`."
  },
  {
    "func": "def missing_default_case():\n    if x == 1:\n        return 'One'\n    elif x == 2:\n        return 'Two'",
    "target": "Add a default case to handle unexpected inputs."
  },
  {
    "func": "def deep_directory_structure():\n    path = '/a/very/long/and/deep/directory/structure'\n    return path",
    "target": "Avoid overly deep directory structures for better file management."
  },
  {
    "func": "def poor_parameter_order(a, default_value=None):\n    return a + default_value",
    "target": "Place default parameters after required ones to improve usability."
  },
  {
    "func": "def missing_readability_breaks():\n    for i in range(100):\n        if i % 2 == 0:\n            continue\n    return i",
    "target": "Add whitespace or breaks to improve readability in loops or logic."
  },
  {
    "func": "def inline_code_blocks():\n    x = 10; y = 20; z = x + y\n    return z",
    "target": "Avoid writing multiple statements on a single line."
  },
  {
    "func": "def insufficient_test_coverage():\n    def calculate(a, b):\n        return a + b\n    # No test cases provided",
    "target": "Ensure all functions have adequate test cases."
  },
  {
    "func": "def inconsistent_docstrings():\n    def add(a, b):\n        \"\"\"Add two numbers.\"\"\"\n        return a + b\n    def subtract(a, b):\n        # Subtract two numbers\n        return a - b",
    "target": "Follow a consistent format for docstrings, such as PEP-257."
  },
  {
    "func": "def too_many_arguments(a, b, c, d, e, f, g):\n    return a + b + c + d + e + f + g",
    "target": "Limit the number of arguments to improve readability and usability."
  },
  {
    "func": "def ambiguous_return_values():\n    if condition:\n        return 'Yes'\n    else:\n        return True",
    "target": "Ensure consistent and meaningful return types."
  },
  {
    "func": "def missing_logging():\n    try:\n        risky_operation()\n    except Exception:\n        pass",
    "target": "Add logging to capture details of errors and critical operations."
  },
  {
    "func": "def overly_complex_condition():\n    if (a and not b) or (c and not d and e):\n        return True",
    "target": "Simplify complex conditions for better readability."
  },
  {
    "func": "def unused_function_arguments(a, b):\n    return a",
    "target": "Remove unused function arguments to avoid confusion."
  },
  {
    "func": "def hidden_dependencies():\n    return os.getenv('API_KEY')",
    "target": "Avoid hidden dependencies. Pass required values explicitly."
  },
  {
    "func": "def inconsistent_file_naming():\n    import my_script\n    from MyScript import my_function",
    "target": "Use consistent file and module naming conventions."
  },
  {
    "func": "def function_does_too_much():\n    def process_data(data):\n        clean_data = clean(data)\n        save_data(clean_data)\n        return analyze_data(clean_data)",
    "target": "Limit functions to a single responsibility."
  },
  {
    "func": "def improper_use_of_constants():\n    GRAVITY = 9.8\n    gravity = 9.8\n    return GRAVITY, gravity",
    "target": "Define constants in a single place to avoid redundancy."
  },
  {
    "func": "def poorly_formatted_comments():\n    #This comment lacks space and formatting\n    return True",
    "target": "Format comments with proper spacing for readability."
  },
  {
    "func": "def unnecessary_mutable_defaults(data=[]):\n    data.append(1)\n    return data",
    "target": "Avoid mutable default arguments as they can lead to unexpected behavior."
  },
  {
    "func": "def overly_tightly_coupled_code():\n    def service_layer():\n        return data_layer()",
    "target": "Decouple layers in the application to improve testability and maintainability."
  },
  {
    "func": "def lack_of_consistent_encoding():\n    with open('file.txt', 'r') as file:\n        return file.read()",
    "target": "Specify file encoding to avoid cross-platform issues."
  },
  {
    "func": "def inconsistent_function_naming():\n    def add(a, b):\n        return a + b\n    def subtract(a, b):\n        return a - b",
    "target": "Use consistent function naming conventions for clarity."
  },
  {
    "func": "def improper_use_of_globals():\n    global counter\n    counter += 1\n    return counter",
    "target": "Avoid global variables. Pass values explicitly to functions."
  },
  {
    "func": "def missing_type_annotations(a, b):\n    return a + b",
    "target": "Add type annotations to function arguments and return values for better code clarity."
  },
  {
    "func": "def inefficient_search(lst, x):\n    for item in lst:\n        if item == x:\n            return True\n    return False",
    "target": "Use efficient search methods like `x in lst` for better performance."
  },
  {
    "func": "def non_standard_import():\n    from my_library import *\n    return function_call()",
    "target": "Avoid wildcard imports. Import only required functions or classes."
  },
  {
    "func": "def deeply_nested_conditions():\n    if a:\n        if b:\n            if c:\n                return True",
    "target": "Simplify deeply nested conditions using logical operators or separate functions."
  },
  {
    "func": "def ignoring_return_values():\n    my_list.append(5)\n    my_list.sort()\n    my_list.reverse()",
    "target": "Avoid ignoring return values of functions like `sorted()` that return new objects."
  },
  {
    "func": "def unnecessary_computation():\n    result = sum([x**2 for x in range(100)])\n    return result",
    "target": "Avoid unnecessary list comprehensions. Use generator expressions for better performance."
  },
  {
    "func": "def using_tabs_instead_of_spaces():\n\treturn True",
    "target": "Use spaces instead of tabs for consistent code formatting."
  },
  {
    "func": "def bad_indentation():\n    if condition:\n         return True",
    "target": "Fix inconsistent indentation to maintain readability."
  },
  {
    "func": "def unnecessary_else():\n    if condition:\n        return True\n    else:\n        return False",
    "target": "Remove unnecessary `else` after `return` for cleaner code."
  },
  {
    "func": "def redundant_conditionals():\n    if x == True:\n        return True",
    "target": "Avoid redundant conditionals. Use `if x:` instead of `if x == True:`."
  },
  {
    "func": "def non_lazy_loading():\n    data = load_all_data()\n    return process(data)",
    "target": "Implement lazy loading to optimize memory usage and improve performance."
  },
  {
    "func": "def insecure_os_call(command):\n    os.system(command)",
    "target": "Avoid using `os.system`. Use `subprocess.run` with argument splitting to prevent command injection."
  },
  {
    "func": "def logging_sensitive_information():\n    logging.info(f'Password: {password}')",
    "target": "Avoid logging sensitive information like passwords or API keys."
  },
  {
    "func": "def missing_function_docstring():\n    def calculate_area(radius):\n        return 3.14 * radius * radius",
    "target": "Add a docstring to describe the function's purpose and parameters."
  },
  {
    "func": "def redundant_variable():\n    temp = calculate()\n    return temp",
    "target": "Avoid redundant variables. Directly return the function result."
  },
  {
    "func": "def mutable_class_attributes():\n    class MyClass:\n        items = []",
    "target": "Avoid mutable default attributes in classes to prevent shared state issues."
  },
  {
    "func": "def inefficient_string_concatenation():\n    result = ''\n    for s in strings:\n        result += s",
    "target": "Use `.join()` for efficient string concatenation in loops."
  },
  {
    "func": "def forgetting_to_close_file():\n    file = open('data.txt', 'r')\n    data = file.read()\n    return data",
    "target": "Use a context manager (`with open(...)`) to ensure the file is properly closed."
  },
  {
    "func": "def lack_of_assertions():\n    def add(a, b):\n        return a + b",
    "target": "Add assertions in tests to validate expected behavior."
  },
  {
    "func": "def hard_coded_path():\n    path = '/home/user/data/file.txt'\n    return path",
    "target": "Avoid hardcoding paths. Use configuration files or environment variables."
  },
  {
    "func": "def multiple_returns():\n    if x > 0:\n        return 'Positive'\n    elif x < 0:\n        return 'Negative'\n    else:\n        return 'Zero'",
    "target": "Avoid multiple return statements in a single function for maintainability."
  },
  {
    "func": "def unstructured_code_block():\n    a = 10\n    b = 20\n    result = a + b\n    print(result)\n    return result",
    "target": "Group related code into functions for better modularity."
  },
  {
    "func": "def hard_coded_timeout():\n    time.sleep(30)",
    "target": "Avoid hardcoding timeouts. Make them configurable."
  },
  {
    "func": "def missing_default_in_switch_case():\n    match value:\n        case 1:\n            return 'One'\n        case 2:\n            return 'Two'",
    "target": "Add a default case in `match` or `switch` statements to handle unexpected values."
  },
  {
    "func": "def silent_failure():\n    try:\n        risky_function()\n    except Exception:\n        pass",
    "target": "Avoid silent failures. Log errors or provide meaningful messages."
  },
  {
    "func": "def ambiguous_variable_names():\n    x = 10\n    y = 20\n    return x + y",
    "target": "Use descriptive variable names for better code readability."
  },
  {
    "func": "def missing_unit_tests():\n    def multiply(a, b):\n        return a * b\n    # No test cases provided",
    "target": "Write unit tests for all critical functions."
  },
  {
    "func": "def dependent_on_environment():\n    result = os.getenv('SETTING')\n    return result",
    "target": "Provide fallback values for environment-dependent settings."
  },
  {
    "func": "def unused_variables():\n    result = calculate()\n    temp = 42\n    return result",
    "target": "Remove unused variables to reduce clutter."
  },
  {
    "func": "def large_import_blocks():\n    import os, sys, math, random, datetime, re\n    return None",
    "target": "Organize imports into logical sections and avoid unused ones."
  },
  {
    "func": "def no_comments():\n    return 42",
    "target": "Add comments to explain the purpose and functionality of the code."
  },
  {
    "func": "def inconsistent_initialization():\n    x = 10\n    y = 20\n    x = x + y\n    return x",
    "target": "Avoid initializing variables multiple times unnecessarily."
  },
  {
    "func": "class DeeplyNestedClass:\n    class InnerClass1:\n        class InnerClass2:\n            class InnerClass3:\n                pass",
    "target": "Avoid excessive class nesting. Refactor for better clarity."
  },
  {
    "func": "def improper_whitespace():\n    return   True",
    "target": "Ensure consistent whitespace for better readability."
  },
  {
    "func": "def inconsistent_argument_order(arg1, default_arg=None, arg2):\n    return arg1 + arg2",
    "target": "Place default arguments after required arguments for better usability."
  },
  {
    "func": "CONSTANT1 = 10\nCONSTANT2 = 20",
    "target": "Use meaningful and descriptive names for constants."
  },
  {
    "func": "import os, sys, random",
    "target": "Organize imports alphabetically and logically."
  },
  {
    "func": "def deeply_nested_classes():\n    class A:\n        class B:\n            class C:\n                class D:\n                    class E:\n                        def method(self):\n                            pass",
    "target": "Avoid deeply nested classes (5 levels detected). Consider breaking them into separate classes."
  },
  {
    "func": "def overloaded_function(x):\n    pass\n\ndef overloaded_function(x, y):\n    pass",
    "target": "Avoid excessive overloading of functions. Consolidate logic where possible."
  },
  {
    "func": "def complex_expression(x, y, z):\n    return x and y or not z",
    "target": "Use parentheses in complex logical expressions for clarity."
  },
  {
    "func": "def long_method_name_for_addition():\n    return a + b",
    "target": "Use concise and descriptive method names."
  },
  {
    "func": "def long_function():\n    # This function spans over 100 lines\n    pass",
    "target": "Refactor long functions into smaller, manageable units."
  },
  {
    "func": "try:\n    try:\n        pass\n    except:\n        pass\nexcept:\n    pass",
    "target": "Avoid deeply nested try-except blocks for better readability."
  },
  {
    "func": "def hardcoded_logic():\n    if user == 'admin':\n        return True",
    "target": "Replace hardcoded domain-specific logic with configurations."
  },
  {
    "func": "def missing_dependency_injection():\n    db = Database()\n    return db.query()",
    "target": "Use dependency injection instead of creating dependencies inside the function."
  },
  {
    "func": "def mixed_data_types():\n    data = [1, 'two', 3.0]\n    return data",
    "target": "Avoid mixing types within a single data structure."
  },
  {
    "func": "def insufficient_test_coverage():\n    def sum(a, b):\n        return a + b",
    "target": "Ensure unit tests cover all critical code paths."
  },
  {
    "func": "def tightly_coupled_logic():\n    if user.is_admin():\n        return db.get_all_users()",
    "target": "Separate business logic from data access for better maintainability."
  },
  {
    "func": "class Singleton:\n    _instance = None\n\n    def __new__(cls):\n        if not cls._instance:\n            cls._instance = super().__new__(cls)\n        return cls._instance",
    "target": "Avoid overusing singletons. Use other design patterns if possible."
  },
  {
    "func": "def hardcoded_key():\n    key = '123456'\n    return key",
    "target": "Avoid hardcoding keys or sensitive data in the code."
  },
  {
    "func": "def insecure_api_key():\n    headers = {'Authorization': 'Bearer 12345'}\n    return headers",
    "target": "Avoid embedding API keys directly in the code."
  },
  {
    "func": "def improper_session_timeout():\n    session.expiry = None",
    "target": "Set appropriate session timeout values."
  },
  {
    "func": "def unvalidated_json(data):\n    return data['key']",
    "target": "Validate JSON inputs against a schema."
  },
  {
    "func": "def vague_error_message():\n    try:\n        pass\n    except:\n        return 'Something went wrong'",
    "target": "Provide detailed error messages to aid debugging."
  },
  {
    "func": "def insecure_token_expiry(token):\n    return token.is_expired()",
    "target": "Ensure proper token expiry handling to prevent security risks."
  },
  {
    "func": "def unsigned_cookies():\n    response.set_cookie('session', '12345')",
    "target": "Sign and encrypt cookies for secure transmission."
  },
  {
    "func": "def lack_of_input_validation(data):\n    return data",
    "target": "Validate input data to meet required constraints."
  },
  {
    "func": "def outdated_protocol():\n    connection = ssl.SSLContext(ssl.PROTOCOL_TLSv1)",
    "target": "Avoid using outdated security protocols. Use modern alternatives like TLS 1.2 or 1.3."
  },
  {
    "func": "def nested_error_handling():\n    try:\n        try:\n            pass\n        except ValueError:\n            pass\n    except Exception:\n        pass",
    "target": "Flatten nested error-handling blocks for better readability."
  },
  {
    "func": "def large_switch_case(value):\n    match value:\n        case 1:\n            return 'One'\n        case 2:\n            return 'Two'\n        # 50 more cases",
    "target": "Replace large switch-case constructs with a mapping or dictionary."
  },
  {
    "func": "def unencrypted_data_transmission(data):\n    return requests.post('http://example.com', data=data)",
    "target": "Encrypt data during transmission to prevent eavesdropping."
  },
  {
    "func": "def insecure_hashing(password):\n    return hashlib.md5(password.encode()).hexdigest()",
    "target": "Use secure hashing algorithms like SHA-256 for password storage."
  },
  {
    "func": "def hardcoded_paths():\n    path = '/home/user/data'\n    return path",
    "target": "Avoid hardcoding file paths. Use relative paths or configuration files."
  },
  {
    "func": "def insecure_data_storage(data):\n    with open('data.txt', 'w') as file:\n        file.write(data)",
    "target": "Encrypt sensitive data before storing it in files or databases."
  },
  {
    "func": "def insecure_redirect(url):\n    return redirect(url)",
    "target": "Validate and sanitize redirect URLs to prevent open redirects."
  },
  {
    "func": "def insecure_file_upload(file):\n    with open('uploads/' + file.filename, 'wb') as f:\n        f.write(file.read())",
    "target": "Validate file uploads to prevent malicious file execution."
  },
  {
    "func": "def insecure_session_management(session):\n    session['authenticated'] = True",
    "target": "Use secure session management techniques to prevent session hijacking."
  },
  {
    "func": "def insecure_random_number_generation():\n    return random.randint(1, 100)",
    "target": "Use secure random number generators for cryptographic operations."
  },
  {
    "func": "def insecure_cross_origin_resource_sharing():\n    response.headers['Access-Control-Allow-Origin'] = '*'\n    return response",
    "target": "Use CORS headers to restrict cross-origin resource sharing."
  },
  {
    "func": "def insecure_authentication(password):\n    return password == 'admin'",
    "target": "Use secure authentication mechanisms like bcrypt or PBKDF2."
  },
  {
    "func": "def inconsistent_docstring_format():\n    \"\"\"This function does something.\"\"\"\n    return True",
    "target": "Follow a consistent docstring format, such as PEP-257."
  },
  {
    "func": "def overly_complex_loop():\n    for i in range(10):\n        for j in range(10):\n            if i * j % 2 == 0:\n                return i, j",
    "target": "Simplify complex loops for better readability."
  },
  {
    "func": "def improper_list_extension():\n    lst = [1, 2, 3]\n    lst = lst + [4, 5, 6]\n    return lst",
    "target": "Use `extend()` instead of `+` for list concatenation to optimize performance."
  },
  {
    "func": "def implicit_return_none():\n    def helper():\n        pass",
    "target": "Explicitly return `None` for clarity in functions with no return value."
  },
  {
    "func": "def too_many_return_points(x):\n    if x > 0:\n        return 'Positive'\n    if x < 0:\n        return 'Negative'\n    return 'Zero'",
    "target": "Limit the number of return points in a function to improve maintainability."
  },
  {
    "func": "def unnecessary_boolean_cast(x):\n    return bool(x == True)",
    "target": "Avoid unnecessary boolean casts; use the condition directly."
  },
  {
    "func": "def lack_of_version_control_comments():\n    # Fixed bug in sorting logic\n    return sorted(data)",
    "target": "Avoid including version control information in comments; use commit messages instead."
  },
  {
    "func": "def unused_class():\n    class Helper:\n        pass\n    return True",
    "target": "Remove unused classes to reduce code clutter."
  },
  {
    "func": "def ambiguous_operator_usage(a, b):\n    return a | b",
    "target": "Avoid ambiguous operators; clarify intent with comments or alternative code."
  },
  {
    "func": "def redundant_set_operation():\n    data = set([1, 2, 3])\n    return data",
    "target": "Use set literals instead of redundant `set()` calls for better readability."
  },
  {
    "func": "def missing_context_while_logging():\n    logger.info('Operation completed')",
    "target": "Include contextual information like user IDs or timestamps in log messages."
  },
  {
    "func": "def repeated_code_in_branches(x):\n    if x > 0:\n        return x + 1\n    else:\n        return x + 1",
    "target": "Refactor repeated code in branches into a single statement."
  },
  {
    "func": "def improper_usage_of_map():\n    return map(lambda x: x**2, [1, 2, 3])",
    "target": "Avoid using `map()` with lambdas; use list comprehensions instead."
  },
  {
    "func": "def multiple_statements_in_line():\n    a = 10; b = 20; c = a + b",
    "target": "Avoid writing multiple statements on the same line for better readability."
  },
  {
    "func": "def unnecessary_comprehension():\n    data = [x for x in range(10)]\n    return data",
    "target": "Avoid unnecessary comprehensions; use `list(range(10))` for clarity."
  },
  {
    "func": "def improper_variable_scope():\n    for i in range(10):\n        j = i\n    return j",
    "target": "Avoid relying on variables defined in a loop outside its scope."
  },
  {
    "func": "def missing_schema_for_database_query():\n    query = f\"SELECT * FROM users WHERE id = {user_id}\"\n    return query",
    "target": "Use database schemas to validate and enforce data constraints."
  },
  {
    "func": "def inefficient_dictionary_lookup():\n    for key in my_dict:\n        if key == 'target':\n            return my_dict[key]",
    "target": "Use `my_dict.get('target')` for efficient dictionary lookups."
  },
  {
    "func": "def mutable_keys_in_dict():\n    data = {{[1, 2]: 'value'}}",
    "target": "Avoid using mutable objects like lists as dictionary keys."
  },
  {
    "func": "def hardcoded_error_messages():\n    if not data:\n        return 'Error: Data is missing'",
    "target": "Use configurable or localized error messages for better flexibility."
  },
  {
    "func": "def incorrect_ternary_operator():\n    return x if x > 0 else x if x < 0 else 0",
    "target": "Simplify chained ternary operators for better readability."
  },
  {
    "func": "def global_mutable_state():\n    global data\n    data.append(1)\n    return data",
    "target": "Avoid modifying global mutable state to prevent side effects."
  },
  {
    "func": "def unnecessary_elif_chain():\n    if x == 1:\n        return 'One'\n    elif x == 2:\n        return 'Two'\n    elif x == 3:\n        return 'Three'\n    else:\n        return 'Other'",
    "target": "Replace long elif chains with a dictionary or match statement."
  },
  {
    "func": "def inefficient_data_conversion():\n    data = list(set(my_list))",
    "target": "Avoid unnecessary conversions between data structures."
  },
  {
    "func": "def lack_of_error_context():\n    try:\n        risky_operation()\n    except Exception:\n        raise ValueError('Operation failed')",
    "target": "Preserve original exception context when re-raising errors."
  },
  {
    "func": "def missing_default_in_dict_get():\n    return my_dict.get('key')",
    "target": "Provide a default value in `dict.get()` to avoid potential errors."
  },
  {
    "func": "def improper_date_format():\n    date = '2024-01-01'\n    return date",
    "target": "Use datetime objects instead of hardcoded date strings."
  },
  {
    "func": "def nested_function_definition():\n    def outer():\n        def inner():\n            return True\n        return inner()\n    return outer()",
    "target": "Avoid defining functions within other functions unless necessary."
  },
  {
    "func": "def long_lambda_expression():\n    func = lambda x: x**2 + 2*x + 1\n    return func(5)",
    "target": "Avoid overly complex lambda expressions; use named functions instead."
  },
  {
    "func": "def poorly_named_constants():\n    VALUE = 10\n    return VALUE",
    "target": "Use descriptive names for constants to improve readability."
  },
  {
    "func": "def missing_output_encoding(data):\n    return f'<div>{data}</div>'",
    "target": "Apply output encoding to prevent cross-site scripting (XSS) attacks."
  },
  {
    "func": "def improper_password_storage(password):\n    hashed = hashlib.md5(password.encode()).hexdigest()\n    return hashed",
    "target": "Avoid using weak hash functions like MD5 for password storage. Use bcrypt or Argon2 with salting."
  },
  {
    "func": "def insecure_file_upload(file):\n    file.save(f'/uploads/{file.filename}')",
    "target": "Validate file extensions and use a secure directory for uploads."
  },
  {
    "func": "def insecure_random_generator():\n    return random.randint(1, 100)",
    "target": "Avoid insecure random generators for sensitive operations. Use `secrets` or `os.urandom`."
  },
  {
    "func": "def weak_session_management():\n    session['user'] = 'admin'",
    "target": "Ensure session data is signed and encrypted to prevent tampering."
  },
  {
    "func": "def sql_injection_vulnerability(user_input):\n    query = f'SELECT * FROM users WHERE name = \"{user_input}\"'\n    return query",
    "target": "Prevent SQL injection by using parameterized queries."
  },
  {
    "func": "def command_injection_vulnerability(cmd):\n    os.system(cmd)",
    "target": "Validate and sanitize command inputs to prevent injection attacks."
  },
  {
    "func": "def csrf_vulnerable_form():\n    return '<form action=\"/submit\" method=\"POST\">...</form>'",
    "target": "Implement CSRF tokens in forms to protect against cross-site request forgery."
  },
  {
    "func": "def insecure_deserialization(data):\n    return pickle.loads(data)",
    "target": "Avoid using `pickle` for deserialization. Use safer alternatives like `json`."
  },
  {
    "func": "def sensitive_data_logging():\n    logging.info(f'Password: {password}')",
    "target": "Do not log sensitive information like passwords or API keys."
  },
  {
    "func": "def missing_authentication():\n    return perform_admin_action()",
    "target": "Implement authentication mechanisms to restrict access to sensitive actions."
  },
  {
    "func": "def missing_authorization(user):\n    return perform_sensitive_action(user)",
    "target": "Add authorization checks to ensure users have the proper permissions."
  },
  {
    "func": "def lack_of_rate_limiting():\n    for _ in range(1000):\n        send_request()",
    "target": "Implement rate limiting to prevent abuse and denial-of-service attacks."
  },
  {
    "func": "def insufficient_privilege_check():\n    perform_admin_action(user)",
    "target": "Verify user privileges before performing sensitive actions."
  },
  {
    "func": "def hardcoded_secret_key():\n    secret_key = 'hardcoded_secret'",
    "target": "Avoid hardcoding secret keys. Use environment variables or secure vaults."
  },
  {
    "func": "def improper_input_validation(user_input):\n    return user_input.lower()",
    "target": "Validate and sanitize all inputs to prevent injection and invalid data issues."
  },
  {
    "func": "def weak_jwt_signature():\n    jwt.encode(payload, 'weaksecret', algorithm='HS256')",
    "target": "Use strong secrets and secure algorithms for signing JWTs."
  },
  {
    "func": "def exposed_stack_trace():\n    try:\n        risky_operation()\n    except Exception as e:\n        return str(e)",
    "target": "Avoid exposing stack traces in error responses to prevent information leakage."
  },
  {
    "func": "def insecure_cors_policy():\n    response.headers['Access-Control-Allow-Origin'] = '*'",
    "target": "Restrict allowed origins in CORS policies to trusted domains."
  },
  {
    "func": "def missing_hsts_header():\n    return render_template('index.html')",
    "target": "Add HSTS headers to enforce secure communication over HTTPS."
  },
  {
    "func": "def weak_password_policy(password):\n    return len(password) > 6",
    "target": "Enforce strong password policies including minimum length, special characters, and case sensitivity."
  },
  {
    "func": "def hardcoded_api_key():\n    api_key = '12345-abcdef-67890'\n    return api_key",
    "target": "Avoid hardcoding API keys. Use secure storage or environment variables."
  },
  {
    "func": "def open_redirect_vulnerability(url):\n    return redirect(url)",
    "target": "Validate and sanitize user-provided URLs to prevent open redirects."
  },
  {
    "func": "def directory_traversal_vulnerability(file_path):\n    with open(file_path, 'r') as file:\n        return file.read()",
    "target": "Validate file paths to prevent directory traversal attacks."
  },
  {
    "func": "def insufficient_logging():\n    try:\n        risky_operation()\n    except:\n        pass",
    "target": "Log critical events and exceptions for effective monitoring and debugging."
  },
  {
    "func": "def missing_ssl_verification(url):\n    response = requests.get(url, verify=False)\n    return response",
    "target": "Always verify SSL certificates to ensure secure communication."
  },
  {
    "func": "def missing_encryption(data):\n    return data",
    "target": "Encrypt sensitive data at rest to protect it from unauthorized access."
  },
  {
    "func": "def vulnerable_jwt_decoding(jwt_token):\n    payload = jwt.decode(jwt_token, options={'verify_signature': False})\n    return payload",
    "target": "Always verify JWT signatures to ensure token authenticity."
  },
  {
    "func": "def weak_captcha():\n    return 'What is 2+2?'",
    "target": "Use robust CAPTCHA mechanisms to prevent automated attacks."
  },
  {
    "func": "def missing_input_size_validation(data):\n    return data['input']",
    "target": "Validate input size to prevent resource exhaustion attacks."
  },
  {
    "func": "def improper_resource_management():\n    file = open('data.txt', 'r')\n    data = file.read()\n    return data",
    "target": "Always close resources or use context managers to avoid resource leaks."
  },
  {
    "func": "def missing_error_handling():\n    data = open('file.txt').read()\n    return data",
    "target": "Add error handling for operations prone to failure."
  },
  {
    "func": "def excessive_try_except_blocks():\n    try:\n        a = 1 / 0\n    except ZeroDivisionError:\n        return 'Error'\n    try:\n        b = [1][2]\n    except IndexError:\n        return 'Error'",
    "target": "Consolidate related try-except blocks for better readability."
  },
  {
    "func": "def unsafe_user_input(user_input):\n    return eval(user_input)",
    "target": "Avoid using `eval`. Use safer alternatives for user input evaluation."
  },
  {
    "func": "def weak_password_check(password):\n    return len(password) > 5",
    "target": "Implement strong password policies including special characters and numbers."
  },
  {
    "func": "def missing_return_value():\n    if condition:\n        return True",
    "target": "Ensure all branches return a value to maintain function consistency."
  },
  {
    "func": "def inefficient_looping(data):\n    for i in range(len(data)):\n        print(data[i])",
    "target": "Use direct iteration over data instead of indexing."
  },
  {
    "func": "def insecure_subprocess_call(command):\n    subprocess.run(command, shell=True)",
    "target": "Avoid using `shell=True` in subprocess calls to prevent command injection."
  },
  {
    "func": "def improper_error_propagation():\n    try:\n        risky_operation()\n    except ValueError:\n        return 'An error occurred'",
    "target": "Re-raise or log exceptions to avoid suppressing important error details."
  },
  {
    "func": "def missing_data_validation(data):\n    process(data['input'])",
    "target": "Validate input data to ensure it meets expected formats and constraints."
  },
  {
    "func": "def lack_of_security_headers():\n    response = make_response('OK')\n    return response",
    "target": "Add security headers like `Content-Security-Policy` and `Strict-Transport-Security`."
  },
  {
    "func": "def excessive_parameters(a, b, c, d, e, f):\n    return a + b + c + d + e + f",
    "target": "Limit the number of parameters. Use objects or dictionaries for complex data."
  },
  {
    "func": "def redundant_code_path():\n    if x > 0:\n        return 'Positive'\n    if x > 0:\n        return 'Also Positive'",
    "target": "Remove redundant code paths to avoid confusion and improve maintainability."
  },
  {
    "func": "def empty_except_block():\n    try:\n        risky_operation()\n    except:\n        pass",
    "target": "Avoid empty except blocks. Log or handle the exception appropriately."
  },
  {
    "func": "def insecure_temp_file():\n    with open('/tmp/tempfile', 'w') as file:\n        file.write(data)",
    "target": "Use secure methods like `tempfile` for handling temporary files."
  },
  {
    "func": "def unused_import():\n    import math\n    return 42",
    "target": "Remove unused imports to clean up the codebase."
  },
  {
    "func": "def nested_ternary_operator(a, b):\n    return a if b else a if not b else b",
    "target": "Avoid nested ternary operators for better code readability."
  },
  {
    "func": "def hardcoded_port():\n    return connect_to_server('localhost', 8080)",
    "target": "Avoid hardcoding ports. Use configuration files or environment variables."
  },
  {
    "func": "def insecure_redirect(url):\n    return redirect(url)",
    "target": "Validate URLs to prevent open redirect vulnerabilities."
  },
  {
    "func": "def lack_of_type_checking(x):\n    return x + 1",
    "target": "Use type annotations and type checking to avoid runtime errors."
  },
  {
    "func": "def hardcoded_config():\n    db_config = {'host': 'localhost', 'port': 3306}",
    "target": "Avoid hardcoding configurations. Use environment variables or config files."
  },
  {
    "func": "def ambiguous_variable_names():\n    x = 10\n    y = 20\n    return x + y",
    "target": "Use descriptive variable names for better readability."
  },
  {
    "func": "def resource_not_closed():\n    file = open('data.txt', 'r')\n    return file.read()",
    "target": "Ensure resources like files or sockets are properly closed after use."
  },
  {
    "func": "def mutable_default_arg(data=[]):\n    data.append(1)\n    return data",
    "target": "Avoid mutable default arguments to prevent unexpected behavior."
  },
  {
    "func": "def insecure_data_storage(password):\n    stored_password = password",
    "target": "Encrypt sensitive data before storing it to protect against unauthorized access."
  },
  {
    "func": "def lack_of_logging_context():\n    logger.info('Task completed')",
    "target": "Include context such as user ID or task details in log messages."
  },
  {
    "func": "def missing_null_check(data):\n    return data['key']",
    "target": "Check for `None` or null values before accessing data."
  },
  {
    "func": "def weak_access_control():\n    if user.is_admin:\n        return 'Access granted'\n    return 'Access denied'",
    "target": "Implement role-based access control with detailed permission checks."
  },
  {
    "func": "def sql_query_string_concatenation(user_id):\n    query = 'SELECT * FROM users WHERE id = ' + str(user_id)\n    return query",
    "target": "Avoid string concatenation for SQL queries. Use prepared statements."
  },
  {
    "func": "def unescaped_html(data):\n    return f'<div>{data}</div>'",
    "target": "Escape HTML in user inputs to prevent XSS attacks."
  },
  {
    "func": "def duplicate_logic():\n    if x > 10:\n        return 'High'\n    if x > 10:\n        return 'High'",
    "target": "Avoid duplicating logic. Consolidate repeated conditions or code blocks."
  },
  {
    "func": "def unused_private_function():\n    def _helper():\n        pass\n    return 42",
    "target": "Remove unused private functions to reduce clutter."
  },
  {
    "func": "def hardcoded_ip_address():\n    ip = '192.168.1.1'\n    return ip",
    "target": "Avoid hardcoding IP addresses. Use configuration files or environment variables."
  },
  {
    "func": "def deeply_nested_try_except():\n    try:\n        try:\n            try:\n                try:\n                    try:\n                        risky_operation()\n                    except TypeError:\n                        handle_error()\n                except ValueError:\n                    handle_error()\n            except IOError:\n                handle_error()\n        except Exception:\n            handle_error()\n    except:\n        pass",
    "target": "Avoid deep nesting in try-except blocks (5 levels detected). Use separate functions for error handling."
  },
  {
    "func": "def complex_boolean_logic(a, b, c):\n    return (a and b) or (not a and not b and c)",
    "target": "Simplify complex boolean expressions for better readability."
  },
  {
    "func": "def avoid_sys_exit():\n    import sys\n    sys.exit(0)",
    "target": "Avoid using `sys.exit()` in libraries or modules."
  },
  {
    "func": "def magic_number_usage():\n    if value == 42:\n        return 'Answer'",
    "target": "Replace magic numbers with named constants."
  },
  {
    "func": "def unused_variable():\n    x = 10\n    return 20",
    "target": "Remove unused variables to improve code clarity."
  },
  {
    "func": "def avoid_hardcoded_values():\n    timeout = 5000\n    return timeout",
    "target": "Avoid hardcoding values. Use configuration parameters instead."
  },
  {
    "func": "def missing_default_case(value):\n    match value:\n        case 1:\n            return 'One'\n        case 2:\n            return 'Two'",
    "target": "Add a default case in match or switch statements to handle unexpected values."
  },
  {
    "func": "def missing_test_for_edge_case():\n    def divide(a, b):\n        return a / b",
    "target": "Ensure edge cases (e.g., division by zero) are tested."
  },
  {
    "func": "def potential_out_of_bounds(data):\n    return data[10]",
    "target": "Check bounds before accessing array or list elements."
  },
  {
    "func": "def inefficient_string_operations():\n    result = ''\n    for s in strings:\n        result += s",
    "target": "Use efficient methods like `''.join()` for string concatenation in loops."
  },
  {
    "func": "def avoid_large_method():\n    def long_method():\n        # Over 200 lines of code\n        pass",
    "target": "Break large methods into smaller, modular functions."
  },
  {
    "func": "def unused_return_value():\n    result = process_data()\n    return 42",
    "target": "Avoid ignoring or overwriting return values from function calls."
  },
  {
    "func": "def missing_null_check():\n    def process(data):\n        return data.value",
    "target": "Add null or None checks before accessing attributes."
  },
  {
    "func": "def unused_imports():\n    import math\n    return 42",
    "target": "Remove unused imports to reduce code clutter."
  },
  {
    "func": "def unsafe_iterator_modification():\n    for item in my_list:\n        my_list.remove(item)",
    "target": "Avoid modifying a collection while iterating over it."
  },
  {
    "func": "def redundant_parentheses():\n    return (x + y)",
    "target": "Remove redundant parentheses for cleaner code."
  },
  {
    "func": "def avoid_deprecated_function():\n    return cgi.escape('<html>')",
    "target": "Avoid using deprecated functions. Use their modern replacements."
  },
  {
    "func": "def inconsistent_naming():\n    def calculateSum():\n        return 42",
    "target": "Use consistent naming conventions like snake_case for function names."
  },
  {
    "func": "def avoid_redundant_else():\n    if condition:\n        return True\n    else:\n        return False",
    "target": "Avoid redundant `else` blocks after return statements."
  },
  {
    "func": "def insecure_temp_file_handling():\n    file = open('/tmp/tempfile', 'w')",
    "target": "Use secure libraries like `tempfile` for handling temporary files."
  },
  {
    "func": "def avoid_duplicate_import():\n    import os\n    import os",
    "target": "Remove duplicate imports to improve maintainability."
  },
  {
    "func": "def use_of_excessive_comments():\n    # This line adds two numbers\n    return a + b",
    "target": "Avoid excessive comments. Ensure code is self-explanatory."
  },
  {
    "func": "def improper_exception_rethrow():\n    try:\n        risky_operation()\n    except Exception:\n        raise",
    "target": "Preserve the original exception context when rethrowing."
  },
  {
    "func": "def avoid_global_variables():\n    global counter\n    counter += 1",
    "target": "Avoid using global variables. Use function parameters or class attributes instead."
  },
  {
    "func": "def unnecessary_conversion():\n    value = int(str(42))\n    return value",
    "target": "Avoid unnecessary data type conversions for better performance."
  },
  {
    "func": "def missing_finally_block():\n    try:\n        risky_operation()\n    except Exception:\n        log_error()",
    "target": "Use a `finally` block to ensure cleanup logic is always executed."
  },
  {
    "func": "def avoid_overly_generic_exceptions():\n    try:\n        risky_operation()\n    except Exception:\n        log_error()",
    "target": "Catch specific exceptions instead of the generic `Exception`."
  },
  {
    "func": "def unused_private_variable():\n    _temp = 42\n    return True",
    "target": "Remove unused private variables to reduce code clutter."
  },
  {
    "func": "def redundant_boolean_check():\n    if x == True:\n        return True",
    "target": "Avoid redundant boolean comparisons. Use `if x:` instead."
  },
  {
    "func": "def long_chained_calls():\n    return obj.method1().method2().method3().method4()",
    "target": "Avoid long chains of method calls. Break into intermediate variables for clarity."
  },
  {
    "func": "def overly_generic_parameter(data):\n    return data.process()",
    "target": "Avoid overly generic parameters. Use specific types or interfaces."
  },
  {
    "func": "def missing_close_in_file_handling():\n    file = open('data.txt', 'r')\n    data = file.read()\n    return data",
    "target": "Ensure files are closed properly. Use context managers for safety."
  },
  {
    "func": "def inconsistent_indentation():\n    if True:\n      print('Inconsistent')",
    "target": "Use consistent indentation to improve readability."
  },
  {
    "func": "def avoid_large_return_tuples():\n    return (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)",
    "target": "Avoid large tuples. Use named tuples or classes for better readability."
  },
  {
    "func": "def overly_complex_function():\n    def process_data(a, b, c, d, e, f):\n        return a + b + c + d + e + f",
    "target": "Reduce function complexity by splitting into smaller functions."
  },
  {
    "func": "def duplicate_code_in_branches():\n    if condition:\n        x = 10\n    else:\n        x = 10\n    return x",
    "target": "Refactor duplicated code in branches into a single statement."
  },
  {
    "func": "def inefficient_data_structure_for_lookup():\n    data = [1, 2, 3, 4]\n    if 3 in data:\n        return True",
    "target": "Use sets for faster lookups instead of lists."
  },
  {
    "func": "def ambiguous_exception_message():\n    raise ValueError('Something went wrong')",
    "target": "Provide clear and meaningful exception messages."
  },
  {
    "func": "def unused_loop_variable():\n    for i in range(10):\n        pass",
    "target": "Use `_` for loop variables that are intentionally unused."
  },
  {
    "func": "def excessive_class_attributes():\n    class User:\n        attr1 = None\n        attr2 = None\n        attr3 = None\n        attr4 = None",
    "target": "Avoid excessive class attributes. Group related attributes into smaller classes."
  },
  {
    "func": "def inconsistent_spacing():\n    a=10\n    b = 20\n    return a+b",
    "target": "Use consistent spacing around operators for better readability."
  },
  {
    "func": "def inefficient_sorting_algorithm(data):\n    for i in range(len(data)):\n        for j in range(i + 1, len(data)):\n            if data[i] > data[j]:\n                data[i], data[j] = data[j], data[i]",
    "target": "Use built-in sorting methods like `sorted()` or `list.sort()` for efficiency."
  },
  {
    "func": "def nested_loops_with_high_complexity():\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                print(i, j, k)",
    "target": "Refactor deeply nested loops into separate functions or reduce nesting."
  },
  {
    "func": "def hardcoded_error_message():\n    if not data:\n        raise ValueError('Error')",
    "target": "Use configurable or parameterized error messages for flexibility."
  },
  {
    "func": "def function_too_many_lines():\n    def long_function():\n        # Over 100 lines of code\n        pass",
    "target": "Refactor long functions into smaller, more manageable functions."
  },
  {
    "func": "def mutable_class_variable():\n    class MyClass:\n        items = []",
    "target": "Avoid mutable default attributes in classes to prevent unexpected behavior."
  },
  {
    "func": "def ambiguous_condition():\n    if a == b:\n        return 'Equal'\n    elif a == 10:\n        return 'Ten'\n    elif a == b:\n        return 'Still Equal'",
    "target": "Avoid overlapping or ambiguous conditions in conditional statements."
  },
  {
    "func": "def implicit_fallback_behavior(data):\n    return data.get('key')",
    "target": "Provide explicit fallback values for dictionary lookups."
  },
  {
    "func": "def unused_function_argument(a, b):\n    return a",
    "target": "Remove unused function arguments to avoid confusion."
  },
  {
    "func": "def mixed_loop_styles():\n    for i in range(10):\n        print(i)\n    j = 0\n    while j < 10:\n        print(j)\n        j += 1",
    "target": "Use consistent looping styles for better readability."
  },
  {
    "func": "def excessive_inline_comments():\n    x = 10  # This is a number\n    y = 20  # Another number\n    return x + y",
    "target": "Avoid excessive inline comments. Ensure comments add meaningful context."
  },
  {
    "func": "def excessive_repetition_in_code():\n    print('Processing Step 1')\n    print('Processing Step 2')\n    print('Processing Step 3')",
    "target": "Refactor repeated code into reusable functions or loops."
  },
  {
    "func": "def missing_enumerate_in_loops():\n    for i in range(len(data)):\n        print(i, data[i])",
    "target": "Use `enumerate()` for better readability when looping with indices."
  },
  {
    "func": "def inefficient_use_of_comprehension():\n    data = [x for x in range(10)]\n    return data",
    "target": "Avoid unnecessary comprehensions. Use `list(range(10))` for clarity."
  },
  {
    "func": "def improper_function_placement():\n    def helper_function():\n        pass\n\n    def main_function():\n        helper_function()",
    "target": "Order functions logically with main functions at the top or bottom."
  },
  {
    "func": "def overuse_of_static_methods():\n    @staticmethod\n    def process():\n        return True",
    "target": "Limit the use of static methods. Use instance methods for better design."
  },
  {
    "func": "def inconsistent_variable_naming():\n    x = 10\n    y = 20\n    return x + y",
    "target": "Use consistent variable naming conventions for better code readability."
  },
  {
    "func": "def excessive_function_parameters():\n    def process(a, b, c, d, e, f):\n        return a + b + c + d + e + f",
    "target": "Limit the number of function parameters. Use objects or dictionaries for complex data."
  },
  {
    "func": "def unnecessary_list_comprehension():\n    data = [x for x in range(10)]\n    return data",
    "target": "Avoid unnecessary list comprehensions. Use `list(range(10))` for clarity."
  },
  {
    "func": "def inconsistent_function_naming():\n    def calculateSum():\n        return 42",
    "target": "Use consistent function naming conventions like snake_case."
  },
  {
    "func": "def excessive_function_length():\n    def long_function():\n        # Over 100 lines of code\n        pass",
    "target": "Refactor long functions into smaller, more manageable functions."
  },
  {
    "func": "def inconsistent_spacing_around_operators():\n    a=10\n    b = 20\n    return a+b",
    "target": "Use consistent spacing around operators for better code readability."
  },
  {
    "func": "def improper_use_of_try_finally():\n    try:\n        risky_operation()\n    finally:\n        cleanup()",
    "target": "Ensure exceptions are caught and logged in `try-finally` blocks."
  },
  {
    "func": "def overcomplicated_default_values(data=None):\n    if data is None:\n        data = []\n    return data",
    "target": "Use default immutable arguments directly, like `data=None`."
  },
  {
    "func": "def ambiguous_code_with_nested_loops():\n    for i in range(10):\n        for j in range(10):\n            if i * j > 10:\n                return i",
    "target": "Avoid ambiguous nested loops by refactoring into functions with descriptive names."
  },
  {
    "func": "def unrelated_function_logic():\n    def send_email():\n        return calculate_sum(1, 2)",
    "target": "Keep function logic focused on a single responsibility."
  },
  {
    "func": "def silent_ignore_of_os_errors():\n    try:\n        os.remove('file.txt')\n    except OSError:\n        pass",
    "target": "Log OS errors even if they are ignored to trace potential issues."
  },
  {
    "func": "def inefficient_use_of_memory():\n    data = [x**2 for x in range(10**6)]\n    return sum(data)",
    "target": "Use generator expressions to avoid excessive memory usage."
  },
  {
    "func": "def unnecessary_early_return():\n    if condition:\n        return True\n    return False",
    "target": "Combine early returns to simplify code."
  },
  {
    "func": "def improper_function_chaining():\n    return method1().method2().method3()",
    "target": "Break function chains into intermediate steps for clarity."
  },
  {
    "func": "def large_unstructured_code_block():\n    # 100 lines of unstructured code\n    return True",
    "target": "Break large, unstructured code blocks into smaller functions."
  },
  {
    "func": "def improper_use_of_constants_in_code():\n    GRAVITY = 9.8\n    return 9.8 * mass",
    "target": "Use constants consistently across the codebase to avoid magic numbers."
  },
  {
    "func": "def ambiguous_type_handling(data):\n    if isinstance(data, int):\n        return data * 2\n    return str(data)",
    "target": "Avoid ambiguous type handling. Enforce strict type checks."
  },
  {
    "func": "def overuse_of_helper_functions():\n    def helper1():\n        pass\n    def helper2():\n        pass",
    "target": "Avoid excessive helper functions. Group related logic into meaningful units."
  },
  {
    "func": "def misused_inheritance():\n    class A:\n        pass\n    class B(A):\n        pass",
    "target": "Avoid inheritance when composition can achieve better flexibility."
  },
  {
    "func": "def unused_parameters_in_functions(a, b):\n    return a",
    "target": "Remove unused parameters to make function definitions clearer."
  },
  {
    "func": "def repeated_hardcoded_logic():\n    if user.role == 'admin':\n        return 'Admin Access'\n    if user.role == 'admin':\n        return 'Admin Access'",
    "target": "Refactor repeated logic into reusable functions."
  },
  {
    "func": "def missing_boundary_checks(x):\n    return array[x]",
    "target": "Add boundary checks for array and list access to prevent IndexErrors."
  },
  {
    "func": "def hidden_dependency_in_code():\n    return external_service.get_data()",
    "target": "Avoid hidden dependencies. Pass dependencies explicitly."
  },
  {
    "func": "def excessive_lambda_usage():\n    result = lambda x: x + 1\n    return result(5)",
    "target": "Avoid excessive use of lambda functions. Use named functions for clarity."
  },
  {
    "func": "def non_standard_iteration():\n    for index in range(0, len(data)):\n        item = data[index]\n        process(item)",
    "target": "Use direct iteration over lists for better readability."
  },
  {
    "func": "def misconfigured_logging():\n    logging.debug('Important message')",
    "target": "Use appropriate logging levels based on the importance of the message."
  },
  {
    "func": "def unsafe_dictionary_update():\n    data.update({'key': 'value'})",
    "target": "Validate inputs before updating dictionaries to prevent overwriting critical keys."
  },
  {
    "func": "def hardcoded_debug_mode():\n    DEBUG = True\n    if DEBUG:\n        print('Debugging enabled')",
    "target": "Avoid hardcoding debug modes. Use configuration management instead."
  },
  {
    "func": "def improper_resource_synchronization():\n    shared_resource += 1",
    "target": "Use synchronization primitives like locks to prevent race conditions."
  },
  {
    "func": "def inconsistent_return_style():\n    if x:\n        return True\n    return",
    "target": "Ensure consistent return styles across all code paths."
  },
  {
    "func": "def poorly_named_temp_variable():\n    tmp = 42\n    return tmp",
    "target": "Use meaningful variable names instead of temporary placeholders."
  },
  {
    "func": "def insufficient_security_in_headers():\n    response.headers['X-Powered-By'] = 'Flask'",
    "target": "Remove sensitive information from headers to avoid exposing technology stack."
  },
  {
    "func": "def redundant_code_block():\n    if condition:\n        return True\n    else:\n        return False",
    "target": "Simplify redundant `if-else` structures for cleaner code."
  },
  {
    "func": "def misleading_variable_scope():\n    for i in range(10):\n        j = i\n    return j",
    "target": "Avoid using variables defined in a loop outside their intended scope."
  },
  {
    "func": "def insufficient_event_logging():\n    if error:\n        handle_error()",
    "target": "Log critical events like errors or unexpected behavior for monitoring."
  },
  {
    "func": "def overuse_of_exception_catching():\n    try:\n        risky_operation()\n    except Exception as e:\n        return 'Error occurred'",
    "target": "Avoid catching generic exceptions unnecessarily. Catch specific exceptions."
  },
  {
    "func": "def repeated_literal_in_code():\n    if status == 200:\n        return 'OK'\n    elif status == 404:\n        return 'Not Found'",
    "target": "Replace repeated literals with named constants for clarity and maintainability."
  },
  {
    "func": "def inefficient_exception_handling():\n    try:\n        data = risky_function()\n    except Exception:\n        return None",
    "target": "Handle specific exceptions instead of catching all exceptions."
  },
  {
    "func": "def unnecessary_complexity_in_loops():\n    for i in range(len(data)):\n        for j in range(i, len(data)):\n            process(data[i], data[j])",
    "target": "Avoid nested loops where performance can be improved with optimized algorithms."
  },
  {
    "func": "def redundant_return_statement():\n    if x > 0:\n        return True\n    else:\n        return False",
    "target": "Simplify redundant return statements by directly returning the condition."
  },
  {
    "func": "def unsafe_string_formatting(user_input):\n    return 'Hello, {}'.format(user_input)",
    "target": "Sanitize user input in string formatting to avoid injection vulnerabilities."
  },
  {
    "func": "def inconsistent_variable_casing():\n    userName = 'John'\n    user_email = 'john@example.com'",
    "target": "Follow consistent naming conventions like snake_case for variables."
  },
  {
    "func": "def repeated_code_block():\n    if condition1:\n        do_something()\n    if condition2:\n        do_something()",
    "target": "Refactor repeated code blocks into reusable functions."
  },
  {
    "func": "def missing_logging_context():\n    logger.info('Task completed')",
    "target": "Add context (e.g., task ID or user ID) to log messages for debugging."
  },
  {
    "func": "def improper_variable_initialization():\n    value = None\n    if condition:\n        value = 10\n    return value",
    "target": "Avoid partial initialization of variables. Provide default values where possible."
  },
  {
    "func": "def missing_test_case_for_edge_condition():\n    def divide(a, b):\n        return a / b",
    "target": "Ensure edge conditions (e.g., division by zero) are tested."
  },
  {
    "func": "def unused_class():\n    class Helper:\n        pass",
    "target": "Remove unused classes to reduce code clutter."
  },
  {
    "func": "def overuse_of_boolean_flags():\n    def calculate(is_active):\n        if is_active:\n            return process_active()\n        return process_inactive()",
    "target": "Avoid excessive use of boolean flags. Use meaningful parameter names or enums."
  },
  {
    "func": "def ambiguous_function_name():\n    def handle_data():\n        return True",
    "target": "Use descriptive function names to clearly define their purpose."
  },
  {
    "func": "def hardcoded_file_extension():\n    file_name = 'report.txt'\n    return file_name",
    "target": "Avoid hardcoding file extensions. Use configuration files or constants."
  },
  {
    "func": "def inefficient_string_search():\n    if string.find('keyword') != -1:\n        return True",
    "target": "Use `in` instead of `find()` for string searches for better readability."
  },
  {
    "func": "def poorly_named_function():\n    def func1():\n        return True",
    "target": "Use descriptive function names that convey the action or purpose."
  },
  {
    "func": "def missing_type_annotations():\n    def add(a, b):\n        return a + b",
    "target": "Add type annotations to function arguments and return values for clarity."
  },
  {
    "func": "def inefficient_use_of_collections():\n    data = []\n    for x in range(10):\n        data.append(x)",
    "target": "Use list comprehensions for concise and efficient code."
  },
  {
    "func": "def unsafe_file_permission():\n    os.chmod('file.txt', 0o777)",
    "target": "Avoid overly permissive file permissions. Use the principle of least privilege."
  },
  {
    "func": "def unused_loop_variable():\n    for i in range(10):\n        pass",
    "target": "Use `_` for loop variables that are intentionally unused."
  },
  {
    "func": "def unnecessary_list_conversion():\n    data = list([1, 2, 3])",
    "target": "Avoid unnecessary conversions to improve performance and readability."
  },
  {
    "func": "def insecure_data_storage():\n    stored_password = password",
    "target": "Encrypt sensitive data before storing it to protect against unauthorized access."
  },
  {
    "func": "def redundant_condition_check():\n    if x > 10 and x > 5:\n        return True",
    "target": "Simplify conditions by removing redundant checks."
  },
  {
    "func": "def misaligned_function_comments():\n    # This function adds two numbers\n    def add(a, b):\n        return a + b",
    "target": "Align comments with the function they describe for better readability."
  },
  {
    "func": "def unnecessary_mutable_argument(data=[]):\n    data.append(1)\n    return data",
    "target": "Avoid mutable default arguments to prevent unexpected behavior."
  },
  {
    "func": "def hardcoded_error_code():\n    return {'status': 500, 'message': 'Internal Error'}",
    "target": "Replace hardcoded error codes with enumerations or constants."
  },
  {
    "func": "def ambiguous_return_value():\n    if condition:\n        return 'Success'\n    return 1",
    "target": "Use consistent return types to avoid confusion."
  },
  {
    "func": "def unused_catch_variable():\n    try:\n        risky_function()\n    except Exception as e:\n        pass",
    "target": "Use or remove unused exception variables for clarity."
  },
  {
    "func": "def excessive_class_responsibility():\n    class User:\n        def login(self): pass\n        def logout(self): pass\n        def reset_password(self): pass\n        def update_profile(self): pass",
    "target": "Follow the Single Responsibility Principle. Break large classes into smaller, focused ones."
  },
  {
    "func": "def long_chain_of_ifs():\n    if condition1:\n        return 'A'\n    elif condition2:\n        return 'B'\n    elif condition3:\n        return 'C'",
    "target": "Replace long `if-elif` chains with a mapping or dictionary."
  },
  {
    "func": "def missing_parentheses():\n    print 'Hello World'",
    "target": "Add parentheses to function calls to adhere to modern Python syntax."
  },
  {
    "func": "def inefficient_loop():\n    for i in range(len(my_list)):\n        print(my_list[i])",
    "target": "Use `for item in my_list` instead of indexing for cleaner and faster iteration."
  },
  {
    "func": "def nested_try_blocks():\n    try:\n        try:\n            risky_function()\n        except ValueError:\n            handle_value_error()\n    except Exception:\n        handle_general_error()",
    "target": "Avoid nested try blocks. Combine or refactor them for clarity."
  },
  {
    "func": "def missing_finally():\n    try:\n        file = open('data.txt', 'r')\n        data = file.read()\n    except Exception:\n        print('Error reading file')",
    "target": "Use a `finally` block to ensure resources like files are always closed."
  },
  {
    "func": "def hardcoded_colors():\n    color = '#FF5733'\n    return color",
    "target": "Avoid hardcoding colors. Use a configuration file or constants."
  },
  {
    "func": "def inefficient_key_check(dictionary, key):\n    if key in dictionary.keys():\n        return dictionary[key]",
    "target": "Use `if key in dictionary:` to check for keys more efficiently."
  },
  {
    "func": "def unnecessary_lambda():\n    func = lambda x: x * 2\n    return func(5)",
    "target": "Avoid unnecessary lambdas. Use a regular function instead."
  },
  {
    "func": "def inconsistent_indentation():\n    if x > 5:\n        print('x is large')\n       print('Check this line')",
    "target": "Fix inconsistent indentation to adhere to style guidelines."
  },
  {
    "func": "def global_state_dependency():\n    global x\n    x += 1\n    return x",
    "target": "Avoid using global variables to prevent unintended side effects."
  },
  {
    "func": "def unreachable_code_with_loops():\n    while True:\n        break\n        print('Unreachable')",
    "target": "Remove unreachable code to improve maintainability."
  },
  {
    "func": "def inefficient_data_structure():\n    my_dict = {}\n    my_dict['key1'] = 'value1'\n    return my_dict",
    "target": "Use dictionary literals `{}` for better readability and performance."
  },
  {
    "func": "def redundant_comparison():\n    if x != None:\n        return True",
    "target": "Use `if x is not None` instead of `x != None` for better clarity."
  },
  {
    "func": "def inefficient_split_join():\n    words = sentence.split(' ')\n    new_sentence = ' '.join(words)\n    return new_sentence",
    "target": "Avoid unnecessary `split` and `join`. Use the string as-is if unchanged."
  },
  {
    "func": "def exception_swallowing():\n    try:\n        risky_function()\n    except:\n        pass",
    "target": "Avoid swallowing exceptions. Log or handle them appropriately."
  },
  {
    "func": "def unused_default_parameters(a, b=10):\n    return a",
    "target": "Remove unused default parameters for clarity."
  },
  {
    "func": "def infinite_recursion():\n    def recurse():\n        return recurse()\n    return recurse()",
    "target": "Avoid infinite recursion. Add a base case to terminate the recursion."
  },
  {
    "func": "def hardcoded_urls():\n    url = 'http://example.com'\n    return url",
    "target": "Avoid hardcoding URLs. Use configuration or environment variables."
  },
  {
    "func": "def over_engineered_solution():\n    def add(a, b):\n        result = a + b\n        return result\n    return add(2, 3)",
    "target": "Avoid over-engineering. Simplify functions where possible."
  },
  {
    "func": "def mutable_default_argument(data=[]):\n    data.append(5)\n    return data",
    "target": "Avoid mutable default arguments to prevent unexpected behavior."
  },
  {
    "func": "def excessive_comments():\n    # This is a comment\n    # Another comment\n    # Yet another comment\n    result = 42  # Final comment\n    return result",
    "target": "Avoid excessive comments. Use clear code and concise documentation."
  },
  {
    "func": "def missing_context_manager():\n    file = open('data.txt', 'w')\n    file.write('Hello World')\n    file.close()",
    "target": "Use a context manager (`with open(...)`) to ensure proper resource handling."
  },
  {
    "func": "def inconsistent_variable_case():\n    userName = 'Alice'\n    UserName = 'Bob'\n    return userName",
    "target": "Follow consistent naming conventions for variables."
  },
  {
    "func": "def unnecessary_check():\n    if len(my_list) > 0:\n        print(my_list[0])",
    "target": "Avoid unnecessary checks. Use `if my_list:` instead of `if len(my_list) > 0`."
  },
  {
    "func": "def insecure_random():\n    import random\n    return random.randint(1, 10)",
    "target": "Use `secrets` module for secure random number generation in sensitive contexts."
  },
  {
    "func": "def unused_function():\n    def helper():\n        return 42\n    return 0",
    "target": "Remove unused functions to reduce clutter."
  },
  {
    "func": "def long_inline_expression():\n    result = (a + b) * c / (d - e) + (f * g) / h\n    return result",
    "target": "Break down long expressions into multiple lines for better readability."
  },
  {
    "func": "def magic_string_comparison():\n    if status == 'active':\n        return True",
    "target": "Avoid magic strings. Use named constants for better clarity."
  },
  {
    "func": "def redundant_pass():\n    def function():\n        pass",
    "target": "Avoid redundant `pass` in empty functions or blocks."
  },
  {
    "func": "def duplicate_code_segments():\n    def add(a, b):\n        return a + b\n    def sum(a, b):\n        return a + b",
    "target": "Refactor duplicate code segments into a single function."
  },
  {
    "func": "def large_classes():\n    class MyClass:\n        def method1(self): pass\n        def method2(self): pass\n        # 100 more methods\n    return MyClass",
    "target": "Break down large classes into smaller, more focused classes."
  },
  {
    "func": "def insecure_password_storage(password):\n    stored_password = password\n    return stored_password",
    "target": "Avoid storing passwords in plaintext. Use a secure hashing algorithm like bcrypt."
  },
  {
    "func": "def unnecessary_complexity(x):\n    if x % 2 == 0:\n        if x > 10:\n            return 'Even and greater than 10'\n    else:\n        return 'Other'",
    "target": "Simplify nested conditions for better readability and maintainability."
  },
  {
    "func": "def unused_class_variable():\n    class MyClass:\n        unused_var = 42\n        def method(self):\n            return 0",
    "target": "Remove unused class variables to reduce confusion and improve clarity."
  },
  {
    "func": "def hardcoded_http_url():\n    url = 'http://example.com'\n    return url",
    "target": "Use HTTPS instead of HTTP for secure communication."
  },
  {
    "func": "def missing_docstring():\n    def add(a, b):\n        return a + b",
    "target": "Add a docstring to describe the function’s purpose and behavior."
  },
  {
    "func": "def inconsistent_spacing():\n    a=10\n    b = 20\n    c= 30",
    "target": "Use consistent spacing around operators for better readability."
  },
  {
    "func": "def hardcoded_path():\n    path = '/usr/local/data.txt'\n    return path",
    "target": "Avoid hardcoding file paths. Use configuration files or environment variables."
  },
  {
    "func": "def unchecked_input(data):\n    return data.strip()",
    "target": "Validate and sanitize user inputs to prevent potential injection attacks."
  },
  {
    "func": "def inefficient_string_concat():\n    result = ''\n    for word in words:\n        result += word",
    "target": "Use `str.join` for efficient string concatenation in loops."
  },
  {
    "func": "def insecure_temp_file():\n    import tempfile\n    temp = tempfile.NamedTemporaryFile(delete=False)\n    return temp.name",
    "target": "Avoid creating insecure temporary files. Use `delete=True` or secure configurations."
  },
  {
    "func": "def missing_type_hints(a, b):\n    return a + b",
    "target": "Add type hints to improve code clarity and enable static analysis."
  },
  {
    "func": "def redundant_if_else(flag):\n    if flag:\n        return True\n    else:\n        return False",
    "target": "Simplify to `return flag` for better readability."
  },
  {
    "func": "def overcomplicated_expression(a, b, c):\n    return (a + b) - c if (a + b) > c else c - (a + b)",
    "target": "Refactor overcomplicated expressions for clarity."
  },
  {
    "func": "def insecure_command_execution(cmd):\n    import os\n    os.system(cmd)",
    "target": "Avoid using `os.system` for command execution. Use `subprocess` with proper sanitization."
  },
  {
    "func": "def missing_input_validation(age):\n    if age > 18:\n        return 'Adult'",
    "target": "Validate input types and ranges to ensure robustness."
  },
  {
    "func": "def inefficient_set_check(item):\n    if item in [1, 2, 3, 4, 5]:\n        return True",
    "target": "Use a set for faster membership checks."
  },
  {
    "func": "def open_socket_without_closing():\n    import socket\n    s = socket.socket()\n    s.connect(('example.com', 80))",
    "target": "Ensure sockets are closed properly or use a context manager."
  },
  {
    "func": "def mutable_key_in_dict():\n    my_dict = {{[1, 2]: 'value'}}\n    return my_dict",
    "target": "Avoid using mutable types like lists as dictionary keys."
  },
  {
    "func": "def too_many_return_statements(x):\n    if x == 1:\n        return 'One'\n    elif x == 2:\n        return 'Two'\n    else:\n        return 'Other'",
    "target": "Limit the number of return statements to improve code readability."
  },
  {
    "func": "def unused_parameter(a, b, c):\n    return a + b",
    "target": "Remove unused parameters to simplify the function signature."
  },
  {
    "func": "def weak_password_check(password):\n    if len(password) < 8:\n        return False\n    return True",
    "target": "Enhance password validation by checking for complexity, not just length."
  },
  {
    "func": "def empty_if_block():\n    if condition:\n        pass",
    "target": "Avoid empty code blocks. Add meaningful logic or remove the condition."
  },
  {
    "func": "def ambiguous_function_name():\n    def do_stuff():\n        return 42",
    "target": "Use descriptive function names to clarify intent."
  },
  {
    "func": "def inefficient_list_copy():\n    new_list = [item for item in old_list]\n    return new_list",
    "target": "Use `new_list = old_list.copy()` for a more efficient list copy."
  },
  {
    "func": "def insecure_file_permissions():\n    with open('data.txt', 'w') as file:\n        file.write('content')",
    "target": "Set secure file permissions when creating sensitive files."
  },
  {
    "func": "def redundant_variable_assignment():\n    x = 42\n    y = x\n    return y",
    "target": "Remove redundant variable assignments to simplify the code."
  },
  {
    "func": "def long_parameter_list(a, b, c, d, e, f, g, h, i):\n    return a + b + c",
    "target": "Break long parameter lists into smaller, grouped structures like classes or dictionaries."
  },
  {
    "func": "def duplicate_logic(x):\n    if x > 0:\n        return 'Positive'\n    elif x == 0:\n        return 'Zero'\n    elif x < 0:\n        return 'Negative'",
    "target": "Combine duplicate logic for cleaner and more efficient code."
  },
  {
    "func": "def insecure_deserialization(data):\n    import pickle\n    obj = pickle.loads(data)\n    return obj",
    "target": "Avoid insecure deserialization with `pickle`. Use safe alternatives like `json`."
  },
  {
    "func": "def unnecessary_try_finally():\n    try:\n        x = 10\n    finally:\n        print('Done')",
    "target": "Remove unnecessary `try-finally` blocks when there’s no exception handling required."
  },
  {
    "func": "def insecure_shell_command(user_input):\n    os.system(f'ping {user_input}')",
    "target": "Avoid using user input in shell commands. Sanitize input and use secure subprocess alternatives."
  },
  {
    "func": "def nested_ternary(a, b):\n    return 'Equal' if a == b else 'Greater' if a > b else 'Smaller'",
    "target": "Avoid nested ternary operators. Use a simple if-else block for clarity."
  },
  {
    "func": "def inefficient_list_comprehension():\n    result = [x*2 for x in range(1000000)]",
    "target": "Avoid creating large intermediate lists. Use a generator expression instead."
  },
  {
    "func": "def hardcoded_user_role():\n    user_role = 'admin'\n    return user_role",
    "target": "Avoid hardcoding roles. Use configuration files or constants."
  },
  {
    "func": "def empty_catch_block():\n    try:\n        risky_operation()\n    except Exception:\n        pass",
    "target": "Avoid empty exception blocks. Handle exceptions appropriately or log them."
  },
  {
    "func": "def insecure_random_number():\n    import random\n    return random.randint(1, 100)",
    "target": "Use a cryptographically secure random number generator like `secrets` for sensitive data."
  },
  {
    "func": "def redundant_code():\n    if x > 0:\n        return x\n    else:\n        return x",
    "target": "Remove redundant code paths to improve clarity."
  },
  {
    "func": "def missing_context_manager():\n    file = open('data.txt', 'r')\n    data = file.read()\n    file.close()\n    return data",
    "target": "Use a context manager (`with`) to ensure files are properly closed."
  },
  {
    "func": "def inconsistent_naming():\n    def myFunction():\n        return True",
    "target": "Use consistent naming conventions (e.g., snake_case for Python)."
  },
  {
    "func": "def missing_return(x):\n    if x > 0:\n        return 'Positive'",
    "target": "Ensure all code paths in a function have a return statement."
  },
  {
    "func": "def unhandled_unicode(data):\n    print(data.encode('ascii'))",
    "target": "Handle Unicode properly to avoid encoding errors."
  },
  {
    "func": "def redundant_import():\n    import math\n    import math\n    return math.pi",
    "target": "Remove duplicate imports to reduce clutter."
  },
  {
    "func": "def inefficient_sort():\n    items.sort(key=lambda x: x.lower())",
    "target": "Use `str.casefold()` instead of `lower()` for more accurate sorting."
  },
  {
    "func": "def redundant_boolean_comparison(x):\n    return x == True",
    "target": "Avoid redundant boolean comparisons. Simplify to `return x`."
  },
  {
    "func": "def unsafe_eval():\n    return eval('1 + 2')",
    "target": "Avoid `eval`. Use safer alternatives or explicit parsing."
  },
  {
    "func": "def over_engineered_code(a, b):\n    return sum([a, b])",
    "target": "Avoid over-engineering. Use `a + b` instead of `sum()` for two values."
  },
  {
    "func": "def unused_loop_variable():\n    for _ in range(5):\n        pass",
    "target": "Consider removing unused loops or adding meaningful logic."
  },
  {
    "func": "def mutable_default_args(x, y=[]):\n    y.append(x)\n    return y",
    "target": "Avoid mutable default arguments to prevent unexpected behavior."
  },
  {
    "func": "def insecure_file_permissions():\n    os.chmod('file.txt', 0o777)",
    "target": "Avoid setting overly permissive file permissions."
  },
  {
    "func": "def long_line_of_code():\n    result = x + y + z + a + b + c + d + e + f + g + h + i + j + k + l",
    "target": "Break long lines into multiple lines for better readability."
  },
  {
    "func": "def ambiguous_variable_name():\n    x = 42\n    return x",
    "target": "Use descriptive variable names to clarify their purpose."
  },
  {
    "func": "def unused_return_value():\n    data.sort()\n    return data",
    "target": "Be aware that `list.sort()` modifies the list in place and returns None."
  },
  {
    "func": "def missing_logging():\n    try:\n        risky_operation()\n    except Exception as e:\n        pass",
    "target": "Log exceptions for better debugging and traceability."
  },
  {
    "func": "def unoptimized_search(items, target):\n    for item in items:\n        if item == target:\n            return True\n    return False",
    "target": "Use `in` for membership checks on lists for simplicity and performance."
  },
  {
    "func": "def insecure_dependency_version():\n    install_package('some_package', version='1.0')",
    "target": "Avoid using outdated or insecure dependency versions."
  },
  {
    "func": "def improper_variable_scope():\n    if True:\n        temp = 42\n    return temp",
    "target": "Avoid relying on variables defined inside conditional blocks."
  },
  {
    "func": "def missing_constant_usage():\n    return 3.14159",
    "target": "Use named constants instead of magic numbers."
  },
  {
    "func": "def unnecessary_try_block():\n    try:\n        x = 42\n    except:\n        pass",
    "target": "Remove unnecessary try blocks where no exception is expected."
  },
  {
    "func": "def insecure_hardcoded_url():\n    url = 'http://api.example.com/v1/resource'\n    return url",
    "target": "Avoid hardcoding URLs. Use configuration files or environment variables."
  },
  {
    "func": "def poor_error_handling():\n    try:\n        risky_code()\n    except FileNotFoundError:\n        return 'File not found'\n    except Exception:\n        pass",
    "target": "Handle generic exceptions properly and avoid silent failures."
  },
  {
    "func": "def hardcoded_email():\n    email = 'admin@example.com'\n    return email",
    "target": "Avoid hardcoding sensitive data like emails. Use configuration files or environment variables."
  },
  {
    "func": "def redundant_if_statement(x):\n    if x:\n        return True\n    else:\n        return False",
    "target": "Simplify redundant if statements. Use `return x` for boolean values."
  },
  {
    "func": "def insecure_cookie_handling():\n    response.set_cookie('session', session_id)",
    "target": "Ensure cookies are set with secure attributes like `HttpOnly` and `Secure`."
  },
  {
    "func": "def unused_function():\n    def helper():\n        return 42\n    return True",
    "target": "Remove unused functions to reduce code clutter."
  },
  {
    "func": "def missing_docstring():\n    def add(a, b):\n        return a + b",
    "target": "Add docstrings to improve code readability and maintainability."
  },
  {
    "func": "def inefficient_string_concatenation():\n    result = ''\n    for word in words:\n        result += word",
    "target": "Avoid string concatenation in loops. Use `join()` for better performance."
  },
  {
    "func": "def exception_swallowing():\n    try:\n        risky_operation()\n    except KeyError:\n        return None",
    "target": "Avoid exception swallowing. Log errors or re-raise exceptions for debugging."
  },
  {
    "func": "def non_thread_safe_code():\n    global counter\n    counter += 1\n    return counter",
    "target": "Avoid non-thread-safe code. Use thread-safe constructs like `threading.Lock`."
  },
  {
    "func": "def improper_exit_handling():\n    import sys\n    sys.exit(1)",
    "target": "Avoid using `sys.exit` in libraries. Raise exceptions instead for proper handling."
  },
  {
    "func": "def missing_validation(user_input):\n    return user_input",
    "target": "Validate user input to ensure it meets expected constraints."
  },
  {
    "func": "def unoptimized_database_query():\n    results = db.query('SELECT * FROM users WHERE age > 18')\n    return results",
    "target": "Optimize database queries to fetch only required columns and rows."
  },
  {
    "func": "def static_method_missing_annotation():\n    def utility_function(cls):\n        return 42",
    "target": "Mark static utility methods with `@staticmethod` for clarity."
  },
  {
    "func": "def inadequate_logging():\n    print('Operation completed')",
    "target": "Use proper logging instead of `print()` for better debugging and monitoring."
  },
  {
    "func": "def inefficient_data_structure():\n    items = []\n    for i in range(100):\n        items.append(i)\n    return items",
    "target": "Consider using list comprehensions or appropriate data structures for better performance."
  },
  {
    "func": "def resource_exhaustion():\n    for i in range(10**10):\n        print(i)",
    "target": "Avoid resource-intensive operations that can exhaust system resources."
  },
  {
    "func": "def authenticate_user(user_input):\n    query = f\"SELECT * FROM users WHERE username = '{user_input}'\"\n    print('Executing query:', query)",
    "target": "Avoid SQL injection by using parameterized queries instead of string formatting."
  },
  {
    "func": "def eval_execution(data):\n    return eval(data)",
    "target": "Avoid `eval()` as it can execute arbitrary code. Use `ast.literal_eval` when parsing strings."
  },
  {
    "func": "def insecure_file_write():\n    with open('data.txt', 'w') as f:\n        f.write('sensitive data')",
    "target": "Avoid hardcoded file paths and use secure file permissions."
  },
  {
    "func": "def weak_hashing(password):\n    import hashlib\n    return hashlib.md5(password.encode()).hexdigest()",
    "target": "Avoid MD5 for password hashing. Use `bcrypt` or `argon2` instead."
  },
  {
    "func": "def excessive_function_length():\n    def calculate():\n        x = 1\n        y = 2\n        result = x + y\n        return result\n    return calculate()",
    "target": "Break down large functions into smaller, more maintainable units."
  },
  {
    "func": "def unnecessary_global_variable():\n    global counter\n    counter = 0",
    "target": "Avoid using global variables to maintain code modularity."
  },
  {
    "func": "def hardcoded_api_key():\n    api_key = '12345-ABCDE'\n    return api_key",
    "target": "Avoid hardcoding secrets. Use environment variables instead."
  },
  {
    "func": "def deep_nested_loops():\n    for i in range(5):\n        for j in range(5):\n            for k in range(5):\n                print(i, j, k)",
    "target": "Refactor deep nested loops for better readability."
  },
  {
    "func": "def missing_docstring():\n    def add(a, b):\n        return a + b",
    "target": "Add descriptive docstrings to improve code maintainability."
  },
  {
    "func": "def unsafe_os_command(command):\n    import os\n    os.system(command)",
    "target": "Avoid using `os.system` with unsanitized input. Use `subprocess.run` with safe parameters."
  },
  {
    "func": "def magic_number_usage():\n    if x == 7:\n        print('Lucky')",
    "target": "Replace magic numbers with named constants."
  },
  {
    "func": "def missing_type_annotations():\n    def calculate(a, b):\n        return a + b",
    "target": "Add type annotations for better code clarity."
  },
  {
    "func": "def long_chained_calls():\n    return obj.method1().method2().method3()",
    "target": "Avoid long chains of method calls; assign intermediate results to variables."
  },
  {
    "func": "def resource_leak():\n    f = open('data.txt', 'r')\n    data = f.read()\n    return data",
    "target": "Use `with open()` context manager to handle file operations properly."
  },
  {
    "func": "def insecure_random_number():\n    import random\n    return random.randint(1, 100)",
    "target": "Use `secrets` module for generating secure random numbers."
  },
  {
    "func": "def inconsistent_naming():\n    def CalculateSum(a, b):\n        return a + b",
    "target": "Follow naming conventions like `snake_case` in Python."
  },
  {
    "func": "def unused_import():\n    import math\n    return 42",
    "target": "Remove unused imports to improve code clarity."
  },
  {
    "func": "def hardcoded_ip():\n    server_ip = '192.168.1.1'\n    return server_ip",
    "target": "Avoid hardcoding IP addresses; use configuration files instead."
  },
  {
    "func": "def empty_exception_handler():\n    try:\n        x = 1/0\n    except Exception:\n        pass",
    "target": "Avoid empty exception handlers; log the error instead."
  },
  {
    "func": "def inconsistent_whitespace():\n    a=1\n    b = 2",
    "target": "Use consistent whitespace for better readability."
  },
  {
    "func": "def missing_input_validation(user_input):\n    print('Input:', user_input)",
    "target": "Validate and sanitize user inputs to prevent injection attacks."
  },
  {
    "func": "def inefficient_list_search(items, target):\n    for item in items:\n        if item == target:\n            return True",
    "target": "Use `in` for list membership checks."
  },
  {
    "func": "def improper_exception_type():\n    try:\n        x = int('abc')\n    except ValueError:\n        print('Error')",
    "target": "Use specific exception types for better clarity."
  },
  {
    "func": "def nested_dict_iteration():\n    for key1, val1 in data.items():\n        for key2, val2 in val1.items():\n            for key3, val3 in val2.items():\n                for key4, val4 in val3.items():\n                    for key5, val5 in val4.items():\n                        process(val5)",
    "target": "Reduce deep nesting in dictionary iteration (5 levels detected). Consider flattening the structure."
  },
  {
    "func": "def redundant_comparison():\n    if x == True:\n        return True",
    "target": "Avoid redundant boolean comparisons. Use `if x:`."
  },
  {
    "func": "def incomplete_logging():\n    import logging\n    logging.info('Something happened')",
    "target": "Include context like timestamps or user IDs in logs."
  },
  {
    "func": "def overcomplicated_expression():\n    result = ((a + b) * c) / d",
    "target": "Simplify complex expressions for better readability."
  },
  {
    "func": "def unsafe_file_handling():\n    with open('file.txt', 'w') as f:\n        f.write(data)",
    "target": "Validate file paths to prevent directory traversal."
  },
  {
    "func": "def weak_password_policy(password):\n    if len(password) < 6:\n        return False",
    "target": "Enforce strong password policies beyond length."
  },
  {
    "func": "def missing_finally_clause():\n    f = open('file.txt', 'r')\n    data = f.read()",
    "target": "Ensure files are closed with `finally` or `with`."
  },
  {
    "func": "def hardcoded_port_number():\n    port = 8080",
    "target": "Avoid hardcoding port numbers. Use configuration files."
  },
  {
    "func": "def inconsistent_return_types(x):\n    if x > 0:\n        return 'Positive'\n    else:\n        return 0",
    "target": "Ensure functions return consistent types to avoid confusion."
  },
  {
    "func": "def overly_long_function():\n    result = 0\n    for i in range(100):\n        result += i\n    print(result)\n    for j in range(100):\n        result -= j\n    print(result)",
    "target": "Refactor long functions into smaller, reusable functions."
  },
  {
    "func": "def nested_control_structures():\n    for i in range(5):\n        if i % 2 == 0:\n            for j in range(5):\n                print(i, j)",
    "target": "Reduce nested loops to improve readability."
  },
  {
    "func": "def magic_values():\n    if score >= 42:\n        print('Pass')",
    "target": "Replace magic numbers with named constants."
  },
  {
    "func": "def insufficient_modularity():\n    x = 1\n    y = 2\n    z = x + y\n    print(z)",
    "target": "Modularize code into separate functions for maintainability."
  },
  {
    "func": "def inconsistent_variable_naming():\n    user_name = 'Alice'\n    UserAge = 30",
    "target": "Maintain consistent naming conventions throughout the codebase."
  },
  {
    "func": "def long_argument_list(a, b, c, d, e, f, g):\n    return a + b + c + d + e + f + g",
    "target": "Avoid long parameter lists; use dictionaries or classes."
  },
  {
    "func": "def redundant_computations(n):\n    result = sum(range(n))\n    result2 = sum(range(n))",
    "target": "Avoid redundant computations; store results for reuse."
  },
  {
    "func": "def unoptimized_list_operations():\n    data = []\n    for i in range(1000):\n        data.append(i)",
    "target": "Use list comprehensions for better performance."
  },
  {
    "func": "def complex_boolean_expression(x, y):\n    if (x and y) or (not x and not y):\n        return True",
    "target": "Simplify complex boolean expressions for clarity."
  },
  {
    "func": "def lack_of_code_comments():\n    def add(a, b):\n        return a + b",
    "target": "Include comments to explain complex logic when needed."
  },
  {
    "func": "def long_chain_of_function_calls():\n    result = obj.a().b().c().d()",
    "target": "Avoid chaining multiple methods together; assign intermediate results to variables."
  },
  {
    "func": "def unused_variables():\n    x = 42\n    y = x + 1\n    return x",
    "target": "Remove unused variables to improve code clarity."
  },
  {
    "func": "def inconsistent_whitespace():\n    a=5\n    b = 6\n    c  =7",
    "target": "Use consistent spacing for better readability."
  },
  {
    "func": "def unclear_function_name():\n    def x1y2z3(a, b):\n        return a + b",
    "target": "Use meaningful function names to improve code clarity."
  },
  {
    "func": "def inefficient_membership_check(items, value):\n    if items.count(value) > 0:\n        return True",
    "target": "Use `in` keyword for membership checks instead of `count()`."
  },
  {
    "func": "def unused_function():\n    def helper():\n        return 42",
    "target": "Remove unused functions to reduce code clutter."
  },
  {
    "func": "def repeated_code_blocks():\n    if condition:\n        handle_task()\n    else:\n        handle_task()",
    "target": "Refactor duplicated code into a single function."
  },
  {
    "func": "def hard_to_read_lambda():\n    result = map(lambda x: x ** 2 if x % 2 == 0 else x + 1, data)",
    "target": "Avoid complex lambda functions; use named functions instead."
  },
  {
    "func": "def excessive_inline_comments():\n    x = 5  # assign 5\n    y = 6  # assign 6",
    "target": "Avoid unnecessary inline comments for self-explanatory code."
  },
  {
    "func": "def poorly_formatted_code():\n    x=1; y=2;z=3",
    "target": "Follow standard formatting conventions like PEP 8."
  },
  {
    "func": "def inconsistent_return_behavior(x):\n    if x > 0:\n        return 'Positive'\n    else:\n        print('Negative')",
    "target": "Ensure consistent use of return statements in functions."
  },
  {
    "func": "def unnecessary_list_conversion():\n    items = list([1, 2, 3])",
    "target": "Avoid redundant type conversions for better performance."
  },
  {
    "func": "def implicit_type_conversion():\n    result = 5 + '5'",
    "target": "Avoid implicit type conversions to prevent runtime errors."
  },
  {
    "func": "def inefficient_data_structure_usage():\n    for item in data:\n        if item not in seen:\n            seen.add(item)",
    "target": "Use sets instead of lists for membership checks where possible."
  },
  {
    "func": "def non_standard_docstring_format():\n    def add(a, b):\n        \"\"\"Does addition\"\"\"\n        return a + b",
    "target": "Use standardized docstring formats like NumPy or Google style."
  },
  {
    "func": "def repeated_literals():\n    if status == 'active':\n        print('active')",
    "target": "Use named constants instead of repeated string literals."
  },
  {
    "func": "def long_single_line_expression():\n    result = sum([x ** 2 for x in range(100) if x % 2 == 0])",
    "target": "Break down long expressions into multiple lines."
  },
  {
    "func": "def lack_of_input_validation(value):\n    return int(value)",
    "target": "Validate and sanitize user input to avoid unexpected errors."
  },
  {
    "func": "def overly_generic_variable_names():\n    x = 5\n    y = 6\n    return x + y",
    "target": "Use descriptive variable names for better understanding."
  },
  {
    "func": "class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n    def save_to_database(self):\n        print('Saving user to database')",
    "target": "Single Responsibility Principle: Separate database operations from the User class."
  },
  {
    "func": "class Report:\n    def __init__(self, data):\n        self.data = data\n    def generate_pdf(self):\n        print('Generating PDF')\n    def generate_csv(self):\n        print('Generating CSV')",
    "target": "Single Responsibility Principle: Separate report generation from format-specific logic."
  },
  {
    "func": "class PaymentProcessor:\n    def process_payment(self, payment_type):\n        if payment_type == 'credit_card':\n            print('Processing credit card payment')\n        elif payment_type == 'paypal':\n            print('Processing PayPal payment')",
    "target": "Open/Closed Principle: Avoid modifying the class for new payment types; use polymorphism."
  },
  {
    "func": "class Bird:\n    def fly(self):\n        print('Flying')\nclass Penguin(Bird):\n    def fly(self):\n        raise Exception('Penguins can’t fly')",
    "target": "Liskov Substitution Principle: Subclasses should not break base class behavior."
  },
  {
    "func": "class Printer:\n    def print_document(self, doc):\n        print('Printing', doc)\n    def scan_document(self, doc):\n        raise NotImplementedError('Scan not supported')",
    "target": "Interface Segregation Principle: Provide only the necessary interfaces to clients."
  },
  {
    "func": "class MySQLDatabase:\n    def connect(self):\n        print('Connecting to MySQL')\nclass Application:\n    def __init__(self):\n        self.db = MySQLDatabase()",
    "target": "Dependency Inversion Principle: Depend on abstractions, not concrete classes."
  },
  {
    "func": "class UserService:\n    def get_user(self, user_id):\n        print(f'Fetching user {user_id}')\n    def send_email(self, message):\n        print('Sending email:', message)",
    "target": "Single Responsibility Principle: Separate user management from communication logic."
  },
  {
    "func": "class Shape:\n    def area(self):\n        pass\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\nclass AreaCalculator:\n    def calculate_area(self, shape):\n        if isinstance(shape, Rectangle):\n            return shape.width * shape.height",
    "target": "Open/Closed Principle: Use polymorphism to calculate area for different shapes without modifying code."
  },
  {
    "func": "class Animal:\n    def make_sound(self):\n        print('Animal sound')\nclass Dog(Animal):\n    def make_sound(self):\n        return 5",
    "target": "Liskov Substitution Principle: Substitutable objects should maintain method behavior and types."
  },
  {
    "func": "class Document:\n    def open(self):\n        print('Open document')\n    def save(self):\n        raise NotImplementedError()",
    "target": "Interface Segregation Principle: Provide separate interfaces for openable and saveable documents."
  },
  {
    "func": "class Logger:\n    def log(self, message):\n        print('Logging:', message)\nclass UserService:\n    def __init__(self):\n        self.logger = Logger()",
    "target": "Dependency Inversion Principle: Inject logger via constructor instead of hardcoding."
  },
  {
    "func": "class TaskManager:\n    def add_task(self, task):\n        print('Adding task')\n    def generate_report(self):\n        print('Generating report')",
    "target": "Single Responsibility Principle: Separate task management from reporting."
  },
  {
    "func": "class Calculator:\n    def calculate(self, shape):\n        if type(shape).__name__ == 'Circle':\n            return 3.14 * shape.radius**2\n        elif type(shape).__name__ == 'Square':\n            return shape.side**2",
    "target": "Open/Closed Principle: Use polymorphism instead of type checks."
  },
  {
    "func": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    def set_width(self, width):\n        self.width = width\nclass Square(Rectangle):\n    def set_width(self, width):\n        self.width = width\n        self.height = width",
    "target": "Liskov Substitution Principle: Ensure subclasses don’t alter expected behavior."
  },
  {
    "func": "class Appliance:\n    def turn_on(self):\n        pass\n    def make_coffee(self):\n        raise NotImplementedError()",
    "target": "Interface Segregation Principle: Avoid forcing unused methods on classes."
  },
  {
    "func": "class NotificationService:\n    def __init__(self):\n        self.sms = SMS()\n    def notify(self, message):\n        self.sms.send(message)",
    "target": "Dependency Inversion Principle: Depend on interfaces, not implementations."
  },
  {
    "func": "class User:\n    def __init__(self, name):\n        self.name = name\n    def log_activity(self):\n        print('Logging activity')",
    "target": "Single Responsibility Principle: Separate logging from user management."
  },
  {
    "func": "class Formatter:\n    def format_csv(self, data):\n        print('CSV formatted')\n    def format_json(self, data):\n        print('JSON formatted')",
    "target": "Open/Closed Principle: Extend without modifying existing code by using strategy pattern."
  },
  {
    "func": "class Vehicle:\n    def start_engine(self):\n        print('Engine started')\nclass ElectricCar(Vehicle):\n    def start_engine(self):\n        return 1",
    "target": "Liskov Substitution Principle: Ensure method behavior remains consistent."
  },
  {
    "func": "class Worker:\n    def work(self):\n        pass\n    def eat(self):\n        raise NotImplementedError()",
    "target": "Interface Segregation Principle: Use separate Worker and Eater interfaces."
  },
  {
    "func": "class FileManager:\n    def __init__(self):\n        self.storage = DiskStorage()\n    def save(self, data):\n        self.storage.write(data)",
    "target": "Dependency Inversion Principle: Inject storage interface rather than hardcode dependency."
  },
  {
    "func": "class Product:\n    def calculate_price(self):\n        print('Calculating price')\n    def display_ui(self):\n        print('Displaying UI')",
    "target": "Single Responsibility Principle: Separate pricing logic from UI logic."
  },
  {
    "func": "class Document:\n    def __init__(self, content):\n        self.content = content\n    def print(self, format_type):\n        if format_type == 'PDF':\n            print('Printing PDF')\n        elif format_type == 'HTML':\n            print('Printing HTML')",
    "target": "Open/Closed Principle: Use strategy pattern instead of conditionals for format printing."
  },
  {
    "func": "class AudioPlayer:\n    def play_audio(self, file):\n        print('Playing audio')\nclass VideoPlayer(AudioPlayer):\n    def play_audio(self, file):\n        raise Exception('VideoPlayer cannot play audio')",
    "target": "Liskov Substitution Principle: Avoid violating base class expectations."
  },
  {
    "func": "class Machine:\n    def print_document(self):\n        raise NotImplementedError()\n    def scan_document(self):\n        raise NotImplementedError()",
    "target": "Interface Segregation Principle: Split into Printer and Scanner interfaces."
  },
  {
    "func": "class ShoppingCart:\n    def __init__(self):\n        self.db = SQLDatabase()\n    def checkout(self):\n        self.db.save('cart data')",
    "target": "Dependency Inversion Principle: Depend on database interface, not implementation."
  },
  {
    "func": "class Order:\n    def calculate_total(self):\n        print('Calculating total')\n    def send_invoice(self):\n        print('Sending invoice')",
    "target": "Single Responsibility Principle: Separate invoicing from order logic."
  },
  {
    "func": "class DiscountCalculator:\n    def calculate_discount(self, product_type):\n        if product_type == 'A':\n            return 10\n        elif product_type == 'B':\n            return 5",
    "target": "Open/Closed Principle: Avoid adding conditions; use a strategy pattern."
  },
  {
    "func": "class Duck:\n    def quack(self):\n        print('Quack')\nclass RobotDuck(Duck):\n    def quack(self):\n        return 42",
    "target": "Liskov Substitution Principle: Maintain consistent behavior in overridden methods."
  },
  {
    "func": "def calculate_discount(price, discount_rate, discount_type='standard', customer_type='regular'):\n    if discount_type == 'standard':\n        return price * (1 - discount_rate)\n    elif discount_type == 'holiday':\n        return price * (1 - discount_rate * 1.5)\n    else:\n        return price",
    "target": "YAGNI: Unnecessary discount types not currently needed. Simplify to one discount type."
  },
  {
    "func": "class UserProfile:\n    def __init__(self, username, email, age=None, phone=None, address=None, preferences=None):\n        self.username = username\n        self.email = email\n        self.age = age\n        self.phone = phone\n        self.address = address\n        self.preferences = preferences",
    "target": "YAGNI: Avoid adding unused parameters like `phone`, `address`, and `preferences`."
  },
  {
    "func": "def calculate_bonus(salary, years_of_service, company_size='small', industry='tech'):\n    if company_size == 'small' and industry == 'tech':\n        return salary * 0.05\n    elif company_size == 'large' and industry == 'finance':\n        return salary * 0.1\n    else:\n        return salary * 0.03",
    "target": "YAGNI: Industry and company size differentiation not required; simplify bonus calculation."
  },
  {
    "func": "class DataExporter:\n    def export_as_csv(self, data):\n        print('Exporting as CSV')\n    def export_as_xml(self, data):\n        print('Exporting as XML')\n    def export_as_json(self, data):\n        print('Exporting as JSON')",
    "target": "YAGNI: Exporting as XML and JSON not required yet; keep only CSV."
  },
  {
    "func": "def generate_report(report_type='pdf'):\n    if report_type == 'pdf':\n        print('Generating PDF report')\n    elif report_type == 'html':\n        print('Generating HTML report')\n    else:\n        print('Generating TXT report')",
    "target": "YAGNI: Only PDF report generation needed; remove other formats."
  },
  {
    "func": "class MultiAuthSystem:\n    def login_with_password(self, username, password):\n        print('Password login')\n    def login_with_fingerprint(self, fingerprint):\n        print('Fingerprint login')\n    def login_with_face_id(self, face_image):\n        print('Face ID login')",
    "target": "YAGNI: Only password login needed; remove fingerprint and face ID."
  },
  {
    "func": "def get_user_details(user_id, include_profile_picture=False, include_social_links=False, include_preferences=False):\n    user = {'id': user_id, 'name': 'John'}\n    if include_profile_picture:\n        user['profile_picture'] = 'default.jpg'\n    if include_social_links:\n        user['social_links'] = []\n    if include_preferences:\n        user['preferences'] = {}",
    "target": "YAGNI: Include only essential user details; remove unnecessary options."
  },
  {
    "func": "class Vehicle:\n    def drive(self):\n        print('Driving')\n    def fly(self):\n        print('Flying')",
    "target": "YAGNI: Vehicle doesn't need a `fly` method; remove it."
  },
  {
    "func": "def process_payment(amount, currency='USD', payment_gateway='stripe', region='US'):\n    print(f'Processing payment of {amount} {currency} via {payment_gateway}')",
    "target": "YAGNI: Payment gateway and region parameters unnecessary; simplify interface."
  },
  {
    "func": "class Product:\n    def __init__(self, name, price, color='black', size='medium', warranty=None):\n        self.name = name\n        self.price = price\n        self.color = color\n        self.size = size\n        self.warranty = warranty",
    "target": "YAGNI: Only name and price are necessary for now; remove optional parameters."
  },
  {
    "func": "def calculate_shipping(weight, distance, shipping_method='standard', delivery_time='normal'):\n    if shipping_method == 'standard':\n        cost = weight * distance * 0.5\n    elif shipping_method == 'express':\n        cost = weight * distance * 1.0\n    else:\n        cost = weight * distance * 0.3",
    "target": "YAGNI: Only standard shipping method is needed; simplify logic."
  },
  {
    "func": "class UserManager:\n    def __init__(self, username, email):\n        self.username = username\n        self.email = email\n    def deactivate_user(self):\n        print('Deactivating user')\n    def promote_to_admin(self):\n        print('Promoting user to admin')",
    "target": "YAGNI: `promote_to_admin` method not needed; remove it."
  },
  {
    "func": "def log_message(message, log_level='info', log_to_file=False, log_to_db=False):\n    print(f'{log_level.upper()}: {message}')",
    "target": "YAGNI: Only console logging needed; remove options for file and database."
  },
  {
    "func": "class Shape:\n    def __init__(self, sides):\n        self.sides = sides\n    def calculate_volume(self):\n        print('Volume calculation not needed')",
    "target": "YAGNI: Shape doesn't need a `calculate_volume` method; remove it."
  },
  {
    "func": "def render_dashboard(user, dark_mode=False, show_analytics=False, show_ads=False):\n    print(f'Rendering dashboard for {user}')",
    "target": "YAGNI: Additional options like dark mode and ads not needed."
  },
  {
    "func": "class DocumentHandler:\n    def open(self, file):\n        print('Opening file')\n    def compress(self, file):\n        print('Compressing file')\n    def encrypt(self, file):\n        print('Encrypting file')",
    "target": "YAGNI: Compression and encryption features not required yet."
  },
  {
    "func": "def calculate_invoice(total, discount=0, tax_rate=0.05, loyalty_discount=0.02, seasonal_discount=0):\n    return total - discount + total * tax_rate",
    "target": "YAGNI: Loyalty and seasonal discounts are unnecessary complexity."
  },
  {
    "func": "class Employee:\n    def __init__(self, name, department, salary, bonus=None, stock_options=None):\n        self.name = name\n        self.department = department\n        self.salary = salary\n        self.bonus = bonus\n        self.stock_options = stock_options",
    "target": "YAGNI: Bonus and stock options not needed for all employees."
  },
  {
    "func": "def generate_graph(data, graph_type='bar', show_grid=True, color='blue', animation_speed='normal'):\n    print('Generating graph')",
    "target": "YAGNI: Only bar graph type is required; remove unnecessary parameters."
  },
  {
    "func": "class NotificationService:\n    def send_email(self, message):\n        print('Sending email')\n    def send_sms(self, message):\n        print('Sending SMS')",
    "target": "YAGNI: SMS notification is unnecessary; remove it."
  },
  {
    "func": "def validate_user_input(input_data, allow_special_chars=False, max_length=255, strip_whitespace=True):\n    print('Validating input')",
    "target": "YAGNI: Only whitespace stripping is needed; remove other options."
  },
  {
    "func": "class ChatBot:\n    def __init__(self):\n        self.language = 'English'\n        self.theme = 'light'\n        self.voice_assistant_enabled = False",
    "target": "YAGNI: Theme and voice assistant options are not currently needed."
  },
  {
    "func": "def filter_transactions(transactions, min_amount=0, max_amount=None, currency='USD', include_fees=False):\n    filtered = [t for t in transactions if t['amount'] >= min_amount]",
    "target": "YAGNI: Only filtering by `min_amount` is required; remove other parameters."
  },
  {
    "func": "class TaskManager:\n    def __init__(self):\n        self.tasks = []\n    def add_task(self, task):\n        self.tasks.append(task)\n    def archive_task(self, task):\n        print('Archiving task')",
    "target": "YAGNI: Archiving tasks isn't necessary yet."
  },
  {
    "func": "def send_notification(user, message, method='email', urgency='normal', delivery_time='immediate'):\n    print(f'Sending {method} notification to {user}')",
    "target": "YAGNI: Only email notifications are needed; simplify interface."
  },
  {
    "func": "class ShoppingCart:\n    def __init__(self):\n        self.items = []\n    def apply_coupon(self, coupon_code):\n        print('Applying coupon')\n    def calculate_tax(self):\n        print('Calculating tax')",
    "target": "YAGNI: Coupon and tax calculations are unnecessary for now."
  },
  {
    "func": "def log_event(event, timestamp=None, user_id=None, location=None):\n    print('Logging event')",
    "target": "YAGNI: Only event name is needed; remove optional parameters."
  },
  {
    "func": "class VideoPlayer:\n    def __init__(self):\n        self.resolution = '1080p'\n        self.supports_4k = False\n        self.streaming_mode = 'standard'",
    "target": "YAGNI: 4K and streaming mode settings are premature optimizations."
  },
  {
    "func": "def book_flight(origin, destination, airline=None, seat_preference='any', include_meal=False):\n    print(f'Booking flight from {origin} to {destination}')",
    "target": "YAGNI: Only origin and destination are required; remove optional parameters."
  },
  {
    "func": "def calculate_area_circle(radius):\n    return 3.14159 * radius * radius\n\ndef calculate_area_square(side):\n    return side * side",
    "target": "DRY: Combine similar area calculations into a single function with shape parameter."
  },
  {
    "func": "def display_user(user):\n    print(f'User: {user.name}, Email: {user.email}')\n\ndef display_admin(admin):\n    print(f'Admin: {admin.name}, Email: {admin.email}')",
    "target": "DRY: Duplicate code for user and admin display; use a generic display function."
  },
  {
    "func": "def process_data_a(data):\n    return sum(data)\n\ndef process_data_b(data):\n    return sum(data)",
    "target": "DRY: Duplicate processing logic; merge into one function."
  },
  {
    "func": "def calculate_tax_usa(price):\n    return price * 0.07\n\ndef calculate_tax_canada(price):\n    return price * 0.05",
    "target": "DRY: Use a parameter for tax rates instead of separate functions."
  },
  {
    "func": "def connect_to_server(ip, port):\n    print(f'Connecting to {ip}:{port}')\n\ndef connect_to_database(host, port):\n    print(f'Connecting to {host}:{port}')",
    "target": "DRY: Both functions share similar logic; unify into a single connection function."
  },
  {
    "func": "def print_error(message):\n    print(f'Error: {message}')\n\ndef print_warning(message):\n    print(f'Warning: {message}')",
    "target": "DRY: Merge into a single `print_message` function with a severity parameter."
  },
  {
    "func": "def login(username, password):\n    if username == 'admin' and password == 'pass':\n        print('Access granted')\n    else:\n        print('Access denied')",
    "target": "KISS: Simplify complex conditional logic with a more readable structure."
  },
  {
    "func": "def calculate_discount(price, discount_type):\n    if discount_type == 'student':\n        return price * 0.8\n    elif discount_type == 'senior':\n        return price * 0.85\n    else:\n        return price",
    "target": "KISS: Use a dictionary-based lookup instead of multiple `if-elif` statements."
  },
  {
    "func": "def get_status_description(status_code):\n    if status_code == 1:\n        return 'Active'\n    elif status_code == 2:\n        return 'Inactive'\n    elif status_code == 3:\n        return 'Pending'\n    else:\n        return 'Unknown'",
    "target": "KISS: Replace `if-elif` chain with a dictionary for clarity."
  },
  {
    "func": "def calculate_salary(hours_worked, hourly_rate):\n    return hours_worked * hourly_rate\n\ndef calculate_overtime(hours_overtime, hourly_rate):\n    return hours_overtime * hourly_rate * 1.5",
    "target": "DRY: Combine regular and overtime calculations into a single function."
  },
  {
    "func": "def send_email(subject, body):\n    print(f'Sending email: {subject}')\n\ndef send_sms(message):\n    print(f'Sending SMS: {message}')",
    "target": "DRY: Create a generic `send_notification` function."
  },
  {
    "func": "def authenticate(username, password):\n    if username == 'admin' and password == 'admin123':\n        print('Authenticated')\n    else:\n        print('Failed')",
    "target": "KISS: Simplify authentication logic using a dictionary-based credential check."
  },
  {
    "func": "def convert_to_uppercase(text):\n    return text.upper()\n\ndef convert_to_lowercase(text):\n    return text.lower()",
    "target": "DRY: Merge similar string conversion functions into one with a mode parameter."
  },
  {
    "func": "def print_report(report_type):\n    if report_type == 'summary':\n        print('Summary Report')\n    elif report_type == 'detailed':\n        print('Detailed Report')",
    "target": "KISS: Use a dictionary lookup to print reports."
  },
  {
    "func": "def fetch_user(user_id):\n    if user_id:\n        print('Fetching user')\n    else:\n        print('Invalid ID')",
    "target": "KISS: Simplify control flow; `if user_id` is sufficient without explicit checks."
  },
  {
    "func": "def add_numbers(a, b):\n    result = a + b\n    return result",
    "target": "KISS: Inline variable assignment is unnecessary; return directly."
  },
  {
    "func": "def calculate_interest(principal, rate, time):\n    interest = principal * rate * time\n    return interest",
    "target": "KISS: Directly return expression; intermediate variable is unnecessary."
  },
  {
    "func": "def log_info(message):\n    print(f'INFO: {message}')\n\ndef log_debug(message):\n    print(f'DEBUG: {message}')\n\ndef log_error(message):\n    print(f'ERROR: {message}')",
    "target": "DRY: Combine logging functions into a single function with a level parameter."
  },
  {
    "func": "def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result",
    "target": "KISS: Use `math.factorial()` instead of manual loop."
  },
  {
    "func": "def calculate_total(items):\n    total = 0\n    for item in items:\n        total += item\n    return total",
    "target": "KISS: Use Python's built-in `sum()` for clarity."
  },
  {
    "func": "def check_even(number):\n    if number % 2 == 0:\n        return True\n    else:\n        return False",
    "target": "KISS: Return `number % 2 == 0` directly."
  },
  {
    "func": "def is_positive(num):\n    if num > 0:\n        return True\n    else:\n        return False",
    "target": "KISS: Return `num > 0` directly."
  },
  {
    "func": "def calculate_tax(price):\n    tax = price * 0.1\n    return tax",
    "target": "KISS: Inline the return statement for simplicity."
  },
  {
    "func": "def generate_greeting(name):\n    greeting = f'Hello, {name}!'\n    return greeting",
    "target": "KISS: Return the formatted string directly."
  },
  {
    "func": "def count_words(text):\n    word_count = len(text.split())\n    return word_count",
    "target": "KISS: Return `len(text.split())` directly."
  },
  {
    "func": "def check_validity(value):\n    if value:\n        return True\n    else:\n        return False",
    "target": "KISS: Simplify to `return bool(value)`."
  },
  {
    "func": "def get_discount_price(price, discount_percentage):\n    discount = price * discount_percentage / 100\n    final_price = price - discount\n    return final_price",
    "target": "KISS: Return expression directly without intermediate variables."
  },
  {
    "func": "def greet_user(name):\n    if name:\n        print(f'Hello, {name}')\n    else:\n        print('Hello, Guest')",
    "target": "KISS: Simplify greeting logic."
  },
  {
    "func": "def process_items(items):\n    for item in items:\n        if len(item) > 5:\n            print(item)",
    "target": "KISS: Simplify logic by using list comprehensions."
  },
  {
    "func": "def calc(x,y): return x+y",
    "target": "Use descriptive function names to improve code readability."
  },
  {
    "func": "def getuserdetails(user): return user['name']",
    "target": "Use snake_case for function names in Python as per PEP 8."
  },
  {
    "func": "def fetch_data():\n    try:\n        result = some_function()\n    except:\n        pass",
    "target": "Avoid generic exception handling; catch specific exceptions."
  },
  {
    "func": "def processData(data): return data.upper()",
    "target": "Use consistent naming conventions (e.g., snake_case for functions)."
  },
  {
    "func": "def add(x,y,z):\n    return x+y+z",
    "target": "Limit the number of parameters to improve function maintainability."
  },
  {
    "func": "def check_status(status):\n    if status == 1:\n        print('Active')\n    elif status == 2:\n        print('Inactive')",
    "target": "Use dictionaries for condition-based logic to simplify code."
  },
  {
    "func": "def findLargest(lst):\n    largest = lst[0]\n    for i in lst:\n        if i > largest:\n            largest = i\n    return largest",
    "target": "Use built-in functions like `max()` instead of manual loops."
  },
  {
    "func": "def calculate(x,y):\n    if y != 0:\n        return x/y",
    "target": "Always handle division by zero with appropriate exceptions."
  },
  {
    "func": "def get_username(user):\n    print('Username:', user['name'])",
    "target": "Add type annotations for better code maintainability."
  },
  {
    "func": "def read_file(file):\n    f = open(file, 'r')\n    data = f.read()\n    f.close()\n    return data",
    "target": "Use context managers (`with open`) to ensure files are properly closed."
  },
  {
    "func": "def isPalindrome(s):\n    return s == s[::-1]",
    "target": "Use snake_case for function names."
  },
  {
    "func": "def calcTax(price,rate):\n    return price*rate",
    "target": "Add spaces around operators to improve readability."
  },
  {
    "func": "def fetch_items(items):\n    for i in range(len(items)):\n        print(items[i])",
    "target": "Use `for item in items` instead of indexing for better readability."
  },
  {
    "func": "def checkAge(age):\n    if age>=18:\n        print('Adult')",
    "target": "Use consistent spacing and indentation as per PEP 8."
  },
  {
    "func": "def process_list(lst):\n    result=[]\n    for x in lst:\n        result.append(x*2)\n    return result",
    "target": "Use list comprehensions for cleaner and efficient code."
  },
  {
    "func": "def user_login(username,password):\n    if username=='admin' and password=='1234':\n        print('Welcome admin')",
    "target": "Avoid hardcoding credentials; use secure configuration files."
  },
  {
    "func": "def calc_average(numbers):\n    total=0\n    for n in numbers:\n        total+=n\n    return total/len(numbers)",
    "target": "Use built-in functions like `sum()` to simplify code."
  },
  {
    "func": "def sort_list(lst):\n    return sorted(lst,key=lambda x:x[1])",
    "target": "Add spaces after commas for better readability."
  },
  {
    "func": "def process_input(data):\n    if type(data)==list:\n        return [x*2 for x in data]",
    "target": "Use `isinstance` instead of comparing types directly."
  },
  {
    "func": "def find_max(a,b,c):\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c",
    "target": "Simplify with `max(a, b, c)`."
  },
  {
    "func": "def user_info():\n    name='John'\n    age=30\n    print('Name:',name)\n    print('Age:',age)",
    "target": "Avoid hardcoded values; use parameters for flexibility."
  },
  {
    "func": "def connect_db():\n    conn = sqlite3.connect('mydb.db')",
    "target": "Close database connections properly after use."
  },
  {
    "func": "def calc_sum(a,b):\n    return a+b",
    "target": "Add type annotations to improve clarity."
  },
  {
    "func": "def compute_factorial(n):\n    if n==1:\n        return 1\n    else:\n        return n*compute_factorial(n-1)",
    "target": "Add base case check and docstrings to explain recursive logic."
  },
  {
    "func": "def calculate_discount(price, discount):\n    return price-(price*(discount/100))",
    "target": "Add parentheses for better readability when using mathematical expressions."
  },
  {
    "func": "def send_email(subject, body, recipient, smtp_server, port, username, password):\n    pass",
    "target": "Reduce parameter count; use a configuration object instead."
  },
  {
    "func": "def print_report(data):\n    print('Report Data:',data)",
    "target": "Include function docstrings for clarity."
  },
  {
    "func": "def factorial(x):\n    if x==1:\n        return 1\n    else:\n        return x*factorial(x-1)",
    "target": "Add input validation to handle negative values."
  },
  {
    "func": "def convert_temperature(temp, unit):\n    if unit=='C':\n        return temp*1.8+32\n    elif unit=='F':\n        return (temp-32)/1.8",
    "target": "Add comments and validate input units."
  },
  {
    "func": "def find_prime_numbers(n):\n    primes=[]\n    for num in range(2,n+1):\n        for i in range(2,num):\n            if num%i==0:\n                break\n        else:\n            primes.append(num)\n    return primes",
    "target": "Optimize loops and improve readability with better naming and logic."
  },
  {
    "func": "def mergeDicts(d1,d2):\n    d3=d1.copy()\n    d3.update(d2)\n    return d3",
    "target": "Use snake_case for function names and add spaces around `=` for readability."
  },
  {
    "func": "def parse_json(json_str):\n    return eval(json_str)",
    "target": "Avoid using `eval()`; use `json.loads()` for safer JSON parsing."
  },
  {
    "func": "def fetch_info(user):\n    print(f'User info: {user}')",
    "target": "Add docstrings to describe the function's purpose."
  },
  {
    "func": "def calculate_discount(price, discount):\n    if discount <= 0:\n        return price\n    else:\n        return price - (price * discount / 100)",
    "target": "Use inline expressions to simplify return logic."
  },
  {
    "func": "def process_data(items):\n    result=[]\n    for i in items:\n        result.append(i*2)\n    return result",
    "target": "Use list comprehensions for cleaner and efficient code."
  },
  {
    "func": "def get_user(name):\n    if name == 'admin':\n        print('Admin access')",
    "target": "Always validate user input for security reasons."
  },
  {
    "func": "def join_strings(parts):\n    result=''\n    for p in parts:\n        result+=p",
    "target": "Use `''.join(parts)` instead of manual concatenation."
  },
  {
    "func": "def get_info():\n    user='john'\n    age=30\n    return user,age",
    "target": "Avoid hardcoded values; pass parameters or use configurations."
  },
  {
    "func": "def print_square(n):\n    return n**2",
    "target": "Add type annotations to function signatures."
  },
  {
    "func": "def divide_numbers(a,b):\n    return a/b",
    "target": "Add exception handling to avoid division by zero errors."
  },
  {
    "func": "def calc_average(nums):\n    sum=0\n    for n in nums:\n        sum+=n\n    return sum/len(nums)",
    "target": "Use `sum(nums)/len(nums)` for more concise code."
  },
  {
    "func": "def display_users(users):\n    for u in users:\n        print(u)",
    "target": "Add type hints and docstrings for clarity."
  },
  {
    "func": "def check_prime(n):\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True",
    "target": "Optimize performance by checking divisibility only up to `sqrt(n)`."
  },
  {
    "func": "def check_password(password):\n    if password == '1234':\n        print('Weak password')",
    "target": "Avoid hardcoding sensitive information like passwords."
  },
  {
    "func": "def read_file(filename):\n    f = open(filename)\n    data = f.read()\n    return data",
    "target": "Use `with open` to ensure files are properly closed."
  },
  {
    "func": "def process_list(lst):\n    new_list=[]\n    for x in lst:\n        if x%2==0:\n            new_list.append(x)",
    "target": "Simplify with list comprehensions."
  },
  {
    "func": "def find_key(d, key):\n    if key in d.keys():\n        return d[key]",
    "target": "Use `if key in d` instead of `.keys()` for cleaner code."
  },
  {
    "func": "def increment(x):\n    x+=1\n    return x",
    "target": "Add type hints to improve code clarity."
  },
  {
    "func": "def nested_list_iteration():\n    for i in range(len(data)):\n        for j in range(len(data[i])):\n            for k in range(len(data[i][j])):\n                for m in range(len(data[i][j][k])):\n                    for n in range(len(data[i][j][k][m])):\n                        process(data[i][j][k][m][n])",
    "target": "Reduce deep nesting in list iteration (5 levels detected). Consider using generators or comprehensions."
  },
  {
    "func": "def connect_to_db():\n    conn = sqlite3.connect('test.db')",
    "target": "Close database connections properly to avoid leaks."
  },
  {
    "func": "def print_names(names):\n    for name in names:\n        print(name)",
    "target": "Add comments to explain code logic."
  },
  {
    "func": "def sort_users(users):\n    return sorted(users, key=lambda x: x['age'])",
    "target": "Add type annotations for input and output types."
  },
  {
    "func": "def fetch_api_data(url):\n    response = requests.get(url)\n    return response.text",
    "target": "Handle exceptions for network errors."
  },
  {
    "func": "def calc_area(l,w):\n    return l*w",
    "target": "Use descriptive variable names for clarity."
  },
  {
    "func": "def find_duplicates(lst):\n    seen = set()\n    duplicates = []\n    for x in lst:\n        if x in seen:\n            duplicates.append(x)\n        else:\n            seen.add(x)\n    return duplicates",
    "target": "Optimize using collections.Counter."
  },
  {
    "func": "def greet(name):\n    print('Hello '+name)",
    "target": "Use f-strings for better string formatting."
  },
  {
    "func": "def count_vowels(text):\n    count = 0\n    for ch in text:\n        if ch in 'aeiouAEIOU':\n            count += 1\n    return count",
    "target": "Use case-insensitive string methods for clarity."
  },
  {
    "func": "def factorial(n):\n    if n==1:\n        return 1\n    return n*factorial(n-1)",
    "target": "Add base case for input validation."
  },
  {
    "func": "def lookup_user(user_id):\n    if user_id == 123:\n        return 'John'",
    "target": "Avoid hardcoding user data; use a database."
  },
  {
    "func": "def generate_report():\n    report='Sales report'\n    print(report)",
    "target": "Include logging instead of print statements for better maintainability."
  },
  {
    "func": "def user_roles():\n    roles = ['admin','user','guest']\n    for role in roles:\n        print(role)",
    "target": "Use enums for role definitions to improve clarity."
  },
  {
    "func": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "target": "Use slicing for efficient string reversal."
  },
  {
    "func": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]",
    "target": "Use slicing to check if a string is a palindrome."
  },
  {
    "func": "def get_file_extension(filename: str) -> str:\n    return filename.split('.')[-1]",
    "target": "Use `os.path.splitext()` for better accuracy."
  },
  {
    "func": "def sum_list(numbers: list[int]) -> int:\n    return sum(numbers)",
    "target": "Use built-in `sum()` instead of loops for summing lists."
  },
  {
    "func": "def is_even(num: int) -> bool:\n    return num % 2 == 0",
    "target": "Use modulo operator for simple even-number checks."
  },
  {
    "func": "def remove_duplicates(lst: list) -> list:\n    return list(set(lst))",
    "target": "Use `set()` to efficiently remove duplicates."
  },
  {
    "func": "def most_common_word(words: list[str]) -> str:\n    return max(set(words), key=words.count)",
    "target": "Use `collections.Counter` for more efficiency."
  },
  {
    "func": "def safe_dict_lookup(dictionary: dict, key, default=None):\n    return dictionary.get(key, default)",
    "target": "Use `.get()` to avoid `KeyError` exceptions."
  },
  {
    "func": "def validate_email(email: str) -> bool:\n    return '@' in email and '.' in email",
    "target": "Use `re.match()` for a more accurate email validation."
  },
  {
    "func": "def round_number(num: float, decimals: int = 2) -> float:\n    return round(num, decimals)",
    "target": "Use `round()` for cleaner number rounding."
  },
  {
    "func": "def filter_even_numbers(lst: list[int]) -> list[int]:\n    return [x for x in lst if x % 2 == 0]",
    "target": "Use list comprehensions for filtering."
  },
  {
    "func": "def capitalize_words(sentence: str) -> str:\n    return sentence.title()",
    "target": "Use `.title()` for proper capitalization."
  },
  {
    "func": "def count_occurrences(lst: list, value) -> int:\n    return lst.count(value)",
    "target": "Use `.count()` for simple occurrence counting."
  },
  {
    "func": "def swap_variables(a, b):\n    return b, a",
    "target": "Use tuple unpacking for swapping instead of temporary variables."
  },
  {
    "func": "def get_file_size(filepath: str) -> int:\n    return os.path.getsize(filepath)",
    "target": "Use `os.path.getsize()` for accurate file size retrieval."
  },
  {
    "func": "def merge_two_dicts(d1: dict, d2: dict) -> dict:\n    return {**d1, **d2}",
    "target": "Use dictionary unpacking for merging dictionaries."
  },
  {
    "func": "def factorial(n: int) -> int:\n    return math.factorial(n)",
    "target": "Use `math.factorial()` instead of recursive functions for efficiency."
  },
  {
    "func": "def get_current_datetime() -> str:\n    return datetime.datetime.now().isoformat()",
    "target": "Use `.isoformat()` for standardized date representation."
  },
  {
    "func": "def generate_random_number(start: int, end: int) -> int:\n    return random.randint(start, end)",
    "target": "Use `random.randint()` for generating a random number in a range."
  },
  {
    "func": "def get_unique_values(lst: list) -> list:\n    return list(set(lst))",
    "target": "Use `set()` to get unique values in a list efficiently."
  },
  {
    "func": "def flatten_list(nested_list: list[list]) -> list:\n    return [item for sublist in nested_list for item in sublist]",
    "target": "Use list comprehensions to flatten nested lists."
  },
  {
    "func": "def get_ascii_value(character: str) -> int:\n    return ord(character)",
    "target": "Use `ord()` to get ASCII values."
  },
  {
    "func": "def create_slug(text: str) -> str:\n    return text.lower().replace(' ', '-')",
    "target": "Use `.lower().replace(' ', '-')` for simple slug generation."
  },
  {
    "func": "def chunk_list(lst: list, size: int) -> list[list]:\n    return [lst[i:i+size] for i in range(0, len(lst), size)]",
    "target": "Use list slicing to split lists into chunks."
  },
  {
    "func": "def is_anagram(str1: str, str2: str) -> bool:\n    return sorted(str1) == sorted(str2)",
    "target": "Use `sorted()` to check if two words are anagrams."
  },
  {
    "func": "def get_environment_variable(key: str) -> str:\n    return os.getenv(key, 'Not Found')",
    "target": "Use `os.getenv()` to safely retrieve environment variables."
  },
  {
    "func": "def is_substring(sub: str, main: str) -> bool:\n    return sub in main",
    "target": "Use `in` for substring checks instead of `.find()`."
  },
  {
    "func": "def read_json_file(filepath: str) -> dict:\n    with open(filepath, 'r') as f:\n        return json.load(f)",
    "target": "Use `json.load()` to parse JSON files safely."
  },
  {
    "func": "def is_multiple_of_five(n: int) -> bool:\n    return n % 5 == 0",
    "target": "Use modulo operator for simple divisibility checks."
  },
  {
    "func": "def insecure_os_command():\n    user_input = 'ls -la'\n    os.popen(user_input)",
    "target": "Using `os.popen()` to execute shell commands can lead to command injection vulnerabilities."
  },
  {
    "func": "def unsafe_jwt_decoding(token):\n    return jwt.decode(token, verify=False)",
    "target": "Disabling verification when decoding JWTs allows attackers to forge tokens."
  },
  {
    "func": "def missing_escaping_in_sql(user_input):\n    query = f\"SELECT * FROM users WHERE username = '{user_input}'\"",
    "target": "Lack of proper escaping in SQL queries allows SQL injection."
  },
  {
    "func": "def dangerous_pickle_loading():\n    with open('data.pkl', 'rb') as f:\n        obj = pickle.load(f)",
    "target": "Pickle files can execute arbitrary code when loaded."
  },
  {
    "func": "def unverified_ssl_request(url):\n    requests.get(url, verify=False)",
    "target": "Disabling SSL verification allows MITM attacks."
  },
  {
    "func": "def sensitive_data_in_logs(password):\n    print(f'User password: {password}')",
    "target": "Logging sensitive information exposes credentials in logs."
  },
  {
    "func": "def missing_rate_limiting():\n    def login(username, password):\n        if authenticate(username, password):\n            return 'Welcome!'",
    "target": "Not enforcing rate limiting makes login endpoints vulnerable to brute force attacks."
  },
  {
    "func": "def weak_password_hash(password):\n    return hashlib.md5(password.encode()).hexdigest()",
    "target": "MD5 is cryptographically weak and should not be used for password hashing."
  },
  {
    "func": "def insufficient_audit_logging():\n    def delete_account(user):\n        db.delete(user)",
    "target": "Not logging security-sensitive operations allows unauthorized access without detection."
  },
  {
    "func": "def open_redirect_attack(target_url):\n    return redirect(target_url)",
    "target": "Redirecting to untrusted URLs allows open redirect attacks."
  },
  {
    "func": "def weak_random_numbers():\n    return random.randint(100000, 999999)",
    "target": "Using `random.randint()` for security-sensitive values is insecure; use `secrets` instead."
  },
  {
    "func": "def no_cors_restriction():\n    @app.after_request\n    def add_cors_headers(response):\n        response.headers['Access-Control-Allow-Origin'] = '*'",
    "target": "Allowing `*` in CORS settings exposes APIs to Cross-Site Request Forgery (CSRF)."
  },
  {
    "func": "def insecure_smtp_configuration():\n    smtp = smtplib.SMTP('mail.example.com', 25)",
    "target": "Using SMTP without TLS encryption can expose sensitive email content."
  },
  {
    "func": "def missing_helmet_headers():\n    response.headers['X-Frame-Options'] = ''",
    "target": "Lack of security headers allows clickjacking attacks."
  },
  {
    "func": "def missing_content_security_policy():\n    response.headers['Content-Security-Policy'] = ''",
    "target": "Not enforcing a Content Security Policy (CSP) increases XSS risk."
  },
  {
    "func": "def missing_logging_in_auth():\n    def login(username, password):\n        if authenticate(username, password):\n            return 'Success!'",
    "target": "Failing to log authentication attempts allows brute-force login attempts to go undetected."
  },
  {
    "func": "def weak_file_upload_validation(file):\n    if file.filename.endswith('.jpg'):\n        file.save('/uploads/' + file.filename)",
    "target": "Checking file extensions alone is insufficient; use MIME type validation."
  },
  {
    "func": "def unsafe_webhook_parsing(request_data):\n    data = json.loads(request_data)",
    "target": "Parsing user-controlled JSON without validation can lead to deserialization attacks."
  },
  {
    "func": "def allowing_user_controlled_redirects(url):\n    return redirect(url)",
    "target": "Redirecting users without validation allows phishing attacks."
  },
  {
    "func": "def missing_brute_force_protection():\n    def login(username, password):\n        if username == 'admin' and password == 'password':\n            return 'Success'",
    "target": "Not enforcing rate limiting allows brute force login attacks."
  },
  {
    "func": "def insecure_xslt_processing(xml_input):\n    transformer = etree.XSLT(etree.XML(xml_input))",
    "target": "Processing untrusted XML data with XSLT can allow XML External Entity (XXE) attacks."
  },
  {
    "func": "def hardcoded_api_keys():\n    API_KEY = 'sk_test_12345'",
    "target": "Hardcoding API keys in source code exposes them to leaks."
  },
  {
    "func": "def unsafe_yaml_loading(yaml_data):\n    data = yaml.load(yaml_data)",
    "target": "Using `yaml.load()` without `safe_load()` allows arbitrary code execution."
  },
  {
    "func": "def missing_account_lockout():\n    def login(username, password):\n        if authenticate(username, password):\n            return 'Welcome!'",
    "target": "Not locking accounts after failed login attempts increases brute force risks."
  },
  {
    "func": "def insecure_cookie_handling():\n    response.set_cookie('session', session_id)",
    "target": "Ensure cookies are set with `HttpOnly`, `Secure`, and `SameSite` attributes."
  },
  {
    "func": "def excessive_permissions_on_file():\n    os.chmod('/important/file.txt', 0o777)",
    "target": "Avoid overly permissive file permissions."
  },
  {
    "func": "def missing_parameter_sanitization(input_param):\n    return input_param",
    "target": "Failing to sanitize input parameters increases the risk of injection attacks."
  },
  {
    "func": "def storing_password_in_plaintext(password):\n    db.save({'password': password})",
    "target": "Passwords should never be stored in plaintext; use hashing instead."
  },
  {
    "func": "def excessive_stack_trace_leak():\n    try:\n        risky_operation()\n    except Exception as e:\n        return str(e)",
    "target": "Exposing detailed stack traces in responses provides attackers with useful information."
  },
  {
    "func": "def missing_content_security_policy():\n    response.headers['Content-Security-Policy'] = ''",
    "target": "Not setting a Content Security Policy (CSP) leaves the application vulnerable to XSS attacks."
  },
  {
    "func": "def exposing_private_cloud_storage():\n    storage.set_public('bucket-name', True)",
    "target": "Exposing cloud storage publicly can lead to unauthorized data access."
  },
  {
    "func": "def unrestricted_websocket_connections():\n    ws = WebSocket()\n    ws.connect('wss://example.com')",
    "target": "Failing to authenticate WebSocket connections exposes APIs to hijacking."
  },
  {
    "func": "def missing_oauth_scope_restrictions():\n    oauth.request_token(scope='*')",
    "target": "Overly broad OAuth scopes allow unauthorized API access."
  },
  {
    "func": "def using_weak_password_hashing():\n    return hashlib.md5(password.encode()).hexdigest()",
    "target": "Using MD5 for password hashing makes it easy to crack. Use bcrypt or Argon2 instead."
  },
  {
    "func": "def insecure_jwt_storage():\n    localStorage.setItem('jwt', token)",
    "target": "Storing JWT tokens in local storage makes them vulnerable to XSS attacks."
  },
  {
    "func": "def missing_websocket_message_validation():\n    ws.onmessage = lambda event: process_message(event.data)",
    "target": "Failing to validate WebSocket messages allows attackers to send malicious payloads."
  },
  {
    "func": "def exposing_internal_services_over_http():\n    requests.get('http://10.0.0.1:8000')",
    "target": "Using internal services over HTTP instead of HTTPS exposes them to interception."
  },
  {
    "func": "def allowing_unvalidated_redirects():\n    return redirect(request.args.get('url'))",
    "target": "Unvalidated redirects allow attackers to redirect users to phishing sites."
  },
  {
    "func": "def leaking_internal_stack_traces():\n    print(exception)",
    "target": "Exposing stack traces in production leaks sensitive debugging information."
  },
  {
    "func": "def missing_rate_limits_on_admin_api():\n    @app.route('/admin/reset_password')\n    def reset_password():\n        return 'Password reset successful'",
    "target": "Not enforcing rate limits on admin endpoints increases brute-force attack risks."
  },
  {
    "func": "def weak_sso_implementation():\n    if user_email.endswith('@trusted.com'):\n        authenticate(user_email)",
    "target": "Using email domain-based authentication is insecure and easy to bypass."
  },
  {
    "func": "def exposing_graphql_introspection():\n    @app.route('/graphql')\n    def graphql():\n        return schema.introspect()",
    "target": "Allowing GraphQL introspection in production exposes API structure to attackers."
  },
  {
    "func": "def missing_cache_control_headers():\n    response.headers['Cache-Control'] = ''",
    "target": "Not setting cache control headers allows sensitive data to be stored in browser caches."
  },
  {
    "func": "def publically_exposed_admin_dashboard():\n    @app.route('/admin')\n    def admin_panel():\n        return render_template('admin.html')",
    "target": "Not restricting access to the admin panel allows unauthorized users to access it."
  },
  {
    "func": "def insufficient_logging_and_monitoring():\n    def authenticate(user):\n        return 'Login successful'",
    "target": "Failing to log authentication attempts makes detecting brute force attacks difficult."
  },
  {
    "func": "def allowing_user_controlled_regex():\n    re.match(user_input, text)",
    "target": "Allowing user-controlled regex patterns can lead to denial-of-service attacks."
  },
  {
    "func": "def overprivileged_cloud_storage_access():\n    policy = {\"Effect\": \"Allow\", \"Action\": \"s3:*\", \"Resource\": \"*\"}",
    "target": "Granting overly broad S3 permissions increases the risk of data leaks."
  },
  {
    "func": "def missing_csrf_protection_on_sensitive_actions():\n    @app.route('/transfer_money', methods=['POST'])\n    def transfer():\n        return 'Transfer Successful'",
    "target": "APIs without CSRF protection can be exploited for unauthorized transactions."
  },
  {
    "func": "def storing_sensitive_data_in_logs():\n    log.info(f'User {username} logged in with password: {password}')",
    "target": "Logging sensitive information exposes credentials and user data."
  },
  {
    "func": "def using_weak_encryption():\n    cipher = AES.new(key, AES.MODE_ECB)\n    return cipher.encrypt(data)",
    "target": "Using ECB mode for encryption is insecure. Use AES-GCM for better security."
  },
  {
    "func": "def allowing_user_controlled_file_paths():\n    with open(request.args.get('file')) as f:\n        return f.read()",
    "target": "Allowing user-controlled file paths can lead to path traversal attacks."
  },
  {
    "func": "def missing_session_expiration():\n    session.permanent = False",
    "target": "Not setting session expiration increases the risk of session hijacking."
  },
  {
    "func": "def exposing_internal_docker_ports():\n    docker run -p 2375:2375 mycontainer",
    "target": "Exposing Docker API ports publicly allows remote container management."
  },
  {
    "func": "def missing_access_control_on_cloud_storage():\n    bucket.set_public(True)",
    "target": "Making cloud storage public allows attackers to access sensitive files."
  },
  {
    "func": "def insecure_federated_authentication():\n    if 'sso_token' in request.cookies:\n        authenticate(request.cookies['sso_token'])",
    "target": "Failing to validate SSO tokens properly leads to authentication bypass."
  },
  {
    "func": "def allowing_unverified_email_change():\n    user.email = request.args.get('email')",
    "target": "Allowing email changes without verification enables account hijacking."
  },
  {
    "func": "def exposing_internal_admin_api():\n    @app.route('/admin/api')\n    def admin_api():\n        return jsonify({'status': 'ok'})",
    "target": "Not restricting access to internal admin APIs allows unauthorized use."
  },
  {
    "func": "def weak_oauth_implementation():\n    @app.route('/oauth')\n    def oauth():\n        return token",
    "target": "Using OAuth without scopes or proper validation increases security risks."
  },
  {
    "func": "def unnecessary_nested_condition(x):\n    if x > 0:\n        if x < 100:\n            return True",
    "target": "Flatten nested conditions where possible to improve readability."
  },
  {
    "func": "def redundant_else_in_return():\n    if x > 0:\n        return 'Positive'\n    else:\n        return 'Negative'",
    "target": "Remove redundant `else` after `return`, as execution stops at `return`."
  },
  {
    "func": "def excessive_blank_lines():\n    \n    \n    def foo():\n        return 42\n    \n    \n    \n",
    "target": "Avoid excessive blank lines that disrupt code flow."
  },
  {
    "func": "def unclear_parameter_names(a, b, c):\n    return a + b - c",
    "target": "Use meaningful parameter names to improve function readability."
  },
  {
    "func": "def large_function():\n    def foo():\n        step1()\n        step2()\n        step3()\n        step4()\n        step5()\n        step6()\n    return foo()",
    "target": "Break large functions into smaller, well-named helper functions."
  },
  {
    "func": "def excessive_comments():\n    # Adding two numbers\n    # Storing in result\n    # Returning the result\n    def add(x, y):\n        return x + y",
    "target": "Use self-explanatory code instead of excessive comments."
  },
  {
    "func": "def deep_function_call():\n    def step1():\n        return step2()\n    def step2():\n        return step3()\n    def step3():\n        return 42",
    "target": "Avoid deep function calls that obscure logic flow."
  },
  {
    "func": "def ambiguous_return_type():\n    if x > 0:\n        return 'Valid'\n    else:\n        return 1",
    "target": "Ensure consistent return types for better function predictability."
  },
  {
    "func": "def inconsistent_indentation():\n    if x > 0:\n        return True\n     else:\n        return False",
    "target": "Ensure consistent indentation to maintain readability and avoid errors."
  },
  {
    "func": "def overly_generic_function():\n    def process(data):\n        return data",
    "target": "Avoid overly generic function names. Use descriptive function names instead."
  },
  {
    "func": "def non_expressive_boolean():\n    def is_enabled():\n        return x == 1",
    "target": "Use explicit boolean values instead of comparisons with numbers."
  },
  {
    "func": "def redundant_parentheses():\n    return (x + y) * (z)",
    "target": "Avoid unnecessary parentheses to simplify expressions."
  },
  {
    "func": "def redundant_variable():\n    result = x + y\n    return result",
    "target": "Avoid redundant variables; return expressions directly when possible."
  },
  {
    "func": "def mixing_tabs_and_spaces():\n    if x > 0:\n        print('Valid')\n\tprint('Error')",
    "target": "Avoid mixing tabs and spaces for indentation."
  },
  {
    "func": "def missing_function_docstring():\n    def add(x, y):\n        return x + y",
    "target": "Provide a function docstring to describe its purpose."
  },
  {
    "func": "def inconsistent_variable_naming():\n    userName = 'John'\n    user_email = 'john@example.com'",
    "target": "Follow consistent naming conventions (e.g., use snake_case for variables)."
  },
  {
    "func": "def poorly_named_class():\n    class X:\n        pass",
    "target": "Use meaningful class names that describe their purpose."
  },
  {
    "func": "def too_many_function_arguments(a, b, c, d, e, f):\n    return a + b + c + d + e + f",
    "target": "Limit function parameters to a manageable number; use objects or dictionaries instead."
  },
  {
    "func": "def inefficient_imports():\n    import os, sys, math, random, time, json, logging",
    "target": "Avoid excessive imports. Only import what is necessary."
  },
  {
    "func": "def unnecessary_double_assignment():\n    x = 10\n    y = x",
    "target": "Avoid unnecessary variable assignments."
  },
  {
    "func": "def inconsistent_spacing():\n    a=10\n    b = 20\n    c= 30",
    "target": "Use consistent spacing around operators and variables for readability."
  },
  {
    "func": "def unclear_loop_variable():\n    for x in range(10):\n        process(x)",
    "target": "Use meaningful loop variable names (e.g., `index`, `item`) instead of `x`."
  },
  {
    "func": "def complex_lambda():\n    process = lambda x: (x**2 + 2*x + 1)/3",
    "target": "Avoid overly complex lambda functions; use named functions instead."
  },
  {
    "func": "def inconsistent_function_call():\n    processData()\n    process_data()",
    "target": "Use a consistent function naming convention throughout your code."
  },
  {
    "func": "def unnecessary_try_except():\n    try:\n        result = x + y\n    except:\n        pass",
    "target": "Do not use `try-except` when an error is not expected."
  },
  {
    "func": "def missing_enumerate():\n    i = 0\n    for item in data:\n        print(i, item)\n        i += 1",
    "target": "Use `enumerate()` instead of manually tracking an index."
  },
  {
    "func": "def missing_context_manager():\n    file = open('data.txt', 'r')\n    content = file.read()\n    file.close()",
    "target": "Use `with open(...)` to handle files safely."
  },
  {
    "func": "def poorly_formatted_multiline_string():\n    text = 'This is a long string that should be split into multiple lines but it is not'",
    "target": "Break long strings into multiple lines using triple quotes or string concatenation."
  },
  {
    "func": "def overuse_of_one_letter_variables():\n    def f(a, b, c):\n        return a + b - c",
    "target": "Avoid using single-letter variable names except in mathematical or short contexts."
  },
  {
    "func": "class GodClass:\n    def __init__(self):\n        self.data = {}\n    def process(self):\n        self.load()\n        self.validate()\n        self.calculate()\n        self.save()\n    def load(self):\n        pass\n    def validate(self):\n        pass\n    def calculate(self):\n        pass\n    def save(self):\n        pass",
    "target": "Avoid 'God' classes that handle too many responsibilities. Follow the Single Responsibility Principle (SRP)."
  },
  {
    "func": "class ViolatesOCP:\n    def __init__(self, shape_type):\n        self.shape_type = shape_type\n    def calculate_area(self):\n        if self.shape_type == 'circle':\n            return self.radius * self.radius * 3.14\n        elif self.shape_type == 'square':\n            return self.side * self.side",
    "target": "Violates Open-Closed Principle (OCP). Instead, use polymorphism to extend behavior."
  },
  {
    "func": "class PoorEncapsulation:\n    def __init__(self):\n        self.data = []  # Directly accessible from outside",
    "target": "Use encapsulation. Make attributes private (`self._data`) and provide getters/setters."
  },
  {
    "func": "class UnusedMethod:\n    def useful_method(self):\n        return 'I am used'\n    def unused_method(self):\n        pass",
    "target": "Remove unused methods to reduce code clutter."
  },
  {
    "func": "class UnnecessaryInheritance(BaseClass):\n    def method(self):\n        return 'Functionality same as BaseClass'",
    "target": "Avoid unnecessary inheritance. Use composition over inheritance when possible."
  },
  {
    "func": "class InefficientClass:\n    def __init__(self):\n        self.items = []\n    def add_item(self, item):\n        self.items.append(item)\n    def find_item(self, item):\n        for i in self.items:\n            if i == item:\n                return True",
    "target": "Use efficient data structures. Consider `set` for faster lookups."
  },
  {
    "func": "class TooManyConstructors:\n    def __init__(self, name):\n        self.name = name\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age",
    "target": "Avoid multiple `__init__` methods. Use default values or class methods."
  },
  {
    "func": "class GlobalDependency:\n    shared_resource = []\n    def add_item(self, item):\n        self.shared_resource.append(item)",
    "target": "Avoid modifying global variables inside a class. Use instance variables instead."
  },
  {
    "func": "class UnnecessaryStaticMethod:\n    @staticmethod\n    def add(a, b):\n        return a + b",
    "target": "Use static methods only when they do not depend on class state."
  },
  {
    "func": "class CircularDependency:\n    from module_a import A\n    from module_b import B",
    "target": "Avoid circular dependencies. Use dependency injection or restructuring."
  },
  {
    "func": "class ExcessiveConstructorLogic:\n    def __init__(self, config):\n        self.data = load_data(config)\n        self.cache = Cache()\n        self.session = Session()",
    "target": "Keep constructors simple. Move complex logic to a separate method."
  },
  {
    "func": "class MissingInterface:\n    class Dog:\n        def make_sound(self):\n            return 'Bark'\n    class Cat:\n        def make_sound(self):\n            return 'Meow'",
    "target": "Use interfaces or abstract base classes for common behavior."
  },
  {
    "func": "class TightlyCoupled:\n    def __init__(self):\n        self.db = Database()\n    def fetch(self):\n        return self.db.get_data()",
    "target": "Avoid tight coupling. Inject dependencies via constructors."
  },
  {
    "func": "class PoorlyNamedClass:\n    class XYZ:\n        pass",
    "target": "Use meaningful class names to improve readability."
  },
  {
    "func": "class TooManyParameters:\n    def process(self, a, b, c, d, e, f):\n        return a + b + c + d + e + f",
    "target": "Reduce the number of parameters in methods. Use data structures instead."
  },
  {
    "func": "class LongClass:\n    def method1(self): pass\n    def method2(self): pass\n    def method3(self): pass\n    def method4(self): pass\n    def method5(self): pass\n    def method6(self): pass\n    def method7(self): pass\n    def method8(self): pass\n    def method9(self): pass",
    "target": "Break down large classes into smaller, focused classes."
  },
  {
    "func": "class OverloadedMethod:\n    def process(self, data):\n        if isinstance(data, list):\n            return 'Processing list'\n        elif isinstance(data, dict):\n            return 'Processing dict'",
    "target": "Use method overloading via single responsibility rather than type checking."
  },
  {
    "func": "class NonStandardNaming:\n    def DoSomething(self):\n        pass",
    "target": "Follow standard naming conventions (e.g., snake_case for methods in Python)."
  },
  {
    "func": "class InefficientSorting:\n    def sort_list(self, data):\n        return sorted(data)",
    "target": "Use in-place sorting (`data.sort()`) instead of returning a new list."
  },
  {
    "func": "class UselessWrapper:\n    def process(self, value):\n        return value",
    "target": "Avoid wrapping functions that do not add meaningful logic."
  },
  {
    "func": "class PoorVisibility:\n    class _InternalClass:\n        pass",
    "target": "Use proper visibility (`_` for internal, `__` for private) where needed."
  },
  {
    "func": "class ImproperAbstractClass:\n    def work(self):\n        raise NotImplementedError",
    "target": "Use `abc` module to define abstract base classes properly."
  },
  {
    "func": "class InconsistentReturn:\n    def process(self, x):\n        if x > 0:\n            return 'Valid'\n        return",
    "target": "Ensure methods return consistent data types."
  },
  {
    "func": "class OvercomplicatedInitialization:\n    def __init__(self, db_host, db_user, db_password, db_port):\n        self.db_host = db_host\n        self.db_user = db_user\n        self.db_password = db_password\n        self.db_port = db_port",
    "target": "Use configuration objects or environment variables for complex initialization."
  },
  {
    "func": "class UnusedAttribute:\n    def __init__(self):\n        self.temp = 42",
    "target": "Remove unused attributes to reduce memory usage and improve clarity."
  },
  {
    "func": "class NonIntuitiveInheritance:\n    class Rectangle(Shape):\n        pass",
    "target": "Ensure subclass behavior aligns with the parent class contract."
  },
  {
    "func": "class WeakEncapsulation:\n    def __init__(self):\n        self._data = []",
    "target": "Use private variables (`__data`) when internal state should not be modified directly."
  },
  {
    "func": "class TooManyDependencies:\n    def __init__(self, db, cache, logger, session, service, config):\n        pass",
    "target": "Avoid excessive dependencies in a single class. Apply Dependency Injection (DI)."
  },
  {
    "func": "class Singleton:\n    def __new__(cls):\n        if not hasattr(cls, 'instance'):\n            cls.instance = super(Singleton, cls).__new__(cls)\n        return cls.instance",
    "target": "Avoid singleton pattern unless necessary. It introduces global state and complicates testing."
  },
  {
    "func": "def excessive_logging():\n    for i in range(10000):\n        print('Logging event:', i)",
    "target": "Excessive logging can degrade performance. Use log levels like DEBUG or INFO."
  },
  {
    "func": "def missing_benchmarking():\n    data = list(range(1000000))\n    squared = [x**2 for x in data]",
    "target": "Use benchmarking tools (e.g., `timeit`, `cProfile`) for performance-critical code."
  },
  {
    "func": "def weak_api_auth():\n    if api_key == 'my_secret_key':\n        return True",
    "target": "Avoid hardcoding API keys. Use secure authentication mechanisms like OAuth."
  },
  {
    "func": "class DataLeak:\n    def __init__(self):\n        self.sensitive_data = 'password123'",
    "target": "Do not store sensitive data in memory for extended periods. Use secure storage."
  },
  {
    "func": "def slow_db_query():\n    query = 'SELECT * FROM users WHERE age > 18'\n    db.execute(query)",
    "target": "Optimize database queries by selecting only necessary fields (`SELECT name, age FROM users`)."
  },
  {
    "func": "class PoorAbstraction:\n    def __init__(self):\n        self.users = []\n    def add_user(self, user):\n        self.users.append(user)",
    "target": "Use data access layers instead of directly modifying collections inside classes."
  },
  {
    "func": "def non_standard_json():\n    json_data = \"{'name': 'John', 'age': 30}\"",
    "target": "Use proper JSON formatting (`json.dumps(data)`) to avoid parsing issues."
  },
  {
    "func": "def nested_function_definitions():\n    def outer():\n        def inner1():\n            def inner2():\n                def inner3():\n                    def inner4():\n                        print('Too deep')\n                    inner4()\n                inner3()\n            inner2()\n        inner1()\n    outer()",
    "target": "Avoid deeply nested functions (5 levels detected). Use separate module-level functions."
  },
  {
    "func": "def outdated_crypto():\n    import hashlib\n    hash = hashlib.md5(password.encode()).hexdigest()",
    "target": "Use secure hashing algorithms like bcrypt or Argon2 instead of MD5."
  },
  {
    "func": "def improper_api_error_handling():\n    try:\n        api_call()\n    except:\n        return 'Error'",
    "target": "Use structured error responses (e.g., `{ 'error': 'Invalid request', 'code': 400 }`)."
  },
  {
    "func": "def unoptimized_sorting():\n    numbers = [5, 2, 9, 1]\n    sorted_numbers = sorted(numbers, key=lambda x: x*x)",
    "target": "For large datasets, use efficient sorting algorithms based on context."
  },
  {
    "func": "def poor_caching():\n    def fetch_data():\n        return expensive_query()",
    "target": "Use caching mechanisms (e.g., Redis, in-memory cache) for frequently accessed data."
  },
  {
    "func": "def static_query_building():\n    query = 'SELECT * FROM users WHERE id = ' + user_id",
    "target": "Use prepared statements to prevent SQL injection attacks."
  },
  {
    "func": "def inefficient_memory_usage():\n    big_list = [0] * 10000000",
    "target": "Use generators (`yield`) instead of large lists for memory efficiency."
  },
  {
    "func": "class MisusedInheritance(Vehicle):\n    def honk(self):\n        return 'Beep'",
    "target": "Only use inheritance when there is a true 'is-a' relationship. Otherwise, prefer composition."
  },
  {
    "func": "def unhandled_async_exceptions():\n    async def fetch_data():\n        result = await api_call()",
    "target": "Always handle exceptions in async functions (`try-except`)."
  },
  {
    "func": "def missing_default_case():\n    def process_input(option):\n        if option == 'A':\n            return 'Option A'\n        elif option == 'B':\n            return 'Option B'",
    "target": "Always include a default case in conditionals to handle unexpected inputs."
  },
  {
    "func": "def incorrect_timezone_handling():\n    now = datetime.datetime.now()",
    "target": "Use timezone-aware datetime (`datetime.datetime.utcnow()` or `pytz`)."
  },
  {
    "func": "class HardcodedFilePath:\n    FILE_PATH = '/usr/data/file.txt'",
    "target": "Use environment variables or config files for file paths."
  },
  {
    "func": "def missing_unit_tests():\n    def add(a, b):\n        return a + b",
    "target": "Write unit tests for functions to ensure reliability."
  },
  {
    "func": "def unused_import():\n    import math",
    "target": "Remove unused imports to keep code clean."
  },
  {
    "func": "def excessive_data_loading():\n    users = db.get_all_users()",
    "target": "Only load necessary data (`db.get_users(limit=100)`)."
  },
  {
    "func": "def missing_api_rate_limiting():\n    def api_endpoint():\n        return 'Data'",
    "target": "Implement rate limiting (`API Gateway, Redis`) to prevent abuse."
  },
  {
    "func": "def excessive_dependency_usage():\n    import requests\n    import httpx\n    import urllib3",
    "target": "Avoid redundant dependencies. Choose one library per functionality."
  },
  {
    "func": "def unclosed_database_connection():\n    conn = sqlite3.connect('data.db')\n    cursor = conn.cursor()\n    cursor.execute('SELECT * FROM users')",
    "target": "Always close database connections (`with sqlite3.connect() as conn`)."
  },
  {
    "func": "class UnscalableClass:\n    def process_data(self, data):\n        return [x*2 for x in data]",
    "target": "Consider parallel processing (`multiprocessing`, `asyncio`) for large datasets."
  },
  {
    "func": "def unrestricted_file_upload():\n    def upload_file(file):\n        file.save('/uploads/' + file.filename)",
    "target": "Sanitize file uploads (`validate file type, size limits`)."
  },
  {
    "func": "def sql_injection(user_input):\n    query = 'SELECT * FROM users WHERE name = ' + user_input\n    return query",
    "target": "Avoid string concatenation in SQL queries. Use parameterized queries to prevent SQL injection."
  },
  {
    "func": "def risky_eval(data):\n    return eval(data)",
    "target": "Avoid using eval as it can execute arbitrary code. Use ast.literal_eval for safer parsing."
  },
  {
    "func": "def unused_variable():\n    x = 10\n    return 5",
    "target": "No specific issue detected."
  },
  {
    "func": "def long_function():\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n",
    "target": "Function length exceeds recommended limits. Split into smaller functions."
  },
  {
    "func": "def too_many_params(a, b, c, d, e, f, g):\n    return a + b + c + d + e + f + g",
    "target": "Avoid using too many parameters in a function. Consider using a data structure like a dictionary."
  },
  {
    "func": "def nested_loops():\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                for m in range(10):\n                    for n in range(10):\n                        print(i, j, k, m, n)",
    "target": "Avoid deep nesting in loops (5 levels detected). Consider breaking it into functions or using iterators."
  },
  {
    "func": "def hard_coded_secret():\n    secret = 'password_2123'\n    return secret",
    "target": "Avoid hardcoding secrets in code. Use environment variables or secret management tools."
  },
  {
    "func": "def sql_injection(user_input):\n    query = 'SELECT * FROM users WHERE name = ' + user_input\n    return query",
    "target": "Avoid string concatenation in SQL queries. Use parameterized queries to prevent SQL injection."
  },
  {
    "func": "def insecure_file_handling():\n    with open('data.txt', 'w') as file:\n        file.write(data)\n    return True",
    "target": "Validate file paths to prevent directory traversal vulnerabilities."
  },
  {
    "func": "def weak_cryptography(password):\n    return hashlib.md5(password.encode()).hexdigest()",
    "target": "Avoid using MD5 for hashing. Use a secure hashing algorithm like bcrypt or SHA-256."
  },
  {
    "func": "def empty_exception_handling():\n    try:\n        risky_code()\n    except:\n        pass",
    "target": "Avoid empty exception handling blocks. Provide specific error-handling logic."
  },
  {
    "func": "def magic_numbers():\n    if x == 42:\n        return True",
    "target": "Avoid using magic numbers. Define constants with meaningful names."
  },
  {
    "func": "def chained_calls():\n    return obj.method1().method2().method3().method4()",
    "target": "Avoid long chains of method calls. Break into intermediate steps."
  },
  {
    "func": "def deprecated_library_usage():\n    import cgi\n    return cgi.escape('<html>')",
    "target": "Avoid using deprecated libraries. Replace with modern alternatives."
  },
  {
    "func": "def excessive_globals():\n    global x\n    x = 42\n    return x",
    "target": "Avoid excessive use of global variables. Use function parameters or class attributes."
  },
  {
    "func": "def resource_leak():\n    file = open('data.txt', 'r')\n    data = file.read()\n    return data",
    "target": "Ensure proper resource management by using context managers."
  },
  {
    "func": "def circular_imports():\n    import module_a\n    return module_a.value",
    "target": "Avoid circular imports by refactoring dependencies."
  },
  {
    "func": "def missing_exception_message():\n    raise Exception()",
    "target": "Provide meaningful messages in exception-raising to improve debugging."
  },
  {
    "func": "def unreachable_code():\n    return\n    print('This will never run')",
    "target": "Remove unreachable code to keep the codebase clean."
  },
  {
    "func": "def variable_shadowing():\n    x = 10\n    def inner():\n        x = 5\n        return x\n    return inner()",
    "target": "Avoid variable shadowing. Use distinct variable names."
  },
  {
    "func": "def naming_conventions():\n    VarName = 10\n    return VarName",
    "target": "Follow consistent naming conventions like snake_case for better readability."
  },
  {
    "func": "def inconsistent_return():\n    if condition:\n        return True\n    else:\n        return 1",
    "target": "Ensure consistent return types for better code understanding."
  },
  {
    "func": "def unused_imports():\n    import math\n    return 42",
    "target": "Remove unused imports to reduce clutter and improve performance."
  },
  {
    "func": "def excessive_comments():\n    # This function adds two numbers\n    def add(a, b):\n        return a + b",
    "target": "Avoid excessive comments. Write self-explanatory code instead."
  },
  {
    "func": "def inconsistent_whitespace():\n    x=10\n    return x",
    "target": "Use consistent whitespace for better code readability."
  },
  {
    "func": "def inconsistent_indentation():\n    if condition:\n    return True",
    "target": "Use consistent indentation to improve code structure and readability."
  },
  {
    "func": "def inconsistent_quotes():\n    return 'Hello'",
    "target": "Use consistent quotes for strings in the codebase."
  },
  {
    "func": "def inconsistent_newlines():\n    return 42\n",
    "target": "Use consistent newline characters at the end of files."
  },
  {
    "func": "def inconsistent_line_length():\n    return 'This is a very long line that exceeds the recommended line length'",
    "target": "Ensure consistent line lengths for better code readability."
  },
  {
    "func": "def inconsistent_function_calls():\n    return math.sqrt (x)",
    "target": "Use consistent spacing around function calls for better code readability."
  },
  {
    "func": "def inconsistent_function_def():\n    def func (x, y):\n        return x + y",
    "target": "Use consistent spacing around function definitions for better code readability."
  },
  {
    "func": "def inconsistent_list_comprehension():\n    return [ x for x in range(10) ]",
    "target": "Use consistent spacing in list comprehensions for better code readability."
  },
  {
    "func": "def sql_injection_vulnerability(user_input):\n    query = f\"SELECT * FROM users WHERE name = '{user_input}'\"\n    return query",
    "target": "Avoid SQL injection by using prepared statements and parameterized queries."
  },
  {
    "func": "def risky_exec(data):\n    exec(data)",
    "target": "Avoid using exec as it can execute arbitrary code. Refactor to use safer alternatives."
  },
  {
    "func": "def lack_of_comments(x):\n    return x * x",
    "target": "Add comments to clarify the purpose and functionality of the code."
  },
  {
    "func": "def excessive_recursion(n):\n    if n == 0:\n        return 1\n    else:\n        return n * excessive_recursion(n-1)",
    "target": "Avoid excessive recursion; it may lead to stack overflow. Use iterative solutions where possible."
  },
  {
    "func": "def insecure_random():\n    return random.random()",
    "target": "Avoid using insecure random number generators for cryptographic purposes. Use secrets or os.urandom."
  },
  {
    "func": "def improper_sanitization(user_input):\n    os.system('rm -rf ' + user_input)",
    "target": "Validate and sanitize inputs to avoid command injection vulnerabilities."
  },
  {
    "func": "def overly_complex_conditions(a, b):\n    if a > 10 and b < 5 and a + b > 15 and a - b < 0:\n        return True",
    "target": "Simplify complex conditions to improve readability and maintainability."
  },
  {
    "func": "def non_descriptive_variables(x, y):\n    return x + y",
    "target": "Use descriptive variable names to improve code readability."
  },
  {
    "func": "def insecure_protocol(url):\n    if url.startswith('http:'):\n        return 'Insecure URL detected'",
    "target": "Avoid insecure protocols. Use HTTPS instead of HTTP."
  },
  {
    "func": "def redundant_code():\n    x = 5\n    y = 5\n    return x + y",
    "target": "Remove redundant code to improve efficiency and reduce clutter."
  },
  {
    "func": "def missing_return():\n    if condition:\n        return True",
    "target": "Ensure all branches of a function have return statements."
  },
  {
    "func": "def outdated_function_usage():\n    return 'Hello, %s' % 'World'",
    "target": "Avoid outdated string formatting. Use f-strings or format() instead."
  },
  {
    "func": "def no_docstring():\n    return 42",
    "target": "Add a docstring to explain the function's purpose and usage."
  },
  {
    "func": "def improper_file_permissions():\n    os.chmod('file.txt', 0o777)",
    "target": "Avoid setting overly permissive file permissions. Use the least privilege principle."
  },
  {
    "func": "def large_hardcoded_data():\n    data = [1, 2, 3, 4, 5, ...]  # Thousands of entries\n    return data",
    "target": "Avoid hardcoding large datasets. Use external files or databases."
  },
  {
    "func": "def excessive_logging():\n    for i in range(1000000):\n        print(i)",
    "target": "Avoid excessive logging as it can reduce performance and clutter logs."
  },
  {
    "func": "def blocking_code():\n    time.sleep(10)\n    return 'Done'",
    "target": "Avoid blocking code in asynchronous contexts. Use non-blocking alternatives."
  },
  {
    "func": "def unsafe_path_construction(base, filename):\n    return base + '/' + filename",
    "target": "Validate paths to prevent directory traversal vulnerabilities."
  },
  {
    "func": "def unchecked_cast(x):\n    return int(x)",
    "target": "Validate data before casting to prevent unexpected errors."
  },
  {
    "func": "def unhandled_exceptions():\n    return 10 / 0",
    "target": "Handle exceptions properly to prevent runtime crashes."
  },
  {
    "func": "def hardcoded_credentials():\n    return 'admin:password'",
    "target": "Avoid hardcoding credentials in code. Use secure storage solutions."
  },
  {
    "func": "def excessive_memory_usage():\n    data = [i for i in range(1000000)]\n    return sum(data)",
    "target": "Avoid excessive memory usage. Optimize data structures and algorithms."
  },
  {
    "func": "def excessive_function_calls():\n    return func1(func2(func3(func4(func5(x))))",
    "target": "Avoid excessive function calls. Use intermediate variables for clarity."
  },
  {
    "func": "def excessive_string_operations():\n    return 'a' + 'b' + 'c' + 'd' + 'e' + 'f' + 'g'",
    "target": "Avoid excessive string operations. Use string formatting or join methods."
  },
  {
    "func": "def excessive_list_operations():\n    data = [1, 2, 3]\n    return data + data + data + data",
    "target": "Avoid excessive list operations. Use list comprehensions or generators."
  },
  {
    "func": "def excessive_dict_operations():\n    data = {1: 'a', 2: 'b', 3: 'c'}\n    return data.keys() + data.values()",
    "target": "Avoid excessive dictionary operations. Use dict comprehensions or methods."
  },
  {
    "func": "def excessive_math_operations():\n    return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10",
    "target": "Avoid excessive math operations. Use built-in functions or loops."
  },
  {
    "func": "def excessive_file_operations():\n    with open('data.txt', 'r') as file:\n        data = file.read()\n    return data + data + data + data",
    "target": "Avoid excessive file operations. Read data once and reuse it."
  },
  {
    "func": "def insecure_deserialization(data):\n    return pickle.loads(data)",
    "target": "Avoid using pickle for deserialization as it can execute arbitrary code. Use safer libraries like json."
  },
  {
    "func": "def missing_input_validation(data):\n    return data[0]",
    "target": "Validate input to ensure it meets the expected format and constraints."
  },
  {
    "func": "def inefficient_loop():\n    for i in range(1000000):\n        for j in range(len(data)):\n            process(data[j])",
    "target": "Optimize nested loops to avoid performance bottlenecks."
  },
  {
    "func": "def lack_of_unit_tests():\n    def add(a, b):\n        return a + b\n    return add",
    "target": "Add unit tests to ensure code correctness and prevent regressions."
  },
  {
    "func": "def missing_logging():\n    try:\n        risky_operation()\n    except Exception:\n        pass",
    "target": "Add logging to capture exception details for debugging and monitoring."
  },
  {
    "func": "def improper_exception_handling():\n    try:\n        risky_code()\n    except KeyError:\n        return 'Error occurred'",
    "target": "Catch specific exceptions and handle them appropriately."
  },
  {
    "func": "def missing_context_manager():\n    file = open('data.txt', 'r')\n    data = file.read()\n    file.close()\n    return data",
    "target": "Use context managers to ensure resources are properly closed after use."
  },
  {
    "func": "def potential_divide_by_zero(x):\n    return 10 / x",
    "target": "Check for zero before performing division to avoid runtime errors."
  },
  {
    "func": "def insufficient_password_complexity(password):\n    if len(password) > 8:\n        return True\n    return False",
    "target": "Enforce stronger password policies, including special characters, numbers, and case sensitivity."
  },
  {
    "func": "def hardcoded_api_key():\n    api_key = '12345-abcdef-67890'\n    return api_key",
    "target": "Avoid hardcoding API keys. Use environment variables or secure vaults."
  },
  {
    "func": "def redundant_else_in_return():\n    if condition:\n        return True\n    else:\n        return False",
    "target": "Remove redundant else statements after return for cleaner code."
  },
  {
    "func": "def no_error_handling():\n    return risky_function()",
    "target": "Add error handling to manage unexpected scenarios gracefully."
  },
  {
    "func": "def ineffective_data_structure():\n    data = []\n    for i in range(1000):\n        data.append(i)",
    "target": "Use efficient data structures, such as range or generators, for large datasets."
  },
  {
    "func": "def improper_object_initialization():\n    obj = CustomObject()\n    obj.value = 10\n    return obj",
    "target": "Use proper initialization methods to avoid incomplete or inconsistent states."
  },
  {
    "func": "def unclear_function_purpose(x):\n    return x * x",
    "target": "Add descriptive function names and docstrings to clarify functionality."
  },
  {
    "func": "def insufficient_privilege_check():\n    perform_admin_action(user)",
    "target": "Ensure privilege checks are implemented before performing sensitive actions."
  },
  {
    "func": "def memory_leak_example():\n    data = []\n    while True:\n        data.append('memory leak!')",
    "target": "Avoid unbounded memory usage. Implement limits or periodic cleanup."
  },
  {
    "func": "def risky_temp_file():\n    with open('/tmp/tempfile', 'w') as file:\n        file.write('data')",
    "target": "Use secure methods for creating temporary files to prevent race conditions."
  },
  {
    "func": "def unused_parameters(a, b):\n    return b",
    "target": "Remove unused parameters to improve code clarity and reduce confusion."
  },
  {
    "func": "def inconsistent_indentation():\n    def example():\n      return True",
    "target": "Ensure consistent indentation for better readability and maintainability."
  },
  {
    "func": "def inadequate_error_messages():\n    try:\n        risky_code()\n    except ValueError:\n        raise Exception('Error')",
    "target": "Provide detailed error messages to aid in debugging."
  },
  {
    "func": "def improper_assert_usage():\n    assert x > 0\n    return x",
    "target": "Avoid using assert statements in production code. Use explicit error handling."
  },
  {
    "func": "def improper_string_concat(name):\n    return 'Hello, ' + name + '!'",
    "target": "Use f-strings or string formatting for cleaner and more efficient string concatenation."
  },
  {
    "func": "def repeated_code():\n    print('Hello')\n    print('Hello')",
    "target": "Refactor repeated code into reusable functions or constants."
  },
  {
    "func": "def inefficient_sorting(data):\n    for i in range(len(data)):\n        for j in range(i + 1, len(data)):\n            if data[i] > data[j]:\n                data[i], data[j] = data[j], data[i]",
    "target": "Use built-in sorting methods like sorted() or list.sort() for better performance."
  },
  {
    "func": "def improper_exception_raising():\n    raise 'Error'",
    "target": "Raise exceptions using Exception classes for proper error handling."
  },
  {
    "func": "def improper_logging_level():\n    logging.debug('Debug message')",
    "target": "Use appropriate logging levels to provide the right level of detail."
  },
  {
    "func": "def improper_file_handling():\n    file = open('data.txt', 'w')\n    file.write('data')\n    file.close()",
    "target": "Use context managers to ensure files are properly closed after use."
  },
  {
    "func": "def improper_exception_catching():\n    try:\n        risky_code()\n    except:\n        pass",
    "target": "Catch specific exceptions to handle errors effectively."
  },
  {
    "func": "def improper_variable_naming():\n    VarName = 10\n    return VarName",
    "target": "Use consistent naming conventions like snake_case for variables."
  },
  {
    "func": "def improper_function_naming():\n    def FuncName():\n        return True",
    "target": "Use descriptive function names to clarify their purpose and usage."
  },
  {
    "func": "def improper_class_naming():\n    class ClassName:\n        def __init__(self):\n            pass",
    "target": "Use descriptive class names to indicate their purpose and contents."
  },
  {
    "func": "def improper_constant_naming():\n    CONSTANT_NAME = 42\n    return CONSTANT_NAME",
    "target": "Use consistent naming conventions like UPPER_CASE for constants."
  },
  {
    "func": "def improper_module_naming():\n    pass",
    "target": "Use descriptive module names to indicate their contents and purpose."
  },
  {
    "func": "def improper_package_naming():\n    pass",
    "target": "Use descriptive package names to indicate their contents and purpose."
  },
  {
    "func": "def improper_parameter_naming(x):\n    return x",
    "target": "Use descriptive parameter names to clarify their purpose and usage."
  },
  {
    "func": "def insecure_redirect(url):\n    return redirect(url)",
    "target": "Validate and sanitize user-provided URLs to prevent open redirect vulnerabilities."
  },
  {
    "func": "def no_rate_limiting():\n    for _ in range(1000):\n        process_request()",
    "target": "Implement rate limiting to prevent abuse and denial-of-service attacks."
  },
  {
    "func": "def csrf_vulnerable(request):\n    if request.method == 'POST':\n        perform_sensitive_action(request.user)",
    "target": "Use CSRF tokens to protect against cross-site request forgery attacks."
  },
  {
    "func": "def weak_session_id():\n    session_id = str(random.randint(1000, 9999))\n    return session_id",
    "target": "Use secure, cryptographically random session IDs to prevent session hijacking."
  },
  {
    "func": "def direct_object_reference(user_id):\n    return f'/user/{user_id}/profile'",
    "target": "Validate access control to prevent insecure direct object references."
  },
  {
    "func": "def missing_secure_headers():\n    return render_template('index.html')",
    "target": "Add security headers like Content-Security-Policy and X-Content-Type-Options to prevent attacks."
  },
  {
    "func": "def vulnerable_jwt(jwt_token):\n    payload = jwt.decode(jwt_token, verify=False)\n    return payload",
    "target": "Always verify JWT signatures to prevent token tampering."
  },
  {
    "func": "def hardcoded_sensitive_url():\n    url = 'http://example.com/api_key=123456'\n    return url",
    "target": "Avoid hardcoding sensitive URLs. Use secure configurations or environment variables."
  },
  {
    "func": "def missing_output_encoding(data):\n    return f'<div>{data}</div>'",
    "target": "Apply output encoding to prevent cross-site scripting (XSS) attacks."
  },
  {
    "func": "def unsafe_file_upload(file):\n    file.save(f'/uploads/{file.filename}')",
    "target": "Validate file extensions and scan uploads to prevent malicious file execution."
  },
  {
    "func": "def weak_password_storage(password):\n    hashed = hashlib.sha256(password.encode()).hexdigest()\n    return hashed",
    "target": "Use a password hashing library like bcrypt with salting for secure storage."
  },
  {
    "func": "def sensitive_data_exposure():\n    return f'Error: {error_detail}'",
    "target": "Avoid exposing sensitive details in error messages. Use generic error messages."
  },
  {
    "func": "def missing_authentication():\n    return perform_admin_action()",
    "target": "Implement proper authentication to restrict unauthorized access."
  },
  {
    "func": "def missing_authorization(user):\n    return perform_sensitive_action(user)",
    "target": "Add authorization checks to ensure only permitted users can perform certain actions."
  },
  {
    "func": "def insecure_command_execution(command):\n    os.system(command)",
    "target": "Avoid using os.system for command execution. Use safer alternatives like subprocess with sanitization."
  },
  {
    "func": "def unsafe_deserialization(data):\n    obj = pickle.loads(data)\n    return obj",
    "target": "Validate and sanitize data before deserialization to prevent remote code execution."
  },
  {
    "func": "def insecure_cookie():\n    response.set_cookie('session', 'value')\n    return response",
    "target": "Set cookies with HttpOnly, Secure, and SameSite attributes to prevent attacks."
  },
  {
    "func": "def missing_https():\n    url = 'http://example.com/login'\n    return url",
    "target": "Always use HTTPS to encrypt sensitive data during transmission."
  },
  {
    "func": "def improper_access_control(request):\n    if request.user == 'admin':\n        return 'Access granted'\n    return 'Access denied'",
    "target": "Enforce role-based access control to secure sensitive resources."
  },
  {
    "func": "def missing_account_lockout():\n    for _ in range(100):\n        attempt_login()",
    "target": "Implement account lockout mechanisms to prevent brute force attacks."
  },
  {
    "func": "def no_logging():\n    pass",
    "target": "Implement logging for security-critical events to detect and respond to incidents."
  },
  {
    "func": "def missing_encryption(data):\n    with open('data.txt', 'w') as file:\n        file.write(data)",
    "target": "Encrypt sensitive data at rest to prevent unauthorized access."
  },
  {
    "func": "def sql_query(user_id):\n    query = f'SELECT * FROM users WHERE id = {user_id}'\n    return query",
    "target": "Use parameterized queries to prevent SQL injection attacks."
  },
  {
    "func": "def weak_captcha():\n    return 'What is 2+2?'",
    "target": "Use strong CAPTCHA systems to prevent automated attacks."
  },
  {
    "func": "def insufficient_api_security():\n    return api_call()",
    "target": "Implement API authentication and rate limiting to secure endpoints."
  },
  {
    "func": "def insecure_data_validation(data):\n    if data['role'] == 'admin':\n        return 'Access granted'\n    return 'Access denied'",
    "target": "Validate and sanitize user input to prevent injection attacks."
  },
  {
    "func": "def missing_csrf_protection():\n    return render_template('form.html')",
    "target": "Add CSRF tokens to protect against cross-site request forgery attacks."
  },
  {
    "func": "def duplicate_code():\n    x = 10\n    y = 20\n    z = x + y\n    a = 10\n    b = 20\n    c = a + b\n    return z, c",
    "target": "Avoid duplicate code by refactoring common logic into reusable functions."
  },
  {
    "func": "def empty_if_block():\n    if condition:\n        pass",
    "target": "Avoid empty if statements. Add logic or remove unnecessary code."
  },
  {
    "func": "def commented_out_code():\n    # print('Debugging output')\n    return 42",
    "target": "Remove commented-out code to keep the codebase clean."
  },
  {
    "func": "def constant_mutation():\n    PI = 3.14\n    PI = 3.14159\n    return PI",
    "target": "Avoid reassigning constants. Define them as immutable."
  },
  {
    "func": "def unused_function():\n    def helper():\n        pass\n    return True",
    "target": "Remove unused functions to reduce code complexity."
  },
  {
    "func": "def catch_generic_exception():\n    try:\n        risky_operation()\n    except Exception:\n        handle_error()",
    "target": "Avoid catching generic exceptions. Catch specific exceptions instead."
  },
  {
    "func": "def hardcoded_file_path():\n    file_path = '/tmp/data.txt'\n    return file_path",
    "target": "Avoid hardcoding file paths. Use configuration files or environment variables."
  },
  {
    "func": "def large_class():\n    class LargeClass:\n        def __init__(self):\n            self.attr1 = None\n            self.attr2 = None\n            self.attr3 = None\n            # 50 more attributes\n    return LargeClass()",
    "target": "Avoid large classes. Refactor into smaller, cohesive classes."
  },
  {
    "func": "def excessive_parameters(a, b, c, d, e, f, g):\n    return a + b + c + d + e + f + g",
    "target": "Avoid excessive parameters in functions. Use data structures for grouping."
  },
  {
    "func": "def long_line_of_code():\n    result = [x for x in range(1000) if x % 2 == 0 and x > 100 and x < 900]",
    "target": "Avoid long lines of code. Break them into smaller, readable statements."
  },
  {
    "func": "def non_descriptive_variable_names():\n    a = 10\n    b = 20\n    return a + b",
    "target": "Use descriptive variable names to improve code readability."
  },
  {
    "func": "def deeply_nested_conditionals():\n    if a:\n        if b:\n            if c:\n                if d:\n                    if e:\n                        return True",
    "target": "Avoid deep nesting in conditionals (5 levels detected). Use guard clauses or early returns."
  },
  {
    "func": "def return_in_finally():\n    try:\n        return 1\n    finally:\n        return 2",
    "target": "Avoid return statements in finally blocks. It can lead to unexpected behavior."
  },
  {
    "func": "def use_of_print():\n    print('Debugging message')",
    "target": "Avoid using print statements in production code. Use a proper logging framework."
  },
  {
    "func": "def improper_collection_initialization():\n    list_var = list()\n    return list_var",
    "target": "Use direct initialization (e.g., []) for better performance and readability."
  },
  {
    "func": "def hardcoded_ip_address():\n    ip = '192.168.1.1'\n    return ip",
    "target": "Avoid hardcoding IP addresses. Use configuration files or constants."
  },
  {
    "func": "def unused_catch_variable():\n    try:\n        risky_operation()\n    except Exception as e:\n        pass",
    "target": "Use or remove unused exception variables to avoid confusion."
  },
  {
    "func": "def excessive_cyclomatic_complexity(a, b, c):\n    if a:\n        if b:\n            if c:\n                return True\n    return False",
    "target": "Reduce cyclomatic complexity by refactoring into simpler functions."
  },
  {
    "func": "def missing_default_case_in_switch(value):\n    match value:\n        case 1:\n            return 'One'\n        case 2:\n            return 'Two'",
    "target": "Add a default case in switch statements to handle unexpected values."
  },
  {
    "func": "def improper_exception_message():\n    raise ValueError",
    "target": "Provide meaningful messages in exceptions for easier debugging."
  },
  {
    "func": "def duplicate_import():\n    import os\n    import os",
    "target": "Avoid duplicate imports. They add unnecessary clutter."
  },
  {
    "func": "def redundant_boolean_comparison(value):\n    return value == True",
    "target": "Avoid redundant comparisons to True or False. Use the value directly."
  },
  {
    "func": "def improper_resource_cleanup():\n    file = open('data.txt', 'r')\n    return file.read()",
    "target": "Ensure proper resource cleanup using context managers."
  },
  {
    "func": "def mutable_default_argument(data=[]):\n    data.append(1)\n    return data",
    "target": "Avoid mutable default arguments. It can lead to unexpected behavior."
  },
  {
    "func": "def unused_return_value():\n    result = calculate()\n    return 42",
    "target": "Do not ignore or overwrite return values from function calls."
  },
  {
    "func": "def missing_type_annotations(a, b):\n    return a + b",
    "target": "Add type annotations for function arguments and return values."
  },
  {
    "func": "def large_return_tuple():\n    return 1, 2, 3, 4, 5, 6, 7, 8, 9, 10",
    "target": "Avoid large return tuples. Use data structures for better clarity."
  },
  {
    "func": "def unnecessary_else_after_return(value):\n    if value:\n        return True\n    else:\n        return False",
    "target": "Avoid unnecessary else blocks after return statements."
  },
  {
    "func": "def dead_code():\n    if False:\n        return 'This will never run'\n    return 'Hello, World!'",
    "target": "Remove unreachable (dead) code to maintain codebase cleanliness."
  },
  {
    "func": "def excessive_logging():\n    for i in range(1000):\n        print(f'Processing {i}')",
    "target": "Avoid excessive logging in loops to prevent performance issues."
  },
  {
    "func": "def ambiguous_condition(a, b):\n    if a == b:\n        return 'Equal'\n    elif a == 10:\n        return 'Ten'\n    elif a == b:\n        return 'Still Equal'\n    return 'Different'",
    "target": "Avoid ambiguous conditions with overlapping logic. Ensure all conditions are unique."
  },
  {
    "func": "def implicit_type_conversion(a, b):\n    return a + b",
    "target": "Avoid implicit type conversions. Use explicit casting for clarity."
  },
  {
    "func": "def magic_strings():\n    if user_input == 'admin':\n        return 'Admin access granted'",
    "target": "Avoid using magic strings. Use constants with meaningful names."
  },
  {
    "func": "def improper_error_escalation():\n    try:\n        risky_operation()\n    except ValueError:\n        raise Exception('Error occurred')",
    "target": "Preserve the original exception when escalating to retain debugging context."
  },
  {
    "func": "def inconsistent_indentation():\n    if True:\n      print('Inconsistent')",
    "target": "Ensure consistent indentation for better readability and maintainability."
  },
  {
    "func": "def ambiguous_function_name():\n    def func1():\n        return True\n    return func1()",
    "target": "Use descriptive function names to clarify their purpose."
  },
  {
    "func": "def unnecessary_singleton():\n    class Singleton:\n        _instance = None\n\n        @staticmethod\n        def instance():\n            if Singleton._instance is None:\n                Singleton._instance = Singleton()\n            return Singleton._instance\n\n    return Singleton.instance()",
    "target": "Avoid unnecessary singleton patterns unless absolutely required."
  },
  {
    "func": "def inefficient_list_search():\n    data = [1, 2, 3, 4, 5]\n    for item in data:\n        if item == 3:\n            return True",
    "target": "Use efficient search methods like `in` for list lookups."
  },
  {
    "func": "def outdated_library_usage():\n    import urllib2\n    response = urllib2.urlopen('http://example.com')\n    return response.read()",
    "target": "Avoid outdated libraries. Use modern alternatives like `requests`."
  },
  {
    "func": "def redundant_variable_assignment():\n    a = 5\n    b = a\n    return b",
    "target": "Avoid redundant variable assignments. Use variables only when necessary."
  },
  {
    "func": "def incomplete_docstring():\n    \"\"\"This function does something\"\"\"\n    return True",
    "target": "Provide detailed docstrings explaining parameters, return values, and functionality."
  },
  {
    "func": "def redundant_code_block():\n    if condition:\n        if condition:\n            return True",
    "target": "Simplify redundant nested conditions to improve readability."
  },
  {
    "func": "def implicit_context_dependency():\n    config = get_global_config()\n    return config.value",
    "target": "Avoid implicit context dependencies. Pass configuration explicitly."
  },
  {
    "func": "def inefficient_data_structure():\n    data = [1, 2, 3, 4, 5]\n    if 3 in data:\n        return True",
    "target": "Use appropriate data structures like sets for faster lookups."
  },
  {
    "func": "def inconsistent_test_logic():\n    if condition:\n        assert True\n    else:\n        assert False",
    "target": "Avoid redundant assertions. Use meaningful test cases."
  },
  {
    "func": "def missing_context_in_logging():\n    logger.info('Operation completed')",
    "target": "Include contextual information in log messages to aid debugging."
  },
  {
    "func": "def overcomplicated_boolean_expression():\n    if (a and not b) or (not a and b):\n        return True",
    "target": "Simplify boolean expressions for clarity."
  },
  {
    "func": "def unsafe_dynamic_import(module_name):\n    return __import__(module_name)",
    "target": "Avoid dynamic imports unless absolutely necessary. Validate input if used."
  },
  {
    "func": "def insecure_api_endpoint():\n    return 'http://api.example.com/data'",
    "target": "Avoid hardcoding insecure API endpoints. Use secure (HTTPS) connections."
  },
  {
    "func": "def duplicate_loop_logic():\n    for i in range(10):\n        print(i)\n    for i in range(10):\n        print(i)",
    "target": "Consolidate duplicate loop logic to reduce redundancy."
  },
  {
    "func": "def overuse_of_static_methods():\n    @staticmethod\n    def helper():\n        return True",
    "target": "Limit the use of static methods. Use instance methods for better design."
  },
  {
    "func": "def inefficient_string_concatenation():\n    result = ''\n    for i in range(1000):\n        result += str(i)",
    "target": "Use efficient string concatenation methods like `join()`."
  },
  {
    "func": "def undocumented_side_effects(a):\n    a.append(1)\n    return a",
    "target": "Document side effects in function docstrings to inform users."
  },
  {
    "func": "def improper_exception_silencing():\n    try:\n        risky_operation()\n    except Exception:\n        pass",
    "target": "Avoid silencing exceptions. Log them for debugging purposes."
  },
  {
    "func": "def no_exit_on_error():\n    try:\n        risky_operation()\n    except Exception as e:\n        logger.error(e)",
    "target": "Handle critical errors gracefully and exit when necessary."
  },
  {
    "func": "def untested_code_path():\n    if a == 10:\n        return 'Tested'\n    else:\n        return 'Untested'",
    "target": "Ensure all code paths are covered in tests."
  },
  {
    "func": "def inefficient_memory_usage():\n    data = [x for x in range(10**6)]\n    return sum(data)",
    "target": "Use generators or efficient memory usage techniques for large data."
  },
  {
    "func": "def implicit_dependency_on_global():\n    def inner():\n        return global_variable\n    return inner()",
    "target": "Avoid implicit dependencies on global variables. Pass them explicitly."
  },
  {
    "func": "def inappropriate_abstraction():\n    class OneMethod:\n        def method(self):\n            return True\n    return OneMethod()",
    "target": "Avoid unnecessary abstractions. Keep the design simple and direct."
  },
  {
    "func": "def inconsistent_data_format():\n    return {'id': 1, 'Name': 'John'}",
    "target": "Ensure consistent data format in structures for maintainability."
  },
  {
    "func": "def complex_method():\n    data = []\n    for i in range(10):\n        for j in range(10):\n            data.append((i, j))\n    return data",
    "target": "Break complex methods into smaller, reusable functions for better readability."
  },
  {
    "func": "def unclear_variable_names():\n    x = 10\n    y = 20\n    return x + y",
    "target": "Use descriptive variable names to improve code clarity."
  },
  {
    "func": "def unstructured_code():\n    if condition:\n        print('A')\n    else:\n        print('B')\n    print('Done')",
    "target": "Structure code into functions or methods to separate responsibilities."
  },
  {
    "func": "def unused_function():\n    def helper():\n        return True\n    return 42",
    "target": "Remove unused functions to reduce code clutter."
  },
  {
    "func": "def missing_docstring():\n    def calculate_sum(a, b):\n        return a + b",
    "target": "Provide a docstring to explain the purpose and parameters of the function."
  },
  {
    "func": "def inconsistent_spacing():\n    a=10\n    b = 20\n    return a+b",
    "target": "Ensure consistent spacing around operators for better readability."
  },
  {
    "func": "def overly_nested_conditions():\n    if condition1:\n        if condition2:\n            if condition3:\n                return True",
    "target": "Flatten nested conditions to improve readability."
  },
  {
    "func": "def long_line_of_code():\n    return 'This is a very long line of code that exceeds the recommended character limit for a single line in most coding standards.'",
    "target": "Break long lines into multiple lines for better readability."
  },
  {
    "func": "def improper_function_comments():\n    # Add two numbers\n    def add(a, b):\n        return a + b",
    "target": "Write comments that describe the purpose, not the implementation."
  },
  {
    "func": "def hard_to_understand_logic():\n    result = not (a and b) or (c and d)",
    "target": "Use parentheses and simplify complex logical expressions for clarity."
  },
  {
    "func": "def redundant_else():\n    if condition:\n        return True\n    else:\n        return False",
    "target": "Remove redundant `else` after `return` for simplicity."
  },
  {
    "func": "def inconsistent_function_order():\n    def helper():\n        return True\n\n    def main():\n        return helper()\n\n    return main()",
    "target": "Order functions logically, with main functions at the top or bottom."
  },
  {
    "func": "def overly_generic_names():\n    def process_data(data):\n        return data",
    "target": "Use specific names for functions and variables to improve understanding."
  },
  {
    "func": "def redundant_comments():\n    # This adds two numbers\n    return a + b",
    "target": "Avoid redundant comments that repeat the code."
  },
  {
    "func": "def inconsistent_casing():\n    variableName = 10\n    variable_name = 20\n    return variableName + variable_name",
    "target": "Follow consistent naming conventions throughout the codebase."
  },
  {
    "func": "def missing_type_annotations(a, b):\n    return a + b",
    "target": "Use type annotations for better code understanding and error checking."
  },
  {
    "func": "def repetitive_code():\n    print('Start')\n    print('Processing')\n    print('End')",
    "target": "Replace repetitive code with loops or helper functions."
  },
  {
    "func": "def hidden_side_effects():\n    global counter\n    counter += 1\n    return counter",
    "target": "Avoid hidden side effects. Make changes explicit."
  },
  {
    "func": "def unclear_return_values():\n    if condition:\n        return 1\n    else:\n        return 0",
    "target": "Use enums or constants to represent meaningful return values."
  },
  {
    "func": "def no_error_handling():\n    result = risky_operation()\n    return result",
    "target": "Add error handling to improve code robustness."
  },
  {
    "func": "def deep_hierarchy_class():\n    class A:\n        pass\n    class B(A):\n        pass\n    class C(B):\n        pass",
    "target": "Avoid deep inheritance hierarchies. Prefer composition over inheritance."
  },
  {
    "func": "def unnecessary_single_return_point():\n    if condition:\n        result = True\n    else:\n        result = False\n    return result",
    "target": "Simplify logic to reduce unnecessary return points."
  },
  {
    "func": "def missing_constants():\n    if value == 42:\n        return 'Answer'",
    "target": "Define constants for magic numbers to improve readability."
  },
  {
    "func": "def improper_file_structure():\n    def helper1():\n        return True\n\n    def helper2():\n        return False",
    "target": "Organize functions into appropriate files for maintainability."
  },
  {
    "func": "def overly_complex_parameters():\n    def process(data, config, env, context):\n        return True",
    "target": "Simplify parameters by grouping related items into objects or dictionaries."
  },
  {
    "func": "def large_if_else_chain():\n    if condition1:\n        return 'A'\n    elif condition2:\n        return 'B'\n    elif condition3:\n        return 'C'\n    else:\n        return 'D'",
    "target": "Replace long `if-else` chains with switch-case constructs or mapping."
  },
  {
    "func": "def inconsistent_loop_styles():\n    for i in range(10):\n        print(i)\n    j = 0\n    while j < 10:\n        print(j)\n        j += 1",
    "target": "Use consistent looping styles throughout the code."
  },
  {
    "func": "def ignored_todo():\n    # TODO: Refactor this function\n    pass",
    "target": "Address or remove TODO comments to keep the code clean."
  },
  {
    "func": "def duplicate_functionality():\n    def add(a, b):\n        return a + b\n    def sum(a, b):\n        return a + b",
    "target": "Consolidate duplicate functions into a single implementation."
  },
  {
    "func": "def mixed_indentation():\n    if condition:\n      print('Bad')\n        print('Indentation')",
    "target": "Use consistent indentation (spaces or tabs) throughout the code."
  },
  {
    "func": "def inconsistent_variable_names():\n    userName = 'John'\n    user_email = 'john@example.com'\n    return userName, user_email",
    "target": "Ensure consistent naming conventions (e.g., snake_case or camelCase)."
  },
  {
    "func": "def unhandled_exceptions():\n    result = risky_function()\n    return result",
    "target": "Add try-except blocks to handle potential exceptions."
  },
  {
    "func": "def commented_out_code():\n    # print('This is commented out')\n    return True",
    "target": "Remove commented-out code to reduce clutter."
  },
  {
    "func": "def large_class():\n    class User:\n        def login(self): pass\n        def logout(self): pass\n        def update_profile(self): pass\n        def delete_account(self): pass\n        def reset_password(self): pass",
    "target": "Split large classes into smaller, focused classes adhering to the Single Responsibility Principle."
  },
  {
    "func": "def hard_to_find_bug():\n    x = 0.1 + 0.2\n    if x == 0.3:\n        print('Equal')",
    "target": "Avoid floating-point equality checks; use a tolerance or rounding."
  },
  {
    "func": "def redundant_return():\n    if condition:\n        return True\n    return False",
    "target": "Simplify return statements by directly returning the condition."
  },
  {
    "func": "def excessive_comments():\n    # This function adds two numbers\n    # The parameters are a and b\n    # The result is their sum\n    return a + b",
    "target": "Avoid excessive comments. Focus on meaningful, concise explanations."
  },
  {
    "func": "def inconsistent_error_messages():\n    if condition1:\n        raise ValueError('Error 1')\n    if condition2:\n        raise Exception('Something went wrong')",
    "target": "Use consistent error messages and types for better debugging."
  },
  {
    "func": "def unused_constants():\n    PI = 3.14159\n    return 42",
    "target": "Remove unused constants or variables to avoid confusion."
  },
  {
    "func": "def overly_generic_exceptions():\n    try:\n        risky_operation()\n    except Exception:\n        pass",
    "target": "Catch specific exceptions instead of the generic `Exception`."
  },
  {
    "func": "def missing_default_case():\n    if x == 1:\n        return 'One'\n    elif x == 2:\n        return 'Two'",
    "target": "Add a default case to handle unexpected inputs."
  },
  {
    "func": "def deep_directory_structure():\n    path = '/a/very/long/and/deep/directory/structure'\n    return path",
    "target": "Avoid overly deep directory structures for better file management."
  },
  {
    "func": "def poor_parameter_order(a, default_value=None):\n    return a + default_value",
    "target": "Place default parameters after required ones to improve usability."
  },
  {
    "func": "def missing_readability_breaks():\n    for i in range(100):\n        if i % 2 == 0:\n            continue\n    return i",
    "target": "Add whitespace or breaks to improve readability in loops or logic."
  },
  {
    "func": "def inline_code_blocks():\n    x = 10; y = 20; z = x + y\n    return z",
    "target": "Avoid writing multiple statements on a single line."
  },
  {
    "func": "def insufficient_test_coverage():\n    def calculate(a, b):\n        return a + b\n    # No test cases provided",
    "target": "Ensure all functions have adequate test cases."
  },
  {
    "func": "def inconsistent_docstrings():\n    def add(a, b):\n        \"\"\"Add two numbers.\"\"\"\n        return a + b\n    def subtract(a, b):\n        # Subtract two numbers\n        return a - b",
    "target": "Follow a consistent format for docstrings, such as PEP-257."
  },
  {
    "func": "def too_many_arguments(a, b, c, d, e, f, g):\n    return a + b + c + d + e + f + g",
    "target": "Limit the number of arguments to improve readability and usability."
  },
  {
    "func": "def ambiguous_return_values():\n    if condition:\n        return 'Yes'\n    else:\n        return True",
    "target": "Ensure consistent and meaningful return types."
  },
  {
    "func": "def missing_logging():\n    try:\n        risky_operation()\n    except Exception:\n        pass",
    "target": "Add logging to capture details of errors and critical operations."
  },
  {
    "func": "def overly_complex_condition():\n    if (a and not b) or (c and not d and e):\n        return True",
    "target": "Simplify complex conditions for better readability."
  },
  {
    "func": "def unused_function_arguments(a, b):\n    return a",
    "target": "Remove unused function arguments to avoid confusion."
  },
  {
    "func": "def hidden_dependencies():\n    return os.getenv('API_KEY')",
    "target": "Avoid hidden dependencies. Pass required values explicitly."
  },
  {
    "func": "def inconsistent_file_naming():\n    import my_script\n    from MyScript import my_function",
    "target": "Use consistent file and module naming conventions."
  },
  {
    "func": "def function_does_too_much():\n    def process_data(data):\n        clean_data = clean(data)\n        save_data(clean_data)\n        return analyze_data(clean_data)",
    "target": "Limit functions to a single responsibility."
  },
  {
    "func": "def improper_use_of_constants():\n    GRAVITY = 9.8\n    gravity = 9.8\n    return GRAVITY, gravity",
    "target": "Define constants in a single place to avoid redundancy."
  },
  {
    "func": "def poorly_formatted_comments():\n    #This comment lacks space and formatting\n    return True",
    "target": "Format comments with proper spacing for readability."
  },
  {
    "func": "def unnecessary_mutable_defaults(data=[]):\n    data.append(1)\n    return data",
    "target": "Avoid mutable default arguments as they can lead to unexpected behavior."
  },
  {
    "func": "def overly_tightly_coupled_code():\n    def service_layer():\n        return data_layer()",
    "target": "Decouple layers in the application to improve testability and maintainability."
  },
  {
    "func": "def lack_of_consistent_encoding():\n    with open('file.txt', 'r') as file:\n        return file.read()",
    "target": "Specify file encoding to avoid cross-platform issues."
  },
  {
    "func": "def inconsistent_function_naming():\n    def add(a, b):\n        return a + b\n    def subtract(a, b):\n        return a - b",
    "target": "Use consistent function naming conventions for clarity."
  },
  {
    "func": "def improper_use_of_globals():\n    global counter\n    counter += 1\n    return counter",
    "target": "Avoid global variables. Pass values explicitly to functions."
  },
  {
    "func": "def missing_type_annotations(a, b):\n    return a + b",
    "target": "Add type annotations to function arguments and return values for better code clarity."
  },
  {
    "func": "def inefficient_search(lst, x):\n    for item in lst:\n        if item == x:\n            return True\n    return False",
    "target": "Use efficient search methods like `x in lst` for better performance."
  },
  {
    "func": "def non_standard_import():\n    from my_library import *\n    return function_call()",
    "target": "Avoid wildcard imports. Import only required functions or classes."
  },
  {
    "func": "def deeply_nested_conditions():\n    if a:\n        if b:\n            if c:\n                return True",
    "target": "Simplify deeply nested conditions using logical operators or separate functions."
  },
  {
    "func": "def ignoring_return_values():\n    my_list.append(5)\n    my_list.sort()\n    my_list.reverse()",
    "target": "Avoid ignoring return values of functions like `sorted()` that return new objects."
  },
  {
    "func": "def unnecessary_computation():\n    result = sum([x**2 for x in range(100)])\n    return result",
    "target": "Avoid unnecessary list comprehensions. Use generator expressions for better performance."
  },
  {
    "func": "def using_tabs_instead_of_spaces():\n\treturn True",
    "target": "Use spaces instead of tabs for consistent code formatting."
  },
  {
    "func": "def bad_indentation():\n    if condition:\n         return True",
    "target": "Fix inconsistent indentation to maintain readability."
  },
  {
    "func": "def unnecessary_else():\n    if condition:\n        return True\n    else:\n        return False",
    "target": "Remove unnecessary `else` after `return` for cleaner code."
  },
  {
    "func": "def redundant_conditionals():\n    if x == True:\n        return True",
    "target": "Avoid redundant conditionals. Use `if x:` instead of `if x == True:`."
  },
  {
    "func": "def non_lazy_loading():\n    data = load_all_data()\n    return process(data)",
    "target": "Implement lazy loading to optimize memory usage and improve performance."
  },
  {
    "func": "def insecure_os_call(command):\n    os.system(command)",
    "target": "Avoid using `os.system`. Use `subprocess.run` with argument splitting to prevent command injection."
  },
  {
    "func": "def logging_sensitive_information():\n    logging.info(f'Password: {password}')",
    "target": "Avoid logging sensitive information like passwords or API keys."
  },
  {
    "func": "def missing_function_docstring():\n    def calculate_area(radius):\n        return 3.14 * radius * radius",
    "target": "Add a docstring to describe the function's purpose and parameters."
  },
  {
    "func": "def redundant_variable():\n    temp = calculate()\n    return temp",
    "target": "Avoid redundant variables. Directly return the function result."
  },
  {
    "func": "def mutable_class_attributes():\n    class MyClass:\n        items = []",
    "target": "Avoid mutable default attributes in classes to prevent shared state issues."
  },
  {
    "func": "def inefficient_string_concatenation():\n    result = ''\n    for s in strings:\n        result += s",
    "target": "Use `.join()` for efficient string concatenation in loops."
  },
  {
    "func": "def forgetting_to_close_file():\n    file = open('data.txt', 'r')\n    data = file.read()\n    return data",
    "target": "Use a context manager (`with open(...)`) to ensure the file is properly closed."
  },
  {
    "func": "def lack_of_assertions():\n    def add(a, b):\n        return a + b",
    "target": "Add assertions in tests to validate expected behavior."
  },
  {
    "func": "def hard_coded_path():\n    path = '/home/user/data/file.txt'\n    return path",
    "target": "Avoid hardcoding paths. Use configuration files or environment variables."
  },
  {
    "func": "def multiple_returns():\n    if x > 0:\n        return 'Positive'\n    elif x < 0:\n        return 'Negative'\n    else:\n        return 'Zero'",
    "target": "Avoid multiple return statements in a single function for maintainability."
  },
  {
    "func": "def unstructured_code_block():\n    a = 10\n    b = 20\n    result = a + b\n    print(result)\n    return result",
    "target": "Group related code into functions for better modularity."
  },
  {
    "func": "def hard_coded_timeout():\n    time.sleep(30)",
    "target": "Avoid hardcoding timeouts. Make them configurable."
  },
  {
    "func": "def missing_default_in_switch_case():\n    match value:\n        case 1:\n            return 'One'\n        case 2:\n            return 'Two'",
    "target": "Add a default case in `match` or `switch` statements to handle unexpected values."
  },
  {
    "func": "def silent_failure():\n    try:\n        risky_function()\n    except Exception:\n        pass",
    "target": "Avoid silent failures. Log errors or provide meaningful messages."
  },
  {
    "func": "def ambiguous_variable_names():\n    x = 10\n    y = 20\n    return x + y",
    "target": "Use descriptive variable names for better code readability."
  },
  {
    "func": "def missing_unit_tests():\n    def multiply(a, b):\n        return a * b\n    # No test cases provided",
    "target": "Write unit tests for all critical functions."
  },
  {
    "func": "def dependent_on_environment():\n    result = os.getenv('SETTING')\n    return result",
    "target": "Provide fallback values for environment-dependent settings."
  },
  {
    "func": "def unused_variables():\n    result = calculate()\n    temp = 42\n    return result",
    "target": "Remove unused variables to reduce clutter."
  },
  {
    "func": "def large_import_blocks():\n    import os, sys, math, random, datetime, re\n    return None",
    "target": "Organize imports into logical sections and avoid unused ones."
  },
  {
    "func": "def no_comments():\n    return 42",
    "target": "Add comments to explain the purpose and functionality of the code."
  },
  {
    "func": "def inconsistent_initialization():\n    x = 10\n    y = 20\n    x = x + y\n    return x",
    "target": "Avoid initializing variables multiple times unnecessarily."
  },
  {
    "func": "class DeeplyNestedClass:\n    class InnerClass1:\n        class InnerClass2:\n            class InnerClass3:\n                pass",
    "target": "Avoid excessive class nesting. Refactor for better clarity."
  },
  {
    "func": "def improper_whitespace():\n    return   True",
    "target": "Ensure consistent whitespace for better readability."
  },
  {
    "func": "def inconsistent_argument_order(arg1, default_arg=None, arg2):\n    return arg1 + arg2",
    "target": "Place default arguments after required arguments for better usability."
  },
  {
    "func": "CONSTANT1 = 10\nCONSTANT2 = 20",
    "target": "Use meaningful and descriptive names for constants."
  },
  {
    "func": "import os, sys, random",
    "target": "Organize imports alphabetically and logically."
  },
  {
    "func": "def deeply_nested_classes():\n    class A:\n        class B:\n            class C:\n                class D:\n                    class E:\n                        def method(self):\n                            pass",
    "target": "Avoid deeply nested classes (5 levels detected). Consider breaking them into separate classes."
  },
  {
    "func": "def overloaded_function(x):\n    pass\n\ndef overloaded_function(x, y):\n    pass",
    "target": "Avoid excessive overloading of functions. Consolidate logic where possible."
  },
  {
    "func": "def complex_expression(x, y, z):\n    return x and y or not z",
    "target": "Use parentheses in complex logical expressions for clarity."
  },
  {
    "func": "def long_method_name_for_addition():\n    return a + b",
    "target": "Use concise and descriptive method names."
  },
  {
    "func": "def long_function():\n    # This function spans over 100 lines\n    pass",
    "target": "Refactor long functions into smaller, manageable units."
  },
  {
    "func": "try:\n    try:\n        pass\n    except:\n        pass\nexcept:\n    pass",
    "target": "Avoid deeply nested try-except blocks for better readability."
  },
  {
    "func": "def hardcoded_logic():\n    if user == 'admin':\n        return True",
    "target": "Replace hardcoded domain-specific logic with configurations."
  },
  {
    "func": "def missing_dependency_injection():\n    db = Database()\n    return db.query()",
    "target": "Use dependency injection instead of creating dependencies inside the function."
  },
  {
    "func": "def mixed_data_types():\n    data = [1, 'two', 3.0]\n    return data",
    "target": "Avoid mixing types within a single data structure."
  },
  {
    "func": "def insufficient_test_coverage():\n    def sum(a, b):\n        return a + b",
    "target": "Ensure unit tests cover all critical code paths."
  },
  {
    "func": "def tightly_coupled_logic():\n    if user.is_admin():\n        return db.get_all_users()",
    "target": "Separate business logic from data access for better maintainability."
  },
  {
    "func": "class Singleton:\n    _instance = None\n\n    def __new__(cls):\n        if not cls._instance:\n            cls._instance = super().__new__(cls)\n        return cls._instance",
    "target": "Avoid overusing singletons. Use other design patterns if possible."
  },
  {
    "func": "def hardcoded_key():\n    key = '123456'\n    return key",
    "target": "Avoid hardcoding keys or sensitive data in the code."
  },
  {
    "func": "def insecure_api_key():\n    headers = {'Authorization': 'Bearer 12345'}\n    return headers",
    "target": "Avoid embedding API keys directly in the code."
  },
  {
    "func": "def improper_session_timeout():\n    session.expiry = None",
    "target": "Set appropriate session timeout values."
  },
  {
    "func": "def unvalidated_json(data):\n    return data['key']",
    "target": "Validate JSON inputs against a schema."
  },
  {
    "func": "def vague_error_message():\n    try:\n        pass\n    except:\n        return 'Something went wrong'",
    "target": "Provide detailed error messages to aid debugging."
  },
  {
    "func": "def insecure_token_expiry(token):\n    return token.is_expired()",
    "target": "Ensure proper token expiry handling to prevent security risks."
  },
  {
    "func": "def unsigned_cookies():\n    response.set_cookie('session', '12345')",
    "target": "Sign and encrypt cookies for secure transmission."
  },
  {
    "func": "def lack_of_input_validation(data):\n    return data",
    "target": "Validate input data to meet required constraints."
  },
  {
    "func": "def outdated_protocol():\n    connection = ssl.SSLContext(ssl.PROTOCOL_TLSv1)",
    "target": "Avoid using outdated security protocols. Use modern alternatives like TLS 1.2 or 1.3."
  },
  {
    "func": "def nested_error_handling():\n    try:\n        try:\n            pass\n        except ValueError:\n            pass\n    except Exception:\n        pass",
    "target": "Flatten nested error-handling blocks for better readability."
  },
  {
    "func": "def large_switch_case(value):\n    match value:\n        case 1:\n            return 'One'\n        case 2:\n            return 'Two'\n        # 50 more cases",
    "target": "Replace large switch-case constructs with a mapping or dictionary."
  },
  {
    "func": "def unencrypted_data_transmission(data):\n    return requests.post('http://example.com', data=data)",
    "target": "Encrypt data during transmission to prevent eavesdropping."
  },
  {
    "func": "def insecure_hashing(password):\n    return hashlib.md5(password.encode()).hexdigest()",
    "target": "Use secure hashing algorithms like SHA-256 for password storage."
  },
  {
    "func": "def hardcoded_paths():\n    path = '/home/user/data'\n    return path",
    "target": "Avoid hardcoding file paths. Use relative paths or configuration files."
  },
  {
    "func": "def insecure_data_storage(data):\n    with open('data.txt', 'w') as file:\n        file.write(data)",
    "target": "Encrypt sensitive data before storing it in files or databases."
  },
  {
    "func": "def insecure_redirect(url):\n    return redirect(url)",
    "target": "Validate and sanitize redirect URLs to prevent open redirects."
  },
  {
    "func": "def insecure_file_upload(file):\n    with open('uploads/' + file.filename, 'wb') as f:\n        f.write(file.read())",
    "target": "Validate file uploads to prevent malicious file execution."
  },
  {
    "func": "def insecure_session_management(session):\n    session['authenticated'] = True",
    "target": "Use secure session management techniques to prevent session hijacking."
  },
  {
    "func": "def insecure_random_number_generation():\n    return random.randint(1, 100)",
    "target": "Use secure random number generators for cryptographic operations."
  },
  {
    "func": "def insecure_cross_origin_resource_sharing():\n    response.headers['Access-Control-Allow-Origin'] = '*'\n    return response",
    "target": "Use CORS headers to restrict cross-origin resource sharing."
  },
  {
    "func": "def insecure_authentication(password):\n    return password == 'admin'",
    "target": "Use secure authentication mechanisms like bcrypt or PBKDF2."
  },
  {
    "func": "def inconsistent_docstring_format():\n    \"\"\"This function does something.\"\"\"\n    return True",
    "target": "Follow a consistent docstring format, such as PEP-257."
  },
  {
    "func": "def overly_complex_loop():\n    for i in range(10):\n        for j in range(10):\n            if i * j % 2 == 0:\n                return i, j",
    "target": "Simplify complex loops for better readability."
  },
  {
    "func": "def improper_list_extension():\n    lst = [1, 2, 3]\n    lst = lst + [4, 5, 6]\n    return lst",
    "target": "Use `extend()` instead of `+` for list concatenation to optimize performance."
  },
  {
    "func": "def implicit_return_none():\n    def helper():\n        pass",
    "target": "Explicitly return `None` for clarity in functions with no return value."
  },
  {
    "func": "def too_many_return_points(x):\n    if x > 0:\n        return 'Positive'\n    if x < 0:\n        return 'Negative'\n    return 'Zero'",
    "target": "Limit the number of return points in a function to improve maintainability."
  },
  {
    "func": "def unnecessary_boolean_cast(x):\n    return bool(x == True)",
    "target": "Avoid unnecessary boolean casts; use the condition directly."
  },
  {
    "func": "def lack_of_version_control_comments():\n    # Fixed bug in sorting logic\n    return sorted(data)",
    "target": "Avoid including version control information in comments; use commit messages instead."
  },
  {
    "func": "def unused_class():\n    class Helper:\n        pass\n    return True",
    "target": "Remove unused classes to reduce code clutter."
  },
  {
    "func": "def ambiguous_operator_usage(a, b):\n    return a | b",
    "target": "Avoid ambiguous operators; clarify intent with comments or alternative code."
  },
  {
    "func": "def redundant_set_operation():\n    data = set([1, 2, 3])\n    return data",
    "target": "Use set literals instead of redundant `set()` calls for better readability."
  },
  {
    "func": "def missing_context_while_logging():\n    logger.info('Operation completed')",
    "target": "Include contextual information like user IDs or timestamps in log messages."
  },
  {
    "func": "def repeated_code_in_branches(x):\n    if x > 0:\n        return x + 1\n    else:\n        return x + 1",
    "target": "Refactor repeated code in branches into a single statement."
  },
  {
    "func": "def improper_usage_of_map():\n    return map(lambda x: x**2, [1, 2, 3])",
    "target": "Avoid using `map()` with lambdas; use list comprehensions instead."
  },
  {
    "func": "def multiple_statements_in_line():\n    a = 10; b = 20; c = a + b",
    "target": "Avoid writing multiple statements on the same line for better readability."
  },
  {
    "func": "def unnecessary_comprehension():\n    data = [x for x in range(10)]\n    return data",
    "target": "Avoid unnecessary comprehensions; use `list(range(10))` for clarity."
  },
  {
    "func": "def improper_variable_scope():\n    for i in range(10):\n        j = i\n    return j",
    "target": "Avoid relying on variables defined in a loop outside its scope."
  },
  {
    "func": "def missing_schema_for_database_query():\n    query = f\"SELECT * FROM users WHERE id = {user_id}\"\n    return query",
    "target": "Use database schemas to validate and enforce data constraints."
  },
  {
    "func": "def inefficient_dictionary_lookup():\n    for key in my_dict:\n        if key == 'target':\n            return my_dict[key]",
    "target": "Use `my_dict.get('target')` for efficient dictionary lookups."
  },
  {
    "func": "def mutable_keys_in_dict():\n    data = {{[1, 2]: 'value'}}",
    "target": "Avoid using mutable objects like lists as dictionary keys."
  },
  {
    "func": "def hardcoded_error_messages():\n    if not data:\n        return 'Error: Data is missing'",
    "target": "Use configurable or localized error messages for better flexibility."
  },
  {
    "func": "def incorrect_ternary_operator():\n    return x if x > 0 else x if x < 0 else 0",
    "target": "Simplify chained ternary operators for better readability."
  },
  {
    "func": "def global_mutable_state():\n    global data\n    data.append(1)\n    return data",
    "target": "Avoid modifying global mutable state to prevent side effects."
  },
  {
    "func": "def unnecessary_elif_chain():\n    if x == 1:\n        return 'One'\n    elif x == 2:\n        return 'Two'\n    elif x == 3:\n        return 'Three'\n    else:\n        return 'Other'",
    "target": "Replace long elif chains with a dictionary or match statement."
  },
  {
    "func": "def inefficient_data_conversion():\n    data = list(set(my_list))",
    "target": "Avoid unnecessary conversions between data structures."
  },
  {
    "func": "def lack_of_error_context():\n    try:\n        risky_operation()\n    except Exception:\n        raise ValueError('Operation failed')",
    "target": "Preserve original exception context when re-raising errors."
  },
  {
    "func": "def missing_default_in_dict_get():\n    return my_dict.get('key')",
    "target": "Provide a default value in `dict.get()` to avoid potential errors."
  },
  {
    "func": "def improper_date_format():\n    date = '2024-01-01'\n    return date",
    "target": "Use datetime objects instead of hardcoded date strings."
  },
  {
    "func": "def nested_function_definition():\n    def outer():\n        def inner():\n            return True\n        return inner()\n    return outer()",
    "target": "Avoid defining functions within other functions unless necessary."
  },
  {
    "func": "def long_lambda_expression():\n    func = lambda x: x**2 + 2*x + 1\n    return func(5)",
    "target": "Avoid overly complex lambda expressions; use named functions instead."
  },
  {
    "func": "def poorly_named_constants():\n    VALUE = 10\n    return VALUE",
    "target": "Use descriptive names for constants to improve readability."
  },
  {
    "func": "def missing_output_encoding(data):\n    return f'<div>{data}</div>'",
    "target": "Apply output encoding to prevent cross-site scripting (XSS) attacks."
  },
  {
    "func": "def improper_password_storage(password):\n    hashed = hashlib.md5(password.encode()).hexdigest()\n    return hashed",
    "target": "Avoid using weak hash functions like MD5 for password storage. Use bcrypt or Argon2 with salting."
  },
  {
    "func": "def insecure_file_upload(file):\n    file.save(f'/uploads/{file.filename}')",
    "target": "Validate file extensions and use a secure directory for uploads."
  },
  {
    "func": "def insecure_random_generator():\n    return random.randint(1, 100)",
    "target": "Avoid insecure random generators for sensitive operations. Use `secrets` or `os.urandom`."
  },
  {
    "func": "def weak_session_management():\n    session['user'] = 'admin'",
    "target": "Ensure session data is signed and encrypted to prevent tampering."
  },
  {
    "func": "def sql_injection_vulnerability(user_input):\n    query = f'SELECT * FROM users WHERE name = \"{user_input}\"'\n    return query",
    "target": "Prevent SQL injection by using parameterized queries."
  },
  {
    "func": "def command_injection_vulnerability(cmd):\n    os.system(cmd)",
    "target": "Validate and sanitize command inputs to prevent injection attacks."
  },
  {
    "func": "def csrf_vulnerable_form():\n    return '<form action=\"/submit\" method=\"POST\">...</form>'",
    "target": "Implement CSRF tokens in forms to protect against cross-site request forgery."
  },
  {
    "func": "def insecure_deserialization(data):\n    return pickle.loads(data)",
    "target": "Avoid using `pickle` for deserialization. Use safer alternatives like `json`."
  },
  {
    "func": "def sensitive_data_logging():\n    logging.info(f'Password: {password}')",
    "target": "Do not log sensitive information like passwords or API keys."
  },
  {
    "func": "def missing_authentication():\n    return perform_admin_action()",
    "target": "Implement authentication mechanisms to restrict access to sensitive actions."
  },
  {
    "func": "def missing_authorization(user):\n    return perform_sensitive_action(user)",
    "target": "Add authorization checks to ensure users have the proper permissions."
  },
  {
    "func": "def lack_of_rate_limiting():\n    for _ in range(1000):\n        send_request()",
    "target": "Implement rate limiting to prevent abuse and denial-of-service attacks."
  },
  {
    "func": "def insufficient_privilege_check():\n    perform_admin_action(user)",
    "target": "Verify user privileges before performing sensitive actions."
  },
  {
    "func": "def hardcoded_secret_key():\n    secret_key = 'hardcoded_secret'",
    "target": "Avoid hardcoding secret keys. Use environment variables or secure vaults."
  },
  {
    "func": "def improper_input_validation(user_input):\n    return user_input.lower()",
    "target": "Validate and sanitize all inputs to prevent injection and invalid data issues."
  },
  {
    "func": "def weak_jwt_signature():\n    jwt.encode(payload, 'weaksecret', algorithm='HS256')",
    "target": "Use strong secrets and secure algorithms for signing JWTs."
  },
  {
    "func": "def exposed_stack_trace():\n    try:\n        risky_operation()\n    except Exception as e:\n        return str(e)",
    "target": "Avoid exposing stack traces in error responses to prevent information leakage."
  },
  {
    "func": "def insecure_cors_policy():\n    response.headers['Access-Control-Allow-Origin'] = '*'",
    "target": "Restrict allowed origins in CORS policies to trusted domains."
  },
  {
    "func": "def missing_hsts_header():\n    return render_template('index.html')",
    "target": "Add HSTS headers to enforce secure communication over HTTPS."
  },
  {
    "func": "def weak_password_policy(password):\n    return len(password) > 6",
    "target": "Enforce strong password policies including minimum length, special characters, and case sensitivity."
  },
  {
    "func": "def hardcoded_api_key():\n    api_key = '12345-abcdef-67890'\n    return api_key",
    "target": "Avoid hardcoding API keys. Use secure storage or environment variables."
  },
  {
    "func": "def open_redirect_vulnerability(url):\n    return redirect(url)",
    "target": "Validate and sanitize user-provided URLs to prevent open redirects."
  },
  {
    "func": "def directory_traversal_vulnerability(file_path):\n    with open(file_path, 'r') as file:\n        return file.read()",
    "target": "Validate file paths to prevent directory traversal attacks."
  },
  {
    "func": "def insufficient_logging():\n    try:\n        risky_operation()\n    except:\n        pass",
    "target": "Log critical events and exceptions for effective monitoring and debugging."
  },
  {
    "func": "def missing_ssl_verification(url):\n    response = requests.get(url, verify=False)\n    return response",
    "target": "Always verify SSL certificates to ensure secure communication."
  },
  {
    "func": "def missing_encryption(data):\n    return data",
    "target": "Encrypt sensitive data at rest to protect it from unauthorized access."
  },
  {
    "func": "def vulnerable_jwt_decoding(jwt_token):\n    payload = jwt.decode(jwt_token, options={'verify_signature': False})\n    return payload",
    "target": "Always verify JWT signatures to ensure token authenticity."
  },
  {
    "func": "def weak_captcha():\n    return 'What is 2+2?'",
    "target": "Use robust CAPTCHA mechanisms to prevent automated attacks."
  },
  {
    "func": "def missing_input_size_validation(data):\n    return data['input']",
    "target": "Validate input size to prevent resource exhaustion attacks."
  },
  {
    "func": "def improper_resource_management():\n    file = open('data.txt', 'r')\n    data = file.read()\n    return data",
    "target": "Always close resources or use context managers to avoid resource leaks."
  },
  {
    "func": "def missing_error_handling():\n    data = open('file.txt').read()\n    return data",
    "target": "Add error handling for operations prone to failure."
  },
  {
    "func": "def excessive_try_except_blocks():\n    try:\n        a = 1 / 0\n    except ZeroDivisionError:\n        return 'Error'\n    try:\n        b = [1][2]\n    except IndexError:\n        return 'Error'",
    "target": "Consolidate related try-except blocks for better readability."
  },
  {
    "func": "def unsafe_user_input(user_input):\n    return eval(user_input)",
    "target": "Avoid using `eval`. Use safer alternatives for user input evaluation."
  },
  {
    "func": "def weak_password_check(password):\n    return len(password) > 5",
    "target": "Implement strong password policies including special characters and numbers."
  },
  {
    "func": "def missing_return_value():\n    if condition:\n        return True",
    "target": "Ensure all branches return a value to maintain function consistency."
  },
  {
    "func": "def inefficient_looping(data):\n    for i in range(len(data)):\n        print(data[i])",
    "target": "Use direct iteration over data instead of indexing."
  },
  {
    "func": "def insecure_subprocess_call(command):\n    subprocess.run(command, shell=True)",
    "target": "Avoid using `shell=True` in subprocess calls to prevent command injection."
  },
  {
    "func": "def improper_error_propagation():\n    try:\n        risky_operation()\n    except ValueError:\n        return 'An error occurred'",
    "target": "Re-raise or log exceptions to avoid suppressing important error details."
  },
  {
    "func": "def missing_data_validation(data):\n    process(data['input'])",
    "target": "Validate input data to ensure it meets expected formats and constraints."
  },
  {
    "func": "def lack_of_security_headers():\n    response = make_response('OK')\n    return response",
    "target": "Add security headers like `Content-Security-Policy` and `Strict-Transport-Security`."
  },
  {
    "func": "def excessive_parameters(a, b, c, d, e, f):\n    return a + b + c + d + e + f",
    "target": "Limit the number of parameters. Use objects or dictionaries for complex data."
  },
  {
    "func": "def redundant_code_path():\n    if x > 0:\n        return 'Positive'\n    if x > 0:\n        return 'Also Positive'",
    "target": "Remove redundant code paths to avoid confusion and improve maintainability."
  },
  {
    "func": "def empty_except_block():\n    try:\n        risky_operation()\n    except:\n        pass",
    "target": "Avoid empty except blocks. Log or handle the exception appropriately."
  },
  {
    "func": "def insecure_temp_file():\n    with open('/tmp/tempfile', 'w') as file:\n        file.write(data)",
    "target": "Use secure methods like `tempfile` for handling temporary files."
  },
  {
    "func": "def unused_import():\n    import math\n    return 42",
    "target": "Remove unused imports to clean up the codebase."
  },
  {
    "func": "def nested_ternary_operator(a, b):\n    return a if b else a if not b else b",
    "target": "Avoid nested ternary operators for better code readability."
  },
  {
    "func": "def hardcoded_port():\n    return connect_to_server('localhost', 8080)",
    "target": "Avoid hardcoding ports. Use configuration files or environment variables."
  },
  {
    "func": "def insecure_redirect(url):\n    return redirect(url)",
    "target": "Validate URLs to prevent open redirect vulnerabilities."
  },
  {
    "func": "def lack_of_type_checking(x):\n    return x + 1",
    "target": "Use type annotations and type checking to avoid runtime errors."
  },
  {
    "func": "def hardcoded_config():\n    db_config = {'host': 'localhost', 'port': 3306}",
    "target": "Avoid hardcoding configurations. Use environment variables or config files."
  },
  {
    "func": "def ambiguous_variable_names():\n    x = 10\n    y = 20\n    return x + y",
    "target": "Use descriptive variable names for better readability."
  },
  {
    "func": "def resource_not_closed():\n    file = open('data.txt', 'r')\n    return file.read()",
    "target": "Ensure resources like files or sockets are properly closed after use."
  },
  {
    "func": "def mutable_default_arg(data=[]):\n    data.append(1)\n    return data",
    "target": "Avoid mutable default arguments to prevent unexpected behavior."
  },
  {
    "func": "def insecure_data_storage(password):\n    stored_password = password",
    "target": "Encrypt sensitive data before storing it to protect against unauthorized access."
  },
  {
    "func": "def lack_of_logging_context():\n    logger.info('Task completed')",
    "target": "Include context such as user ID or task details in log messages."
  },
  {
    "func": "def missing_null_check(data):\n    return data['key']",
    "target": "Check for `None` or null values before accessing data."
  },
  {
    "func": "def weak_access_control():\n    if user.is_admin:\n        return 'Access granted'\n    return 'Access denied'",
    "target": "Implement role-based access control with detailed permission checks."
  },
  {
    "func": "def sql_query_string_concatenation(user_id):\n    query = 'SELECT * FROM users WHERE id = ' + str(user_id)\n    return query",
    "target": "Avoid string concatenation for SQL queries. Use prepared statements."
  },
  {
    "func": "def unescaped_html(data):\n    return f'<div>{data}</div>'",
    "target": "Escape HTML in user inputs to prevent XSS attacks."
  },
  {
    "func": "def duplicate_logic():\n    if x > 10:\n        return 'High'\n    if x > 10:\n        return 'High'",
    "target": "Avoid duplicating logic. Consolidate repeated conditions or code blocks."
  },
  {
    "func": "def unused_private_function():\n    def _helper():\n        pass\n    return 42",
    "target": "Remove unused private functions to reduce clutter."
  },
  {
    "func": "def hardcoded_ip_address():\n    ip = '192.168.1.1'\n    return ip",
    "target": "Avoid hardcoding IP addresses. Use configuration files or environment variables."
  },
  {
    "func": "def deeply_nested_try_except():\n    try:\n        try:\n            try:\n                try:\n                    try:\n                        risky_operation()\n                    except TypeError:\n                        handle_error()\n                except ValueError:\n                    handle_error()\n            except IOError:\n                handle_error()\n        except Exception:\n            handle_error()\n    except:\n        pass",
    "target": "Avoid deep nesting in try-except blocks (5 levels detected). Use separate functions for error handling."
  },
  {
    "func": "def complex_boolean_logic(a, b, c):\n    return (a and b) or (not a and not b and c)",
    "target": "Simplify complex boolean expressions for better readability."
  },
  {
    "func": "def avoid_sys_exit():\n    import sys\n    sys.exit(0)",
    "target": "Avoid using `sys.exit()` in libraries or modules."
  },
  {
    "func": "def magic_number_usage():\n    if value == 42:\n        return 'Answer'",
    "target": "Replace magic numbers with named constants."
  },
  {
    "func": "def unused_variable():\n    x = 10\n    return 20",
    "target": "Remove unused variables to improve code clarity."
  },
  {
    "func": "def avoid_hardcoded_values():\n    timeout = 5000\n    return timeout",
    "target": "Avoid hardcoding values. Use configuration parameters instead."
  },
  {
    "func": "def missing_default_case(value):\n    match value:\n        case 1:\n            return 'One'\n        case 2:\n            return 'Two'",
    "target": "Add a default case in match or switch statements to handle unexpected values."
  },
  {
    "func": "def missing_test_for_edge_case():\n    def divide(a, b):\n        return a / b",
    "target": "Ensure edge cases (e.g., division by zero) are tested."
  },
  {
    "func": "def potential_out_of_bounds(data):\n    return data[10]",
    "target": "Check bounds before accessing array or list elements."
  },
  {
    "func": "def inefficient_string_operations():\n    result = ''\n    for s in strings:\n        result += s",
    "target": "Use efficient methods like `''.join()` for string concatenation in loops."
  },
  {
    "func": "def avoid_large_method():\n    def long_method():\n        # Over 200 lines of code\n        pass",
    "target": "Break large methods into smaller, modular functions."
  },
  {
    "func": "def unused_return_value():\n    result = process_data()\n    return 42",
    "target": "Avoid ignoring or overwriting return values from function calls."
  },
  {
    "func": "def missing_null_check():\n    def process(data):\n        return data.value",
    "target": "Add null or None checks before accessing attributes."
  },
  {
    "func": "def unused_imports():\n    import math\n    return 42",
    "target": "Remove unused imports to reduce code clutter."
  },
  {
    "func": "def unsafe_iterator_modification():\n    for item in my_list:\n        my_list.remove(item)",
    "target": "Avoid modifying a collection while iterating over it."
  },
  {
    "func": "def redundant_parentheses():\n    return (x + y)",
    "target": "Remove redundant parentheses for cleaner code."
  },
  {
    "func": "def avoid_deprecated_function():\n    return cgi.escape('<html>')",
    "target": "Avoid using deprecated functions. Use their modern replacements."
  },
  {
    "func": "def inconsistent_naming():\n    def calculateSum():\n        return 42",
    "target": "Use consistent naming conventions like snake_case for function names."
  },
  {
    "func": "def avoid_redundant_else():\n    if condition:\n        return True\n    else:\n        return False",
    "target": "Avoid redundant `else` blocks after return statements."
  },
  {
    "func": "def insecure_temp_file_handling():\n    file = open('/tmp/tempfile', 'w')",
    "target": "Use secure libraries like `tempfile` for handling temporary files."
  },
  {
    "func": "def avoid_duplicate_import():\n    import os\n    import os",
    "target": "Remove duplicate imports to improve maintainability."
  },
  {
    "func": "def use_of_excessive_comments():\n    # This line adds two numbers\n    return a + b",
    "target": "Avoid excessive comments. Ensure code is self-explanatory."
  },
  {
    "func": "def improper_exception_rethrow():\n    try:\n        risky_operation()\n    except Exception:\n        raise",
    "target": "Preserve the original exception context when rethrowing."
  },
  {
    "func": "def avoid_global_variables():\n    global counter\n    counter += 1",
    "target": "Avoid using global variables. Use function parameters or class attributes instead."
  },
  {
    "func": "def unnecessary_conversion():\n    value = int(str(42))\n    return value",
    "target": "Avoid unnecessary data type conversions for better performance."
  },
  {
    "func": "def missing_finally_block():\n    try:\n        risky_operation()\n    except Exception:\n        log_error()",
    "target": "Use a `finally` block to ensure cleanup logic is always executed."
  },
  {
    "func": "def avoid_overly_generic_exceptions():\n    try:\n        risky_operation()\n    except Exception:\n        log_error()",
    "target": "Catch specific exceptions instead of the generic `Exception`."
  },
  {
    "func": "def unused_private_variable():\n    _temp = 42\n    return True",
    "target": "Remove unused private variables to reduce code clutter."
  },
  {
    "func": "def redundant_boolean_check():\n    if x == True:\n        return True",
    "target": "Avoid redundant boolean comparisons. Use `if x:` instead."
  },
  {
    "func": "def long_chained_calls():\n    return obj.method1().method2().method3().method4()",
    "target": "Avoid long chains of method calls. Break into intermediate variables for clarity."
  },
  {
    "func": "def overly_generic_parameter(data):\n    return data.process()",
    "target": "Avoid overly generic parameters. Use specific types or interfaces."
  },
  {
    "func": "def missing_close_in_file_handling():\n    file = open('data.txt', 'r')\n    data = file.read()\n    return data",
    "target": "Ensure files are closed properly. Use context managers for safety."
  },
  {
    "func": "def inconsistent_indentation():\n    if True:\n      print('Inconsistent')",
    "target": "Use consistent indentation to improve readability."
  },
  {
    "func": "def avoid_large_return_tuples():\n    return (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)",
    "target": "Avoid large tuples. Use named tuples or classes for better readability."
  },
  {
    "func": "def overly_complex_function():\n    def process_data(a, b, c, d, e, f):\n        return a + b + c + d + e + f",
    "target": "Reduce function complexity by splitting into smaller functions."
  },
  {
    "func": "def duplicate_code_in_branches():\n    if condition:\n        x = 10\n    else:\n        x = 10\n    return x",
    "target": "Refactor duplicated code in branches into a single statement."
  },
  {
    "func": "def inefficient_data_structure_for_lookup():\n    data = [1, 2, 3, 4]\n    if 3 in data:\n        return True",
    "target": "Use sets for faster lookups instead of lists."
  },
  {
    "func": "def ambiguous_exception_message():\n    raise ValueError('Something went wrong')",
    "target": "Provide clear and meaningful exception messages."
  },
  {
    "func": "def unused_loop_variable():\n    for i in range(10):\n        pass",
    "target": "Use `_` for loop variables that are intentionally unused."
  },
  {
    "func": "def excessive_class_attributes():\n    class User:\n        attr1 = None\n        attr2 = None\n        attr3 = None\n        attr4 = None",
    "target": "Avoid excessive class attributes. Group related attributes into smaller classes."
  },
  {
    "func": "def inconsistent_spacing():\n    a=10\n    b = 20\n    return a+b",
    "target": "Use consistent spacing around operators for better readability."
  },
  {
    "func": "def inefficient_sorting_algorithm(data):\n    for i in range(len(data)):\n        for j in range(i + 1, len(data)):\n            if data[i] > data[j]:\n                data[i], data[j] = data[j], data[i]",
    "target": "Use built-in sorting methods like `sorted()` or `list.sort()` for efficiency."
  },
  {
    "func": "def nested_loops_with_high_complexity():\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                print(i, j, k)",
    "target": "Refactor deeply nested loops into separate functions or reduce nesting."
  },
  {
    "func": "def hardcoded_error_message():\n    if not data:\n        raise ValueError('Error')",
    "target": "Use configurable or parameterized error messages for flexibility."
  },
  {
    "func": "def function_too_many_lines():\n    def long_function():\n        # Over 100 lines of code\n        pass",
    "target": "Refactor long functions into smaller, more manageable functions."
  },
  {
    "func": "def mutable_class_variable():\n    class MyClass:\n        items = []",
    "target": "Avoid mutable default attributes in classes to prevent unexpected behavior."
  },
  {
    "func": "def ambiguous_condition():\n    if a == b:\n        return 'Equal'\n    elif a == 10:\n        return 'Ten'\n    elif a == b:\n        return 'Still Equal'",
    "target": "Avoid overlapping or ambiguous conditions in conditional statements."
  },
  {
    "func": "def implicit_fallback_behavior(data):\n    return data.get('key')",
    "target": "Provide explicit fallback values for dictionary lookups."
  },
  {
    "func": "def unused_function_argument(a, b):\n    return a",
    "target": "Remove unused function arguments to avoid confusion."
  },
  {
    "func": "def mixed_loop_styles():\n    for i in range(10):\n        print(i)\n    j = 0\n    while j < 10:\n        print(j)\n        j += 1",
    "target": "Use consistent looping styles for better readability."
  },
  {
    "func": "def excessive_inline_comments():\n    x = 10  # This is a number\n    y = 20  # Another number\n    return x + y",
    "target": "Avoid excessive inline comments. Ensure comments add meaningful context."
  },
  {
    "func": "def excessive_repetition_in_code():\n    print('Processing Step 1')\n    print('Processing Step 2')\n    print('Processing Step 3')",
    "target": "Refactor repeated code into reusable functions or loops."
  },
  {
    "func": "def missing_enumerate_in_loops():\n    for i in range(len(data)):\n        print(i, data[i])",
    "target": "Use `enumerate()` for better readability when looping with indices."
  },
  {
    "func": "def inefficient_use_of_comprehension():\n    data = [x for x in range(10)]\n    return data",
    "target": "Avoid unnecessary comprehensions. Use `list(range(10))` for clarity."
  },
  {
    "func": "def improper_function_placement():\n    def helper_function():\n        pass\n\n    def main_function():\n        helper_function()",
    "target": "Order functions logically with main functions at the top or bottom."
  },
  {
    "func": "def overuse_of_static_methods():\n    @staticmethod\n    def process():\n        return True",
    "target": "Limit the use of static methods. Use instance methods for better design."
  },
  {
    "func": "def inconsistent_variable_naming():\n    x = 10\n    y = 20\n    return x + y",
    "target": "Use consistent variable naming conventions for better code readability."
  },
  {
    "func": "def excessive_function_parameters():\n    def process(a, b, c, d, e, f):\n        return a + b + c + d + e + f",
    "target": "Limit the number of function parameters. Use objects or dictionaries for complex data."
  },
  {
    "func": "def unnecessary_list_comprehension():\n    data = [x for x in range(10)]\n    return data",
    "target": "Avoid unnecessary list comprehensions. Use `list(range(10))` for clarity."
  },
  {
    "func": "def inconsistent_function_naming():\n    def calculateSum():\n        return 42",
    "target": "Use consistent function naming conventions like snake_case."
  },
  {
    "func": "def excessive_function_length():\n    def long_function():\n        # Over 100 lines of code\n        pass",
    "target": "Refactor long functions into smaller, more manageable functions."
  },
  {
    "func": "def inconsistent_spacing_around_operators():\n    a=10\n    b = 20\n    return a+b",
    "target": "Use consistent spacing around operators for better code readability."
  },
  {
    "func": "def improper_use_of_try_finally():\n    try:\n        risky_operation()\n    finally:\n        cleanup()",
    "target": "Ensure exceptions are caught and logged in `try-finally` blocks."
  },
  {
    "func": "def overcomplicated_default_values(data=None):\n    if data is None:\n        data = []\n    return data",
    "target": "Use default immutable arguments directly, like `data=None`."
  },
  {
    "func": "def ambiguous_code_with_nested_loops():\n    for i in range(10):\n        for j in range(10):\n            if i * j > 10:\n                return i",
    "target": "Avoid ambiguous nested loops by refactoring into functions with descriptive names."
  },
  {
    "func": "def unrelated_function_logic():\n    def send_email():\n        return calculate_sum(1, 2)",
    "target": "Keep function logic focused on a single responsibility."
  },
  {
    "func": "def silent_ignore_of_os_errors():\n    try:\n        os.remove('file.txt')\n    except OSError:\n        pass",
    "target": "Log OS errors even if they are ignored to trace potential issues."
  },
  {
    "func": "def inefficient_use_of_memory():\n    data = [x**2 for x in range(10**6)]\n    return sum(data)",
    "target": "Use generator expressions to avoid excessive memory usage."
  },
  {
    "func": "def unnecessary_early_return():\n    if condition:\n        return True\n    return False",
    "target": "Combine early returns to simplify code."
  },
  {
    "func": "def improper_function_chaining():\n    return method1().method2().method3()",
    "target": "Break function chains into intermediate steps for clarity."
  },
  {
    "func": "def large_unstructured_code_block():\n    # 100 lines of unstructured code\n    return True",
    "target": "Break large, unstructured code blocks into smaller functions."
  },
  {
    "func": "def improper_use_of_constants_in_code():\n    GRAVITY = 9.8\n    return 9.8 * mass",
    "target": "Use constants consistently across the codebase to avoid magic numbers."
  },
  {
    "func": "def ambiguous_type_handling(data):\n    if isinstance(data, int):\n        return data * 2\n    return str(data)",
    "target": "Avoid ambiguous type handling. Enforce strict type checks."
  },
  {
    "func": "def overuse_of_helper_functions():\n    def helper1():\n        pass\n    def helper2():\n        pass",
    "target": "Avoid excessive helper functions. Group related logic into meaningful units."
  },
  {
    "func": "def misused_inheritance():\n    class A:\n        pass\n    class B(A):\n        pass",
    "target": "Avoid inheritance when composition can achieve better flexibility."
  },
  {
    "func": "def unused_parameters_in_functions(a, b):\n    return a",
    "target": "Remove unused parameters to make function definitions clearer."
  },
  {
    "func": "def repeated_hardcoded_logic():\n    if user.role == 'admin':\n        return 'Admin Access'\n    if user.role == 'admin':\n        return 'Admin Access'",
    "target": "Refactor repeated logic into reusable functions."
  },
  {
    "func": "def missing_boundary_checks(x):\n    return array[x]",
    "target": "Add boundary checks for array and list access to prevent IndexErrors."
  },
  {
    "func": "def hidden_dependency_in_code():\n    return external_service.get_data()",
    "target": "Avoid hidden dependencies. Pass dependencies explicitly."
  },
  {
    "func": "def excessive_lambda_usage():\n    result = lambda x: x + 1\n    return result(5)",
    "target": "Avoid excessive use of lambda functions. Use named functions for clarity."
  },
  {
    "func": "def non_standard_iteration():\n    for index in range(0, len(data)):\n        item = data[index]\n        process(item)",
    "target": "Use direct iteration over lists for better readability."
  },
  {
    "func": "def misconfigured_logging():\n    logging.debug('Important message')",
    "target": "Use appropriate logging levels based on the importance of the message."
  },
  {
    "func": "def unsafe_dictionary_update():\n    data.update({'key': 'value'})",
    "target": "Validate inputs before updating dictionaries to prevent overwriting critical keys."
  },
  {
    "func": "def hardcoded_debug_mode():\n    DEBUG = True\n    if DEBUG:\n        print('Debugging enabled')",
    "target": "Avoid hardcoding debug modes. Use configuration management instead."
  },
  {
    "func": "def improper_resource_synchronization():\n    shared_resource += 1",
    "target": "Use synchronization primitives like locks to prevent race conditions."
  },
  {
    "func": "def inconsistent_return_style():\n    if x:\n        return True\n    return",
    "target": "Ensure consistent return styles across all code paths."
  },
  {
    "func": "def poorly_named_temp_variable():\n    tmp = 42\n    return tmp",
    "target": "Use meaningful variable names instead of temporary placeholders."
  },
  {
    "func": "def insufficient_security_in_headers():\n    response.headers['X-Powered-By'] = 'Flask'",
    "target": "Remove sensitive information from headers to avoid exposing technology stack."
  },
  {
    "func": "def redundant_code_block():\n    if condition:\n        return True\n    else:\n        return False",
    "target": "Simplify redundant `if-else` structures for cleaner code."
  },
  {
    "func": "def misleading_variable_scope():\n    for i in range(10):\n        j = i\n    return j",
    "target": "Avoid using variables defined in a loop outside their intended scope."
  },
  {
    "func": "def insufficient_event_logging():\n    if error:\n        handle_error()",
    "target": "Log critical events like errors or unexpected behavior for monitoring."
  },
  {
    "func": "def overuse_of_exception_catching():\n    try:\n        risky_operation()\n    except Exception as e:\n        return 'Error occurred'",
    "target": "Avoid catching generic exceptions unnecessarily. Catch specific exceptions."
  },
  {
    "func": "def repeated_literal_in_code():\n    if status == 200:\n        return 'OK'\n    elif status == 404:\n        return 'Not Found'",
    "target": "Replace repeated literals with named constants for clarity and maintainability."
  },
  {
    "func": "def inefficient_exception_handling():\n    try:\n        data = risky_function()\n    except Exception:\n        return None",
    "target": "Handle specific exceptions instead of catching all exceptions."
  },
  {
    "func": "def unnecessary_complexity_in_loops():\n    for i in range(len(data)):\n        for j in range(i, len(data)):\n            process(data[i], data[j])",
    "target": "Avoid nested loops where performance can be improved with optimized algorithms."
  },
  {
    "func": "def redundant_return_statement():\n    if x > 0:\n        return True\n    else:\n        return False",
    "target": "Simplify redundant return statements by directly returning the condition."
  },
  {
    "func": "def unsafe_string_formatting(user_input):\n    return 'Hello, {}'.format(user_input)",
    "target": "Sanitize user input in string formatting to avoid injection vulnerabilities."
  },
  {
    "func": "def inconsistent_variable_casing():\n    userName = 'John'\n    user_email = 'john@example.com'",
    "target": "Follow consistent naming conventions like snake_case for variables."
  },
  {
    "func": "def repeated_code_block():\n    if condition1:\n        do_something()\n    if condition2:\n        do_something()",
    "target": "Refactor repeated code blocks into reusable functions."
  },
  {
    "func": "def missing_logging_context():\n    logger.info('Task completed')",
    "target": "Add context (e.g., task ID or user ID) to log messages for debugging."
  },
  {
    "func": "def improper_variable_initialization():\n    value = None\n    if condition:\n        value = 10\n    return value",
    "target": "Avoid partial initialization of variables. Provide default values where possible."
  },
  {
    "func": "def missing_test_case_for_edge_condition():\n    def divide(a, b):\n        return a / b",
    "target": "Ensure edge conditions (e.g., division by zero) are tested."
  },
  {
    "func": "def unused_class():\n    class Helper:\n        pass",
    "target": "Remove unused classes to reduce code clutter."
  },
  {
    "func": "def overuse_of_boolean_flags():\n    def calculate(is_active):\n        if is_active:\n            return process_active()\n        return process_inactive()",
    "target": "Avoid excessive use of boolean flags. Use meaningful parameter names or enums."
  },
  {
    "func": "def ambiguous_function_name():\n    def handle_data():\n        return True",
    "target": "Use descriptive function names to clearly define their purpose."
  },
  {
    "func": "def hardcoded_file_extension():\n    file_name = 'report.txt'\n    return file_name",
    "target": "Avoid hardcoding file extensions. Use configuration files or constants."
  },
  {
    "func": "def inefficient_string_search():\n    if string.find('keyword') != -1:\n        return True",
    "target": "Use `in` instead of `find()` for string searches for better readability."
  },
  {
    "func": "def poorly_named_function():\n    def func1():\n        return True",
    "target": "Use descriptive function names that convey the action or purpose."
  },
  {
    "func": "def missing_type_annotations():\n    def add(a, b):\n        return a + b",
    "target": "Add type annotations to function arguments and return values for clarity."
  },
  {
    "func": "def inefficient_use_of_collections():\n    data = []\n    for x in range(10):\n        data.append(x)",
    "target": "Use list comprehensions for concise and efficient code."
  },
  {
    "func": "def unsafe_file_permission():\n    os.chmod('file.txt', 0o777)",
    "target": "Avoid overly permissive file permissions. Use the principle of least privilege."
  },
  {
    "func": "def unused_loop_variable():\n    for i in range(10):\n        pass",
    "target": "Use `_` for loop variables that are intentionally unused."
  },
  {
    "func": "def unnecessary_list_conversion():\n    data = list([1, 2, 3])",
    "target": "Avoid unnecessary conversions to improve performance and readability."
  },
  {
    "func": "def insecure_data_storage():\n    stored_password = password",
    "target": "Encrypt sensitive data before storing it to protect against unauthorized access."
  },
  {
    "func": "def redundant_condition_check():\n    if x > 10 and x > 5:\n        return True",
    "target": "Simplify conditions by removing redundant checks."
  },
  {
    "func": "def misaligned_function_comments():\n    # This function adds two numbers\n    def add(a, b):\n        return a + b",
    "target": "Align comments with the function they describe for better readability."
  },
  {
    "func": "def unnecessary_mutable_argument(data=[]):\n    data.append(1)\n    return data",
    "target": "Avoid mutable default arguments to prevent unexpected behavior."
  },
  {
    "func": "def hardcoded_error_code():\n    return {'status': 500, 'message': 'Internal Error'}",
    "target": "Replace hardcoded error codes with enumerations or constants."
  },
  {
    "func": "def ambiguous_return_value():\n    if condition:\n        return 'Success'\n    return 1",
    "target": "Use consistent return types to avoid confusion."
  },
  {
    "func": "def unused_catch_variable():\n    try:\n        risky_function()\n    except Exception as e:\n        pass",
    "target": "Use or remove unused exception variables for clarity."
  },
  {
    "func": "def excessive_class_responsibility():\n    class User:\n        def login(self): pass\n        def logout(self): pass\n        def reset_password(self): pass\n        def update_profile(self): pass",
    "target": "Follow the Single Responsibility Principle. Break large classes into smaller, focused ones."
  },
  {
    "func": "def long_chain_of_ifs():\n    if condition1:\n        return 'A'\n    elif condition2:\n        return 'B'\n    elif condition3:\n        return 'C'",
    "target": "Replace long `if-elif` chains with a mapping or dictionary."
  },
  {
    "func": "def missing_parentheses():\n    print 'Hello World'",
    "target": "Add parentheses to function calls to adhere to modern Python syntax."
  },
  {
    "func": "def inefficient_loop():\n    for i in range(len(my_list)):\n        print(my_list[i])",
    "target": "Use `for item in my_list` instead of indexing for cleaner and faster iteration."
  },
  {
    "func": "def nested_try_blocks():\n    try:\n        try:\n            risky_function()\n        except ValueError:\n            handle_value_error()\n    except Exception:\n        handle_general_error()",
    "target": "Avoid nested try blocks. Combine or refactor them for clarity."
  },
  {
    "func": "def missing_finally():\n    try:\n        file = open('data.txt', 'r')\n        data = file.read()\n    except Exception:\n        print('Error reading file')",
    "target": "Use a `finally` block to ensure resources like files are always closed."
  },
  {
    "func": "def hardcoded_colors():\n    color = '#FF5733'\n    return color",
    "target": "Avoid hardcoding colors. Use a configuration file or constants."
  },
  {
    "func": "def inefficient_key_check(dictionary, key):\n    if key in dictionary.keys():\n        return dictionary[key]",
    "target": "Use `if key in dictionary:` to check for keys more efficiently."
  },
  {
    "func": "def unnecessary_lambda():\n    func = lambda x: x * 2\n    return func(5)",
    "target": "Avoid unnecessary lambdas. Use a regular function instead."
  },
  {
    "func": "def inconsistent_indentation():\n    if x > 5:\n        print('x is large')\n       print('Check this line')",
    "target": "Fix inconsistent indentation to adhere to style guidelines."
  },
  {
    "func": "def global_state_dependency():\n    global x\n    x += 1\n    return x",
    "target": "Avoid using global variables to prevent unintended side effects."
  },
  {
    "func": "def unreachable_code_with_loops():\n    while True:\n        break\n        print('Unreachable')",
    "target": "Remove unreachable code to improve maintainability."
  },
  {
    "func": "def inefficient_data_structure():\n    my_dict = {}\n    my_dict['key1'] = 'value1'\n    return my_dict",
    "target": "Use dictionary literals `{}` for better readability and performance."
  },
  {
    "func": "def redundant_comparison():\n    if x != None:\n        return True",
    "target": "Use `if x is not None` instead of `x != None` for better clarity."
  },
  {
    "func": "def inefficient_split_join():\n    words = sentence.split(' ')\n    new_sentence = ' '.join(words)\n    return new_sentence",
    "target": "Avoid unnecessary `split` and `join`. Use the string as-is if unchanged."
  },
  {
    "func": "def exception_swallowing():\n    try:\n        risky_function()\n    except:\n        pass",
    "target": "Avoid swallowing exceptions. Log or handle them appropriately."
  },
  {
    "func": "def unused_default_parameters(a, b=10):\n    return a",
    "target": "Remove unused default parameters for clarity."
  },
  {
    "func": "def infinite_recursion():\n    def recurse():\n        return recurse()\n    return recurse()",
    "target": "Avoid infinite recursion. Add a base case to terminate the recursion."
  },
  {
    "func": "def hardcoded_urls():\n    url = 'http://example.com'\n    return url",
    "target": "Avoid hardcoding URLs. Use configuration or environment variables."
  },
  {
    "func": "def over_engineered_solution():\n    def add(a, b):\n        result = a + b\n        return result\n    return add(2, 3)",
    "target": "Avoid over-engineering. Simplify functions where possible."
  },
  {
    "func": "def mutable_default_argument(data=[]):\n    data.append(5)\n    return data",
    "target": "Avoid mutable default arguments to prevent unexpected behavior."
  },
  {
    "func": "def excessive_comments():\n    # This is a comment\n    # Another comment\n    # Yet another comment\n    result = 42  # Final comment\n    return result",
    "target": "Avoid excessive comments. Use clear code and concise documentation."
  },
  {
    "func": "def missing_context_manager():\n    file = open('data.txt', 'w')\n    file.write('Hello World')\n    file.close()",
    "target": "Use a context manager (`with open(...)`) to ensure proper resource handling."
  },
  {
    "func": "def inconsistent_variable_case():\n    userName = 'Alice'\n    UserName = 'Bob'\n    return userName",
    "target": "Follow consistent naming conventions for variables."
  },
  {
    "func": "def unnecessary_check():\n    if len(my_list) > 0:\n        print(my_list[0])",
    "target": "Avoid unnecessary checks. Use `if my_list:` instead of `if len(my_list) > 0`."
  },
  {
    "func": "def insecure_random():\n    import random\n    return random.randint(1, 10)",
    "target": "Use `secrets` module for secure random number generation in sensitive contexts."
  },
  {
    "func": "def unused_function():\n    def helper():\n        return 42\n    return 0",
    "target": "Remove unused functions to reduce clutter."
  },
  {
    "func": "def long_inline_expression():\n    result = (a + b) * c / (d - e) + (f * g) / h\n    return result",
    "target": "Break down long expressions into multiple lines for better readability."
  },
  {
    "func": "def magic_string_comparison():\n    if status == 'active':\n        return True",
    "target": "Avoid magic strings. Use named constants for better clarity."
  },
  {
    "func": "def redundant_pass():\n    def function():\n        pass",
    "target": "Avoid redundant `pass` in empty functions or blocks."
  },
  {
    "func": "def duplicate_code_segments():\n    def add(a, b):\n        return a + b\n    def sum(a, b):\n        return a + b",
    "target": "Refactor duplicate code segments into a single function."
  },
  {
    "func": "def large_classes():\n    class MyClass:\n        def method1(self): pass\n        def method2(self): pass\n        # 100 more methods\n    return MyClass",
    "target": "Break down large classes into smaller, more focused classes."
  },
  {
    "func": "def insecure_password_storage(password):\n    stored_password = password\n    return stored_password",
    "target": "Avoid storing passwords in plaintext. Use a secure hashing algorithm like bcrypt."
  },
  {
    "func": "def unnecessary_complexity(x):\n    if x % 2 == 0:\n        if x > 10:\n            return 'Even and greater than 10'\n    else:\n        return 'Other'",
    "target": "Simplify nested conditions for better readability and maintainability."
  },
  {
    "func": "def unused_class_variable():\n    class MyClass:\n        unused_var = 42\n        def method(self):\n            return 0",
    "target": "Remove unused class variables to reduce confusion and improve clarity."
  },
  {
    "func": "def hardcoded_http_url():\n    url = 'http://example.com'\n    return url",
    "target": "Use HTTPS instead of HTTP for secure communication."
  },
  {
    "func": "def missing_docstring():\n    def add(a, b):\n        return a + b",
    "target": "Add a docstring to describe the function’s purpose and behavior."
  },
  {
    "func": "def inconsistent_spacing():\n    a=10\n    b = 20\n    c= 30",
    "target": "Use consistent spacing around operators for better readability."
  },
  {
    "func": "def hardcoded_path():\n    path = '/usr/local/data.txt'\n    return path",
    "target": "Avoid hardcoding file paths. Use configuration files or environment variables."
  },
  {
    "func": "def unchecked_input(data):\n    return data.strip()",
    "target": "Validate and sanitize user inputs to prevent potential injection attacks."
  },
  {
    "func": "def inefficient_string_concat():\n    result = ''\n    for word in words:\n        result += word",
    "target": "Use `str.join` for efficient string concatenation in loops."
  },
  {
    "func": "def insecure_temp_file():\n    import tempfile\n    temp = tempfile.NamedTemporaryFile(delete=False)\n    return temp.name",
    "target": "Avoid creating insecure temporary files. Use `delete=True` or secure configurations."
  },
  {
    "func": "def missing_type_hints(a, b):\n    return a + b",
    "target": "Add type hints to improve code clarity and enable static analysis."
  },
  {
    "func": "def redundant_if_else(flag):\n    if flag:\n        return True\n    else:\n        return False",
    "target": "Simplify to `return flag` for better readability."
  },
  {
    "func": "def overcomplicated_expression(a, b, c):\n    return (a + b) - c if (a + b) > c else c - (a + b)",
    "target": "Refactor overcomplicated expressions for clarity."
  },
  {
    "func": "def insecure_command_execution(cmd):\n    import os\n    os.system(cmd)",
    "target": "Avoid using `os.system` for command execution. Use `subprocess` with proper sanitization."
  },
  {
    "func": "def missing_input_validation(age):\n    if age > 18:\n        return 'Adult'",
    "target": "Validate input types and ranges to ensure robustness."
  },
  {
    "func": "def inefficient_set_check(item):\n    if item in [1, 2, 3, 4, 5]:\n        return True",
    "target": "Use a set for faster membership checks."
  },
  {
    "func": "def open_socket_without_closing():\n    import socket\n    s = socket.socket()\n    s.connect(('example.com', 80))",
    "target": "Ensure sockets are closed properly or use a context manager."
  },
  {
    "func": "def mutable_key_in_dict():\n    my_dict = {{[1, 2]: 'value'}}\n    return my_dict",
    "target": "Avoid using mutable types like lists as dictionary keys."
  },
  {
    "func": "def too_many_return_statements(x):\n    if x == 1:\n        return 'One'\n    elif x == 2:\n        return 'Two'\n    else:\n        return 'Other'",
    "target": "Limit the number of return statements to improve code readability."
  },
  {
    "func": "def unused_parameter(a, b, c):\n    return a + b",
    "target": "Remove unused parameters to simplify the function signature."
  },
  {
    "func": "def weak_password_check(password):\n    if len(password) < 8:\n        return False\n    return True",
    "target": "Enhance password validation by checking for complexity, not just length."
  },
  {
    "func": "def empty_if_block():\n    if condition:\n        pass",
    "target": "Avoid empty code blocks. Add meaningful logic or remove the condition."
  },
  {
    "func": "def ambiguous_function_name():\n    def do_stuff():\n        return 42",
    "target": "Use descriptive function names to clarify intent."
  },
  {
    "func": "def inefficient_list_copy():\n    new_list = [item for item in old_list]\n    return new_list",
    "target": "Use `new_list = old_list.copy()` for a more efficient list copy."
  },
  {
    "func": "def insecure_file_permissions():\n    with open('data.txt', 'w') as file:\n        file.write('content')",
    "target": "Set secure file permissions when creating sensitive files."
  },
  {
    "func": "def redundant_variable_assignment():\n    x = 42\n    y = x\n    return y",
    "target": "Remove redundant variable assignments to simplify the code."
  },
  {
    "func": "def long_parameter_list(a, b, c, d, e, f, g, h, i):\n    return a + b + c",
    "target": "Break long parameter lists into smaller, grouped structures like classes or dictionaries."
  },
  {
    "func": "def duplicate_logic(x):\n    if x > 0:\n        return 'Positive'\n    elif x == 0:\n        return 'Zero'\n    elif x < 0:\n        return 'Negative'",
    "target": "Combine duplicate logic for cleaner and more efficient code."
  },
  {
    "func": "def insecure_deserialization(data):\n    import pickle\n    obj = pickle.loads(data)\n    return obj",
    "target": "Avoid insecure deserialization with `pickle`. Use safe alternatives like `json`."
  },
  {
    "func": "def unnecessary_try_finally():\n    try:\n        x = 10\n    finally:\n        print('Done')",
    "target": "Remove unnecessary `try-finally` blocks when there’s no exception handling required."
  },
  {
    "func": "def insecure_shell_command(user_input):\n    os.system(f'ping {user_input}')",
    "target": "Avoid using user input in shell commands. Sanitize input and use secure subprocess alternatives."
  },
  {
    "func": "def nested_ternary(a, b):\n    return 'Equal' if a == b else 'Greater' if a > b else 'Smaller'",
    "target": "Avoid nested ternary operators. Use a simple if-else block for clarity."
  },
  {
    "func": "def inefficient_list_comprehension():\n    result = [x*2 for x in range(1000000)]",
    "target": "Avoid creating large intermediate lists. Use a generator expression instead."
  },
  {
    "func": "def hardcoded_user_role():\n    user_role = 'admin'\n    return user_role",
    "target": "Avoid hardcoding roles. Use configuration files or constants."
  },
  {
    "func": "def empty_catch_block():\n    try:\n        risky_operation()\n    except Exception:\n        pass",
    "target": "Avoid empty exception blocks. Handle exceptions appropriately or log them."
  },
  {
    "func": "def insecure_random_number():\n    import random\n    return random.randint(1, 100)",
    "target": "Use a cryptographically secure random number generator like `secrets` for sensitive data."
  },
  {
    "func": "def redundant_code():\n    if x > 0:\n        return x\n    else:\n        return x",
    "target": "Remove redundant code paths to improve clarity."
  },
  {
    "func": "def missing_context_manager():\n    file = open('data.txt', 'r')\n    data = file.read()\n    file.close()\n    return data",
    "target": "Use a context manager (`with`) to ensure files are properly closed."
  },
  {
    "func": "def inconsistent_naming():\n    def myFunction():\n        return True",
    "target": "Use consistent naming conventions (e.g., snake_case for Python)."
  },
  {
    "func": "def missing_return(x):\n    if x > 0:\n        return 'Positive'",
    "target": "Ensure all code paths in a function have a return statement."
  },
  {
    "func": "def unhandled_unicode(data):\n    print(data.encode('ascii'))",
    "target": "Handle Unicode properly to avoid encoding errors."
  },
  {
    "func": "def redundant_import():\n    import math\n    import math\n    return math.pi",
    "target": "Remove duplicate imports to reduce clutter."
  },
  {
    "func": "def inefficient_sort():\n    items.sort(key=lambda x: x.lower())",
    "target": "Use `str.casefold()` instead of `lower()` for more accurate sorting."
  },
  {
    "func": "def redundant_boolean_comparison(x):\n    return x == True",
    "target": "Avoid redundant boolean comparisons. Simplify to `return x`."
  },
  {
    "func": "def unsafe_eval():\n    return eval('1 + 2')",
    "target": "Avoid `eval`. Use safer alternatives or explicit parsing."
  },
  {
    "func": "def over_engineered_code(a, b):\n    return sum([a, b])",
    "target": "Avoid over-engineering. Use `a + b` instead of `sum()` for two values."
  },
  {
    "func": "def unused_loop_variable():\n    for _ in range(5):\n        pass",
    "target": "Consider removing unused loops or adding meaningful logic."
  },
  {
    "func": "def mutable_default_args(x, y=[]):\n    y.append(x)\n    return y",
    "target": "Avoid mutable default arguments to prevent unexpected behavior."
  },
  {
    "func": "def insecure_file_permissions():\n    os.chmod('file.txt', 0o777)",
    "target": "Avoid setting overly permissive file permissions."
  },
  {
    "func": "def long_line_of_code():\n    result = x + y + z + a + b + c + d + e + f + g + h + i + j + k + l",
    "target": "Break long lines into multiple lines for better readability."
  },
  {
    "func": "def ambiguous_variable_name():\n    x = 42\n    return x",
    "target": "Use descriptive variable names to clarify their purpose."
  },
  {
    "func": "def unused_return_value():\n    data.sort()\n    return data",
    "target": "Be aware that `list.sort()` modifies the list in place and returns None."
  },
  {
    "func": "def missing_logging():\n    try:\n        risky_operation()\n    except Exception as e:\n        pass",
    "target": "Log exceptions for better debugging and traceability."
  },
  {
    "func": "def unoptimized_search(items, target):\n    for item in items:\n        if item == target:\n            return True\n    return False",
    "target": "Use `in` for membership checks on lists for simplicity and performance."
  },
  {
    "func": "def insecure_dependency_version():\n    install_package('some_package', version='1.0')",
    "target": "Avoid using outdated or insecure dependency versions."
  },
  {
    "func": "def improper_variable_scope():\n    if True:\n        temp = 42\n    return temp",
    "target": "Avoid relying on variables defined inside conditional blocks."
  },
  {
    "func": "def missing_constant_usage():\n    return 3.14159",
    "target": "Use named constants instead of magic numbers."
  },
  {
    "func": "def unnecessary_try_block():\n    try:\n        x = 42\n    except:\n        pass",
    "target": "Remove unnecessary try blocks where no exception is expected."
  },
  {
    "func": "def insecure_hardcoded_url():\n    url = 'http://api.example.com/v1/resource'\n    return url",
    "target": "Avoid hardcoding URLs. Use configuration files or environment variables."
  },
  {
    "func": "def poor_error_handling():\n    try:\n        risky_code()\n    except FileNotFoundError:\n        return 'File not found'\n    except Exception:\n        pass",
    "target": "Handle generic exceptions properly and avoid silent failures."
  },
  {
    "func": "def hardcoded_email():\n    email = 'admin@example.com'\n    return email",
    "target": "Avoid hardcoding sensitive data like emails. Use configuration files or environment variables."
  },
  {
    "func": "def redundant_if_statement(x):\n    if x:\n        return True\n    else:\n        return False",
    "target": "Simplify redundant if statements. Use `return x` for boolean values."
  },
  {
    "func": "def insecure_cookie_handling():\n    response.set_cookie('session', session_id)",
    "target": "Ensure cookies are set with secure attributes like `HttpOnly` and `Secure`."
  },
  {
    "func": "def unused_function():\n    def helper():\n        return 42\n    return True",
    "target": "Remove unused functions to reduce code clutter."
  },
  {
    "func": "def missing_docstring():\n    def add(a, b):\n        return a + b",
    "target": "Add docstrings to improve code readability and maintainability."
  },
  {
    "func": "def inefficient_string_concatenation():\n    result = ''\n    for word in words:\n        result += word",
    "target": "Avoid string concatenation in loops. Use `join()` for better performance."
  },
  {
    "func": "def exception_swallowing():\n    try:\n        risky_operation()\n    except KeyError:\n        return None",
    "target": "Avoid exception swallowing. Log errors or re-raise exceptions for debugging."
  },
  {
    "func": "def non_thread_safe_code():\n    global counter\n    counter += 1\n    return counter",
    "target": "Avoid non-thread-safe code. Use thread-safe constructs like `threading.Lock`."
  },
  {
    "func": "def improper_exit_handling():\n    import sys\n    sys.exit(1)",
    "target": "Avoid using `sys.exit` in libraries. Raise exceptions instead for proper handling."
  },
  {
    "func": "def missing_validation(user_input):\n    return user_input",
    "target": "Validate user input to ensure it meets expected constraints."
  },
  {
    "func": "def unoptimized_database_query():\n    results = db.query('SELECT * FROM users WHERE age > 18')\n    return results",
    "target": "Optimize database queries to fetch only required columns and rows."
  },
  {
    "func": "def static_method_missing_annotation():\n    def utility_function(cls):\n        return 42",
    "target": "Mark static utility methods with `@staticmethod` for clarity."
  },
  {
    "func": "def inadequate_logging():\n    print('Operation completed')",
    "target": "Use proper logging instead of `print()` for better debugging and monitoring."
  },
  {
    "func": "def inefficient_data_structure():\n    items = []\n    for i in range(100):\n        items.append(i)\n    return items",
    "target": "Consider using list comprehensions or appropriate data structures for better performance."
  },
  {
    "func": "def resource_exhaustion():\n    for i in range(10**10):\n        print(i)",
    "target": "Avoid resource-intensive operations that can exhaust system resources."
  },
  {
    "func": "def authenticate_user(user_input):\n    query = f\"SELECT * FROM users WHERE username = '{user_input}'\"\n    print('Executing query:', query)",
    "target": "Avoid SQL injection by using parameterized queries instead of string formatting."
  },
  {
    "func": "def eval_execution(data):\n    return eval(data)",
    "target": "Avoid `eval()` as it can execute arbitrary code. Use `ast.literal_eval` when parsing strings."
  },
  {
    "func": "def insecure_file_write():\n    with open('data.txt', 'w') as f:\n        f.write('sensitive data')",
    "target": "Avoid hardcoded file paths and use secure file permissions."
  },
  {
    "func": "def weak_hashing(password):\n    import hashlib\n    return hashlib.md5(password.encode()).hexdigest()",
    "target": "Avoid MD5 for password hashing. Use `bcrypt` or `argon2` instead."
  },
  {
    "func": "def excessive_function_length():\n    def calculate():\n        x = 1\n        y = 2\n        result = x + y\n        return result\n    return calculate()",
    "target": "Break down large functions into smaller, more maintainable units."
  },
  {
    "func": "def unnecessary_global_variable():\n    global counter\n    counter = 0",
    "target": "Avoid using global variables to maintain code modularity."
  },
  {
    "func": "def hardcoded_api_key():\n    api_key = '12345-ABCDE'\n    return api_key",
    "target": "Avoid hardcoding secrets. Use environment variables instead."
  },
  {
    "func": "def deep_nested_loops():\n    for i in range(5):\n        for j in range(5):\n            for k in range(5):\n                print(i, j, k)",
    "target": "Refactor deep nested loops for better readability."
  },
  {
    "func": "def missing_docstring():\n    def add(a, b):\n        return a + b",
    "target": "Add descriptive docstrings to improve code maintainability."
  },
  {
    "func": "def unsafe_os_command(command):\n    import os\n    os.system(command)",
    "target": "Avoid using `os.system` with unsanitized input. Use `subprocess.run` with safe parameters."
  },
  {
    "func": "def magic_number_usage():\n    if x == 7:\n        print('Lucky')",
    "target": "Replace magic numbers with named constants."
  },
  {
    "func": "def missing_type_annotations():\n    def calculate(a, b):\n        return a + b",
    "target": "Add type annotations for better code clarity."
  },
  {
    "func": "def long_chained_calls():\n    return obj.method1().method2().method3()",
    "target": "Avoid long chains of method calls; assign intermediate results to variables."
  },
  {
    "func": "def resource_leak():\n    f = open('data.txt', 'r')\n    data = f.read()\n    return data",
    "target": "Use `with open()` context manager to handle file operations properly."
  },
  {
    "func": "def insecure_random_number():\n    import random\n    return random.randint(1, 100)",
    "target": "Use `secrets` module for generating secure random numbers."
  },
  {
    "func": "def inconsistent_naming():\n    def CalculateSum(a, b):\n        return a + b",
    "target": "Follow naming conventions like `snake_case` in Python."
  },
  {
    "func": "def unused_import():\n    import math\n    return 42",
    "target": "Remove unused imports to improve code clarity."
  },
  {
    "func": "def hardcoded_ip():\n    server_ip = '192.168.1.1'\n    return server_ip",
    "target": "Avoid hardcoding IP addresses; use configuration files instead."
  },
  {
    "func": "def empty_exception_handler():\n    try:\n        x = 1/0\n    except Exception:\n        pass",
    "target": "Avoid empty exception handlers; log the error instead."
  },
  {
    "func": "def inconsistent_whitespace():\n    a=1\n    b = 2",
    "target": "Use consistent whitespace for better readability."
  },
  {
    "func": "def missing_input_validation(user_input):\n    print('Input:', user_input)",
    "target": "Validate and sanitize user inputs to prevent injection attacks."
  },
  {
    "func": "def inefficient_list_search(items, target):\n    for item in items:\n        if item == target:\n            return True",
    "target": "Use `in` for list membership checks."
  },
  {
    "func": "def improper_exception_type():\n    try:\n        x = int('abc')\n    except ValueError:\n        print('Error')",
    "target": "Use specific exception types for better clarity."
  },
  {
    "func": "def nested_dict_iteration():\n    for key1, val1 in data.items():\n        for key2, val2 in val1.items():\n            for key3, val3 in val2.items():\n                for key4, val4 in val3.items():\n                    for key5, val5 in val4.items():\n                        process(val5)",
    "target": "Reduce deep nesting in dictionary iteration (5 levels detected). Consider flattening the structure."
  },
  {
    "func": "def redundant_comparison():\n    if x == True:\n        return True",
    "target": "Avoid redundant boolean comparisons. Use `if x:`."
  },
  {
    "func": "def incomplete_logging():\n    import logging\n    logging.info('Something happened')",
    "target": "Include context like timestamps or user IDs in logs."
  },
  {
    "func": "def overcomplicated_expression():\n    result = ((a + b) * c) / d",
    "target": "Simplify complex expressions for better readability."
  },
  {
    "func": "def unsafe_file_handling():\n    with open('file.txt', 'w') as f:\n        f.write(data)",
    "target": "Validate file paths to prevent directory traversal."
  },
  {
    "func": "def weak_password_policy(password):\n    if len(password) < 6:\n        return False",
    "target": "Enforce strong password policies beyond length."
  },
  {
    "func": "def missing_finally_clause():\n    f = open('file.txt', 'r')\n    data = f.read()",
    "target": "Ensure files are closed with `finally` or `with`."
  },
  {
    "func": "def hardcoded_port_number():\n    port = 8080",
    "target": "Avoid hardcoding port numbers. Use configuration files."
  },
  {
    "func": "def inconsistent_return_types(x):\n    if x > 0:\n        return 'Positive'\n    else:\n        return 0",
    "target": "Ensure functions return consistent types to avoid confusion."
  },
  {
    "func": "def overly_long_function():\n    result = 0\n    for i in range(100):\n        result += i\n    print(result)\n    for j in range(100):\n        result -= j\n    print(result)",
    "target": "Refactor long functions into smaller, reusable functions."
  },
  {
    "func": "def nested_control_structures():\n    for i in range(5):\n        if i % 2 == 0:\n            for j in range(5):\n                print(i, j)",
    "target": "Reduce nested loops to improve readability."
  },
  {
    "func": "def magic_values():\n    if score >= 42:\n        print('Pass')",
    "target": "Replace magic numbers with named constants."
  },
  {
    "func": "def insufficient_modularity():\n    x = 1\n    y = 2\n    z = x + y\n    print(z)",
    "target": "Modularize code into separate functions for maintainability."
  },
  {
    "func": "def inconsistent_variable_naming():\n    user_name = 'Alice'\n    UserAge = 30",
    "target": "Maintain consistent naming conventions throughout the codebase."
  },
  {
    "func": "def long_argument_list(a, b, c, d, e, f, g):\n    return a + b + c + d + e + f + g",
    "target": "Avoid long parameter lists; use dictionaries or classes."
  },
  {
    "func": "def redundant_computations(n):\n    result = sum(range(n))\n    result2 = sum(range(n))",
    "target": "Avoid redundant computations; store results for reuse."
  },
  {
    "func": "def unoptimized_list_operations():\n    data = []\n    for i in range(1000):\n        data.append(i)",
    "target": "Use list comprehensions for better performance."
  },
  {
    "func": "def complex_boolean_expression(x, y):\n    if (x and y) or (not x and not y):\n        return True",
    "target": "Simplify complex boolean expressions for clarity."
  },
  {
    "func": "def lack_of_code_comments():\n    def add(a, b):\n        return a + b",
    "target": "Include comments to explain complex logic when needed."
  },
  {
    "func": "def long_chain_of_function_calls():\n    result = obj.a().b().c().d()",
    "target": "Avoid chaining multiple methods together; assign intermediate results to variables."
  },
  {
    "func": "def unused_variables():\n    x = 42\n    y = x + 1\n    return x",
    "target": "Remove unused variables to improve code clarity."
  },
  {
    "func": "def inconsistent_whitespace():\n    a=5\n    b = 6\n    c  =7",
    "target": "Use consistent spacing for better readability."
  },
  {
    "func": "def unclear_function_name():\n    def x1y2z3(a, b):\n        return a + b",
    "target": "Use meaningful function names to improve code clarity."
  },
  {
    "func": "def inefficient_membership_check(items, value):\n    if items.count(value) > 0:\n        return True",
    "target": "Use `in` keyword for membership checks instead of `count()`."
  },
  {
    "func": "def unused_function():\n    def helper():\n        return 42",
    "target": "Remove unused functions to reduce code clutter."
  },
  {
    "func": "def repeated_code_blocks():\n    if condition:\n        handle_task()\n    else:\n        handle_task()",
    "target": "Refactor duplicated code into a single function."
  },
  {
    "func": "def hard_to_read_lambda():\n    result = map(lambda x: x ** 2 if x % 2 == 0 else x + 1, data)",
    "target": "Avoid complex lambda functions; use named functions instead."
  },
  {
    "func": "def excessive_inline_comments():\n    x = 5  # assign 5\n    y = 6  # assign 6",
    "target": "Avoid unnecessary inline comments for self-explanatory code."
  },
  {
    "func": "def poorly_formatted_code():\n    x=1; y=2;z=3",
    "target": "Follow standard formatting conventions like PEP 8."
  },
  {
    "func": "def inconsistent_return_behavior(x):\n    if x > 0:\n        return 'Positive'\n    else:\n        print('Negative')",
    "target": "Ensure consistent use of return statements in functions."
  },
  {
    "func": "def unnecessary_list_conversion():\n    items = list([1, 2, 3])",
    "target": "Avoid redundant type conversions for better performance."
  },
  {
    "func": "def implicit_type_conversion():\n    result = 5 + '5'",
    "target": "Avoid implicit type conversions to prevent runtime errors."
  },
  {
    "func": "def inefficient_data_structure_usage():\n    for item in data:\n        if item not in seen:\n            seen.add(item)",
    "target": "Use sets instead of lists for membership checks where possible."
  },
  {
    "func": "def non_standard_docstring_format():\n    def add(a, b):\n        \"\"\"Does addition\"\"\"\n        return a + b",
    "target": "Use standardized docstring formats like NumPy or Google style."
  },
  {
    "func": "def repeated_literals():\n    if status == 'active':\n        print('active')",
    "target": "Use named constants instead of repeated string literals."
  },
  {
    "func": "def long_single_line_expression():\n    result = sum([x ** 2 for x in range(100) if x % 2 == 0])",
    "target": "Break down long expressions into multiple lines."
  },
  {
    "func": "def lack_of_input_validation(value):\n    return int(value)",
    "target": "Validate and sanitize user input to avoid unexpected errors."
  },
  {
    "func": "def overly_generic_variable_names():\n    x = 5\n    y = 6\n    return x + y",
    "target": "Use descriptive variable names for better understanding."
  },
  {
    "func": "class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n    def save_to_database(self):\n        print('Saving user to database')",
    "target": "Single Responsibility Principle: Separate database operations from the User class."
  },
  {
    "func": "class Report:\n    def __init__(self, data):\n        self.data = data\n    def generate_pdf(self):\n        print('Generating PDF')\n    def generate_csv(self):\n        print('Generating CSV')",
    "target": "Single Responsibility Principle: Separate report generation from format-specific logic."
  },
  {
    "func": "class PaymentProcessor:\n    def process_payment(self, payment_type):\n        if payment_type == 'credit_card':\n            print('Processing credit card payment')\n        elif payment_type == 'paypal':\n            print('Processing PayPal payment')",
    "target": "Open/Closed Principle: Avoid modifying the class for new payment types; use polymorphism."
  },
  {
    "func": "class Bird:\n    def fly(self):\n        print('Flying')\nclass Penguin(Bird):\n    def fly(self):\n        raise Exception('Penguins can’t fly')",
    "target": "Liskov Substitution Principle: Subclasses should not break base class behavior."
  },
  {
    "func": "class Printer:\n    def print_document(self, doc):\n        print('Printing', doc)\n    def scan_document(self, doc):\n        raise NotImplementedError('Scan not supported')",
    "target": "Interface Segregation Principle: Provide only the necessary interfaces to clients."
  },
  {
    "func": "class MySQLDatabase:\n    def connect(self):\n        print('Connecting to MySQL')\nclass Application:\n    def __init__(self):\n        self.db = MySQLDatabase()",
    "target": "Dependency Inversion Principle: Depend on abstractions, not concrete classes."
  },
  {
    "func": "class UserService:\n    def get_user(self, user_id):\n        print(f'Fetching user {user_id}')\n    def send_email(self, message):\n        print('Sending email:', message)",
    "target": "Single Responsibility Principle: Separate user management from communication logic."
  },
  {
    "func": "class Shape:\n    def area(self):\n        pass\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\nclass AreaCalculator:\n    def calculate_area(self, shape):\n        if isinstance(shape, Rectangle):\n            return shape.width * shape.height",
    "target": "Open/Closed Principle: Use polymorphism to calculate area for different shapes without modifying code."
  },
  {
    "func": "class Animal:\n    def make_sound(self):\n        print('Animal sound')\nclass Dog(Animal):\n    def make_sound(self):\n        return 5",
    "target": "Liskov Substitution Principle: Substitutable objects should maintain method behavior and types."
  },
  {
    "func": "class Document:\n    def open(self):\n        print('Open document')\n    def save(self):\n        raise NotImplementedError()",
    "target": "Interface Segregation Principle: Provide separate interfaces for openable and saveable documents."
  },
  {
    "func": "class Logger:\n    def log(self, message):\n        print('Logging:', message)\nclass UserService:\n    def __init__(self):\n        self.logger = Logger()",
    "target": "Dependency Inversion Principle: Inject logger via constructor instead of hardcoding."
  },
  {
    "func": "class TaskManager:\n    def add_task(self, task):\n        print('Adding task')\n    def generate_report(self):\n        print('Generating report')",
    "target": "Single Responsibility Principle: Separate task management from reporting."
  },
  {
    "func": "class Calculator:\n    def calculate(self, shape):\n        if type(shape).__name__ == 'Circle':\n            return 3.14 * shape.radius**2\n        elif type(shape).__name__ == 'Square':\n            return shape.side**2",
    "target": "Open/Closed Principle: Use polymorphism instead of type checks."
  },
  {
    "func": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    def set_width(self, width):\n        self.width = width\nclass Square(Rectangle):\n    def set_width(self, width):\n        self.width = width\n        self.height = width",
    "target": "Liskov Substitution Principle: Ensure subclasses don’t alter expected behavior."
  },
  {
    "func": "class Appliance:\n    def turn_on(self):\n        pass\n    def make_coffee(self):\n        raise NotImplementedError()",
    "target": "Interface Segregation Principle: Avoid forcing unused methods on classes."
  },
  {
    "func": "class NotificationService:\n    def __init__(self):\n        self.sms = SMS()\n    def notify(self, message):\n        self.sms.send(message)",
    "target": "Dependency Inversion Principle: Depend on interfaces, not implementations."
  },
  {
    "func": "class User:\n    def __init__(self, name):\n        self.name = name\n    def log_activity(self):\n        print('Logging activity')",
    "target": "Single Responsibility Principle: Separate logging from user management."
  },
  {
    "func": "class Formatter:\n    def format_csv(self, data):\n        print('CSV formatted')\n    def format_json(self, data):\n        print('JSON formatted')",
    "target": "Open/Closed Principle: Extend without modifying existing code by using strategy pattern."
  },
  {
    "func": "class Vehicle:\n    def start_engine(self):\n        print('Engine started')\nclass ElectricCar(Vehicle):\n    def start_engine(self):\n        return 1",
    "target": "Liskov Substitution Principle: Ensure method behavior remains consistent."
  },
  {
    "func": "class Worker:\n    def work(self):\n        pass\n    def eat(self):\n        raise NotImplementedError()",
    "target": "Interface Segregation Principle: Use separate Worker and Eater interfaces."
  },
  {
    "func": "class FileManager:\n    def __init__(self):\n        self.storage = DiskStorage()\n    def save(self, data):\n        self.storage.write(data)",
    "target": "Dependency Inversion Principle: Inject storage interface rather than hardcode dependency."
  },
  {
    "func": "class Product:\n    def calculate_price(self):\n        print('Calculating price')\n    def display_ui(self):\n        print('Displaying UI')",
    "target": "Single Responsibility Principle: Separate pricing logic from UI logic."
  },
  {
    "func": "class Document:\n    def __init__(self, content):\n        self.content = content\n    def print(self, format_type):\n        if format_type == 'PDF':\n            print('Printing PDF')\n        elif format_type == 'HTML':\n            print('Printing HTML')",
    "target": "Open/Closed Principle: Use strategy pattern instead of conditionals for format printing."
  },
  {
    "func": "class AudioPlayer:\n    def play_audio(self, file):\n        print('Playing audio')\nclass VideoPlayer(AudioPlayer):\n    def play_audio(self, file):\n        raise Exception('VideoPlayer cannot play audio')",
    "target": "Liskov Substitution Principle: Avoid violating base class expectations."
  },
  {
    "func": "class Machine:\n    def print_document(self):\n        raise NotImplementedError()\n    def scan_document(self):\n        raise NotImplementedError()",
    "target": "Interface Segregation Principle: Split into Printer and Scanner interfaces."
  },
  {
    "func": "class ShoppingCart:\n    def __init__(self):\n        self.db = SQLDatabase()\n    def checkout(self):\n        self.db.save('cart data')",
    "target": "Dependency Inversion Principle: Depend on database interface, not implementation."
  },
  {
    "func": "class Order:\n    def calculate_total(self):\n        print('Calculating total')\n    def send_invoice(self):\n        print('Sending invoice')",
    "target": "Single Responsibility Principle: Separate invoicing from order logic."
  },
  {
    "func": "class DiscountCalculator:\n    def calculate_discount(self, product_type):\n        if product_type == 'A':\n            return 10\n        elif product_type == 'B':\n            return 5",
    "target": "Open/Closed Principle: Avoid adding conditions; use a strategy pattern."
  },
  {
    "func": "class Duck:\n    def quack(self):\n        print('Quack')\nclass RobotDuck(Duck):\n    def quack(self):\n        return 42",
    "target": "Liskov Substitution Principle: Maintain consistent behavior in overridden methods."
  },
  {
    "func": "def calculate_discount(price, discount_rate, discount_type='standard', customer_type='regular'):\n    if discount_type == 'standard':\n        return price * (1 - discount_rate)\n    elif discount_type == 'holiday':\n        return price * (1 - discount_rate * 1.5)\n    else:\n        return price",
    "target": "YAGNI: Unnecessary discount types not currently needed. Simplify to one discount type."
  },
  {
    "func": "class UserProfile:\n    def __init__(self, username, email, age=None, phone=None, address=None, preferences=None):\n        self.username = username\n        self.email = email\n        self.age = age\n        self.phone = phone\n        self.address = address\n        self.preferences = preferences",
    "target": "YAGNI: Avoid adding unused parameters like `phone`, `address`, and `preferences`."
  },
  {
    "func": "def calculate_bonus(salary, years_of_service, company_size='small', industry='tech'):\n    if company_size == 'small' and industry == 'tech':\n        return salary * 0.05\n    elif company_size == 'large' and industry == 'finance':\n        return salary * 0.1\n    else:\n        return salary * 0.03",
    "target": "YAGNI: Industry and company size differentiation not required; simplify bonus calculation."
  },
  {
    "func": "class DataExporter:\n    def export_as_csv(self, data):\n        print('Exporting as CSV')\n    def export_as_xml(self, data):\n        print('Exporting as XML')\n    def export_as_json(self, data):\n        print('Exporting as JSON')",
    "target": "YAGNI: Exporting as XML and JSON not required yet; keep only CSV."
  },
  {
    "func": "def generate_report(report_type='pdf'):\n    if report_type == 'pdf':\n        print('Generating PDF report')\n    elif report_type == 'html':\n        print('Generating HTML report')\n    else:\n        print('Generating TXT report')",
    "target": "YAGNI: Only PDF report generation needed; remove other formats."
  },
  {
    "func": "class MultiAuthSystem:\n    def login_with_password(self, username, password):\n        print('Password login')\n    def login_with_fingerprint(self, fingerprint):\n        print('Fingerprint login')\n    def login_with_face_id(self, face_image):\n        print('Face ID login')",
    "target": "YAGNI: Only password login needed; remove fingerprint and face ID."
  },
  {
    "func": "def get_user_details(user_id, include_profile_picture=False, include_social_links=False, include_preferences=False):\n    user = {'id': user_id, 'name': 'John'}\n    if include_profile_picture:\n        user['profile_picture'] = 'default.jpg'\n    if include_social_links:\n        user['social_links'] = []\n    if include_preferences:\n        user['preferences'] = {}",
    "target": "YAGNI: Include only essential user details; remove unnecessary options."
  },
  {
    "func": "class Vehicle:\n    def drive(self):\n        print('Driving')\n    def fly(self):\n        print('Flying')",
    "target": "YAGNI: Vehicle doesn't need a `fly` method; remove it."
  },
  {
    "func": "def process_payment(amount, currency='USD', payment_gateway='stripe', region='US'):\n    print(f'Processing payment of {amount} {currency} via {payment_gateway}')",
    "target": "YAGNI: Payment gateway and region parameters unnecessary; simplify interface."
  },
  {
    "func": "class Product:\n    def __init__(self, name, price, color='black', size='medium', warranty=None):\n        self.name = name\n        self.price = price\n        self.color = color\n        self.size = size\n        self.warranty = warranty",
    "target": "YAGNI: Only name and price are necessary for now; remove optional parameters."
  },
  {
    "func": "def calculate_shipping(weight, distance, shipping_method='standard', delivery_time='normal'):\n    if shipping_method == 'standard':\n        cost = weight * distance * 0.5\n    elif shipping_method == 'express':\n        cost = weight * distance * 1.0\n    else:\n        cost = weight * distance * 0.3",
    "target": "YAGNI: Only standard shipping method is needed; simplify logic."
  },
  {
    "func": "class UserManager:\n    def __init__(self, username, email):\n        self.username = username\n        self.email = email\n    def deactivate_user(self):\n        print('Deactivating user')\n    def promote_to_admin(self):\n        print('Promoting user to admin')",
    "target": "YAGNI: `promote_to_admin` method not needed; remove it."
  },
  {
    "func": "def log_message(message, log_level='info', log_to_file=False, log_to_db=False):\n    print(f'{log_level.upper()}: {message}')",
    "target": "YAGNI: Only console logging needed; remove options for file and database."
  },
  {
    "func": "class Shape:\n    def __init__(self, sides):\n        self.sides = sides\n    def calculate_volume(self):\n        print('Volume calculation not needed')",
    "target": "YAGNI: Shape doesn't need a `calculate_volume` method; remove it."
  },
  {
    "func": "def render_dashboard(user, dark_mode=False, show_analytics=False, show_ads=False):\n    print(f'Rendering dashboard for {user}')",
    "target": "YAGNI: Additional options like dark mode and ads not needed."
  },
  {
    "func": "class DocumentHandler:\n    def open(self, file):\n        print('Opening file')\n    def compress(self, file):\n        print('Compressing file')\n    def encrypt(self, file):\n        print('Encrypting file')",
    "target": "YAGNI: Compression and encryption features not required yet."
  },
  {
    "func": "def calculate_invoice(total, discount=0, tax_rate=0.05, loyalty_discount=0.02, seasonal_discount=0):\n    return total - discount + total * tax_rate",
    "target": "YAGNI: Loyalty and seasonal discounts are unnecessary complexity."
  },
  {
    "func": "class Employee:\n    def __init__(self, name, department, salary, bonus=None, stock_options=None):\n        self.name = name\n        self.department = department\n        self.salary = salary\n        self.bonus = bonus\n        self.stock_options = stock_options",
    "target": "YAGNI: Bonus and stock options not needed for all employees."
  },
  {
    "func": "def generate_graph(data, graph_type='bar', show_grid=True, color='blue', animation_speed='normal'):\n    print('Generating graph')",
    "target": "YAGNI: Only bar graph type is required; remove unnecessary parameters."
  },
  {
    "func": "class NotificationService:\n    def send_email(self, message):\n        print('Sending email')\n    def send_sms(self, message):\n        print('Sending SMS')",
    "target": "YAGNI: SMS notification is unnecessary; remove it."
  },
  {
    "func": "def validate_user_input(input_data, allow_special_chars=False, max_length=255, strip_whitespace=True):\n    print('Validating input')",
    "target": "YAGNI: Only whitespace stripping is needed; remove other options."
  },
  {
    "func": "class ChatBot:\n    def __init__(self):\n        self.language = 'English'\n        self.theme = 'light'\n        self.voice_assistant_enabled = False",
    "target": "YAGNI: Theme and voice assistant options are not currently needed."
  },
  {
    "func": "def filter_transactions(transactions, min_amount=0, max_amount=None, currency='USD', include_fees=False):\n    filtered = [t for t in transactions if t['amount'] >= min_amount]",
    "target": "YAGNI: Only filtering by `min_amount` is required; remove other parameters."
  },
  {
    "func": "class TaskManager:\n    def __init__(self):\n        self.tasks = []\n    def add_task(self, task):\n        self.tasks.append(task)\n    def archive_task(self, task):\n        print('Archiving task')",
    "target": "YAGNI: Archiving tasks isn't necessary yet."
  },
  {
    "func": "def send_notification(user, message, method='email', urgency='normal', delivery_time='immediate'):\n    print(f'Sending {method} notification to {user}')",
    "target": "YAGNI: Only email notifications are needed; simplify interface."
  },
  {
    "func": "class ShoppingCart:\n    def __init__(self):\n        self.items = []\n    def apply_coupon(self, coupon_code):\n        print('Applying coupon')\n    def calculate_tax(self):\n        print('Calculating tax')",
    "target": "YAGNI: Coupon and tax calculations are unnecessary for now."
  },
  {
    "func": "def log_event(event, timestamp=None, user_id=None, location=None):\n    print('Logging event')",
    "target": "YAGNI: Only event name is needed; remove optional parameters."
  },
  {
    "func": "class VideoPlayer:\n    def __init__(self):\n        self.resolution = '1080p'\n        self.supports_4k = False\n        self.streaming_mode = 'standard'",
    "target": "YAGNI: 4K and streaming mode settings are premature optimizations."
  },
  {
    "func": "def book_flight(origin, destination, airline=None, seat_preference='any', include_meal=False):\n    print(f'Booking flight from {origin} to {destination}')",
    "target": "YAGNI: Only origin and destination are required; remove optional parameters."
  },
  {
    "func": "def calculate_area_circle(radius):\n    return 3.14159 * radius * radius\n\ndef calculate_area_square(side):\n    return side * side",
    "target": "DRY: Combine similar area calculations into a single function with shape parameter."
  },
  {
    "func": "def display_user(user):\n    print(f'User: {user.name}, Email: {user.email}')\n\ndef display_admin(admin):\n    print(f'Admin: {admin.name}, Email: {admin.email}')",
    "target": "DRY: Duplicate code for user and admin display; use a generic display function."
  },
  {
    "func": "def process_data_a(data):\n    return sum(data)\n\ndef process_data_b(data):\n    return sum(data)",
    "target": "DRY: Duplicate processing logic; merge into one function."
  },
  {
    "func": "def calculate_tax_usa(price):\n    return price * 0.07\n\ndef calculate_tax_canada(price):\n    return price * 0.05",
    "target": "DRY: Use a parameter for tax rates instead of separate functions."
  },
  {
    "func": "def connect_to_server(ip, port):\n    print(f'Connecting to {ip}:{port}')\n\ndef connect_to_database(host, port):\n    print(f'Connecting to {host}:{port}')",
    "target": "DRY: Both functions share similar logic; unify into a single connection function."
  },
  {
    "func": "def print_error(message):\n    print(f'Error: {message}')\n\ndef print_warning(message):\n    print(f'Warning: {message}')",
    "target": "DRY: Merge into a single `print_message` function with a severity parameter."
  },
  {
    "func": "def login(username, password):\n    if username == 'admin' and password == 'pass':\n        print('Access granted')\n    else:\n        print('Access denied')",
    "target": "KISS: Simplify complex conditional logic with a more readable structure."
  },
  {
    "func": "def calculate_discount(price, discount_type):\n    if discount_type == 'student':\n        return price * 0.8\n    elif discount_type == 'senior':\n        return price * 0.85\n    else:\n        return price",
    "target": "KISS: Use a dictionary-based lookup instead of multiple `if-elif` statements."
  },
  {
    "func": "def get_status_description(status_code):\n    if status_code == 1:\n        return 'Active'\n    elif status_code == 2:\n        return 'Inactive'\n    elif status_code == 3:\n        return 'Pending'\n    else:\n        return 'Unknown'",
    "target": "KISS: Replace `if-elif` chain with a dictionary for clarity."
  },
  {
    "func": "def calculate_salary(hours_worked, hourly_rate):\n    return hours_worked * hourly_rate\n\ndef calculate_overtime(hours_overtime, hourly_rate):\n    return hours_overtime * hourly_rate * 1.5",
    "target": "DRY: Combine regular and overtime calculations into a single function."
  },
  {
    "func": "def send_email(subject, body):\n    print(f'Sending email: {subject}')\n\ndef send_sms(message):\n    print(f'Sending SMS: {message}')",
    "target": "DRY: Create a generic `send_notification` function."
  },
  {
    "func": "def authenticate(username, password):\n    if username == 'admin' and password == 'admin123':\n        print('Authenticated')\n    else:\n        print('Failed')",
    "target": "KISS: Simplify authentication logic using a dictionary-based credential check."
  },
  {
    "func": "def convert_to_uppercase(text):\n    return text.upper()\n\ndef convert_to_lowercase(text):\n    return text.lower()",
    "target": "DRY: Merge similar string conversion functions into one with a mode parameter."
  },
  {
    "func": "def print_report(report_type):\n    if report_type == 'summary':\n        print('Summary Report')\n    elif report_type == 'detailed':\n        print('Detailed Report')",
    "target": "KISS: Use a dictionary lookup to print reports."
  },
  {
    "func": "def fetch_user(user_id):\n    if user_id:\n        print('Fetching user')\n    else:\n        print('Invalid ID')",
    "target": "KISS: Simplify control flow; `if user_id` is sufficient without explicit checks."
  },
  {
    "func": "def add_numbers(a, b):\n    result = a + b\n    return result",
    "target": "KISS: Inline variable assignment is unnecessary; return directly."
  },
  {
    "func": "def calculate_interest(principal, rate, time):\n    interest = principal * rate * time\n    return interest",
    "target": "KISS: Directly return expression; intermediate variable is unnecessary."
  },
  {
    "func": "def log_info(message):\n    print(f'INFO: {message}')\n\ndef log_debug(message):\n    print(f'DEBUG: {message}')\n\ndef log_error(message):\n    print(f'ERROR: {message}')",
    "target": "DRY: Combine logging functions into a single function with a level parameter."
  },
  {
    "func": "def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result",
    "target": "KISS: Use `math.factorial()` instead of manual loop."
  },
  {
    "func": "def calculate_total(items):\n    total = 0\n    for item in items:\n        total += item\n    return total",
    "target": "KISS: Use Python's built-in `sum()` for clarity."
  },
  {
    "func": "def check_even(number):\n    if number % 2 == 0:\n        return True\n    else:\n        return False",
    "target": "KISS: Return `number % 2 == 0` directly."
  },
  {
    "func": "def is_positive(num):\n    if num > 0:\n        return True\n    else:\n        return False",
    "target": "KISS: Return `num > 0` directly."
  },
  {
    "func": "def calculate_tax(price):\n    tax = price * 0.1\n    return tax",
    "target": "KISS: Inline the return statement for simplicity."
  },
  {
    "func": "def generate_greeting(name):\n    greeting = f'Hello, {name}!'\n    return greeting",
    "target": "KISS: Return the formatted string directly."
  },
  {
    "func": "def count_words(text):\n    word_count = len(text.split())\n    return word_count",
    "target": "KISS: Return `len(text.split())` directly."
  },
  {
    "func": "def check_validity(value):\n    if value:\n        return True\n    else:\n        return False",
    "target": "KISS: Simplify to `return bool(value)`."
  },
  {
    "func": "def get_discount_price(price, discount_percentage):\n    discount = price * discount_percentage / 100\n    final_price = price - discount\n    return final_price",
    "target": "KISS: Return expression directly without intermediate variables."
  },
  {
    "func": "def greet_user(name):\n    if name:\n        print(f'Hello, {name}')\n    else:\n        print('Hello, Guest')",
    "target": "KISS: Simplify greeting logic."
  },
  {
    "func": "def process_items(items):\n    for item in items:\n        if len(item) > 5:\n            print(item)",
    "target": "KISS: Simplify logic by using list comprehensions."
  },
  {
    "func": "def calc(x,y): return x+y",
    "target": "Use descriptive function names to improve code readability."
  },
  {
    "func": "def getuserdetails(user): return user['name']",
    "target": "Use snake_case for function names in Python as per PEP 8."
  },
  {
    "func": "def fetch_data():\n    try:\n        result = some_function()\n    except:\n        pass",
    "target": "Avoid generic exception handling; catch specific exceptions."
  },
  {
    "func": "def processData(data): return data.upper()",
    "target": "Use consistent naming conventions (e.g., snake_case for functions)."
  },
  {
    "func": "def add(x,y,z):\n    return x+y+z",
    "target": "Limit the number of parameters to improve function maintainability."
  },
  {
    "func": "def check_status(status):\n    if status == 1:\n        print('Active')\n    elif status == 2:\n        print('Inactive')",
    "target": "Use dictionaries for condition-based logic to simplify code."
  },
  {
    "func": "def findLargest(lst):\n    largest = lst[0]\n    for i in lst:\n        if i > largest:\n            largest = i\n    return largest",
    "target": "Use built-in functions like `max()` instead of manual loops."
  },
  {
    "func": "def calculate(x,y):\n    if y != 0:\n        return x/y",
    "target": "Always handle division by zero with appropriate exceptions."
  },
  {
    "func": "def get_username(user):\n    print('Username:', user['name'])",
    "target": "Add type annotations for better code maintainability."
  },
  {
    "func": "def read_file(file):\n    f = open(file, 'r')\n    data = f.read()\n    f.close()\n    return data",
    "target": "Use context managers (`with open`) to ensure files are properly closed."
  },
  {
    "func": "def isPalindrome(s):\n    return s == s[::-1]",
    "target": "Use snake_case for function names."
  },
  {
    "func": "def calcTax(price,rate):\n    return price*rate",
    "target": "Add spaces around operators to improve readability."
  },
  {
    "func": "def fetch_items(items):\n    for i in range(len(items)):\n        print(items[i])",
    "target": "Use `for item in items` instead of indexing for better readability."
  },
  {
    "func": "def checkAge(age):\n    if age>=18:\n        print('Adult')",
    "target": "Use consistent spacing and indentation as per PEP 8."
  },
  {
    "func": "def process_list(lst):\n    result=[]\n    for x in lst:\n        result.append(x*2)\n    return result",
    "target": "Use list comprehensions for cleaner and efficient code."
  },
  {
    "func": "def user_login(username,password):\n    if username=='admin' and password=='1234':\n        print('Welcome admin')",
    "target": "Avoid hardcoding credentials; use secure configuration files."
  },
  {
    "func": "def calc_average(numbers):\n    total=0\n    for n in numbers:\n        total+=n\n    return total/len(numbers)",
    "target": "Use built-in functions like `sum()` to simplify code."
  },
  {
    "func": "def sort_list(lst):\n    return sorted(lst,key=lambda x:x[1])",
    "target": "Add spaces after commas for better readability."
  },
  {
    "func": "def process_input(data):\n    if type(data)==list:\n        return [x*2 for x in data]",
    "target": "Use `isinstance` instead of comparing types directly."
  },
  {
    "func": "def find_max(a,b,c):\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c",
    "target": "Simplify with `max(a, b, c)`."
  },
  {
    "func": "def user_info():\n    name='John'\n    age=30\n    print('Name:',name)\n    print('Age:',age)",
    "target": "Avoid hardcoded values; use parameters for flexibility."
  },
  {
    "func": "def connect_db():\n    conn = sqlite3.connect('mydb.db')",
    "target": "Close database connections properly after use."
  },
  {
    "func": "def calc_sum(a,b):\n    return a+b",
    "target": "Add type annotations to improve clarity."
  },
  {
    "func": "def compute_factorial(n):\n    if n==1:\n        return 1\n    else:\n        return n*compute_factorial(n-1)",
    "target": "Add base case check and docstrings to explain recursive logic."
  },
  {
    "func": "def calculate_discount(price, discount):\n    return price-(price*(discount/100))",
    "target": "Add parentheses for better readability when using mathematical expressions."
  },
  {
    "func": "def send_email(subject, body, recipient, smtp_server, port, username, password):\n    pass",
    "target": "Reduce parameter count; use a configuration object instead."
  },
  {
    "func": "def print_report(data):\n    print('Report Data:',data)",
    "target": "Include function docstrings for clarity."
  },
  {
    "func": "def factorial(x):\n    if x==1:\n        return 1\n    else:\n        return x*factorial(x-1)",
    "target": "Add input validation to handle negative values."
  },
  {
    "func": "def convert_temperature(temp, unit):\n    if unit=='C':\n        return temp*1.8+32\n    elif unit=='F':\n        return (temp-32)/1.8",
    "target": "Add comments and validate input units."
  },
  {
    "func": "def find_prime_numbers(n):\n    primes=[]\n    for num in range(2,n+1):\n        for i in range(2,num):\n            if num%i==0:\n                break\n        else:\n            primes.append(num)\n    return primes",
    "target": "Optimize loops and improve readability with better naming and logic."
  },
  {
    "func": "def mergeDicts(d1,d2):\n    d3=d1.copy()\n    d3.update(d2)\n    return d3",
    "target": "Use snake_case for function names and add spaces around `=` for readability."
  },
  {
    "func": "def parse_json(json_str):\n    return eval(json_str)",
    "target": "Avoid using `eval()`; use `json.loads()` for safer JSON parsing."
  },
  {
    "func": "def fetch_info(user):\n    print(f'User info: {user}')",
    "target": "Add docstrings to describe the function's purpose."
  },
  {
    "func": "def calculate_discount(price, discount):\n    if discount <= 0:\n        return price\n    else:\n        return price - (price * discount / 100)",
    "target": "Use inline expressions to simplify return logic."
  },
  {
    "func": "def process_data(items):\n    result=[]\n    for i in items:\n        result.append(i*2)\n    return result",
    "target": "Use list comprehensions for cleaner and efficient code."
  },
  {
    "func": "def get_user(name):\n    if name == 'admin':\n        print('Admin access')",
    "target": "Always validate user input for security reasons."
  },
  {
    "func": "def join_strings(parts):\n    result=''\n    for p in parts:\n        result+=p",
    "target": "Use `''.join(parts)` instead of manual concatenation."
  },
  {
    "func": "def get_info():\n    user='john'\n    age=30\n    return user,age",
    "target": "Avoid hardcoded values; pass parameters or use configurations."
  },
  {
    "func": "def print_square(n):\n    return n**2",
    "target": "Add type annotations to function signatures."
  },
  {
    "func": "def divide_numbers(a,b):\n    return a/b",
    "target": "Add exception handling to avoid division by zero errors."
  },
  {
    "func": "def calc_average(nums):\n    sum=0\n    for n in nums:\n        sum+=n\n    return sum/len(nums)",
    "target": "Use `sum(nums)/len(nums)` for more concise code."
  },
  {
    "func": "def display_users(users):\n    for u in users:\n        print(u)",
    "target": "Add type hints and docstrings for clarity."
  },
  {
    "func": "def check_prime(n):\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True",
    "target": "Optimize performance by checking divisibility only up to `sqrt(n)`."
  },
  {
    "func": "def check_password(password):\n    if password == '1234':\n        print('Weak password')",
    "target": "Avoid hardcoding sensitive information like passwords."
  },
  {
    "func": "def read_file(filename):\n    f = open(filename)\n    data = f.read()\n    return data",
    "target": "Use `with open` to ensure files are properly closed."
  },
  {
    "func": "def process_list(lst):\n    new_list=[]\n    for x in lst:\n        if x%2==0:\n            new_list.append(x)",
    "target": "Simplify with list comprehensions."
  },
  {
    "func": "def find_key(d, key):\n    if key in d.keys():\n        return d[key]",
    "target": "Use `if key in d` instead of `.keys()` for cleaner code."
  },
  {
    "func": "def increment(x):\n    x+=1\n    return x",
    "target": "Add type hints to improve code clarity."
  },
  {
    "func": "def nested_list_iteration():\n    for i in range(len(data)):\n        for j in range(len(data[i])):\n            for k in range(len(data[i][j])):\n                for m in range(len(data[i][j][k])):\n                    for n in range(len(data[i][j][k][m])):\n                        process(data[i][j][k][m][n])",
    "target": "Reduce deep nesting in list iteration (5 levels detected). Consider using generators or comprehensions."
  },
  {
    "func": "def connect_to_db():\n    conn = sqlite3.connect('test.db')",
    "target": "Close database connections properly to avoid leaks."
  },
  {
    "func": "def print_names(names):\n    for name in names:\n        print(name)",
    "target": "Add comments to explain code logic."
  },
  {
    "func": "def sort_users(users):\n    return sorted(users, key=lambda x: x['age'])",
    "target": "Add type annotations for input and output types."
  },
  {
    "func": "def fetch_api_data(url):\n    response = requests.get(url)\n    return response.text",
    "target": "Handle exceptions for network errors."
  },
  {
    "func": "def calc_area(l,w):\n    return l*w",
    "target": "Use descriptive variable names for clarity."
  },
  {
    "func": "def find_duplicates(lst):\n    seen = set()\n    duplicates = []\n    for x in lst:\n        if x in seen:\n            duplicates.append(x)\n        else:\n            seen.add(x)\n    return duplicates",
    "target": "Optimize using collections.Counter."
  },
  {
    "func": "def greet(name):\n    print('Hello '+name)",
    "target": "Use f-strings for better string formatting."
  },
  {
    "func": "def count_vowels(text):\n    count = 0\n    for ch in text:\n        if ch in 'aeiouAEIOU':\n            count += 1\n    return count",
    "target": "Use case-insensitive string methods for clarity."
  },
  {
    "func": "def factorial(n):\n    if n==1:\n        return 1\n    return n*factorial(n-1)",
    "target": "Add base case for input validation."
  },
  {
    "func": "def lookup_user(user_id):\n    if user_id == 123:\n        return 'John'",
    "target": "Avoid hardcoding user data; use a database."
  },
  {
    "func": "def generate_report():\n    report='Sales report'\n    print(report)",
    "target": "Include logging instead of print statements for better maintainability."
  },
  {
    "func": "def user_roles():\n    roles = ['admin','user','guest']\n    for role in roles:\n        print(role)",
    "target": "Use enums for role definitions to improve clarity."
  },
  {
    "func": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "target": "Use slicing for efficient string reversal."
  },
  {
    "func": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]",
    "target": "Use slicing to check if a string is a palindrome."
  },
  {
    "func": "def get_file_extension(filename: str) -> str:\n    return filename.split('.')[-1]",
    "target": "Use `os.path.splitext()` for better accuracy."
  },
  {
    "func": "def sum_list(numbers: list[int]) -> int:\n    return sum(numbers)",
    "target": "Use built-in `sum()` instead of loops for summing lists."
  },
  {
    "func": "def is_even(num: int) -> bool:\n    return num % 2 == 0",
    "target": "Use modulo operator for simple even-number checks."
  },
  {
    "func": "def remove_duplicates(lst: list) -> list:\n    return list(set(lst))",
    "target": "Use `set()` to efficiently remove duplicates."
  },
  {
    "func": "def most_common_word(words: list[str]) -> str:\n    return max(set(words), key=words.count)",
    "target": "Use `collections.Counter` for more efficiency."
  },
  {
    "func": "def safe_dict_lookup(dictionary: dict, key, default=None):\n    return dictionary.get(key, default)",
    "target": "Use `.get()` to avoid `KeyError` exceptions."
  },
  {
    "func": "def validate_email(email: str) -> bool:\n    return '@' in email and '.' in email",
    "target": "Use `re.match()` for a more accurate email validation."
  },
  {
    "func": "def round_number(num: float, decimals: int = 2) -> float:\n    return round(num, decimals)",
    "target": "Use `round()` for cleaner number rounding."
  },
  {
    "func": "def filter_even_numbers(lst: list[int]) -> list[int]:\n    return [x for x in lst if x % 2 == 0]",
    "target": "Use list comprehensions for filtering."
  },
  {
    "func": "def capitalize_words(sentence: str) -> str:\n    return sentence.title()",
    "target": "Use `.title()` for proper capitalization."
  },
  {
    "func": "def count_occurrences(lst: list, value) -> int:\n    return lst.count(value)",
    "target": "Use `.count()` for simple occurrence counting."
  },
  {
    "func": "def swap_variables(a, b):\n    return b, a",
    "target": "Use tuple unpacking for swapping instead of temporary variables."
  },
  {
    "func": "def get_file_size(filepath: str) -> int:\n    return os.path.getsize(filepath)",
    "target": "Use `os.path.getsize()` for accurate file size retrieval."
  },
  {
    "func": "def merge_two_dicts(d1: dict, d2: dict) -> dict:\n    return {**d1, **d2}",
    "target": "Use dictionary unpacking for merging dictionaries."
  },
  {
    "func": "def factorial(n: int) -> int:\n    return math.factorial(n)",
    "target": "Use `math.factorial()` instead of recursive functions for efficiency."
  },
  {
    "func": "def get_current_datetime() -> str:\n    return datetime.datetime.now().isoformat()",
    "target": "Use `.isoformat()` for standardized date representation."
  },
  {
    "func": "def generate_random_number(start: int, end: int) -> int:\n    return random.randint(start, end)",
    "target": "Use `random.randint()` for generating a random number in a range."
  },
  {
    "func": "def get_unique_values(lst: list) -> list:\n    return list(set(lst))",
    "target": "Use `set()` to get unique values in a list efficiently."
  },
  {
    "func": "def flatten_list(nested_list: list[list]) -> list:\n    return [item for sublist in nested_list for item in sublist]",
    "target": "Use list comprehensions to flatten nested lists."
  },
  {
    "func": "def get_ascii_value(character: str) -> int:\n    return ord(character)",
    "target": "Use `ord()` to get ASCII values."
  },
  {
    "func": "def create_slug(text: str) -> str:\n    return text.lower().replace(' ', '-')",
    "target": "Use `.lower().replace(' ', '-')` for simple slug generation."
  },
  {
    "func": "def chunk_list(lst: list, size: int) -> list[list]:\n    return [lst[i:i+size] for i in range(0, len(lst), size)]",
    "target": "Use list slicing to split lists into chunks."
  },
  {
    "func": "def is_anagram(str1: str, str2: str) -> bool:\n    return sorted(str1) == sorted(str2)",
    "target": "Use `sorted()` to check if two words are anagrams."
  },
  {
    "func": "def get_environment_variable(key: str) -> str:\n    return os.getenv(key, 'Not Found')",
    "target": "Use `os.getenv()` to safely retrieve environment variables."
  },
  {
    "func": "def is_substring(sub: str, main: str) -> bool:\n    return sub in main",
    "target": "Use `in` for substring checks instead of `.find()`."
  },
  {
    "func": "def read_json_file(filepath: str) -> dict:\n    with open(filepath, 'r') as f:\n        return json.load(f)",
    "target": "Use `json.load()` to parse JSON files safely."
  },
  {
    "func": "def is_multiple_of_five(n: int) -> bool:\n    return n % 5 == 0",
    "target": "Use modulo operator for simple divisibility checks."
  },
  {
    "func": "def insecure_os_command():\n    user_input = 'ls -la'\n    os.popen(user_input)",
    "target": "Using `os.popen()` to execute shell commands can lead to command injection vulnerabilities."
  },
  {
    "func": "def unsafe_jwt_decoding(token):\n    return jwt.decode(token, verify=False)",
    "target": "Disabling verification when decoding JWTs allows attackers to forge tokens."
  },
  {
    "func": "def missing_escaping_in_sql(user_input):\n    query = f\"SELECT * FROM users WHERE username = '{user_input}'\"",
    "target": "Lack of proper escaping in SQL queries allows SQL injection."
  },
  {
    "func": "def dangerous_pickle_loading():\n    with open('data.pkl', 'rb') as f:\n        obj = pickle.load(f)",
    "target": "Pickle files can execute arbitrary code when loaded."
  },
  {
    "func": "def unverified_ssl_request(url):\n    requests.get(url, verify=False)",
    "target": "Disabling SSL verification allows MITM attacks."
  },
  {
    "func": "def sensitive_data_in_logs(password):\n    print(f'User password: {password}')",
    "target": "Logging sensitive information exposes credentials in logs."
  },
  {
    "func": "def missing_rate_limiting():\n    def login(username, password):\n        if authenticate(username, password):\n            return 'Welcome!'",
    "target": "Not enforcing rate limiting makes login endpoints vulnerable to brute force attacks."
  },
  {
    "func": "def weak_password_hash(password):\n    return hashlib.md5(password.encode()).hexdigest()",
    "target": "MD5 is cryptographically weak and should not be used for password hashing."
  },
  {
    "func": "def insufficient_audit_logging():\n    def delete_account(user):\n        db.delete(user)",
    "target": "Not logging security-sensitive operations allows unauthorized access without detection."
  },
  {
    "func": "def open_redirect_attack(target_url):\n    return redirect(target_url)",
    "target": "Redirecting to untrusted URLs allows open redirect attacks."
  },
  {
    "func": "def weak_random_numbers():\n    return random.randint(100000, 999999)",
    "target": "Using `random.randint()` for security-sensitive values is insecure; use `secrets` instead."
  },
  {
    "func": "def no_cors_restriction():\n    @app.after_request\n    def add_cors_headers(response):\n        response.headers['Access-Control-Allow-Origin'] = '*'",
    "target": "Allowing `*` in CORS settings exposes APIs to Cross-Site Request Forgery (CSRF)."
  },
  {
    "func": "def insecure_smtp_configuration():\n    smtp = smtplib.SMTP('mail.example.com', 25)",
    "target": "Using SMTP without TLS encryption can expose sensitive email content."
  },
  {
    "func": "def missing_helmet_headers():\n    response.headers['X-Frame-Options'] = ''",
    "target": "Lack of security headers allows clickjacking attacks."
  },
  {
    "func": "def missing_content_security_policy():\n    response.headers['Content-Security-Policy'] = ''",
    "target": "Not enforcing a Content Security Policy (CSP) increases XSS risk."
  },
  {
    "func": "def missing_logging_in_auth():\n    def login(username, password):\n        if authenticate(username, password):\n            return 'Success!'",
    "target": "Failing to log authentication attempts allows brute-force login attempts to go undetected."
  },
  {
    "func": "def weak_file_upload_validation(file):\n    if file.filename.endswith('.jpg'):\n        file.save('/uploads/' + file.filename)",
    "target": "Checking file extensions alone is insufficient; use MIME type validation."
  },
  {
    "func": "def unsafe_webhook_parsing(request_data):\n    data = json.loads(request_data)",
    "target": "Parsing user-controlled JSON without validation can lead to deserialization attacks."
  },
  {
    "func": "def allowing_user_controlled_redirects(url):\n    return redirect(url)",
    "target": "Redirecting users without validation allows phishing attacks."
  },
  {
    "func": "def missing_brute_force_protection():\n    def login(username, password):\n        if username == 'admin' and password == 'password':\n            return 'Success'",
    "target": "Not enforcing rate limiting allows brute force login attacks."
  },
  {
    "func": "def insecure_xslt_processing(xml_input):\n    transformer = etree.XSLT(etree.XML(xml_input))",
    "target": "Processing untrusted XML data with XSLT can allow XML External Entity (XXE) attacks."
  },
  {
    "func": "def hardcoded_api_keys():\n    API_KEY = 'sk_test_12345'",
    "target": "Hardcoding API keys in source code exposes them to leaks."
  },
  {
    "func": "def unsafe_yaml_loading(yaml_data):\n    data = yaml.load(yaml_data)",
    "target": "Using `yaml.load()` without `safe_load()` allows arbitrary code execution."
  },
  {
    "func": "def missing_account_lockout():\n    def login(username, password):\n        if authenticate(username, password):\n            return 'Welcome!'",
    "target": "Not locking accounts after failed login attempts increases brute force risks."
  },
  {
    "func": "def insecure_cookie_handling():\n    response.set_cookie('session', session_id)",
    "target": "Ensure cookies are set with `HttpOnly`, `Secure`, and `SameSite` attributes."
  },
  {
    "func": "def excessive_permissions_on_file():\n    os.chmod('/important/file.txt', 0o777)",
    "target": "Avoid overly permissive file permissions."
  },
  {
    "func": "def missing_parameter_sanitization(input_param):\n    return input_param",
    "target": "Failing to sanitize input parameters increases the risk of injection attacks."
  },
  {
    "func": "def storing_password_in_plaintext(password):\n    db.save({'password': password})",
    "target": "Passwords should never be stored in plaintext; use hashing instead."
  },
  {
    "func": "def excessive_stack_trace_leak():\n    try:\n        risky_operation()\n    except Exception as e:\n        return str(e)",
    "target": "Exposing detailed stack traces in responses provides attackers with useful information."
  },
  {
    "func": "def missing_content_security_policy():\n    response.headers['Content-Security-Policy'] = ''",
    "target": "Not setting a Content Security Policy (CSP) leaves the application vulnerable to XSS attacks."
  },
  {
    "func": "def exposing_private_cloud_storage():\n    storage.set_public('bucket-name', True)",
    "target": "Exposing cloud storage publicly can lead to unauthorized data access."
  },
  {
    "func": "def unrestricted_websocket_connections():\n    ws = WebSocket()\n    ws.connect('wss://example.com')",
    "target": "Failing to authenticate WebSocket connections exposes APIs to hijacking."
  },
  {
    "func": "def missing_oauth_scope_restrictions():\n    oauth.request_token(scope='*')",
    "target": "Overly broad OAuth scopes allow unauthorized API access."
  },
  {
    "func": "def using_weak_password_hashing():\n    return hashlib.md5(password.encode()).hexdigest()",
    "target": "Using MD5 for password hashing makes it easy to crack. Use bcrypt or Argon2 instead."
  },
  {
    "func": "def insecure_jwt_storage():\n    localStorage.setItem('jwt', token)",
    "target": "Storing JWT tokens in local storage makes them vulnerable to XSS attacks."
  },
  {
    "func": "def missing_websocket_message_validation():\n    ws.onmessage = lambda event: process_message(event.data)",
    "target": "Failing to validate WebSocket messages allows attackers to send malicious payloads."
  },
  {
    "func": "def exposing_internal_services_over_http():\n    requests.get('http://10.0.0.1:8000')",
    "target": "Using internal services over HTTP instead of HTTPS exposes them to interception."
  },
  {
    "func": "def allowing_unvalidated_redirects():\n    return redirect(request.args.get('url'))",
    "target": "Unvalidated redirects allow attackers to redirect users to phishing sites."
  },
  {
    "func": "def leaking_internal_stack_traces():\n    print(exception)",
    "target": "Exposing stack traces in production leaks sensitive debugging information."
  },
  {
    "func": "def missing_rate_limits_on_admin_api():\n    @app.route('/admin/reset_password')\n    def reset_password():\n        return 'Password reset successful'",
    "target": "Not enforcing rate limits on admin endpoints increases brute-force attack risks."
  },
  {
    "func": "def weak_sso_implementation():\n    if user_email.endswith('@trusted.com'):\n        authenticate(user_email)",
    "target": "Using email domain-based authentication is insecure and easy to bypass."
  },
  {
    "func": "def exposing_graphql_introspection():\n    @app.route('/graphql')\n    def graphql():\n        return schema.introspect()",
    "target": "Allowing GraphQL introspection in production exposes API structure to attackers."
  },
  {
    "func": "def missing_cache_control_headers():\n    response.headers['Cache-Control'] = ''",
    "target": "Not setting cache control headers allows sensitive data to be stored in browser caches."
  },
  {
    "func": "def publically_exposed_admin_dashboard():\n    @app.route('/admin')\n    def admin_panel():\n        return render_template('admin.html')",
    "target": "Not restricting access to the admin panel allows unauthorized users to access it."
  },
  {
    "func": "def insufficient_logging_and_monitoring():\n    def authenticate(user):\n        return 'Login successful'",
    "target": "Failing to log authentication attempts makes detecting brute force attacks difficult."
  },
  {
    "func": "def allowing_user_controlled_regex():\n    re.match(user_input, text)",
    "target": "Allowing user-controlled regex patterns can lead to denial-of-service attacks."
  },
  {
    "func": "def overprivileged_cloud_storage_access():\n    policy = {\"Effect\": \"Allow\", \"Action\": \"s3:*\", \"Resource\": \"*\"}",
    "target": "Granting overly broad S3 permissions increases the risk of data leaks."
  },
  {
    "func": "def missing_csrf_protection_on_sensitive_actions():\n    @app.route('/transfer_money', methods=['POST'])\n    def transfer():\n        return 'Transfer Successful'",
    "target": "APIs without CSRF protection can be exploited for unauthorized transactions."
  },
  {
    "func": "def storing_sensitive_data_in_logs():\n    log.info(f'User {username} logged in with password: {password}')",
    "target": "Logging sensitive information exposes credentials and user data."
  },
  {
    "func": "def using_weak_encryption():\n    cipher = AES.new(key, AES.MODE_ECB)\n    return cipher.encrypt(data)",
    "target": "Using ECB mode for encryption is insecure. Use AES-GCM for better security."
  },
  {
    "func": "def allowing_user_controlled_file_paths():\n    with open(request.args.get('file')) as f:\n        return f.read()",
    "target": "Allowing user-controlled file paths can lead to path traversal attacks."
  },
  {
    "func": "def missing_session_expiration():\n    session.permanent = False",
    "target": "Not setting session expiration increases the risk of session hijacking."
  },
  {
    "func": "def exposing_internal_docker_ports():\n    docker run -p 2375:2375 mycontainer",
    "target": "Exposing Docker API ports publicly allows remote container management."
  },
  {
    "func": "def missing_access_control_on_cloud_storage():\n    bucket.set_public(True)",
    "target": "Making cloud storage public allows attackers to access sensitive files."
  },
  {
    "func": "def insecure_federated_authentication():\n    if 'sso_token' in request.cookies:\n        authenticate(request.cookies['sso_token'])",
    "target": "Failing to validate SSO tokens properly leads to authentication bypass."
  },
  {
    "func": "def allowing_unverified_email_change():\n    user.email = request.args.get('email')",
    "target": "Allowing email changes without verification enables account hijacking."
  },
  {
    "func": "def exposing_internal_admin_api():\n    @app.route('/admin/api')\n    def admin_api():\n        return jsonify({'status': 'ok'})",
    "target": "Not restricting access to internal admin APIs allows unauthorized use."
  },
  {
    "func": "def weak_oauth_implementation():\n    @app.route('/oauth')\n    def oauth():\n        return token",
    "target": "Using OAuth without scopes or proper validation increases security risks."
  },
  {
    "func": "def unnecessary_nested_condition(x):\n    if x > 0:\n        if x < 100:\n            return True",
    "target": "Flatten nested conditions where possible to improve readability."
  },
  {
    "func": "def redundant_else_in_return():\n    if x > 0:\n        return 'Positive'\n    else:\n        return 'Negative'",
    "target": "Remove redundant `else` after `return`, as execution stops at `return`."
  },
  {
    "func": "def excessive_blank_lines():\n    \n    \n    def foo():\n        return 42\n    \n    \n    \n",
    "target": "Avoid excessive blank lines that disrupt code flow."
  },
  {
    "func": "def unclear_parameter_names(a, b, c):\n    return a + b - c",
    "target": "Use meaningful parameter names to improve function readability."
  },
  {
    "func": "def large_function():\n    def foo():\n        step1()\n        step2()\n        step3()\n        step4()\n        step5()\n        step6()\n    return foo()",
    "target": "Break large functions into smaller, well-named helper functions."
  },
  {
    "func": "def excessive_comments():\n    # Adding two numbers\n    # Storing in result\n    # Returning the result\n    def add(x, y):\n        return x + y",
    "target": "Use self-explanatory code instead of excessive comments."
  },
  {
    "func": "def deep_function_call():\n    def step1():\n        return step2()\n    def step2():\n        return step3()\n    def step3():\n        return 42",
    "target": "Avoid deep function calls that obscure logic flow."
  },
  {
    "func": "def ambiguous_return_type():\n    if x > 0:\n        return 'Valid'\n    else:\n        return 1",
    "target": "Ensure consistent return types for better function predictability."
  },
  {
    "func": "def inconsistent_indentation():\n    if x > 0:\n        return True\n     else:\n        return False",
    "target": "Ensure consistent indentation to maintain readability and avoid errors."
  },
  {
    "func": "def overly_generic_function():\n    def process(data):\n        return data",
    "target": "Avoid overly generic function names. Use descriptive function names instead."
  },
  {
    "func": "def non_expressive_boolean():\n    def is_enabled():\n        return x == 1",
    "target": "Use explicit boolean values instead of comparisons with numbers."
  },
  {
    "func": "def redundant_parentheses():\n    return (x + y) * (z)",
    "target": "Avoid unnecessary parentheses to simplify expressions."
  },
  {
    "func": "def redundant_variable():\n    result = x + y\n    return result",
    "target": "Avoid redundant variables; return expressions directly when possible."
  },
  {
    "func": "def mixing_tabs_and_spaces():\n    if x > 0:\n        print('Valid')\n\tprint('Error')",
    "target": "Avoid mixing tabs and spaces for indentation."
  },
  {
    "func": "def missing_function_docstring():\n    def add(x, y):\n        return x + y",
    "target": "Provide a function docstring to describe its purpose."
  },
  {
    "func": "def inconsistent_variable_naming():\n    userName = 'John'\n    user_email = 'john@example.com'",
    "target": "Follow consistent naming conventions (e.g., use snake_case for variables)."
  },
  {
    "func": "def poorly_named_class():\n    class X:\n        pass",
    "target": "Use meaningful class names that describe their purpose."
  },
  {
    "func": "def too_many_function_arguments(a, b, c, d, e, f):\n    return a + b + c + d + e + f",
    "target": "Limit function parameters to a manageable number; use objects or dictionaries instead."
  },
  {
    "func": "def inefficient_imports():\n    import os, sys, math, random, time, json, logging",
    "target": "Avoid excessive imports. Only import what is necessary."
  },
  {
    "func": "def unnecessary_double_assignment():\n    x = 10\n    y = x",
    "target": "Avoid unnecessary variable assignments."
  },
  {
    "func": "def inconsistent_spacing():\n    a=10\n    b = 20\n    c= 30",
    "target": "Use consistent spacing around operators and variables for readability."
  },
  {
    "func": "def unclear_loop_variable():\n    for x in range(10):\n        process(x)",
    "target": "Use meaningful loop variable names (e.g., `index`, `item`) instead of `x`."
  },
  {
    "func": "def complex_lambda():\n    process = lambda x: (x**2 + 2*x + 1)/3",
    "target": "Avoid overly complex lambda functions; use named functions instead."
  },
  {
    "func": "def inconsistent_function_call():\n    processData()\n    process_data()",
    "target": "Use a consistent function naming convention throughout your code."
  },
  {
    "func": "def unnecessary_try_except():\n    try:\n        result = x + y\n    except:\n        pass",
    "target": "Do not use `try-except` when an error is not expected."
  },
  {
    "func": "def missing_enumerate():\n    i = 0\n    for item in data:\n        print(i, item)\n        i += 1",
    "target": "Use `enumerate()` instead of manually tracking an index."
  },
  {
    "func": "def missing_context_manager():\n    file = open('data.txt', 'r')\n    content = file.read()\n    file.close()",
    "target": "Use `with open(...)` to handle files safely."
  },
  {
    "func": "def poorly_formatted_multiline_string():\n    text = 'This is a long string that should be split into multiple lines but it is not'",
    "target": "Break long strings into multiple lines using triple quotes or string concatenation."
  },
  {
    "func": "def overuse_of_one_letter_variables():\n    def f(a, b, c):\n        return a + b - c",
    "target": "Avoid using single-letter variable names except in mathematical or short contexts."
  },
  {
    "func": "class GodClass:\n    def __init__(self):\n        self.data = {}\n    def process(self):\n        self.load()\n        self.validate()\n        self.calculate()\n        self.save()\n    def load(self):\n        pass\n    def validate(self):\n        pass\n    def calculate(self):\n        pass\n    def save(self):\n        pass",
    "target": "Avoid 'God' classes that handle too many responsibilities. Follow the Single Responsibility Principle (SRP)."
  },
  {
    "func": "class ViolatesOCP:\n    def __init__(self, shape_type):\n        self.shape_type = shape_type\n    def calculate_area(self):\n        if self.shape_type == 'circle':\n            return self.radius * self.radius * 3.14\n        elif self.shape_type == 'square':\n            return self.side * self.side",
    "target": "Violates Open-Closed Principle (OCP). Instead, use polymorphism to extend behavior."
  },
  {
    "func": "class PoorEncapsulation:\n    def __init__(self):\n        self.data = []  # Directly accessible from outside",
    "target": "Use encapsulation. Make attributes private (`self._data`) and provide getters/setters."
  },
  {
    "func": "class UnusedMethod:\n    def useful_method(self):\n        return 'I am used'\n    def unused_method(self):\n        pass",
    "target": "Remove unused methods to reduce code clutter."
  },
  {
    "func": "class UnnecessaryInheritance(BaseClass):\n    def method(self):\n        return 'Functionality same as BaseClass'",
    "target": "Avoid unnecessary inheritance. Use composition over inheritance when possible."
  },
  {
    "func": "class InefficientClass:\n    def __init__(self):\n        self.items = []\n    def add_item(self, item):\n        self.items.append(item)\n    def find_item(self, item):\n        for i in self.items:\n            if i == item:\n                return True",
    "target": "Use efficient data structures. Consider `set` for faster lookups."
  },
  {
    "func": "class TooManyConstructors:\n    def __init__(self, name):\n        self.name = name\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age",
    "target": "Avoid multiple `__init__` methods. Use default values or class methods."
  },
  {
    "func": "class GlobalDependency:\n    shared_resource = []\n    def add_item(self, item):\n        self.shared_resource.append(item)",
    "target": "Avoid modifying global variables inside a class. Use instance variables instead."
  },
  {
    "func": "class UnnecessaryStaticMethod:\n    @staticmethod\n    def add(a, b):\n        return a + b",
    "target": "Use static methods only when they do not depend on class state."
  },
  {
    "func": "class CircularDependency:\n    from module_a import A\n    from module_b import B",
    "target": "Avoid circular dependencies. Use dependency injection or restructuring."
  },
  {
    "func": "class ExcessiveConstructorLogic:\n    def __init__(self, config):\n        self.data = load_data(config)\n        self.cache = Cache()\n        self.session = Session()",
    "target": "Keep constructors simple. Move complex logic to a separate method."
  },
  {
    "func": "class MissingInterface:\n    class Dog:\n        def make_sound(self):\n            return 'Bark'\n    class Cat:\n        def make_sound(self):\n            return 'Meow'",
    "target": "Use interfaces or abstract base classes for common behavior."
  },
  {
    "func": "class TightlyCoupled:\n    def __init__(self):\n        self.db = Database()\n    def fetch(self):\n        return self.db.get_data()",
    "target": "Avoid tight coupling. Inject dependencies via constructors."
  },
  {
    "func": "class PoorlyNamedClass:\n    class XYZ:\n        pass",
    "target": "Use meaningful class names to improve readability."
  },
  {
    "func": "class TooManyParameters:\n    def process(self, a, b, c, d, e, f):\n        return a + b + c + d + e + f",
    "target": "Reduce the number of parameters in methods. Use data structures instead."
  },
  {
    "func": "class LongClass:\n    def method1(self): pass\n    def method2(self): pass\n    def method3(self): pass\n    def method4(self): pass\n    def method5(self): pass\n    def method6(self): pass\n    def method7(self): pass\n    def method8(self): pass\n    def method9(self): pass",
    "target": "Break down large classes into smaller, focused classes."
  },
  {
    "func": "class OverloadedMethod:\n    def process(self, data):\n        if isinstance(data, list):\n            return 'Processing list'\n        elif isinstance(data, dict):\n            return 'Processing dict'",
    "target": "Use method overloading via single responsibility rather than type checking."
  },
  {
    "func": "class NonStandardNaming:\n    def DoSomething(self):\n        pass",
    "target": "Follow standard naming conventions (e.g., snake_case for methods in Python)."
  },
  {
    "func": "class InefficientSorting:\n    def sort_list(self, data):\n        return sorted(data)",
    "target": "Use in-place sorting (`data.sort()`) instead of returning a new list."
  },
  {
    "func": "class UselessWrapper:\n    def process(self, value):\n        return value",
    "target": "Avoid wrapping functions that do not add meaningful logic."
  },
  {
    "func": "class PoorVisibility:\n    class _InternalClass:\n        pass",
    "target": "Use proper visibility (`_` for internal, `__` for private) where needed."
  },
  {
    "func": "class ImproperAbstractClass:\n    def work(self):\n        raise NotImplementedError",
    "target": "Use `abc` module to define abstract base classes properly."
  },
  {
    "func": "class InconsistentReturn:\n    def process(self, x):\n        if x > 0:\n            return 'Valid'\n        return",
    "target": "Ensure methods return consistent data types."
  },
  {
    "func": "class OvercomplicatedInitialization:\n    def __init__(self, db_host, db_user, db_password, db_port):\n        self.db_host = db_host\n        self.db_user = db_user\n        self.db_password = db_password\n        self.db_port = db_port",
    "target": "Use configuration objects or environment variables for complex initialization."
  },
  {
    "func": "class UnusedAttribute:\n    def __init__(self):\n        self.temp = 42",
    "target": "Remove unused attributes to reduce memory usage and improve clarity."
  },
  {
    "func": "class NonIntuitiveInheritance:\n    class Rectangle(Shape):\n        pass",
    "target": "Ensure subclass behavior aligns with the parent class contract."
  },
  {
    "func": "class WeakEncapsulation:\n    def __init__(self):\n        self._data = []",
    "target": "Use private variables (`__data`) when internal state should not be modified directly."
  },
  {
    "func": "class TooManyDependencies:\n    def __init__(self, db, cache, logger, session, service, config):\n        pass",
    "target": "Avoid excessive dependencies in a single class. Apply Dependency Injection (DI)."
  },
  {
    "func": "class Singleton:\n    def __new__(cls):\n        if not hasattr(cls, 'instance'):\n            cls.instance = super(Singleton, cls).__new__(cls)\n        return cls.instance",
    "target": "Avoid singleton pattern unless necessary. It introduces global state and complicates testing."
  },
  {
    "func": "def excessive_logging():\n    for i in range(10000):\n        print('Logging event:', i)",
    "target": "Excessive logging can degrade performance. Use log levels like DEBUG or INFO."
  },
  {
    "func": "def missing_benchmarking():\n    data = list(range(1000000))\n    squared = [x**2 for x in data]",
    "target": "Use benchmarking tools (e.g., `timeit`, `cProfile`) for performance-critical code."
  },
  {
    "func": "def weak_api_auth():\n    if api_key == 'my_secret_key':\n        return True",
    "target": "Avoid hardcoding API keys. Use secure authentication mechanisms like OAuth."
  },
  {
    "func": "class DataLeak:\n    def __init__(self):\n        self.sensitive_data = 'password123'",
    "target": "Do not store sensitive data in memory for extended periods. Use secure storage."
  },
  {
    "func": "def slow_db_query():\n    query = 'SELECT * FROM users WHERE age > 18'\n    db.execute(query)",
    "target": "Optimize database queries by selecting only necessary fields (`SELECT name, age FROM users`)."
  },
  {
    "func": "class PoorAbstraction:\n    def __init__(self):\n        self.users = []\n    def add_user(self, user):\n        self.users.append(user)",
    "target": "Use data access layers instead of directly modifying collections inside classes."
  },
  {
    "func": "def non_standard_json():\n    json_data = \"{'name': 'John', 'age': 30}\"",
    "target": "Use proper JSON formatting (`json.dumps(data)`) to avoid parsing issues."
  },
  {
    "func": "def nested_function_definitions():\n    def outer():\n        def inner1():\n            def inner2():\n                def inner3():\n                    def inner4():\n                        print('Too deep')\n                    inner4()\n                inner3()\n            inner2()\n        inner1()\n    outer()",
    "target": "Avoid deeply nested functions (5 levels detected). Use separate module-level functions."
  },
  {
    "func": "def outdated_crypto():\n    import hashlib\n    hash = hashlib.md5(password.encode()).hexdigest()",
    "target": "Use secure hashing algorithms like bcrypt or Argon2 instead of MD5."
  },
  {
    "func": "def improper_api_error_handling():\n    try:\n        api_call()\n    except:\n        return 'Error'",
    "target": "Use structured error responses (e.g., `{ 'error': 'Invalid request', 'code': 400 }`)."
  },
  {
    "func": "def unoptimized_sorting():\n    numbers = [5, 2, 9, 1]\n    sorted_numbers = sorted(numbers, key=lambda x: x*x)",
    "target": "For large datasets, use efficient sorting algorithms based on context."
  },
  {
    "func": "def poor_caching():\n    def fetch_data():\n        return expensive_query()",
    "target": "Use caching mechanisms (e.g., Redis, in-memory cache) for frequently accessed data."
  },
  {
    "func": "def static_query_building():\n    query = 'SELECT * FROM users WHERE id = ' + user_id",
    "target": "Use prepared statements to prevent SQL injection attacks."
  },
  {
    "func": "def inefficient_memory_usage():\n    big_list = [0] * 10000000",
    "target": "Use generators (`yield`) instead of large lists for memory efficiency."
  },
  {
    "func": "class MisusedInheritance(Vehicle):\n    def honk(self):\n        return 'Beep'",
    "target": "Only use inheritance when there is a true 'is-a' relationship. Otherwise, prefer composition."
  },
  {
    "func": "def unhandled_async_exceptions():\n    async def fetch_data():\n        result = await api_call()",
    "target": "Always handle exceptions in async functions (`try-except`)."
  },
  {
    "func": "def missing_default_case():\n    def process_input(option):\n        if option == 'A':\n            return 'Option A'\n        elif option == 'B':\n            return 'Option B'",
    "target": "Always include a default case in conditionals to handle unexpected inputs."
  },
  {
    "func": "def incorrect_timezone_handling():\n    now = datetime.datetime.now()",
    "target": "Use timezone-aware datetime (`datetime.datetime.utcnow()` or `pytz`)."
  },
  {
    "func": "class HardcodedFilePath:\n    FILE_PATH = '/usr/data/file.txt'",
    "target": "Use environment variables or config files for file paths."
  },
  {
    "func": "def missing_unit_tests():\n    def add(a, b):\n        return a + b",
    "target": "Write unit tests for functions to ensure reliability."
  },
  {
    "func": "def unused_import():\n    import math",
    "target": "Remove unused imports to keep code clean."
  },
  {
    "func": "def excessive_data_loading():\n    users = db.get_all_users()",
    "target": "Only load necessary data (`db.get_users(limit=100)`)."
  },
  {
    "func": "def missing_api_rate_limiting():\n    def api_endpoint():\n        return 'Data'",
    "target": "Implement rate limiting (`API Gateway, Redis`) to prevent abuse."
  },
  {
    "func": "def excessive_dependency_usage():\n    import requests\n    import httpx\n    import urllib3",
    "target": "Avoid redundant dependencies. Choose one library per functionality."
  },
  {
    "func": "def unclosed_database_connection():\n    conn = sqlite3.connect('data.db')\n    cursor = conn.cursor()\n    cursor.execute('SELECT * FROM users')",
    "target": "Always close database connections (`with sqlite3.connect() as conn`)."
  },
  {
    "func": "class UnscalableClass:\n    def process_data(self, data):\n        return [x*2 for x in data]",
    "target": "Consider parallel processing (`multiprocessing`, `asyncio`) for large datasets."
  },
  {
    "func": "def unrestricted_file_upload():\n    def upload_file(file):\n        file.save('/uploads/' + file.filename)",
    "target": "Sanitize file uploads (`validate file type, size limits`)."
  },
  {
    "func": "def sql_injection(user_input):\n    query = 'SELECT * FROM users WHERE name = ' + user_input\n    return query",
    "target": "Avoid string concatenation in SQL queries. Use parameterized queries to prevent SQL injection."
  },
  {
    "func": "def risky_eval(data):\n    return eval(data)",
    "target": "Avoid using eval as it can execute arbitrary code. Use ast.literal_eval for safer parsing."
  },
  {
    "func": "def unused_variable():\n    x = 10\n    return 5",
    "target": "No specific issue detected."
  },
  {
    "func": "def long_function():\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n",
    "target": "Function length exceeds recommended limits. Split into smaller functions."
  },
  {
    "func": "def too_many_params(a, b, c, d, e, f, g):\n    return a + b + c + d + e + f + g",
    "target": "Avoid using too many parameters in a function. Consider using a data structure like a dictionary."
  },
  {
    "func": "def nested_loops():\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                for m in range(10):\n                    for n in range(10):\n                        print(i, j, k, m, n)",
    "target": "Avoid deep nesting in loops (5 levels detected). Consider breaking it into functions or using iterators."
  },
  {
    "func": "def hard_coded_secret():\n    secret = 'password_2123'\n    return secret",
    "target": "Avoid hardcoding secrets in code. Use environment variables or secret management tools."
  },
  {
    "func": "def sql_injection(user_input):\n    query = 'SELECT * FROM users WHERE name = ' + user_input\n    return query",
    "target": "Avoid string concatenation in SQL queries. Use parameterized queries to prevent SQL injection."
  },
  {
    "func": "def insecure_file_handling():\n    with open('data.txt', 'w') as file:\n        file.write(data)\n    return True",
    "target": "Validate file paths to prevent directory traversal vulnerabilities."
  },
  {
    "func": "def weak_cryptography(password):\n    return hashlib.md5(password.encode()).hexdigest()",
    "target": "Avoid using MD5 for hashing. Use a secure hashing algorithm like bcrypt or SHA-256."
  },
  {
    "func": "def empty_exception_handling():\n    try:\n        risky_code()\n    except:\n        pass",
    "target": "Avoid empty exception handling blocks. Provide specific error-handling logic."
  },
  {
    "func": "def magic_numbers():\n    if x == 42:\n        return True",
    "target": "Avoid using magic numbers. Define constants with meaningful names."
  },
  {
    "func": "def chained_calls():\n    return obj.method1().method2().method3().method4()",
    "target": "Avoid long chains of method calls. Break into intermediate steps."
  },
  {
    "func": "def deprecated_library_usage():\n    import cgi\n    return cgi.escape('<html>')",
    "target": "Avoid using deprecated libraries. Replace with modern alternatives."
  },
  {
    "func": "def excessive_globals():\n    global x\n    x = 42\n    return x",
    "target": "Avoid excessive use of global variables. Use function parameters or class attributes."
  },
  {
    "func": "def resource_leak():\n    file = open('data.txt', 'r')\n    data = file.read()\n    return data",
    "target": "Ensure proper resource management by using context managers."
  },
  {
    "func": "def circular_imports():\n    import module_a\n    return module_a.value",
    "target": "Avoid circular imports by refactoring dependencies."
  },
  {
    "func": "def missing_exception_message():\n    raise Exception()",
    "target": "Provide meaningful messages in exception-raising to improve debugging."
  },
  {
    "func": "def unreachable_code():\n    return\n    print('This will never run')",
    "target": "Remove unreachable code to keep the codebase clean."
  },
  {
    "func": "def variable_shadowing():\n    x = 10\n    def inner():\n        x = 5\n        return x\n    return inner()",
    "target": "Avoid variable shadowing. Use distinct variable names."
  },
  {
    "func": "def naming_conventions():\n    VarName = 10\n    return VarName",
    "target": "Follow consistent naming conventions like snake_case for better readability."
  },
  {
    "func": "def inconsistent_return():\n    if condition:\n        return True\n    else:\n        return 1",
    "target": "Ensure consistent return types for better code understanding."
  },
  {
    "func": "def unused_imports():\n    import math\n    return 42",
    "target": "Remove unused imports to reduce clutter and improve performance."
  },
  {
    "func": "def excessive_comments():\n    # This function adds two numbers\n    def add(a, b):\n        return a + b",
    "target": "Avoid excessive comments. Write self-explanatory code instead."
  },
  {
    "func": "def inconsistent_whitespace():\n    x=10\n    return x",
    "target": "Use consistent whitespace for better code readability."
  },
  {
    "func": "def inconsistent_indentation():\n    if condition:\n    return True",
    "target": "Use consistent indentation to improve code structure and readability."
  },
  {
    "func": "def inconsistent_quotes():\n    return 'Hello'",
    "target": "Use consistent quotes for strings in the codebase."
  },
  {
    "func": "def inconsistent_newlines():\n    return 42\n",
    "target": "Use consistent newline characters at the end of files."
  },
  {
    "func": "def inconsistent_line_length():\n    return 'This is a very long line that exceeds the recommended line length'",
    "target": "Ensure consistent line lengths for better code readability."
  },
  {
    "func": "def inconsistent_function_calls():\n    return math.sqrt (x)",
    "target": "Use consistent spacing around function calls for better code readability."
  },
  {
    "func": "def inconsistent_function_def():\n    def func (x, y):\n        return x + y",
    "target": "Use consistent spacing around function definitions for better code readability."
  },
  {
    "func": "def inconsistent_list_comprehension():\n    return [ x for x in range(10) ]",
    "target": "Use consistent spacing in list comprehensions for better code readability."
  },
  {
    "func": "def sql_injection_vulnerability(user_input):\n    query = f\"SELECT * FROM users WHERE name = '{user_input}'\"\n    return query",
    "target": "Avoid SQL injection by using prepared statements and parameterized queries."
  },
  {
    "func": "def risky_exec(data):\n    exec(data)",
    "target": "Avoid using exec as it can execute arbitrary code. Refactor to use safer alternatives."
  },
  {
    "func": "def lack_of_comments(x):\n    return x * x",
    "target": "Add comments to clarify the purpose and functionality of the code."
  },
  {
    "func": "def excessive_recursion(n):\n    if n == 0:\n        return 1\n    else:\n        return n * excessive_recursion(n-1)",
    "target": "Avoid excessive recursion; it may lead to stack overflow. Use iterative solutions where possible."
  },
  {
    "func": "def insecure_random():\n    return random.random()",
    "target": "Avoid using insecure random number generators for cryptographic purposes. Use secrets or os.urandom."
  },
  {
    "func": "def improper_sanitization(user_input):\n    os.system('rm -rf ' + user_input)",
    "target": "Validate and sanitize inputs to avoid command injection vulnerabilities."
  },
  {
    "func": "def overly_complex_conditions(a, b):\n    if a > 10 and b < 5 and a + b > 15 and a - b < 0:\n        return True",
    "target": "Simplify complex conditions to improve readability and maintainability."
  },
  {
    "func": "def non_descriptive_variables(x, y):\n    return x + y",
    "target": "Use descriptive variable names to improve code readability."
  },
  {
    "func": "def insecure_protocol(url):\n    if url.startswith('http:'):\n        return 'Insecure URL detected'",
    "target": "Avoid insecure protocols. Use HTTPS instead of HTTP."
  },
  {
    "func": "def redundant_code():\n    x = 5\n    y = 5\n    return x + y",
    "target": "Remove redundant code to improve efficiency and reduce clutter."
  },
  {
    "func": "def missing_return():\n    if condition:\n        return True",
    "target": "Ensure all branches of a function have return statements."
  },
  {
    "func": "def outdated_function_usage():\n    return 'Hello, %s' % 'World'",
    "target": "Avoid outdated string formatting. Use f-strings or format() instead."
  },
  {
    "func": "def no_docstring():\n    return 42",
    "target": "Add a docstring to explain the function's purpose and usage."
  },
  {
    "func": "def improper_file_permissions():\n    os.chmod('file.txt', 0o777)",
    "target": "Avoid setting overly permissive file permissions. Use the least privilege principle."
  },
  {
    "func": "def large_hardcoded_data():\n    data = [1, 2, 3, 4, 5, ...]  # Thousands of entries\n    return data",
    "target": "Avoid hardcoding large datasets. Use external files or databases."
  },
  {
    "func": "def excessive_logging():\n    for i in range(1000000):\n        print(i)",
    "target": "Avoid excessive logging as it can reduce performance and clutter logs."
  },
  {
    "func": "def blocking_code():\n    time.sleep(10)\n    return 'Done'",
    "target": "Avoid blocking code in asynchronous contexts. Use non-blocking alternatives."
  },
  {
    "func": "def unsafe_path_construction(base, filename):\n    return base + '/' + filename",
    "target": "Validate paths to prevent directory traversal vulnerabilities."
  },
  {
    "func": "def unchecked_cast(x):\n    return int(x)",
    "target": "Validate data before casting to prevent unexpected errors."
  },
  {
    "func": "def unhandled_exceptions():\n    return 10 / 0",
    "target": "Handle exceptions properly to prevent runtime crashes."
  },
  {
    "func": "def hardcoded_credentials():\n    return 'admin:password'",
    "target": "Avoid hardcoding credentials in code. Use secure storage solutions."
  },
  {
    "func": "def excessive_memory_usage():\n    data = [i for i in range(1000000)]\n    return sum(data)",
    "target": "Avoid excessive memory usage. Optimize data structures and algorithms."
  },
  {
    "func": "def excessive_function_calls():\n    return func1(func2(func3(func4(func5(x))))",
    "target": "Avoid excessive function calls. Use intermediate variables for clarity."
  },
  {
    "func": "def excessive_string_operations():\n    return 'a' + 'b' + 'c' + 'd' + 'e' + 'f' + 'g'",
    "target": "Avoid excessive string operations. Use string formatting or join methods."
  },
  {
    "func": "def excessive_list_operations():\n    data = [1, 2, 3]\n    return data + data + data + data",
    "target": "Avoid excessive list operations. Use list comprehensions or generators."
  },
  {
    "func": "def excessive_dict_operations():\n    data = {1: 'a', 2: 'b', 3: 'c'}\n    return data.keys() + data.values()",
    "target": "Avoid excessive dictionary operations. Use dict comprehensions or methods."
  },
  {
    "func": "def excessive_math_operations():\n    return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10",
    "target": "Avoid excessive math operations. Use built-in functions or loops."
  },
  {
    "func": "def excessive_file_operations():\n    with open('data.txt', 'r') as file:\n        data = file.read()\n    return data + data + data + data",
    "target": "Avoid excessive file operations. Read data once and reuse it."
  },
  {
    "func": "def insecure_deserialization(data):\n    return pickle.loads(data)",
    "target": "Avoid using pickle for deserialization as it can execute arbitrary code. Use safer libraries like json."
  },
  {
    "func": "def missing_input_validation(data):\n    return data[0]",
    "target": "Validate input to ensure it meets the expected format and constraints."
  },
  {
    "func": "def inefficient_loop():\n    for i in range(1000000):\n        for j in range(len(data)):\n            process(data[j])",
    "target": "Optimize nested loops to avoid performance bottlenecks."
  },
  {
    "func": "def lack_of_unit_tests():\n    def add(a, b):\n        return a + b\n    return add",
    "target": "Add unit tests to ensure code correctness and prevent regressions."
  },
  {
    "func": "def missing_logging():\n    try:\n        risky_operation()\n    except Exception:\n        pass",
    "target": "Add logging to capture exception details for debugging and monitoring."
  },
  {
    "func": "def improper_exception_handling():\n    try:\n        risky_code()\n    except KeyError:\n        return 'Error occurred'",
    "target": "Catch specific exceptions and handle them appropriately."
  },
  {
    "func": "def missing_context_manager():\n    file = open('data.txt', 'r')\n    data = file.read()\n    file.close()\n    return data",
    "target": "Use context managers to ensure resources are properly closed after use."
  },
  {
    "func": "def potential_divide_by_zero(x):\n    return 10 / x",
    "target": "Check for zero before performing division to avoid runtime errors."
  },
  {
    "func": "def insufficient_password_complexity(password):\n    if len(password) > 8:\n        return True\n    return False",
    "target": "Enforce stronger password policies, including special characters, numbers, and case sensitivity."
  },
  {
    "func": "def hardcoded_api_key():\n    api_key = '12345-abcdef-67890'\n    return api_key",
    "target": "Avoid hardcoding API keys. Use environment variables or secure vaults."
  },
  {
    "func": "def redundant_else_in_return():\n    if condition:\n        return True\n    else:\n        return False",
    "target": "Remove redundant else statements after return for cleaner code."
  },
  {
    "func": "def no_error_handling():\n    return risky_function()",
    "target": "Add error handling to manage unexpected scenarios gracefully."
  },
  {
    "func": "def ineffective_data_structure():\n    data = []\n    for i in range(1000):\n        data.append(i)",
    "target": "Use efficient data structures, such as range or generators, for large datasets."
  },
  {
    "func": "def improper_object_initialization():\n    obj = CustomObject()\n    obj.value = 10\n    return obj",
    "target": "Use proper initialization methods to avoid incomplete or inconsistent states."
  },
  {
    "func": "def unclear_function_purpose(x):\n    return x * x",
    "target": "Add descriptive function names and docstrings to clarify functionality."
  },
  {
    "func": "def insufficient_privilege_check():\n    perform_admin_action(user)",
    "target": "Ensure privilege checks are implemented before performing sensitive actions."
  },
  {
    "func": "def memory_leak_example():\n    data = []\n    while True:\n        data.append('memory leak!')",
    "target": "Avoid unbounded memory usage. Implement limits or periodic cleanup."
  },
  {
    "func": "def risky_temp_file():\n    with open('/tmp/tempfile', 'w') as file:\n        file.write('data')",
    "target": "Use secure methods for creating temporary files to prevent race conditions."
  },
  {
    "func": "def unused_parameters(a, b):\n    return b",
    "target": "Remove unused parameters to improve code clarity and reduce confusion."
  },
  {
    "func": "def inconsistent_indentation():\n    def example():\n      return True",
    "target": "Ensure consistent indentation for better readability and maintainability."
  },
  {
    "func": "def inadequate_error_messages():\n    try:\n        risky_code()\n    except ValueError:\n        raise Exception('Error')",
    "target": "Provide detailed error messages to aid in debugging."
  },
  {
    "func": "def improper_assert_usage():\n    assert x > 0\n    return x",
    "target": "Avoid using assert statements in production code. Use explicit error handling."
  },
  {
    "func": "def improper_string_concat(name):\n    return 'Hello, ' + name + '!'",
    "target": "Use f-strings or string formatting for cleaner and more efficient string concatenation."
  },
  {
    "func": "def repeated_code():\n    print('Hello')\n    print('Hello')",
    "target": "Refactor repeated code into reusable functions or constants."
  },
  {
    "func": "def inefficient_sorting(data):\n    for i in range(len(data)):\n        for j in range(i + 1, len(data)):\n            if data[i] > data[j]:\n                data[i], data[j] = data[j], data[i]",
    "target": "Use built-in sorting methods like sorted() or list.sort() for better performance."
  },
  {
    "func": "def improper_exception_raising():\n    raise 'Error'",
    "target": "Raise exceptions using Exception classes for proper error handling."
  },
  {
    "func": "def improper_logging_level():\n    logging.debug('Debug message')",
    "target": "Use appropriate logging levels to provide the right level of detail."
  },
  {
    "func": "def improper_file_handling():\n    file = open('data.txt', 'w')\n    file.write('data')\n    file.close()",
    "target": "Use context managers to ensure files are properly closed after use."
  },
  {
    "func": "def improper_exception_catching():\n    try:\n        risky_code()\n    except:\n        pass",
    "target": "Catch specific exceptions to handle errors effectively."
  },
  {
    "func": "def improper_variable_naming():\n    VarName = 10\n    return VarName",
    "target": "Use consistent naming conventions like snake_case for variables."
  },
  {
    "func": "def improper_function_naming():\n    def FuncName():\n        return True",
    "target": "Use descriptive function names to clarify their purpose and usage."
  },
  {
    "func": "def improper_class_naming():\n    class ClassName:\n        def __init__(self):\n            pass",
    "target": "Use descriptive class names to indicate their purpose and contents."
  },
  {
    "func": "def improper_constant_naming():\n    CONSTANT_NAME = 42\n    return CONSTANT_NAME",
    "target": "Use consistent naming conventions like UPPER_CASE for constants."
  },
  {
    "func": "def improper_module_naming():\n    pass",
    "target": "Use descriptive module names to indicate their contents and purpose."
  },
  {
    "func": "def improper_package_naming():\n    pass",
    "target": "Use descriptive package names to indicate their contents and purpose."
  },
  {
    "func": "def improper_parameter_naming(x):\n    return x",
    "target": "Use descriptive parameter names to clarify their purpose and usage."
  },
  {
    "func": "def insecure_redirect(url):\n    return redirect(url)",
    "target": "Validate and sanitize user-provided URLs to prevent open redirect vulnerabilities."
  },
  {
    "func": "def no_rate_limiting():\n    for _ in range(1000):\n        process_request()",
    "target": "Implement rate limiting to prevent abuse and denial-of-service attacks."
  },
  {
    "func": "def csrf_vulnerable(request):\n    if request.method == 'POST':\n        perform_sensitive_action(request.user)",
    "target": "Use CSRF tokens to protect against cross-site request forgery attacks."
  },
  {
    "func": "def weak_session_id():\n    session_id = str(random.randint(1000, 9999))\n    return session_id",
    "target": "Use secure, cryptographically random session IDs to prevent session hijacking."
  },
  {
    "func": "def direct_object_reference(user_id):\n    return f'/user/{user_id}/profile'",
    "target": "Validate access control to prevent insecure direct object references."
  },
  {
    "func": "def missing_secure_headers():\n    return render_template('index.html')",
    "target": "Add security headers like Content-Security-Policy and X-Content-Type-Options to prevent attacks."
  },
  {
    "func": "def vulnerable_jwt(jwt_token):\n    payload = jwt.decode(jwt_token, verify=False)\n    return payload",
    "target": "Always verify JWT signatures to prevent token tampering."
  },
  {
    "func": "def hardcoded_sensitive_url():\n    url = 'http://example.com/api_key=123456'\n    return url",
    "target": "Avoid hardcoding sensitive URLs. Use secure configurations or environment variables."
  },
  {
    "func": "def missing_output_encoding(data):\n    return f'<div>{data}</div>'",
    "target": "Apply output encoding to prevent cross-site scripting (XSS) attacks."
  },
  {
    "func": "def unsafe_file_upload(file):\n    file.save(f'/uploads/{file.filename}')",
    "target": "Validate file extensions and scan uploads to prevent malicious file execution."
  },
  {
    "func": "def weak_password_storage(password):\n    hashed = hashlib.sha256(password.encode()).hexdigest()\n    return hashed",
    "target": "Use a password hashing library like bcrypt with salting for secure storage."
  },
  {
    "func": "def sensitive_data_exposure():\n    return f'Error: {error_detail}'",
    "target": "Avoid exposing sensitive details in error messages. Use generic error messages."
  },
  {
    "func": "def missing_authentication():\n    return perform_admin_action()",
    "target": "Implement proper authentication to restrict unauthorized access."
  },
  {
    "func": "def missing_authorization(user):\n    return perform_sensitive_action(user)",
    "target": "Add authorization checks to ensure only permitted users can perform certain actions."
  },
  {
    "func": "def insecure_command_execution(command):\n    os.system(command)",
    "target": "Avoid using os.system for command execution. Use safer alternatives like subprocess with sanitization."
  },
  {
    "func": "def unsafe_deserialization(data):\n    obj = pickle.loads(data)\n    return obj",
    "target": "Validate and sanitize data before deserialization to prevent remote code execution."
  },
  {
    "func": "def insecure_cookie():\n    response.set_cookie('session', 'value')\n    return response",
    "target": "Set cookies with HttpOnly, Secure, and SameSite attributes to prevent attacks."
  },
  {
    "func": "def missing_https():\n    url = 'http://example.com/login'\n    return url",
    "target": "Always use HTTPS to encrypt sensitive data during transmission."
  },
  {
    "func": "def improper_access_control(request):\n    if request.user == 'admin':\n        return 'Access granted'\n    return 'Access denied'",
    "target": "Enforce role-based access control to secure sensitive resources."
  },
  {
    "func": "def missing_account_lockout():\n    for _ in range(100):\n        attempt_login()",
    "target": "Implement account lockout mechanisms to prevent brute force attacks."
  },
  {
    "func": "def no_logging():\n    pass",
    "target": "Implement logging for security-critical events to detect and respond to incidents."
  },
  {
    "func": "def missing_encryption(data):\n    with open('data.txt', 'w') as file:\n        file.write(data)",
    "target": "Encrypt sensitive data at rest to prevent unauthorized access."
  },
  {
    "func": "def sql_query(user_id):\n    query = f'SELECT * FROM users WHERE id = {user_id}'\n    return query",
    "target": "Use parameterized queries to prevent SQL injection attacks."
  },
  {
    "func": "def weak_captcha():\n    return 'What is 2+2?'",
    "target": "Use strong CAPTCHA systems to prevent automated attacks."
  },
  {
    "func": "def insufficient_api_security():\n    return api_call()",
    "target": "Implement API authentication and rate limiting to secure endpoints."
  },
  {
    "func": "def insecure_data_validation(data):\n    if data['role'] == 'admin':\n        return 'Access granted'\n    return 'Access denied'",
    "target": "Validate and sanitize user input to prevent injection attacks."
  },
  {
    "func": "def missing_csrf_protection():\n    return render_template('form.html')",
    "target": "Add CSRF tokens to protect against cross-site request forgery attacks."
  },
  {
    "func": "def duplicate_code():\n    x = 10\n    y = 20\n    z = x + y\n    a = 10\n    b = 20\n    c = a + b\n    return z, c",
    "target": "Avoid duplicate code by refactoring common logic into reusable functions."
  },
  {
    "func": "def empty_if_block():\n    if condition:\n        pass",
    "target": "Avoid empty if statements. Add logic or remove unnecessary code."
  },
  {
    "func": "def commented_out_code():\n    # print('Debugging output')\n    return 42",
    "target": "Remove commented-out code to keep the codebase clean."
  },
  {
    "func": "def constant_mutation():\n    PI = 3.14\n    PI = 3.14159\n    return PI",
    "target": "Avoid reassigning constants. Define them as immutable."
  },
  {
    "func": "def unused_function():\n    def helper():\n        pass\n    return True",
    "target": "Remove unused functions to reduce code complexity."
  },
  {
    "func": "def catch_generic_exception():\n    try:\n        risky_operation()\n    except Exception:\n        handle_error()",
    "target": "Avoid catching generic exceptions. Catch specific exceptions instead."
  },
  {
    "func": "def hardcoded_file_path():\n    file_path = '/tmp/data.txt'\n    return file_path",
    "target": "Avoid hardcoding file paths. Use configuration files or environment variables."
  },
  {
    "func": "def large_class():\n    class LargeClass:\n        def __init__(self):\n            self.attr1 = None\n            self.attr2 = None\n            self.attr3 = None\n            # 50 more attributes\n    return LargeClass()",
    "target": "Avoid large classes. Refactor into smaller, cohesive classes."
  },
  {
    "func": "def excessive_parameters(a, b, c, d, e, f, g):\n    return a + b + c + d + e + f + g",
    "target": "Avoid excessive parameters in functions. Use data structures for grouping."
  },
  {
    "func": "def long_line_of_code():\n    result = [x for x in range(1000) if x % 2 == 0 and x > 100 and x < 900]",
    "target": "Avoid long lines of code. Break them into smaller, readable statements."
  },
  {
    "func": "def non_descriptive_variable_names():\n    a = 10\n    b = 20\n    return a + b",
    "target": "Use descriptive variable names to improve code readability."
  },
  {
    "func": "def deeply_nested_conditionals():\n    if a:\n        if b:\n            if c:\n                if d:\n                    if e:\n                        return True",
    "target": "Avoid deep nesting in conditionals (5 levels detected). Use guard clauses or early returns."
  },
  {
    "func": "def return_in_finally():\n    try:\n        return 1\n    finally:\n        return 2",
    "target": "Avoid return statements in finally blocks. It can lead to unexpected behavior."
  },
  {
    "func": "def use_of_print():\n    print('Debugging message')",
    "target": "Avoid using print statements in production code. Use a proper logging framework."
  },
  {
    "func": "def improper_collection_initialization():\n    list_var = list()\n    return list_var",
    "target": "Use direct initialization (e.g., []) for better performance and readability."
  },
  {
    "func": "def hardcoded_ip_address():\n    ip = '192.168.1.1'\n    return ip",
    "target": "Avoid hardcoding IP addresses. Use configuration files or constants."
  },
  {
    "func": "def unused_catch_variable():\n    try:\n        risky_operation()\n    except Exception as e:\n        pass",
    "target": "Use or remove unused exception variables to avoid confusion."
  },
  {
    "func": "def excessive_cyclomatic_complexity(a, b, c):\n    if a:\n        if b:\n            if c:\n                return True\n    return False",
    "target": "Reduce cyclomatic complexity by refactoring into simpler functions."
  },
  {
    "func": "def missing_default_case_in_switch(value):\n    match value:\n        case 1:\n            return 'One'\n        case 2:\n            return 'Two'",
    "target": "Add a default case in switch statements to handle unexpected values."
  },
  {
    "func": "def improper_exception_message():\n    raise ValueError",
    "target": "Provide meaningful messages in exceptions for easier debugging."
  },
  {
    "func": "def duplicate_import():\n    import os\n    import os",
    "target": "Avoid duplicate imports. They add unnecessary clutter."
  },
  {
    "func": "def redundant_boolean_comparison(value):\n    return value == True",
    "target": "Avoid redundant comparisons to True or False. Use the value directly."
  },
  {
    "func": "def improper_resource_cleanup():\n    file = open('data.txt', 'r')\n    return file.read()",
    "target": "Ensure proper resource cleanup using context managers."
  },
  {
    "func": "def mutable_default_argument(data=[]):\n    data.append(1)\n    return data",
    "target": "Avoid mutable default arguments. It can lead to unexpected behavior."
  },
  {
    "func": "def unused_return_value():\n    result = calculate()\n    return 42",
    "target": "Do not ignore or overwrite return values from function calls."
  },
  {
    "func": "def missing_type_annotations(a, b):\n    return a + b",
    "target": "Add type annotations for function arguments and return values."
  },
  {
    "func": "def large_return_tuple():\n    return 1, 2, 3, 4, 5, 6, 7, 8, 9, 10",
    "target": "Avoid large return tuples. Use data structures for better clarity."
  },
  {
    "func": "def unnecessary_else_after_return(value):\n    if value:\n        return True\n    else:\n        return False",
    "target": "Avoid unnecessary else blocks after return statements."
  },
  {
    "func": "def dead_code():\n    if False:\n        return 'This will never run'\n    return 'Hello, World!'",
    "target": "Remove unreachable (dead) code to maintain codebase cleanliness."
  },
  {
    "func": "def excessive_logging():\n    for i in range(1000):\n        print(f'Processing {i}')",
    "target": "Avoid excessive logging in loops to prevent performance issues."
  },
  {
    "func": "def ambiguous_condition(a, b):\n    if a == b:\n        return 'Equal'\n    elif a == 10:\n        return 'Ten'\n    elif a == b:\n        return 'Still Equal'\n    return 'Different'",
    "target": "Avoid ambiguous conditions with overlapping logic. Ensure all conditions are unique."
  },
  {
    "func": "def implicit_type_conversion(a, b):\n    return a + b",
    "target": "Avoid implicit type conversions. Use explicit casting for clarity."
  },
  {
    "func": "def magic_strings():\n    if user_input == 'admin':\n        return 'Admin access granted'",
    "target": "Avoid using magic strings. Use constants with meaningful names."
  },
  {
    "func": "def improper_error_escalation():\n    try:\n        risky_operation()\n    except ValueError:\n        raise Exception('Error occurred')",
    "target": "Preserve the original exception when escalating to retain debugging context."
  },
  {
    "func": "def inconsistent_indentation():\n    if True:\n      print('Inconsistent')",
    "target": "Ensure consistent indentation for better readability and maintainability."
  },
  {
    "func": "def ambiguous_function_name():\n    def func1():\n        return True\n    return func1()",
    "target": "Use descriptive function names to clarify their purpose."
  },
  {
    "func": "def unnecessary_singleton():\n    class Singleton:\n        _instance = None\n\n        @staticmethod\n        def instance():\n            if Singleton._instance is None:\n                Singleton._instance = Singleton()\n            return Singleton._instance\n\n    return Singleton.instance()",
    "target": "Avoid unnecessary singleton patterns unless absolutely required."
  },
  {
    "func": "def inefficient_list_search():\n    data = [1, 2, 3, 4, 5]\n    for item in data:\n        if item == 3:\n            return True",
    "target": "Use efficient search methods like `in` for list lookups."
  },
  {
    "func": "def outdated_library_usage():\n    import urllib2\n    response = urllib2.urlopen('http://example.com')\n    return response.read()",
    "target": "Avoid outdated libraries. Use modern alternatives like `requests`."
  },
  {
    "func": "def redundant_variable_assignment():\n    a = 5\n    b = a\n    return b",
    "target": "Avoid redundant variable assignments. Use variables only when necessary."
  },
  {
    "func": "def incomplete_docstring():\n    \"\"\"This function does something\"\"\"\n    return True",
    "target": "Provide detailed docstrings explaining parameters, return values, and functionality."
  },
  {
    "func": "def redundant_code_block():\n    if condition:\n        if condition:\n            return True",
    "target": "Simplify redundant nested conditions to improve readability."
  },
  {
    "func": "def implicit_context_dependency():\n    config = get_global_config()\n    return config.value",
    "target": "Avoid implicit context dependencies. Pass configuration explicitly."
  },
  {
    "func": "def inefficient_data_structure():\n    data = [1, 2, 3, 4, 5]\n    if 3 in data:\n        return True",
    "target": "Use appropriate data structures like sets for faster lookups."
  },
  {
    "func": "def inconsistent_test_logic():\n    if condition:\n        assert True\n    else:\n        assert False",
    "target": "Avoid redundant assertions. Use meaningful test cases."
  },
  {
    "func": "def missing_context_in_logging():\n    logger.info('Operation completed')",
    "target": "Include contextual information in log messages to aid debugging."
  },
  {
    "func": "def overcomplicated_boolean_expression():\n    if (a and not b) or (not a and b):\n        return True",
    "target": "Simplify boolean expressions for clarity."
  },
  {
    "func": "def unsafe_dynamic_import(module_name):\n    return __import__(module_name)",
    "target": "Avoid dynamic imports unless absolutely necessary. Validate input if used."
  },
  {
    "func": "def insecure_api_endpoint():\n    return 'http://api.example.com/data'",
    "target": "Avoid hardcoding insecure API endpoints. Use secure (HTTPS) connections."
  },
  {
    "func": "def duplicate_loop_logic():\n    for i in range(10):\n        print(i)\n    for i in range(10):\n        print(i)",
    "target": "Consolidate duplicate loop logic to reduce redundancy."
  },
  {
    "func": "def overuse_of_static_methods():\n    @staticmethod\n    def helper():\n        return True",
    "target": "Limit the use of static methods. Use instance methods for better design."
  },
  {
    "func": "def inefficient_string_concatenation():\n    result = ''\n    for i in range(1000):\n        result += str(i)",
    "target": "Use efficient string concatenation methods like `join()`."
  },
  {
    "func": "def undocumented_side_effects(a):\n    a.append(1)\n    return a",
    "target": "Document side effects in function docstrings to inform users."
  },
  {
    "func": "def improper_exception_silencing():\n    try:\n        risky_operation()\n    except Exception:\n        pass",
    "target": "Avoid silencing exceptions. Log them for debugging purposes."
  },
  {
    "func": "def no_exit_on_error():\n    try:\n        risky_operation()\n    except Exception as e:\n        logger.error(e)",
    "target": "Handle critical errors gracefully and exit when necessary."
  },
  {
    "func": "def untested_code_path():\n    if a == 10:\n        return 'Tested'\n    else:\n        return 'Untested'",
    "target": "Ensure all code paths are covered in tests."
  },
  {
    "func": "def inefficient_memory_usage():\n    data = [x for x in range(10**6)]\n    return sum(data)",
    "target": "Use generators or efficient memory usage techniques for large data."
  },
  {
    "func": "def implicit_dependency_on_global():\n    def inner():\n        return global_variable\n    return inner()",
    "target": "Avoid implicit dependencies on global variables. Pass them explicitly."
  },
  {
    "func": "def inappropriate_abstraction():\n    class OneMethod:\n        def method(self):\n            return True\n    return OneMethod()",
    "target": "Avoid unnecessary abstractions. Keep the design simple and direct."
  },
  {
    "func": "def inconsistent_data_format():\n    return {'id': 1, 'Name': 'John'}",
    "target": "Ensure consistent data format in structures for maintainability."
  },
  {
    "func": "def complex_method():\n    data = []\n    for i in range(10):\n        for j in range(10):\n            data.append((i, j))\n    return data",
    "target": "Break complex methods into smaller, reusable functions for better readability."
  },
  {
    "func": "def unclear_variable_names():\n    x = 10\n    y = 20\n    return x + y",
    "target": "Use descriptive variable names to improve code clarity."
  },
  {
    "func": "def unstructured_code():\n    if condition:\n        print('A')\n    else:\n        print('B')\n    print('Done')",
    "target": "Structure code into functions or methods to separate responsibilities."
  },
  {
    "func": "def unused_function():\n    def helper():\n        return True\n    return 42",
    "target": "Remove unused functions to reduce code clutter."
  },
  {
    "func": "def missing_docstring():\n    def calculate_sum(a, b):\n        return a + b",
    "target": "Provide a docstring to explain the purpose and parameters of the function."
  },
  {
    "func": "def inconsistent_spacing():\n    a=10\n    b = 20\n    return a+b",
    "target": "Ensure consistent spacing around operators for better readability."
  },
  {
    "func": "def overly_nested_conditions():\n    if condition1:\n        if condition2:\n            if condition3:\n                return True",
    "target": "Flatten nested conditions to improve readability."
  },
  {
    "func": "def long_line_of_code():\n    return 'This is a very long line of code that exceeds the recommended character limit for a single line in most coding standards.'",
    "target": "Break long lines into multiple lines for better readability."
  },
  {
    "func": "def improper_function_comments():\n    # Add two numbers\n    def add(a, b):\n        return a + b",
    "target": "Write comments that describe the purpose, not the implementation."
  },
  {
    "func": "def hard_to_understand_logic():\n    result = not (a and b) or (c and d)",
    "target": "Use parentheses and simplify complex logical expressions for clarity."
  },
  {
    "func": "def redundant_else():\n    if condition:\n        return True\n    else:\n        return False",
    "target": "Remove redundant `else` after `return` for simplicity."
  },
  {
    "func": "def inconsistent_function_order():\n    def helper():\n        return True\n\n    def main():\n        return helper()\n\n    return main()",
    "target": "Order functions logically, with main functions at the top or bottom."
  },
  {
    "func": "def overly_generic_names():\n    def process_data(data):\n        return data",
    "target": "Use specific names for functions and variables to improve understanding."
  },
  {
    "func": "def redundant_comments():\n    # This adds two numbers\n    return a + b",
    "target": "Avoid redundant comments that repeat the code."
  },
  {
    "func": "def inconsistent_casing():\n    variableName = 10\n    variable_name = 20\n    return variableName + variable_name",
    "target": "Follow consistent naming conventions throughout the codebase."
  },
  {
    "func": "def missing_type_annotations(a, b):\n    return a + b",
    "target": "Use type annotations for better code understanding and error checking."
  },
  {
    "func": "def repetitive_code():\n    print('Start')\n    print('Processing')\n    print('End')",
    "target": "Replace repetitive code with loops or helper functions."
  },
  {
    "func": "def hidden_side_effects():\n    global counter\n    counter += 1\n    return counter",
    "target": "Avoid hidden side effects. Make changes explicit."
  },
  {
    "func": "def unclear_return_values():\n    if condition:\n        return 1\n    else:\n        return 0",
    "target": "Use enums or constants to represent meaningful return values."
  },
  {
    "func": "def no_error_handling():\n    result = risky_operation()\n    return result",
    "target": "Add error handling to improve code robustness."
  },
  {
    "func": "def deep_hierarchy_class():\n    class A:\n        pass\n    class B(A):\n        pass\n    class C(B):\n        pass",
    "target": "Avoid deep inheritance hierarchies. Prefer composition over inheritance."
  },
  {
    "func": "def unnecessary_single_return_point():\n    if condition:\n        result = True\n    else:\n        result = False\n    return result",
    "target": "Simplify logic to reduce unnecessary return points."
  },
  {
    "func": "def missing_constants():\n    if value == 42:\n        return 'Answer'",
    "target": "Define constants for magic numbers to improve readability."
  },
  {
    "func": "def improper_file_structure():\n    def helper1():\n        return True\n\n    def helper2():\n        return False",
    "target": "Organize functions into appropriate files for maintainability."
  },
  {
    "func": "def overly_complex_parameters():\n    def process(data, config, env, context):\n        return True",
    "target": "Simplify parameters by grouping related items into objects or dictionaries."
  },
  {
    "func": "def large_if_else_chain():\n    if condition1:\n        return 'A'\n    elif condition2:\n        return 'B'\n    elif condition3:\n        return 'C'\n    else:\n        return 'D'",
    "target": "Replace long `if-else` chains with switch-case constructs or mapping."
  },
  {
    "func": "def inconsistent_loop_styles():\n    for i in range(10):\n        print(i)\n    j = 0\n    while j < 10:\n        print(j)\n        j += 1",
    "target": "Use consistent looping styles throughout the code."
  },
  {
    "func": "def ignored_todo():\n    # TODO: Refactor this function\n    pass",
    "target": "Address or remove TODO comments to keep the code clean."
  },
  {
    "func": "def duplicate_functionality():\n    def add(a, b):\n        return a + b\n    def sum(a, b):\n        return a + b",
    "target": "Consolidate duplicate functions into a single implementation."
  },
  {
    "func": "def mixed_indentation():\n    if condition:\n      print('Bad')\n        print('Indentation')",
    "target": "Use consistent indentation (spaces or tabs) throughout the code."
  },
  {
    "func": "def inconsistent_variable_names():\n    userName = 'John'\n    user_email = 'john@example.com'\n    return userName, user_email",
    "target": "Ensure consistent naming conventions (e.g., snake_case or camelCase)."
  },
  {
    "func": "def unhandled_exceptions():\n    result = risky_function()\n    return result",
    "target": "Add try-except blocks to handle potential exceptions."
  },
  {
    "func": "def commented_out_code():\n    # print('This is commented out')\n    return True",
    "target": "Remove commented-out code to reduce clutter."
  },
  {
    "func": "def large_class():\n    class User:\n        def login(self): pass\n        def logout(self): pass\n        def update_profile(self): pass\n        def delete_account(self): pass\n        def reset_password(self): pass",
    "target": "Split large classes into smaller, focused classes adhering to the Single Responsibility Principle."
  },
  {
    "func": "def hard_to_find_bug():\n    x = 0.1 + 0.2\n    if x == 0.3:\n        print('Equal')",
    "target": "Avoid floating-point equality checks; use a tolerance or rounding."
  },
  {
    "func": "def redundant_return():\n    if condition:\n        return True\n    return False",
    "target": "Simplify return statements by directly returning the condition."
  },
  {
    "func": "def excessive_comments():\n    # This function adds two numbers\n    # The parameters are a and b\n    # The result is their sum\n    return a + b",
    "target": "Avoid excessive comments. Focus on meaningful, concise explanations."
  },
  {
    "func": "def inconsistent_error_messages():\n    if condition1:\n        raise ValueError('Error 1')\n    if condition2:\n        raise Exception('Something went wrong')",
    "target": "Use consistent error messages and types for better debugging."
  },
  {
    "func": "def unused_constants():\n    PI = 3.14159\n    return 42",
    "target": "Remove unused constants or variables to avoid confusion."
  },
  {
    "func": "def overly_generic_exceptions():\n    try:\n        risky_operation()\n    except Exception:\n        pass",
    "target": "Catch specific exceptions instead of the generic `Exception`."
  },
  {
    "func": "def missing_default_case():\n    if x == 1:\n        return 'One'\n    elif x == 2:\n        return 'Two'",
    "target": "Add a default case to handle unexpected inputs."
  },
  {
    "func": "def deep_directory_structure():\n    path = '/a/very/long/and/deep/directory/structure'\n    return path",
    "target": "Avoid overly deep directory structures for better file management."
  },
  {
    "func": "def poor_parameter_order(a, default_value=None):\n    return a + default_value",
    "target": "Place default parameters after required ones to improve usability."
  },
  {
    "func": "def missing_readability_breaks():\n    for i in range(100):\n        if i % 2 == 0:\n            continue\n    return i",
    "target": "Add whitespace or breaks to improve readability in loops or logic."
  },
  {
    "func": "def inline_code_blocks():\n    x = 10; y = 20; z = x + y\n    return z",
    "target": "Avoid writing multiple statements on a single line."
  },
  {
    "func": "def insufficient_test_coverage():\n    def calculate(a, b):\n        return a + b\n    # No test cases provided",
    "target": "Ensure all functions have adequate test cases."
  },
  {
    "func": "def inconsistent_docstrings():\n    def add(a, b):\n        \"\"\"Add two numbers.\"\"\"\n        return a + b\n    def subtract(a, b):\n        # Subtract two numbers\n        return a - b",
    "target": "Follow a consistent format for docstrings, such as PEP-257."
  },
  {
    "func": "def too_many_arguments(a, b, c, d, e, f, g):\n    return a + b + c + d + e + f + g",
    "target": "Limit the number of arguments to improve readability and usability."
  },
  {
    "func": "def ambiguous_return_values():\n    if condition:\n        return 'Yes'\n    else:\n        return True",
    "target": "Ensure consistent and meaningful return types."
  },
  {
    "func": "def missing_logging():\n    try:\n        risky_operation()\n    except Exception:\n        pass",
    "target": "Add logging to capture details of errors and critical operations."
  },
  {
    "func": "def overly_complex_condition():\n    if (a and not b) or (c and not d and e):\n        return True",
    "target": "Simplify complex conditions for better readability."
  },
  {
    "func": "def unused_function_arguments(a, b):\n    return a",
    "target": "Remove unused function arguments to avoid confusion."
  },
  {
    "func": "def hidden_dependencies():\n    return os.getenv('API_KEY')",
    "target": "Avoid hidden dependencies. Pass required values explicitly."
  },
  {
    "func": "def inconsistent_file_naming():\n    import my_script\n    from MyScript import my_function",
    "target": "Use consistent file and module naming conventions."
  },
  {
    "func": "def function_does_too_much():\n    def process_data(data):\n        clean_data = clean(data)\n        save_data(clean_data)\n        return analyze_data(clean_data)",
    "target": "Limit functions to a single responsibility."
  },
  {
    "func": "def improper_use_of_constants():\n    GRAVITY = 9.8\n    gravity = 9.8\n    return GRAVITY, gravity",
    "target": "Define constants in a single place to avoid redundancy."
  },
  {
    "func": "def poorly_formatted_comments():\n    #This comment lacks space and formatting\n    return True",
    "target": "Format comments with proper spacing for readability."
  },
  {
    "func": "def unnecessary_mutable_defaults(data=[]):\n    data.append(1)\n    return data",
    "target": "Avoid mutable default arguments as they can lead to unexpected behavior."
  },
  {
    "func": "def overly_tightly_coupled_code():\n    def service_layer():\n        return data_layer()",
    "target": "Decouple layers in the application to improve testability and maintainability."
  },
  {
    "func": "def lack_of_consistent_encoding():\n    with open('file.txt', 'r') as file:\n        return file.read()",
    "target": "Specify file encoding to avoid cross-platform issues."
  },
  {
    "func": "def inconsistent_function_naming():\n    def add(a, b):\n        return a + b\n    def subtract(a, b):\n        return a - b",
    "target": "Use consistent function naming conventions for clarity."
  },
  {
    "func": "def improper_use_of_globals():\n    global counter\n    counter += 1\n    return counter",
    "target": "Avoid global variables. Pass values explicitly to functions."
  },
  {
    "func": "def missing_type_annotations(a, b):\n    return a + b",
    "target": "Add type annotations to function arguments and return values for better code clarity."
  },
  {
    "func": "def inefficient_search(lst, x):\n    for item in lst:\n        if item == x:\n            return True\n    return False",
    "target": "Use efficient search methods like `x in lst` for better performance."
  },
  {
    "func": "def non_standard_import():\n    from my_library import *\n    return function_call()",
    "target": "Avoid wildcard imports. Import only required functions or classes."
  },
  {
    "func": "def deeply_nested_conditions():\n    if a:\n        if b:\n            if c:\n                return True",
    "target": "Simplify deeply nested conditions using logical operators or separate functions."
  },
  {
    "func": "def ignoring_return_values():\n    my_list.append(5)\n    my_list.sort()\n    my_list.reverse()",
    "target": "Avoid ignoring return values of functions like `sorted()` that return new objects."
  },
  {
    "func": "def unnecessary_computation():\n    result = sum([x**2 for x in range(100)])\n    return result",
    "target": "Avoid unnecessary list comprehensions. Use generator expressions for better performance."
  },
  {
    "func": "def using_tabs_instead_of_spaces():\n\treturn True",
    "target": "Use spaces instead of tabs for consistent code formatting."
  },
  {
    "func": "def bad_indentation():\n    if condition:\n         return True",
    "target": "Fix inconsistent indentation to maintain readability."
  },
  {
    "func": "def unnecessary_else():\n    if condition:\n        return True\n    else:\n        return False",
    "target": "Remove unnecessary `else` after `return` for cleaner code."
  },
  {
    "func": "def redundant_conditionals():\n    if x == True:\n        return True",
    "target": "Avoid redundant conditionals. Use `if x:` instead of `if x == True:`."
  },
  {
    "func": "def non_lazy_loading():\n    data = load_all_data()\n    return process(data)",
    "target": "Implement lazy loading to optimize memory usage and improve performance."
  },
  {
    "func": "def insecure_os_call(command):\n    os.system(command)",
    "target": "Avoid using `os.system`. Use `subprocess.run` with argument splitting to prevent command injection."
  },
  {
    "func": "def logging_sensitive_information():\n    logging.info(f'Password: {password}')",
    "target": "Avoid logging sensitive information like passwords or API keys."
  },
  {
    "func": "def missing_function_docstring():\n    def calculate_area(radius):\n        return 3.14 * radius * radius",
    "target": "Add a docstring to describe the function's purpose and parameters."
  },
  {
    "func": "def redundant_variable():\n    temp = calculate()\n    return temp",
    "target": "Avoid redundant variables. Directly return the function result."
  },
  {
    "func": "def mutable_class_attributes():\n    class MyClass:\n        items = []",
    "target": "Avoid mutable default attributes in classes to prevent shared state issues."
  },
  {
    "func": "def inefficient_string_concatenation():\n    result = ''\n    for s in strings:\n        result += s",
    "target": "Use `.join()` for efficient string concatenation in loops."
  },
  {
    "func": "def forgetting_to_close_file():\n    file = open('data.txt', 'r')\n    data = file.read()\n    return data",
    "target": "Use a context manager (`with open(...)`) to ensure the file is properly closed."
  },
  {
    "func": "def lack_of_assertions():\n    def add(a, b):\n        return a + b",
    "target": "Add assertions in tests to validate expected behavior."
  },
  {
    "func": "def hard_coded_path():\n    path = '/home/user/data/file.txt'\n    return path",
    "target": "Avoid hardcoding paths. Use configuration files or environment variables."
  },
  {
    "func": "def multiple_returns():\n    if x > 0:\n        return 'Positive'\n    elif x < 0:\n        return 'Negative'\n    else:\n        return 'Zero'",
    "target": "Avoid multiple return statements in a single function for maintainability."
  },
  {
    "func": "def unstructured_code_block():\n    a = 10\n    b = 20\n    result = a + b\n    print(result)\n    return result",
    "target": "Group related code into functions for better modularity."
  },
  {
    "func": "def hard_coded_timeout():\n    time.sleep(30)",
    "target": "Avoid hardcoding timeouts. Make them configurable."
  },
  {
    "func": "def missing_default_in_switch_case():\n    match value:\n        case 1:\n            return 'One'\n        case 2:\n            return 'Two'",
    "target": "Add a default case in `match` or `switch` statements to handle unexpected values."
  },
  {
    "func": "def silent_failure():\n    try:\n        risky_function()\n    except Exception:\n        pass",
    "target": "Avoid silent failures. Log errors or provide meaningful messages."
  },
  {
    "func": "def ambiguous_variable_names():\n    x = 10\n    y = 20\n    return x + y",
    "target": "Use descriptive variable names for better code readability."
  },
  {
    "func": "def missing_unit_tests():\n    def multiply(a, b):\n        return a * b\n    # No test cases provided",
    "target": "Write unit tests for all critical functions."
  },
  {
    "func": "def dependent_on_environment():\n    result = os.getenv('SETTING')\n    return result",
    "target": "Provide fallback values for environment-dependent settings."
  },
  {
    "func": "def unused_variables():\n    result = calculate()\n    temp = 42\n    return result",
    "target": "Remove unused variables to reduce clutter."
  },
  {
    "func": "def large_import_blocks():\n    import os, sys, math, random, datetime, re\n    return None",
    "target": "Organize imports into logical sections and avoid unused ones."
  },
  {
    "func": "def no_comments():\n    return 42",
    "target": "Add comments to explain the purpose and functionality of the code."
  },
  {
    "func": "def inconsistent_initialization():\n    x = 10\n    y = 20\n    x = x + y\n    return x",
    "target": "Avoid initializing variables multiple times unnecessarily."
  },
  {
    "func": "class DeeplyNestedClass:\n    class InnerClass1:\n        class InnerClass2:\n            class InnerClass3:\n                pass",
    "target": "Avoid excessive class nesting. Refactor for better clarity."
  },
  {
    "func": "def improper_whitespace():\n    return   True",
    "target": "Ensure consistent whitespace for better readability."
  },
  {
    "func": "def inconsistent_argument_order(arg1, default_arg=None, arg2):\n    return arg1 + arg2",
    "target": "Place default arguments after required arguments for better usability."
  },
  {
    "func": "CONSTANT1 = 10\nCONSTANT2 = 20",
    "target": "Use meaningful and descriptive names for constants."
  },
  {
    "func": "import os, sys, random",
    "target": "Organize imports alphabetically and logically."
  },
  {
    "func": "def deeply_nested_classes():\n    class A:\n        class B:\n            class C:\n                class D:\n                    class E:\n                        def method(self):\n                            pass",
    "target": "Avoid deeply nested classes (5 levels detected). Consider breaking them into separate classes."
  },
  {
    "func": "def overloaded_function(x):\n    pass\n\ndef overloaded_function(x, y):\n    pass",
    "target": "Avoid excessive overloading of functions. Consolidate logic where possible."
  },
  {
    "func": "def complex_expression(x, y, z):\n    return x and y or not z",
    "target": "Use parentheses in complex logical expressions for clarity."
  },
  {
    "func": "def long_method_name_for_addition():\n    return a + b",
    "target": "Use concise and descriptive method names."
  },
  {
    "func": "def long_function():\n    # This function spans over 100 lines\n    pass",
    "target": "Refactor long functions into smaller, manageable units."
  },
  {
    "func": "try:\n    try:\n        pass\n    except:\n        pass\nexcept:\n    pass",
    "target": "Avoid deeply nested try-except blocks for better readability."
  },
  {
    "func": "def hardcoded_logic():\n    if user == 'admin':\n        return True",
    "target": "Replace hardcoded domain-specific logic with configurations."
  },
  {
    "func": "def missing_dependency_injection():\n    db = Database()\n    return db.query()",
    "target": "Use dependency injection instead of creating dependencies inside the function."
  },
  {
    "func": "def mixed_data_types():\n    data = [1, 'two', 3.0]\n    return data",
    "target": "Avoid mixing types within a single data structure."
  },
  {
    "func": "def insufficient_test_coverage():\n    def sum(a, b):\n        return a + b",
    "target": "Ensure unit tests cover all critical code paths."
  },
  {
    "func": "def tightly_coupled_logic():\n    if user.is_admin():\n        return db.get_all_users()",
    "target": "Separate business logic from data access for better maintainability."
  },
  {
    "func": "class Singleton:\n    _instance = None\n\n    def __new__(cls):\n        if not cls._instance:\n            cls._instance = super().__new__(cls)\n        return cls._instance",
    "target": "Avoid overusing singletons. Use other design patterns if possible."
  },
  {
    "func": "def hardcoded_key():\n    key = '123456'\n    return key",
    "target": "Avoid hardcoding keys or sensitive data in the code."
  },
  {
    "func": "def insecure_api_key():\n    headers = {'Authorization': 'Bearer 12345'}\n    return headers",
    "target": "Avoid embedding API keys directly in the code."
  },
  {
    "func": "def improper_session_timeout():\n    session.expiry = None",
    "target": "Set appropriate session timeout values."
  },
  {
    "func": "def unvalidated_json(data):\n    return data['key']",
    "target": "Validate JSON inputs against a schema."
  },
  {
    "func": "def vague_error_message():\n    try:\n        pass\n    except:\n        return 'Something went wrong'",
    "target": "Provide detailed error messages to aid debugging."
  },
  {
    "func": "def insecure_token_expiry(token):\n    return token.is_expired()",
    "target": "Ensure proper token expiry handling to prevent security risks."
  },
  {
    "func": "def unsigned_cookies():\n    response.set_cookie('session', '12345')",
    "target": "Sign and encrypt cookies for secure transmission."
  },
  {
    "func": "def lack_of_input_validation(data):\n    return data",
    "target": "Validate input data to meet required constraints."
  },
  {
    "func": "def outdated_protocol():\n    connection = ssl.SSLContext(ssl.PROTOCOL_TLSv1)",
    "target": "Avoid using outdated security protocols. Use modern alternatives like TLS 1.2 or 1.3."
  },
  {
    "func": "def nested_error_handling():\n    try:\n        try:\n            pass\n        except ValueError:\n            pass\n    except Exception:\n        pass",
    "target": "Flatten nested error-handling blocks for better readability."
  },
  {
    "func": "def large_switch_case(value):\n    match value:\n        case 1:\n            return 'One'\n        case 2:\n            return 'Two'\n        # 50 more cases",
    "target": "Replace large switch-case constructs with a mapping or dictionary."
  },
  {
    "func": "def unencrypted_data_transmission(data):\n    return requests.post('http://example.com', data=data)",
    "target": "Encrypt data during transmission to prevent eavesdropping."
  },
  {
    "func": "def insecure_hashing(password):\n    return hashlib.md5(password.encode()).hexdigest()",
    "target": "Use secure hashing algorithms like SHA-256 for password storage."
  },
  {
    "func": "def hardcoded_paths():\n    path = '/home/user/data'\n    return path",
    "target": "Avoid hardcoding file paths. Use relative paths or configuration files."
  },
  {
    "func": "def insecure_data_storage(data):\n    with open('data.txt', 'w') as file:\n        file.write(data)",
    "target": "Encrypt sensitive data before storing it in files or databases."
  },
  {
    "func": "def insecure_redirect(url):\n    return redirect(url)",
    "target": "Validate and sanitize redirect URLs to prevent open redirects."
  },
  {
    "func": "def insecure_file_upload(file):\n    with open('uploads/' + file.filename, 'wb') as f:\n        f.write(file.read())",
    "target": "Validate file uploads to prevent malicious file execution."
  },
  {
    "func": "def insecure_session_management(session):\n    session['authenticated'] = True",
    "target": "Use secure session management techniques to prevent session hijacking."
  },
  {
    "func": "def insecure_random_number_generation():\n    return random.randint(1, 100)",
    "target": "Use secure random number generators for cryptographic operations."
  },
  {
    "func": "def insecure_cross_origin_resource_sharing():\n    response.headers['Access-Control-Allow-Origin'] = '*'\n    return response",
    "target": "Use CORS headers to restrict cross-origin resource sharing."
  },
  {
    "func": "def insecure_authentication(password):\n    return password == 'admin'",
    "target": "Use secure authentication mechanisms like bcrypt or PBKDF2."
  },
  {
    "func": "def inconsistent_docstring_format():\n    \"\"\"This function does something.\"\"\"\n    return True",
    "target": "Follow a consistent docstring format, such as PEP-257."
  },
  {
    "func": "def overly_complex_loop():\n    for i in range(10):\n        for j in range(10):\n            if i * j % 2 == 0:\n                return i, j",
    "target": "Simplify complex loops for better readability."
  },
  {
    "func": "def improper_list_extension():\n    lst = [1, 2, 3]\n    lst = lst + [4, 5, 6]\n    return lst",
    "target": "Use `extend()` instead of `+` for list concatenation to optimize performance."
  },
  {
    "func": "def implicit_return_none():\n    def helper():\n        pass",
    "target": "Explicitly return `None` for clarity in functions with no return value."
  },
  {
    "func": "def too_many_return_points(x):\n    if x > 0:\n        return 'Positive'\n    if x < 0:\n        return 'Negative'\n    return 'Zero'",
    "target": "Limit the number of return points in a function to improve maintainability."
  },
  {
    "func": "def unnecessary_boolean_cast(x):\n    return bool(x == True)",
    "target": "Avoid unnecessary boolean casts; use the condition directly."
  },
  {
    "func": "def lack_of_version_control_comments():\n    # Fixed bug in sorting logic\n    return sorted(data)",
    "target": "Avoid including version control information in comments; use commit messages instead."
  },
  {
    "func": "def unused_class():\n    class Helper:\n        pass\n    return True",
    "target": "Remove unused classes to reduce code clutter."
  },
  {
    "func": "def ambiguous_operator_usage(a, b):\n    return a | b",
    "target": "Avoid ambiguous operators; clarify intent with comments or alternative code."
  },
  {
    "func": "def redundant_set_operation():\n    data = set([1, 2, 3])\n    return data",
    "target": "Use set literals instead of redundant `set()` calls for better readability."
  },
  {
    "func": "def missing_context_while_logging():\n    logger.info('Operation completed')",
    "target": "Include contextual information like user IDs or timestamps in log messages."
  },
  {
    "func": "def repeated_code_in_branches(x):\n    if x > 0:\n        return x + 1\n    else:\n        return x + 1",
    "target": "Refactor repeated code in branches into a single statement."
  },
  {
    "func": "def improper_usage_of_map():\n    return map(lambda x: x**2, [1, 2, 3])",
    "target": "Avoid using `map()` with lambdas; use list comprehensions instead."
  },
  {
    "func": "def multiple_statements_in_line():\n    a = 10; b = 20; c = a + b",
    "target": "Avoid writing multiple statements on the same line for better readability."
  },
  {
    "func": "def unnecessary_comprehension():\n    data = [x for x in range(10)]\n    return data",
    "target": "Avoid unnecessary comprehensions; use `list(range(10))` for clarity."
  },
  {
    "func": "def improper_variable_scope():\n    for i in range(10):\n        j = i\n    return j",
    "target": "Avoid relying on variables defined in a loop outside its scope."
  },
  {
    "func": "def missing_schema_for_database_query():\n    query = f\"SELECT * FROM users WHERE id = {user_id}\"\n    return query",
    "target": "Use database schemas to validate and enforce data constraints."
  },
  {
    "func": "def inefficient_dictionary_lookup():\n    for key in my_dict:\n        if key == 'target':\n            return my_dict[key]",
    "target": "Use `my_dict.get('target')` for efficient dictionary lookups."
  },
  {
    "func": "def mutable_keys_in_dict():\n    data = {{[1, 2]: 'value'}}",
    "target": "Avoid using mutable objects like lists as dictionary keys."
  },
  {
    "func": "def hardcoded_error_messages():\n    if not data:\n        return 'Error: Data is missing'",
    "target": "Use configurable or localized error messages for better flexibility."
  },
  {
    "func": "def incorrect_ternary_operator():\n    return x if x > 0 else x if x < 0 else 0",
    "target": "Simplify chained ternary operators for better readability."
  },
  {
    "func": "def global_mutable_state():\n    global data\n    data.append(1)\n    return data",
    "target": "Avoid modifying global mutable state to prevent side effects."
  },
  {
    "func": "def unnecessary_elif_chain():\n    if x == 1:\n        return 'One'\n    elif x == 2:\n        return 'Two'\n    elif x == 3:\n        return 'Three'\n    else:\n        return 'Other'",
    "target": "Replace long elif chains with a dictionary or match statement."
  },
  {
    "func": "def inefficient_data_conversion():\n    data = list(set(my_list))",
    "target": "Avoid unnecessary conversions between data structures."
  },
  {
    "func": "def lack_of_error_context():\n    try:\n        risky_operation()\n    except Exception:\n        raise ValueError('Operation failed')",
    "target": "Preserve original exception context when re-raising errors."
  },
  {
    "func": "def missing_default_in_dict_get():\n    return my_dict.get('key')",
    "target": "Provide a default value in `dict.get()` to avoid potential errors."
  },
  {
    "func": "def improper_date_format():\n    date = '2024-01-01'\n    return date",
    "target": "Use datetime objects instead of hardcoded date strings."
  },
  {
    "func": "def nested_function_definition():\n    def outer():\n        def inner():\n            return True\n        return inner()\n    return outer()",
    "target": "Avoid defining functions within other functions unless necessary."
  },
  {
    "func": "def long_lambda_expression():\n    func = lambda x: x**2 + 2*x + 1\n    return func(5)",
    "target": "Avoid overly complex lambda expressions; use named functions instead."
  },
  {
    "func": "def poorly_named_constants():\n    VALUE = 10\n    return VALUE",
    "target": "Use descriptive names for constants to improve readability."
  },
  {
    "func": "def missing_output_encoding(data):\n    return f'<div>{data}</div>'",
    "target": "Apply output encoding to prevent cross-site scripting (XSS) attacks."
  },
  {
    "func": "def improper_password_storage(password):\n    hashed = hashlib.md5(password.encode()).hexdigest()\n    return hashed",
    "target": "Avoid using weak hash functions like MD5 for password storage. Use bcrypt or Argon2 with salting."
  },
  {
    "func": "def insecure_file_upload(file):\n    file.save(f'/uploads/{file.filename}')",
    "target": "Validate file extensions and use a secure directory for uploads."
  },
  {
    "func": "def insecure_random_generator():\n    return random.randint(1, 100)",
    "target": "Avoid insecure random generators for sensitive operations. Use `secrets` or `os.urandom`."
  },
  {
    "func": "def weak_session_management():\n    session['user'] = 'admin'",
    "target": "Ensure session data is signed and encrypted to prevent tampering."
  },
  {
    "func": "def sql_injection_vulnerability(user_input):\n    query = f'SELECT * FROM users WHERE name = \"{user_input}\"'\n    return query",
    "target": "Prevent SQL injection by using parameterized queries."
  },
  {
    "func": "def command_injection_vulnerability(cmd):\n    os.system(cmd)",
    "target": "Validate and sanitize command inputs to prevent injection attacks."
  },
  {
    "func": "def csrf_vulnerable_form():\n    return '<form action=\"/submit\" method=\"POST\">...</form>'",
    "target": "Implement CSRF tokens in forms to protect against cross-site request forgery."
  },
  {
    "func": "def insecure_deserialization(data):\n    return pickle.loads(data)",
    "target": "Avoid using `pickle` for deserialization. Use safer alternatives like `json`."
  },
  {
    "func": "def sensitive_data_logging():\n    logging.info(f'Password: {password}')",
    "target": "Do not log sensitive information like passwords or API keys."
  },
  {
    "func": "def missing_authentication():\n    return perform_admin_action()",
    "target": "Implement authentication mechanisms to restrict access to sensitive actions."
  },
  {
    "func": "def missing_authorization(user):\n    return perform_sensitive_action(user)",
    "target": "Add authorization checks to ensure users have the proper permissions."
  },
  {
    "func": "def lack_of_rate_limiting():\n    for _ in range(1000):\n        send_request()",
    "target": "Implement rate limiting to prevent abuse and denial-of-service attacks."
  },
  {
    "func": "def insufficient_privilege_check():\n    perform_admin_action(user)",
    "target": "Verify user privileges before performing sensitive actions."
  },
  {
    "func": "def hardcoded_secret_key():\n    secret_key = 'hardcoded_secret'",
    "target": "Avoid hardcoding secret keys. Use environment variables or secure vaults."
  },
  {
    "func": "def improper_input_validation(user_input):\n    return user_input.lower()",
    "target": "Validate and sanitize all inputs to prevent injection and invalid data issues."
  },
  {
    "func": "def weak_jwt_signature():\n    jwt.encode(payload, 'weaksecret', algorithm='HS256')",
    "target": "Use strong secrets and secure algorithms for signing JWTs."
  },
  {
    "func": "def exposed_stack_trace():\n    try:\n        risky_operation()\n    except Exception as e:\n        return str(e)",
    "target": "Avoid exposing stack traces in error responses to prevent information leakage."
  },
  {
    "func": "def insecure_cors_policy():\n    response.headers['Access-Control-Allow-Origin'] = '*'",
    "target": "Restrict allowed origins in CORS policies to trusted domains."
  },
  {
    "func": "def missing_hsts_header():\n    return render_template('index.html')",
    "target": "Add HSTS headers to enforce secure communication over HTTPS."
  },
  {
    "func": "def weak_password_policy(password):\n    return len(password) > 6",
    "target": "Enforce strong password policies including minimum length, special characters, and case sensitivity."
  },
  {
    "func": "def hardcoded_api_key():\n    api_key = '12345-abcdef-67890'\n    return api_key",
    "target": "Avoid hardcoding API keys. Use secure storage or environment variables."
  },
  {
    "func": "def open_redirect_vulnerability(url):\n    return redirect(url)",
    "target": "Validate and sanitize user-provided URLs to prevent open redirects."
  },
  {
    "func": "def directory_traversal_vulnerability(file_path):\n    with open(file_path, 'r') as file:\n        return file.read()",
    "target": "Validate file paths to prevent directory traversal attacks."
  },
  {
    "func": "def insufficient_logging():\n    try:\n        risky_operation()\n    except:\n        pass",
    "target": "Log critical events and exceptions for effective monitoring and debugging."
  },
  {
    "func": "def missing_ssl_verification(url):\n    response = requests.get(url, verify=False)\n    return response",
    "target": "Always verify SSL certificates to ensure secure communication."
  },
  {
    "func": "def missing_encryption(data):\n    return data",
    "target": "Encrypt sensitive data at rest to protect it from unauthorized access."
  },
  {
    "func": "def vulnerable_jwt_decoding(jwt_token):\n    payload = jwt.decode(jwt_token, options={'verify_signature': False})\n    return payload",
    "target": "Always verify JWT signatures to ensure token authenticity."
  },
  {
    "func": "def weak_captcha():\n    return 'What is 2+2?'",
    "target": "Use robust CAPTCHA mechanisms to prevent automated attacks."
  },
  {
    "func": "def missing_input_size_validation(data):\n    return data['input']",
    "target": "Validate input size to prevent resource exhaustion attacks."
  },
  {
    "func": "def improper_resource_management():\n    file = open('data.txt', 'r')\n    data = file.read()\n    return data",
    "target": "Always close resources or use context managers to avoid resource leaks."
  },
  {
    "func": "def missing_error_handling():\n    data = open('file.txt').read()\n    return data",
    "target": "Add error handling for operations prone to failure."
  },
  {
    "func": "def excessive_try_except_blocks():\n    try:\n        a = 1 / 0\n    except ZeroDivisionError:\n        return 'Error'\n    try:\n        b = [1][2]\n    except IndexError:\n        return 'Error'",
    "target": "Consolidate related try-except blocks for better readability."
  },
  {
    "func": "def unsafe_user_input(user_input):\n    return eval(user_input)",
    "target": "Avoid using `eval`. Use safer alternatives for user input evaluation."
  },
  {
    "func": "def weak_password_check(password):\n    return len(password) > 5",
    "target": "Implement strong password policies including special characters and numbers."
  },
  {
    "func": "def missing_return_value():\n    if condition:\n        return True",
    "target": "Ensure all branches return a value to maintain function consistency."
  },
  {
    "func": "def inefficient_looping(data):\n    for i in range(len(data)):\n        print(data[i])",
    "target": "Use direct iteration over data instead of indexing."
  },
  {
    "func": "def insecure_subprocess_call(command):\n    subprocess.run(command, shell=True)",
    "target": "Avoid using `shell=True` in subprocess calls to prevent command injection."
  },
  {
    "func": "def improper_error_propagation():\n    try:\n        risky_operation()\n    except ValueError:\n        return 'An error occurred'",
    "target": "Re-raise or log exceptions to avoid suppressing important error details."
  },
  {
    "func": "def missing_data_validation(data):\n    process(data['input'])",
    "target": "Validate input data to ensure it meets expected formats and constraints."
  },
  {
    "func": "def lack_of_security_headers():\n    response = make_response('OK')\n    return response",
    "target": "Add security headers like `Content-Security-Policy` and `Strict-Transport-Security`."
  },
  {
    "func": "def excessive_parameters(a, b, c, d, e, f):\n    return a + b + c + d + e + f",
    "target": "Limit the number of parameters. Use objects or dictionaries for complex data."
  },
  {
    "func": "def redundant_code_path():\n    if x > 0:\n        return 'Positive'\n    if x > 0:\n        return 'Also Positive'",
    "target": "Remove redundant code paths to avoid confusion and improve maintainability."
  },
  {
    "func": "def empty_except_block():\n    try:\n        risky_operation()\n    except:\n        pass",
    "target": "Avoid empty except blocks. Log or handle the exception appropriately."
  },
  {
    "func": "def insecure_temp_file():\n    with open('/tmp/tempfile', 'w') as file:\n        file.write(data)",
    "target": "Use secure methods like `tempfile` for handling temporary files."
  },
  {
    "func": "def unused_import():\n    import math\n    return 42",
    "target": "Remove unused imports to clean up the codebase."
  },
  {
    "func": "def nested_ternary_operator(a, b):\n    return a if b else a if not b else b",
    "target": "Avoid nested ternary operators for better code readability."
  },
  {
    "func": "def hardcoded_port():\n    return connect_to_server('localhost', 8080)",
    "target": "Avoid hardcoding ports. Use configuration files or environment variables."
  },
  {
    "func": "def insecure_redirect(url):\n    return redirect(url)",
    "target": "Validate URLs to prevent open redirect vulnerabilities."
  },
  {
    "func": "def lack_of_type_checking(x):\n    return x + 1",
    "target": "Use type annotations and type checking to avoid runtime errors."
  },
  {
    "func": "def hardcoded_config():\n    db_config = {'host': 'localhost', 'port': 3306}",
    "target": "Avoid hardcoding configurations. Use environment variables or config files."
  },
  {
    "func": "def ambiguous_variable_names():\n    x = 10\n    y = 20\n    return x + y",
    "target": "Use descriptive variable names for better readability."
  },
  {
    "func": "def resource_not_closed():\n    file = open('data.txt', 'r')\n    return file.read()",
    "target": "Ensure resources like files or sockets are properly closed after use."
  },
  {
    "func": "def mutable_default_arg(data=[]):\n    data.append(1)\n    return data",
    "target": "Avoid mutable default arguments to prevent unexpected behavior."
  },
  {
    "func": "def insecure_data_storage(password):\n    stored_password = password",
    "target": "Encrypt sensitive data before storing it to protect against unauthorized access."
  },
  {
    "func": "def lack_of_logging_context():\n    logger.info('Task completed')",
    "target": "Include context such as user ID or task details in log messages."
  },
  {
    "func": "def missing_null_check(data):\n    return data['key']",
    "target": "Check for `None` or null values before accessing data."
  },
  {
    "func": "def weak_access_control():\n    if user.is_admin:\n        return 'Access granted'\n    return 'Access denied'",
    "target": "Implement role-based access control with detailed permission checks."
  },
  {
    "func": "def sql_query_string_concatenation(user_id):\n    query = 'SELECT * FROM users WHERE id = ' + str(user_id)\n    return query",
    "target": "Avoid string concatenation for SQL queries. Use prepared statements."
  },
  {
    "func": "def unescaped_html(data):\n    return f'<div>{data}</div>'",
    "target": "Escape HTML in user inputs to prevent XSS attacks."
  },
  {
    "func": "def duplicate_logic():\n    if x > 10:\n        return 'High'\n    if x > 10:\n        return 'High'",
    "target": "Avoid duplicating logic. Consolidate repeated conditions or code blocks."
  },
  {
    "func": "def unused_private_function():\n    def _helper():\n        pass\n    return 42",
    "target": "Remove unused private functions to reduce clutter."
  },
  {
    "func": "def hardcoded_ip_address():\n    ip = '192.168.1.1'\n    return ip",
    "target": "Avoid hardcoding IP addresses. Use configuration files or environment variables."
  },
  {
    "func": "def deeply_nested_try_except():\n    try:\n        try:\n            try:\n                try:\n                    try:\n                        risky_operation()\n                    except TypeError:\n                        handle_error()\n                except ValueError:\n                    handle_error()\n            except IOError:\n                handle_error()\n        except Exception:\n            handle_error()\n    except:\n        pass",
    "target": "Avoid deep nesting in try-except blocks (5 levels detected). Use separate functions for error handling."
  },
  {
    "func": "def complex_boolean_logic(a, b, c):\n    return (a and b) or (not a and not b and c)",
    "target": "Simplify complex boolean expressions for better readability."
  },
  {
    "func": "def avoid_sys_exit():\n    import sys\n    sys.exit(0)",
    "target": "Avoid using `sys.exit()` in libraries or modules."
  },
  {
    "func": "def magic_number_usage():\n    if value == 42:\n        return 'Answer'",
    "target": "Replace magic numbers with named constants."
  },
  {
    "func": "def unused_variable():\n    x = 10\n    return 20",
    "target": "Remove unused variables to improve code clarity."
  },
  {
    "func": "def avoid_hardcoded_values():\n    timeout = 5000\n    return timeout",
    "target": "Avoid hardcoding values. Use configuration parameters instead."
  },
  {
    "func": "def missing_default_case(value):\n    match value:\n        case 1:\n            return 'One'\n        case 2:\n            return 'Two'",
    "target": "Add a default case in match or switch statements to handle unexpected values."
  },
  {
    "func": "def missing_test_for_edge_case():\n    def divide(a, b):\n        return a / b",
    "target": "Ensure edge cases (e.g., division by zero) are tested."
  },
  {
    "func": "def potential_out_of_bounds(data):\n    return data[10]",
    "target": "Check bounds before accessing array or list elements."
  },
  {
    "func": "def inefficient_string_operations():\n    result = ''\n    for s in strings:\n        result += s",
    "target": "Use efficient methods like `''.join()` for string concatenation in loops."
  },
  {
    "func": "def avoid_large_method():\n    def long_method():\n        # Over 200 lines of code\n        pass",
    "target": "Break large methods into smaller, modular functions."
  },
  {
    "func": "def unused_return_value():\n    result = process_data()\n    return 42",
    "target": "Avoid ignoring or overwriting return values from function calls."
  },
  {
    "func": "def missing_null_check():\n    def process(data):\n        return data.value",
    "target": "Add null or None checks before accessing attributes."
  },
  {
    "func": "def unused_imports():\n    import math\n    return 42",
    "target": "Remove unused imports to reduce code clutter."
  },
  {
    "func": "def unsafe_iterator_modification():\n    for item in my_list:\n        my_list.remove(item)",
    "target": "Avoid modifying a collection while iterating over it."
  },
  {
    "func": "def redundant_parentheses():\n    return (x + y)",
    "target": "Remove redundant parentheses for cleaner code."
  },
  {
    "func": "def avoid_deprecated_function():\n    return cgi.escape('<html>')",
    "target": "Avoid using deprecated functions. Use their modern replacements."
  },
  {
    "func": "def inconsistent_naming():\n    def calculateSum():\n        return 42",
    "target": "Use consistent naming conventions like snake_case for function names."
  },
  {
    "func": "def avoid_redundant_else():\n    if condition:\n        return True\n    else:\n        return False",
    "target": "Avoid redundant `else` blocks after return statements."
  },
  {
    "func": "def insecure_temp_file_handling():\n    file = open('/tmp/tempfile', 'w')",
    "target": "Use secure libraries like `tempfile` for handling temporary files."
  },
  {
    "func": "def avoid_duplicate_import():\n    import os\n    import os",
    "target": "Remove duplicate imports to improve maintainability."
  },
  {
    "func": "def use_of_excessive_comments():\n    # This line adds two numbers\n    return a + b",
    "target": "Avoid excessive comments. Ensure code is self-explanatory."
  },
  {
    "func": "def improper_exception_rethrow():\n    try:\n        risky_operation()\n    except Exception:\n        raise",
    "target": "Preserve the original exception context when rethrowing."
  },
  {
    "func": "def avoid_global_variables():\n    global counter\n    counter += 1",
    "target": "Avoid using global variables. Use function parameters or class attributes instead."
  },
  {
    "func": "def unnecessary_conversion():\n    value = int(str(42))\n    return value",
    "target": "Avoid unnecessary data type conversions for better performance."
  },
  {
    "func": "def missing_finally_block():\n    try:\n        risky_operation()\n    except Exception:\n        log_error()",
    "target": "Use a `finally` block to ensure cleanup logic is always executed."
  },
  {
    "func": "def avoid_overly_generic_exceptions():\n    try:\n        risky_operation()\n    except Exception:\n        log_error()",
    "target": "Catch specific exceptions instead of the generic `Exception`."
  },
  {
    "func": "def unused_private_variable():\n    _temp = 42\n    return True",
    "target": "Remove unused private variables to reduce code clutter."
  },
  {
    "func": "def redundant_boolean_check():\n    if x == True:\n        return True",
    "target": "Avoid redundant boolean comparisons. Use `if x:` instead."
  },
  {
    "func": "def long_chained_calls():\n    return obj.method1().method2().method3().method4()",
    "target": "Avoid long chains of method calls. Break into intermediate variables for clarity."
  },
  {
    "func": "def overly_generic_parameter(data):\n    return data.process()",
    "target": "Avoid overly generic parameters. Use specific types or interfaces."
  },
  {
    "func": "def missing_close_in_file_handling():\n    file = open('data.txt', 'r')\n    data = file.read()\n    return data",
    "target": "Ensure files are closed properly. Use context managers for safety."
  },
  {
    "func": "def inconsistent_indentation():\n    if True:\n      print('Inconsistent')",
    "target": "Use consistent indentation to improve readability."
  },
  {
    "func": "def avoid_large_return_tuples():\n    return (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)",
    "target": "Avoid large tuples. Use named tuples or classes for better readability."
  },
  {
    "func": "def overly_complex_function():\n    def process_data(a, b, c, d, e, f):\n        return a + b + c + d + e + f",
    "target": "Reduce function complexity by splitting into smaller functions."
  },
  {
    "func": "def duplicate_code_in_branches():\n    if condition:\n        x = 10\n    else:\n        x = 10\n    return x",
    "target": "Refactor duplicated code in branches into a single statement."
  },
  {
    "func": "def inefficient_data_structure_for_lookup():\n    data = [1, 2, 3, 4]\n    if 3 in data:\n        return True",
    "target": "Use sets for faster lookups instead of lists."
  },
  {
    "func": "def ambiguous_exception_message():\n    raise ValueError('Something went wrong')",
    "target": "Provide clear and meaningful exception messages."
  },
  {
    "func": "def unused_loop_variable():\n    for i in range(10):\n        pass",
    "target": "Use `_` for loop variables that are intentionally unused."
  },
  {
    "func": "def excessive_class_attributes():\n    class User:\n        attr1 = None\n        attr2 = None\n        attr3 = None\n        attr4 = None",
    "target": "Avoid excessive class attributes. Group related attributes into smaller classes."
  },
  {
    "func": "def inconsistent_spacing():\n    a=10\n    b = 20\n    return a+b",
    "target": "Use consistent spacing around operators for better readability."
  },
  {
    "func": "def inefficient_sorting_algorithm(data):\n    for i in range(len(data)):\n        for j in range(i + 1, len(data)):\n            if data[i] > data[j]:\n                data[i], data[j] = data[j], data[i]",
    "target": "Use built-in sorting methods like `sorted()` or `list.sort()` for efficiency."
  },
  {
    "func": "def nested_loops_with_high_complexity():\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                print(i, j, k)",
    "target": "Refactor deeply nested loops into separate functions or reduce nesting."
  },
  {
    "func": "def hardcoded_error_message():\n    if not data:\n        raise ValueError('Error')",
    "target": "Use configurable or parameterized error messages for flexibility."
  },
  {
    "func": "def function_too_many_lines():\n    def long_function():\n        # Over 100 lines of code\n        pass",
    "target": "Refactor long functions into smaller, more manageable functions."
  },
  {
    "func": "def mutable_class_variable():\n    class MyClass:\n        items = []",
    "target": "Avoid mutable default attributes in classes to prevent unexpected behavior."
  },
  {
    "func": "def ambiguous_condition():\n    if a == b:\n        return 'Equal'\n    elif a == 10:\n        return 'Ten'\n    elif a == b:\n        return 'Still Equal'",
    "target": "Avoid overlapping or ambiguous conditions in conditional statements."
  },
  {
    "func": "def implicit_fallback_behavior(data):\n    return data.get('key')",
    "target": "Provide explicit fallback values for dictionary lookups."
  },
  {
    "func": "def unused_function_argument(a, b):\n    return a",
    "target": "Remove unused function arguments to avoid confusion."
  },
  {
    "func": "def mixed_loop_styles():\n    for i in range(10):\n        print(i)\n    j = 0\n    while j < 10:\n        print(j)\n        j += 1",
    "target": "Use consistent looping styles for better readability."
  },
  {
    "func": "def excessive_inline_comments():\n    x = 10  # This is a number\n    y = 20  # Another number\n    return x + y",
    "target": "Avoid excessive inline comments. Ensure comments add meaningful context."
  },
  {
    "func": "def excessive_repetition_in_code():\n    print('Processing Step 1')\n    print('Processing Step 2')\n    print('Processing Step 3')",
    "target": "Refactor repeated code into reusable functions or loops."
  },
  {
    "func": "def missing_enumerate_in_loops():\n    for i in range(len(data)):\n        print(i, data[i])",
    "target": "Use `enumerate()` for better readability when looping with indices."
  },
  {
    "func": "def inefficient_use_of_comprehension():\n    data = [x for x in range(10)]\n    return data",
    "target": "Avoid unnecessary comprehensions. Use `list(range(10))` for clarity."
  },
  {
    "func": "def improper_function_placement():\n    def helper_function():\n        pass\n\n    def main_function():\n        helper_function()",
    "target": "Order functions logically with main functions at the top or bottom."
  },
  {
    "func": "def overuse_of_static_methods():\n    @staticmethod\n    def process():\n        return True",
    "target": "Limit the use of static methods. Use instance methods for better design."
  },
  {
    "func": "def inconsistent_variable_naming():\n    x = 10\n    y = 20\n    return x + y",
    "target": "Use consistent variable naming conventions for better code readability."
  },
  {
    "func": "def excessive_function_parameters():\n    def process(a, b, c, d, e, f):\n        return a + b + c + d + e + f",
    "target": "Limit the number of function parameters. Use objects or dictionaries for complex data."
  },
  {
    "func": "def unnecessary_list_comprehension():\n    data = [x for x in range(10)]\n    return data",
    "target": "Avoid unnecessary list comprehensions. Use `list(range(10))` for clarity."
  },
  {
    "func": "def inconsistent_function_naming():\n    def calculateSum():\n        return 42",
    "target": "Use consistent function naming conventions like snake_case."
  },
  {
    "func": "def excessive_function_length():\n    def long_function():\n        # Over 100 lines of code\n        pass",
    "target": "Refactor long functions into smaller, more manageable functions."
  },
  {
    "func": "def inconsistent_spacing_around_operators():\n    a=10\n    b = 20\n    return a+b",
    "target": "Use consistent spacing around operators for better code readability."
  },
  {
    "func": "def improper_use_of_try_finally():\n    try:\n        risky_operation()\n    finally:\n        cleanup()",
    "target": "Ensure exceptions are caught and logged in `try-finally` blocks."
  },
  {
    "func": "def overcomplicated_default_values(data=None):\n    if data is None:\n        data = []\n    return data",
    "target": "Use default immutable arguments directly, like `data=None`."
  },
  {
    "func": "def ambiguous_code_with_nested_loops():\n    for i in range(10):\n        for j in range(10):\n            if i * j > 10:\n                return i",
    "target": "Avoid ambiguous nested loops by refactoring into functions with descriptive names."
  },
  {
    "func": "def unrelated_function_logic():\n    def send_email():\n        return calculate_sum(1, 2)",
    "target": "Keep function logic focused on a single responsibility."
  },
  {
    "func": "def silent_ignore_of_os_errors():\n    try:\n        os.remove('file.txt')\n    except OSError:\n        pass",
    "target": "Log OS errors even if they are ignored to trace potential issues."
  },
  {
    "func": "def inefficient_use_of_memory():\n    data = [x**2 for x in range(10**6)]\n    return sum(data)",
    "target": "Use generator expressions to avoid excessive memory usage."
  },
  {
    "func": "def unnecessary_early_return():\n    if condition:\n        return True\n    return False",
    "target": "Combine early returns to simplify code."
  },
  {
    "func": "def improper_function_chaining():\n    return method1().method2().method3()",
    "target": "Break function chains into intermediate steps for clarity."
  },
  {
    "func": "def large_unstructured_code_block():\n    # 100 lines of unstructured code\n    return True",
    "target": "Break large, unstructured code blocks into smaller functions."
  },
  {
    "func": "def improper_use_of_constants_in_code():\n    GRAVITY = 9.8\n    return 9.8 * mass",
    "target": "Use constants consistently across the codebase to avoid magic numbers."
  },
  {
    "func": "def ambiguous_type_handling(data):\n    if isinstance(data, int):\n        return data * 2\n    return str(data)",
    "target": "Avoid ambiguous type handling. Enforce strict type checks."
  },
  {
    "func": "def overuse_of_helper_functions():\n    def helper1():\n        pass\n    def helper2():\n        pass",
    "target": "Avoid excessive helper functions. Group related logic into meaningful units."
  },
  {
    "func": "def misused_inheritance():\n    class A:\n        pass\n    class B(A):\n        pass",
    "target": "Avoid inheritance when composition can achieve better flexibility."
  },
  {
    "func": "def unused_parameters_in_functions(a, b):\n    return a",
    "target": "Remove unused parameters to make function definitions clearer."
  },
  {
    "func": "def repeated_hardcoded_logic():\n    if user.role == 'admin':\n        return 'Admin Access'\n    if user.role == 'admin':\n        return 'Admin Access'",
    "target": "Refactor repeated logic into reusable functions."
  },
  {
    "func": "def missing_boundary_checks(x):\n    return array[x]",
    "target": "Add boundary checks for array and list access to prevent IndexErrors."
  },
  {
    "func": "def hidden_dependency_in_code():\n    return external_service.get_data()",
    "target": "Avoid hidden dependencies. Pass dependencies explicitly."
  },
  {
    "func": "def excessive_lambda_usage():\n    result = lambda x: x + 1\n    return result(5)",
    "target": "Avoid excessive use of lambda functions. Use named functions for clarity."
  },
  {
    "func": "def non_standard_iteration():\n    for index in range(0, len(data)):\n        item = data[index]\n        process(item)",
    "target": "Use direct iteration over lists for better readability."
  },
  {
    "func": "def misconfigured_logging():\n    logging.debug('Important message')",
    "target": "Use appropriate logging levels based on the importance of the message."
  },
  {
    "func": "def unsafe_dictionary_update():\n    data.update({'key': 'value'})",
    "target": "Validate inputs before updating dictionaries to prevent overwriting critical keys."
  },
  {
    "func": "def hardcoded_debug_mode():\n    DEBUG = True\n    if DEBUG:\n        print('Debugging enabled')",
    "target": "Avoid hardcoding debug modes. Use configuration management instead."
  },
  {
    "func": "def improper_resource_synchronization():\n    shared_resource += 1",
    "target": "Use synchronization primitives like locks to prevent race conditions."
  },
  {
    "func": "def inconsistent_return_style():\n    if x:\n        return True\n    return",
    "target": "Ensure consistent return styles across all code paths."
  },
  {
    "func": "def poorly_named_temp_variable():\n    tmp = 42\n    return tmp",
    "target": "Use meaningful variable names instead of temporary placeholders."
  },
  {
    "func": "def insufficient_security_in_headers():\n    response.headers['X-Powered-By'] = 'Flask'",
    "target": "Remove sensitive information from headers to avoid exposing technology stack."
  },
  {
    "func": "def redundant_code_block():\n    if condition:\n        return True\n    else:\n        return False",
    "target": "Simplify redundant `if-else` structures for cleaner code."
  },
  {
    "func": "def misleading_variable_scope():\n    for i in range(10):\n        j = i\n    return j",
    "target": "Avoid using variables defined in a loop outside their intended scope."
  },
  {
    "func": "def insufficient_event_logging():\n    if error:\n        handle_error()",
    "target": "Log critical events like errors or unexpected behavior for monitoring."
  },
  {
    "func": "def overuse_of_exception_catching():\n    try:\n        risky_operation()\n    except Exception as e:\n        return 'Error occurred'",
    "target": "Avoid catching generic exceptions unnecessarily. Catch specific exceptions."
  },
  {
    "func": "def repeated_literal_in_code():\n    if status == 200:\n        return 'OK'\n    elif status == 404:\n        return 'Not Found'",
    "target": "Replace repeated literals with named constants for clarity and maintainability."
  },
  {
    "func": "def inefficient_exception_handling():\n    try:\n        data = risky_function()\n    except Exception:\n        return None",
    "target": "Handle specific exceptions instead of catching all exceptions."
  },
  {
    "func": "def unnecessary_complexity_in_loops():\n    for i in range(len(data)):\n        for j in range(i, len(data)):\n            process(data[i], data[j])",
    "target": "Avoid nested loops where performance can be improved with optimized algorithms."
  },
  {
    "func": "def redundant_return_statement():\n    if x > 0:\n        return True\n    else:\n        return False",
    "target": "Simplify redundant return statements by directly returning the condition."
  },
  {
    "func": "def unsafe_string_formatting(user_input):\n    return 'Hello, {}'.format(user_input)",
    "target": "Sanitize user input in string formatting to avoid injection vulnerabilities."
  },
  {
    "func": "def inconsistent_variable_casing():\n    userName = 'John'\n    user_email = 'john@example.com'",
    "target": "Follow consistent naming conventions like snake_case for variables."
  },
  {
    "func": "def repeated_code_block():\n    if condition1:\n        do_something()\n    if condition2:\n        do_something()",
    "target": "Refactor repeated code blocks into reusable functions."
  },
  {
    "func": "def missing_logging_context():\n    logger.info('Task completed')",
    "target": "Add context (e.g., task ID or user ID) to log messages for debugging."
  },
  {
    "func": "def improper_variable_initialization():\n    value = None\n    if condition:\n        value = 10\n    return value",
    "target": "Avoid partial initialization of variables. Provide default values where possible."
  },
  {
    "func": "def missing_test_case_for_edge_condition():\n    def divide(a, b):\n        return a / b",
    "target": "Ensure edge conditions (e.g., division by zero) are tested."
  },
  {
    "func": "def unused_class():\n    class Helper:\n        pass",
    "target": "Remove unused classes to reduce code clutter."
  },
  {
    "func": "def overuse_of_boolean_flags():\n    def calculate(is_active):\n        if is_active:\n            return process_active()\n        return process_inactive()",
    "target": "Avoid excessive use of boolean flags. Use meaningful parameter names or enums."
  },
  {
    "func": "def ambiguous_function_name():\n    def handle_data():\n        return True",
    "target": "Use descriptive function names to clearly define their purpose."
  },
  {
    "func": "def hardcoded_file_extension():\n    file_name = 'report.txt'\n    return file_name",
    "target": "Avoid hardcoding file extensions. Use configuration files or constants."
  },
  {
    "func": "def inefficient_string_search():\n    if string.find('keyword') != -1:\n        return True",
    "target": "Use `in` instead of `find()` for string searches for better readability."
  },
  {
    "func": "def poorly_named_function():\n    def func1():\n        return True",
    "target": "Use descriptive function names that convey the action or purpose."
  },
  {
    "func": "def missing_type_annotations():\n    def add(a, b):\n        return a + b",
    "target": "Add type annotations to function arguments and return values for clarity."
  },
  {
    "func": "def inefficient_use_of_collections():\n    data = []\n    for x in range(10):\n        data.append(x)",
    "target": "Use list comprehensions for concise and efficient code."
  },
  {
    "func": "def unsafe_file_permission():\n    os.chmod('file.txt', 0o777)",
    "target": "Avoid overly permissive file permissions. Use the principle of least privilege."
  },
  {
    "func": "def unused_loop_variable():\n    for i in range(10):\n        pass",
    "target": "Use `_` for loop variables that are intentionally unused."
  },
  {
    "func": "def unnecessary_list_conversion():\n    data = list([1, 2, 3])",
    "target": "Avoid unnecessary conversions to improve performance and readability."
  },
  {
    "func": "def insecure_data_storage():\n    stored_password = password",
    "target": "Encrypt sensitive data before storing it to protect against unauthorized access."
  },
  {
    "func": "def redundant_condition_check():\n    if x > 10 and x > 5:\n        return True",
    "target": "Simplify conditions by removing redundant checks."
  },
  {
    "func": "def misaligned_function_comments():\n    # This function adds two numbers\n    def add(a, b):\n        return a + b",
    "target": "Align comments with the function they describe for better readability."
  },
  {
    "func": "def unnecessary_mutable_argument(data=[]):\n    data.append(1)\n    return data",
    "target": "Avoid mutable default arguments to prevent unexpected behavior."
  },
  {
    "func": "def hardcoded_error_code():\n    return {'status': 500, 'message': 'Internal Error'}",
    "target": "Replace hardcoded error codes with enumerations or constants."
  },
  {
    "func": "def ambiguous_return_value():\n    if condition:\n        return 'Success'\n    return 1",
    "target": "Use consistent return types to avoid confusion."
  },
  {
    "func": "def unused_catch_variable():\n    try:\n        risky_function()\n    except Exception as e:\n        pass",
    "target": "Use or remove unused exception variables for clarity."
  },
  {
    "func": "def excessive_class_responsibility():\n    class User:\n        def login(self): pass\n        def logout(self): pass\n        def reset_password(self): pass\n        def update_profile(self): pass",
    "target": "Follow the Single Responsibility Principle. Break large classes into smaller, focused ones."
  },
  {
    "func": "def long_chain_of_ifs():\n    if condition1:\n        return 'A'\n    elif condition2:\n        return 'B'\n    elif condition3:\n        return 'C'",
    "target": "Replace long `if-elif` chains with a mapping or dictionary."
  },
  {
    "func": "def missing_parentheses():\n    print 'Hello World'",
    "target": "Add parentheses to function calls to adhere to modern Python syntax."
  },
  {
    "func": "def inefficient_loop():\n    for i in range(len(my_list)):\n        print(my_list[i])",
    "target": "Use `for item in my_list` instead of indexing for cleaner and faster iteration."
  },
  {
    "func": "def nested_try_blocks():\n    try:\n        try:\n            risky_function()\n        except ValueError:\n            handle_value_error()\n    except Exception:\n        handle_general_error()",
    "target": "Avoid nested try blocks. Combine or refactor them for clarity."
  },
  {
    "func": "def missing_finally():\n    try:\n        file = open('data.txt', 'r')\n        data = file.read()\n    except Exception:\n        print('Error reading file')",
    "target": "Use a `finally` block to ensure resources like files are always closed."
  },
  {
    "func": "def hardcoded_colors():\n    color = '#FF5733'\n    return color",
    "target": "Avoid hardcoding colors. Use a configuration file or constants."
  },
  {
    "func": "def inefficient_key_check(dictionary, key):\n    if key in dictionary.keys():\n        return dictionary[key]",
    "target": "Use `if key in dictionary:` to check for keys more efficiently."
  },
  {
    "func": "def unnecessary_lambda():\n    func = lambda x: x * 2\n    return func(5)",
    "target": "Avoid unnecessary lambdas. Use a regular function instead."
  },
  {
    "func": "def inconsistent_indentation():\n    if x > 5:\n        print('x is large')\n       print('Check this line')",
    "target": "Fix inconsistent indentation to adhere to style guidelines."
  },
  {
    "func": "def global_state_dependency():\n    global x\n    x += 1\n    return x",
    "target": "Avoid using global variables to prevent unintended side effects."
  },
  {
    "func": "def unreachable_code_with_loops():\n    while True:\n        break\n        print('Unreachable')",
    "target": "Remove unreachable code to improve maintainability."
  },
  {
    "func": "def inefficient_data_structure():\n    my_dict = {}\n    my_dict['key1'] = 'value1'\n    return my_dict",
    "target": "Use dictionary literals `{}` for better readability and performance."
  },
  {
    "func": "def redundant_comparison():\n    if x != None:\n        return True",
    "target": "Use `if x is not None` instead of `x != None` for better clarity."
  },
  {
    "func": "def inefficient_split_join():\n    words = sentence.split(' ')\n    new_sentence = ' '.join(words)\n    return new_sentence",
    "target": "Avoid unnecessary `split` and `join`. Use the string as-is if unchanged."
  },
  {
    "func": "def exception_swallowing():\n    try:\n        risky_function()\n    except:\n        pass",
    "target": "Avoid swallowing exceptions. Log or handle them appropriately."
  },
  {
    "func": "def unused_default_parameters(a, b=10):\n    return a",
    "target": "Remove unused default parameters for clarity."
  },
  {
    "func": "def infinite_recursion():\n    def recurse():\n        return recurse()\n    return recurse()",
    "target": "Avoid infinite recursion. Add a base case to terminate the recursion."
  },
  {
    "func": "def hardcoded_urls():\n    url = 'http://example.com'\n    return url",
    "target": "Avoid hardcoding URLs. Use configuration or environment variables."
  },
  {
    "func": "def over_engineered_solution():\n    def add(a, b):\n        result = a + b\n        return result\n    return add(2, 3)",
    "target": "Avoid over-engineering. Simplify functions where possible."
  },
  {
    "func": "def mutable_default_argument(data=[]):\n    data.append(5)\n    return data",
    "target": "Avoid mutable default arguments to prevent unexpected behavior."
  },
  {
    "func": "def excessive_comments():\n    # This is a comment\n    # Another comment\n    # Yet another comment\n    result = 42  # Final comment\n    return result",
    "target": "Avoid excessive comments. Use clear code and concise documentation."
  },
  {
    "func": "def missing_context_manager():\n    file = open('data.txt', 'w')\n    file.write('Hello World')\n    file.close()",
    "target": "Use a context manager (`with open(...)`) to ensure proper resource handling."
  },
  {
    "func": "def inconsistent_variable_case():\n    userName = 'Alice'\n    UserName = 'Bob'\n    return userName",
    "target": "Follow consistent naming conventions for variables."
  },
  {
    "func": "def unnecessary_check():\n    if len(my_list) > 0:\n        print(my_list[0])",
    "target": "Avoid unnecessary checks. Use `if my_list:` instead of `if len(my_list) > 0`."
  },
  {
    "func": "def insecure_random():\n    import random\n    return random.randint(1, 10)",
    "target": "Use `secrets` module for secure random number generation in sensitive contexts."
  },
  {
    "func": "def unused_function():\n    def helper():\n        return 42\n    return 0",
    "target": "Remove unused functions to reduce clutter."
  },
  {
    "func": "def long_inline_expression():\n    result = (a + b) * c / (d - e) + (f * g) / h\n    return result",
    "target": "Break down long expressions into multiple lines for better readability."
  },
  {
    "func": "def magic_string_comparison():\n    if status == 'active':\n        return True",
    "target": "Avoid magic strings. Use named constants for better clarity."
  },
  {
    "func": "def redundant_pass():\n    def function():\n        pass",
    "target": "Avoid redundant `pass` in empty functions or blocks."
  },
  {
    "func": "def duplicate_code_segments():\n    def add(a, b):\n        return a + b\n    def sum(a, b):\n        return a + b",
    "target": "Refactor duplicate code segments into a single function."
  },
  {
    "func": "def large_classes():\n    class MyClass:\n        def method1(self): pass\n        def method2(self): pass\n        # 100 more methods\n    return MyClass",
    "target": "Break down large classes into smaller, more focused classes."
  },
  {
    "func": "def insecure_password_storage(password):\n    stored_password = password\n    return stored_password",
    "target": "Avoid storing passwords in plaintext. Use a secure hashing algorithm like bcrypt."
  },
  {
    "func": "def unnecessary_complexity(x):\n    if x % 2 == 0:\n        if x > 10:\n            return 'Even and greater than 10'\n    else:\n        return 'Other'",
    "target": "Simplify nested conditions for better readability and maintainability."
  },
  {
    "func": "def unused_class_variable():\n    class MyClass:\n        unused_var = 42\n        def method(self):\n            return 0",
    "target": "Remove unused class variables to reduce confusion and improve clarity."
  },
  {
    "func": "def hardcoded_http_url():\n    url = 'http://example.com'\n    return url",
    "target": "Use HTTPS instead of HTTP for secure communication."
  },
  {
    "func": "def missing_docstring():\n    def add(a, b):\n        return a + b",
    "target": "Add a docstring to describe the function’s purpose and behavior."
  },
  {
    "func": "def inconsistent_spacing():\n    a=10\n    b = 20\n    c= 30",
    "target": "Use consistent spacing around operators for better readability."
  },
  {
    "func": "def hardcoded_path():\n    path = '/usr/local/data.txt'\n    return path",
    "target": "Avoid hardcoding file paths. Use configuration files or environment variables."
  },
  {
    "func": "def unchecked_input(data):\n    return data.strip()",
    "target": "Validate and sanitize user inputs to prevent potential injection attacks."
  },
  {
    "func": "def inefficient_string_concat():\n    result = ''\n    for word in words:\n        result += word",
    "target": "Use `str.join` for efficient string concatenation in loops."
  },
  {
    "func": "def insecure_temp_file():\n    import tempfile\n    temp = tempfile.NamedTemporaryFile(delete=False)\n    return temp.name",
    "target": "Avoid creating insecure temporary files. Use `delete=True` or secure configurations."
  },
  {
    "func": "def missing_type_hints(a, b):\n    return a + b",
    "target": "Add type hints to improve code clarity and enable static analysis."
  },
  {
    "func": "def redundant_if_else(flag):\n    if flag:\n        return True\n    else:\n        return False",
    "target": "Simplify to `return flag` for better readability."
  },
  {
    "func": "def overcomplicated_expression(a, b, c):\n    return (a + b) - c if (a + b) > c else c - (a + b)",
    "target": "Refactor overcomplicated expressions for clarity."
  },
  {
    "func": "def insecure_command_execution(cmd):\n    import os\n    os.system(cmd)",
    "target": "Avoid using `os.system` for command execution. Use `subprocess` with proper sanitization."
  },
  {
    "func": "def missing_input_validation(age):\n    if age > 18:\n        return 'Adult'",
    "target": "Validate input types and ranges to ensure robustness."
  },
  {
    "func": "def inefficient_set_check(item):\n    if item in [1, 2, 3, 4, 5]:\n        return True",
    "target": "Use a set for faster membership checks."
  },
  {
    "func": "def open_socket_without_closing():\n    import socket\n    s = socket.socket()\n    s.connect(('example.com', 80))",
    "target": "Ensure sockets are closed properly or use a context manager."
  },
  {
    "func": "def mutable_key_in_dict():\n    my_dict = {{[1, 2]: 'value'}}\n    return my_dict",
    "target": "Avoid using mutable types like lists as dictionary keys."
  },
  {
    "func": "def too_many_return_statements(x):\n    if x == 1:\n        return 'One'\n    elif x == 2:\n        return 'Two'\n    else:\n        return 'Other'",
    "target": "Limit the number of return statements to improve code readability."
  },
  {
    "func": "def unused_parameter(a, b, c):\n    return a + b",
    "target": "Remove unused parameters to simplify the function signature."
  },
  {
    "func": "def weak_password_check(password):\n    if len(password) < 8:\n        return False\n    return True",
    "target": "Enhance password validation by checking for complexity, not just length."
  },
  {
    "func": "def empty_if_block():\n    if condition:\n        pass",
    "target": "Avoid empty code blocks. Add meaningful logic or remove the condition."
  },
  {
    "func": "def ambiguous_function_name():\n    def do_stuff():\n        return 42",
    "target": "Use descriptive function names to clarify intent."
  },
  {
    "func": "def inefficient_list_copy():\n    new_list = [item for item in old_list]\n    return new_list",
    "target": "Use `new_list = old_list.copy()` for a more efficient list copy."
  },
  {
    "func": "def insecure_file_permissions():\n    with open('data.txt', 'w') as file:\n        file.write('content')",
    "target": "Set secure file permissions when creating sensitive files."
  },
  {
    "func": "def redundant_variable_assignment():\n    x = 42\n    y = x\n    return y",
    "target": "Remove redundant variable assignments to simplify the code."
  },
  {
    "func": "def long_parameter_list(a, b, c, d, e, f, g, h, i):\n    return a + b + c",
    "target": "Break long parameter lists into smaller, grouped structures like classes or dictionaries."
  },
  {
    "func": "def duplicate_logic(x):\n    if x > 0:\n        return 'Positive'\n    elif x == 0:\n        return 'Zero'\n    elif x < 0:\n        return 'Negative'",
    "target": "Combine duplicate logic for cleaner and more efficient code."
  },
  {
    "func": "def insecure_deserialization(data):\n    import pickle\n    obj = pickle.loads(data)\n    return obj",
    "target": "Avoid insecure deserialization with `pickle`. Use safe alternatives like `json`."
  },
  {
    "func": "def unnecessary_try_finally():\n    try:\n        x = 10\n    finally:\n        print('Done')",
    "target": "Remove unnecessary `try-finally` blocks when there’s no exception handling required."
  },
  {
    "func": "def insecure_shell_command(user_input):\n    os.system(f'ping {user_input}')",
    "target": "Avoid using user input in shell commands. Sanitize input and use secure subprocess alternatives."
  },
  {
    "func": "def nested_ternary(a, b):\n    return 'Equal' if a == b else 'Greater' if a > b else 'Smaller'",
    "target": "Avoid nested ternary operators. Use a simple if-else block for clarity."
  },
  {
    "func": "def inefficient_list_comprehension():\n    result = [x*2 for x in range(1000000)]",
    "target": "Avoid creating large intermediate lists. Use a generator expression instead."
  },
  {
    "func": "def hardcoded_user_role():\n    user_role = 'admin'\n    return user_role",
    "target": "Avoid hardcoding roles. Use configuration files or constants."
  },
  {
    "func": "def empty_catch_block():\n    try:\n        risky_operation()\n    except Exception:\n        pass",
    "target": "Avoid empty exception blocks. Handle exceptions appropriately or log them."
  },
  {
    "func": "def insecure_random_number():\n    import random\n    return random.randint(1, 100)",
    "target": "Use a cryptographically secure random number generator like `secrets` for sensitive data."
  },
  {
    "func": "def redundant_code():\n    if x > 0:\n        return x\n    else:\n        return x",
    "target": "Remove redundant code paths to improve clarity."
  },
  {
    "func": "def missing_context_manager():\n    file = open('data.txt', 'r')\n    data = file.read()\n    file.close()\n    return data",
    "target": "Use a context manager (`with`) to ensure files are properly closed."
  },
  {
    "func": "def inconsistent_naming():\n    def myFunction():\n        return True",
    "target": "Use consistent naming conventions (e.g., snake_case for Python)."
  },
  {
    "func": "def missing_return(x):\n    if x > 0:\n        return 'Positive'",
    "target": "Ensure all code paths in a function have a return statement."
  },
  {
    "func": "def unhandled_unicode(data):\n    print(data.encode('ascii'))",
    "target": "Handle Unicode properly to avoid encoding errors."
  },
  {
    "func": "def redundant_import():\n    import math\n    import math\n    return math.pi",
    "target": "Remove duplicate imports to reduce clutter."
  },
  {
    "func": "def inefficient_sort():\n    items.sort(key=lambda x: x.lower())",
    "target": "Use `str.casefold()` instead of `lower()` for more accurate sorting."
  },
  {
    "func": "def redundant_boolean_comparison(x):\n    return x == True",
    "target": "Avoid redundant boolean comparisons. Simplify to `return x`."
  },
  {
    "func": "def unsafe_eval():\n    return eval('1 + 2')",
    "target": "Avoid `eval`. Use safer alternatives or explicit parsing."
  },
  {
    "func": "def over_engineered_code(a, b):\n    return sum([a, b])",
    "target": "Avoid over-engineering. Use `a + b` instead of `sum()` for two values."
  },
  {
    "func": "def unused_loop_variable():\n    for _ in range(5):\n        pass",
    "target": "Consider removing unused loops or adding meaningful logic."
  },
  {
    "func": "def mutable_default_args(x, y=[]):\n    y.append(x)\n    return y",
    "target": "Avoid mutable default arguments to prevent unexpected behavior."
  },
  {
    "func": "def insecure_file_permissions():\n    os.chmod('file.txt', 0o777)",
    "target": "Avoid setting overly permissive file permissions."
  },
  {
    "func": "def long_line_of_code():\n    result = x + y + z + a + b + c + d + e + f + g + h + i + j + k + l",
    "target": "Break long lines into multiple lines for better readability."
  },
  {
    "func": "def ambiguous_variable_name():\n    x = 42\n    return x",
    "target": "Use descriptive variable names to clarify their purpose."
  },
  {
    "func": "def unused_return_value():\n    data.sort()\n    return data",
    "target": "Be aware that `list.sort()` modifies the list in place and returns None."
  },
  {
    "func": "def missing_logging():\n    try:\n        risky_operation()\n    except Exception as e:\n        pass",
    "target": "Log exceptions for better debugging and traceability."
  },
  {
    "func": "def unoptimized_search(items, target):\n    for item in items:\n        if item == target:\n            return True\n    return False",
    "target": "Use `in` for membership checks on lists for simplicity and performance."
  },
  {
    "func": "def insecure_dependency_version():\n    install_package('some_package', version='1.0')",
    "target": "Avoid using outdated or insecure dependency versions."
  },
  {
    "func": "def improper_variable_scope():\n    if True:\n        temp = 42\n    return temp",
    "target": "Avoid relying on variables defined inside conditional blocks."
  },
  {
    "func": "def missing_constant_usage():\n    return 3.14159",
    "target": "Use named constants instead of magic numbers."
  },
  {
    "func": "def unnecessary_try_block():\n    try:\n        x = 42\n    except:\n        pass",
    "target": "Remove unnecessary try blocks where no exception is expected."
  },
  {
    "func": "def insecure_hardcoded_url():\n    url = 'http://api.example.com/v1/resource'\n    return url",
    "target": "Avoid hardcoding URLs. Use configuration files or environment variables."
  },
  {
    "func": "def poor_error_handling():\n    try:\n        risky_code()\n    except FileNotFoundError:\n        return 'File not found'\n    except Exception:\n        pass",
    "target": "Handle generic exceptions properly and avoid silent failures."
  },
  {
    "func": "def hardcoded_email():\n    email = 'admin@example.com'\n    return email",
    "target": "Avoid hardcoding sensitive data like emails. Use configuration files or environment variables."
  },
  {
    "func": "def redundant_if_statement(x):\n    if x:\n        return True\n    else:\n        return False",
    "target": "Simplify redundant if statements. Use `return x` for boolean values."
  },
  {
    "func": "def insecure_cookie_handling():\n    response.set_cookie('session', session_id)",
    "target": "Ensure cookies are set with secure attributes like `HttpOnly` and `Secure`."
  },
  {
    "func": "def unused_function():\n    def helper():\n        return 42\n    return True",
    "target": "Remove unused functions to reduce code clutter."
  },
  {
    "func": "def missing_docstring():\n    def add(a, b):\n        return a + b",
    "target": "Add docstrings to improve code readability and maintainability."
  },
  {
    "func": "def inefficient_string_concatenation():\n    result = ''\n    for word in words:\n        result += word",
    "target": "Avoid string concatenation in loops. Use `join()` for better performance."
  },
  {
    "func": "def exception_swallowing():\n    try:\n        risky_operation()\n    except KeyError:\n        return None",
    "target": "Avoid exception swallowing. Log errors or re-raise exceptions for debugging."
  },
  {
    "func": "def non_thread_safe_code():\n    global counter\n    counter += 1\n    return counter",
    "target": "Avoid non-thread-safe code. Use thread-safe constructs like `threading.Lock`."
  },
  {
    "func": "def improper_exit_handling():\n    import sys\n    sys.exit(1)",
    "target": "Avoid using `sys.exit` in libraries. Raise exceptions instead for proper handling."
  },
  {
    "func": "def missing_validation(user_input):\n    return user_input",
    "target": "Validate user input to ensure it meets expected constraints."
  },
  {
    "func": "def unoptimized_database_query():\n    results = db.query('SELECT * FROM users WHERE age > 18')\n    return results",
    "target": "Optimize database queries to fetch only required columns and rows."
  },
  {
    "func": "def static_method_missing_annotation():\n    def utility_function(cls):\n        return 42",
    "target": "Mark static utility methods with `@staticmethod` for clarity."
  },
  {
    "func": "def inadequate_logging():\n    print('Operation completed')",
    "target": "Use proper logging instead of `print()` for better debugging and monitoring."
  },
  {
    "func": "def inefficient_data_structure():\n    items = []\n    for i in range(100):\n        items.append(i)\n    return items",
    "target": "Consider using list comprehensions or appropriate data structures for better performance."
  },
  {
    "func": "def resource_exhaustion():\n    for i in range(10**10):\n        print(i)",
    "target": "Avoid resource-intensive operations that can exhaust system resources."
  },
  {
    "func": "def authenticate_user(user_input):\n    query = f\"SELECT * FROM users WHERE username = '{user_input}'\"\n    print('Executing query:', query)",
    "target": "Avoid SQL injection by using parameterized queries instead of string formatting."
  },
  {
    "func": "def eval_execution(data):\n    return eval(data)",
    "target": "Avoid `eval()` as it can execute arbitrary code. Use `ast.literal_eval` when parsing strings."
  },
  {
    "func": "def insecure_file_write():\n    with open('data.txt', 'w') as f:\n        f.write('sensitive data')",
    "target": "Avoid hardcoded file paths and use secure file permissions."
  },
  {
    "func": "def weak_hashing(password):\n    import hashlib\n    return hashlib.md5(password.encode()).hexdigest()",
    "target": "Avoid MD5 for password hashing. Use `bcrypt` or `argon2` instead."
  },
  {
    "func": "def excessive_function_length():\n    def calculate():\n        x = 1\n        y = 2\n        result = x + y\n        return result\n    return calculate()",
    "target": "Break down large functions into smaller, more maintainable units."
  },
  {
    "func": "def unnecessary_global_variable():\n    global counter\n    counter = 0",
    "target": "Avoid using global variables to maintain code modularity."
  },
  {
    "func": "def hardcoded_api_key():\n    api_key = '12345-ABCDE'\n    return api_key",
    "target": "Avoid hardcoding secrets. Use environment variables instead."
  },
  {
    "func": "def deep_nested_loops():\n    for i in range(5):\n        for j in range(5):\n            for k in range(5):\n                print(i, j, k)",
    "target": "Refactor deep nested loops for better readability."
  },
  {
    "func": "def missing_docstring():\n    def add(a, b):\n        return a + b",
    "target": "Add descriptive docstrings to improve code maintainability."
  },
  {
    "func": "def unsafe_os_command(command):\n    import os\n    os.system(command)",
    "target": "Avoid using `os.system` with unsanitized input. Use `subprocess.run` with safe parameters."
  },
  {
    "func": "def magic_number_usage():\n    if x == 7:\n        print('Lucky')",
    "target": "Replace magic numbers with named constants."
  },
  {
    "func": "def missing_type_annotations():\n    def calculate(a, b):\n        return a + b",
    "target": "Add type annotations for better code clarity."
  },
  {
    "func": "def long_chained_calls():\n    return obj.method1().method2().method3()",
    "target": "Avoid long chains of method calls; assign intermediate results to variables."
  },
  {
    "func": "def resource_leak():\n    f = open('data.txt', 'r')\n    data = f.read()\n    return data",
    "target": "Use `with open()` context manager to handle file operations properly."
  },
  {
    "func": "def insecure_random_number():\n    import random\n    return random.randint(1, 100)",
    "target": "Use `secrets` module for generating secure random numbers."
  },
  {
    "func": "def inconsistent_naming():\n    def CalculateSum(a, b):\n        return a + b",
    "target": "Follow naming conventions like `snake_case` in Python."
  },
  {
    "func": "def unused_import():\n    import math\n    return 42",
    "target": "Remove unused imports to improve code clarity."
  },
  {
    "func": "def hardcoded_ip():\n    server_ip = '192.168.1.1'\n    return server_ip",
    "target": "Avoid hardcoding IP addresses; use configuration files instead."
  },
  {
    "func": "def empty_exception_handler():\n    try:\n        x = 1/0\n    except Exception:\n        pass",
    "target": "Avoid empty exception handlers; log the error instead."
  },
  {
    "func": "def inconsistent_whitespace():\n    a=1\n    b = 2",
    "target": "Use consistent whitespace for better readability."
  },
  {
    "func": "def missing_input_validation(user_input):\n    print('Input:', user_input)",
    "target": "Validate and sanitize user inputs to prevent injection attacks."
  },
  {
    "func": "def inefficient_list_search(items, target):\n    for item in items:\n        if item == target:\n            return True",
    "target": "Use `in` for list membership checks."
  },
  {
    "func": "def improper_exception_type():\n    try:\n        x = int('abc')\n    except ValueError:\n        print('Error')",
    "target": "Use specific exception types for better clarity."
  },
  {
    "func": "def nested_dict_iteration():\n    for key1, val1 in data.items():\n        for key2, val2 in val1.items():\n            for key3, val3 in val2.items():\n                for key4, val4 in val3.items():\n                    for key5, val5 in val4.items():\n                        process(val5)",
    "target": "Reduce deep nesting in dictionary iteration (5 levels detected). Consider flattening the structure."
  },
  {
    "func": "def redundant_comparison():\n    if x == True:\n        return True",
    "target": "Avoid redundant boolean comparisons. Use `if x:`."
  },
  {
    "func": "def incomplete_logging():\n    import logging\n    logging.info('Something happened')",
    "target": "Include context like timestamps or user IDs in logs."
  },
  {
    "func": "def overcomplicated_expression():\n    result = ((a + b) * c) / d",
    "target": "Simplify complex expressions for better readability."
  },
  {
    "func": "def unsafe_file_handling():\n    with open('file.txt', 'w') as f:\n        f.write(data)",
    "target": "Validate file paths to prevent directory traversal."
  },
  {
    "func": "def weak_password_policy(password):\n    if len(password) < 6:\n        return False",
    "target": "Enforce strong password policies beyond length."
  },
  {
    "func": "def missing_finally_clause():\n    f = open('file.txt', 'r')\n    data = f.read()",
    "target": "Ensure files are closed with `finally` or `with`."
  },
  {
    "func": "def hardcoded_port_number():\n    port = 8080",
    "target": "Avoid hardcoding port numbers. Use configuration files."
  },
  {
    "func": "def inconsistent_return_types(x):\n    if x > 0:\n        return 'Positive'\n    else:\n        return 0",
    "target": "Ensure functions return consistent types to avoid confusion."
  },
  {
    "func": "def overly_long_function():\n    result = 0\n    for i in range(100):\n        result += i\n    print(result)\n    for j in range(100):\n        result -= j\n    print(result)",
    "target": "Refactor long functions into smaller, reusable functions."
  },
  {
    "func": "def nested_control_structures():\n    for i in range(5):\n        if i % 2 == 0:\n            for j in range(5):\n                print(i, j)",
    "target": "Reduce nested loops to improve readability."
  },
  {
    "func": "def magic_values():\n    if score >= 42:\n        print('Pass')",
    "target": "Replace magic numbers with named constants."
  },
  {
    "func": "def insufficient_modularity():\n    x = 1\n    y = 2\n    z = x + y\n    print(z)",
    "target": "Modularize code into separate functions for maintainability."
  },
  {
    "func": "def inconsistent_variable_naming():\n    user_name = 'Alice'\n    UserAge = 30",
    "target": "Maintain consistent naming conventions throughout the codebase."
  },
  {
    "func": "def long_argument_list(a, b, c, d, e, f, g):\n    return a + b + c + d + e + f + g",
    "target": "Avoid long parameter lists; use dictionaries or classes."
  },
  {
    "func": "def redundant_computations(n):\n    result = sum(range(n))\n    result2 = sum(range(n))",
    "target": "Avoid redundant computations; store results for reuse."
  },
  {
    "func": "def unoptimized_list_operations():\n    data = []\n    for i in range(1000):\n        data.append(i)",
    "target": "Use list comprehensions for better performance."
  },
  {
    "func": "def complex_boolean_expression(x, y):\n    if (x and y) or (not x and not y):\n        return True",
    "target": "Simplify complex boolean expressions for clarity."
  },
  {
    "func": "def lack_of_code_comments():\n    def add(a, b):\n        return a + b",
    "target": "Include comments to explain complex logic when needed."
  },
  {
    "func": "def long_chain_of_function_calls():\n    result = obj.a().b().c().d()",
    "target": "Avoid chaining multiple methods together; assign intermediate results to variables."
  },
  {
    "func": "def unused_variables():\n    x = 42\n    y = x + 1\n    return x",
    "target": "Remove unused variables to improve code clarity."
  },
  {
    "func": "def inconsistent_whitespace():\n    a=5\n    b = 6\n    c  =7",
    "target": "Use consistent spacing for better readability."
  },
  {
    "func": "def unclear_function_name():\n    def x1y2z3(a, b):\n        return a + b",
    "target": "Use meaningful function names to improve code clarity."
  },
  {
    "func": "def inefficient_membership_check(items, value):\n    if items.count(value) > 0:\n        return True",
    "target": "Use `in` keyword for membership checks instead of `count()`."
  },
  {
    "func": "def unused_function():\n    def helper():\n        return 42",
    "target": "Remove unused functions to reduce code clutter."
  },
  {
    "func": "def repeated_code_blocks():\n    if condition:\n        handle_task()\n    else:\n        handle_task()",
    "target": "Refactor duplicated code into a single function."
  },
  {
    "func": "def hard_to_read_lambda():\n    result = map(lambda x: x ** 2 if x % 2 == 0 else x + 1, data)",
    "target": "Avoid complex lambda functions; use named functions instead."
  },
  {
    "func": "def excessive_inline_comments():\n    x = 5  # assign 5\n    y = 6  # assign 6",
    "target": "Avoid unnecessary inline comments for self-explanatory code."
  },
  {
    "func": "def poorly_formatted_code():\n    x=1; y=2;z=3",
    "target": "Follow standard formatting conventions like PEP 8."
  },
  {
    "func": "def inconsistent_return_behavior(x):\n    if x > 0:\n        return 'Positive'\n    else:\n        print('Negative')",
    "target": "Ensure consistent use of return statements in functions."
  },
  {
    "func": "def unnecessary_list_conversion():\n    items = list([1, 2, 3])",
    "target": "Avoid redundant type conversions for better performance."
  },
  {
    "func": "def implicit_type_conversion():\n    result = 5 + '5'",
    "target": "Avoid implicit type conversions to prevent runtime errors."
  },
  {
    "func": "def inefficient_data_structure_usage():\n    for item in data:\n        if item not in seen:\n            seen.add(item)",
    "target": "Use sets instead of lists for membership checks where possible."
  },
  {
    "func": "def non_standard_docstring_format():\n    def add(a, b):\n        \"\"\"Does addition\"\"\"\n        return a + b",
    "target": "Use standardized docstring formats like NumPy or Google style."
  },
  {
    "func": "def repeated_literals():\n    if status == 'active':\n        print('active')",
    "target": "Use named constants instead of repeated string literals."
  },
  {
    "func": "def long_single_line_expression():\n    result = sum([x ** 2 for x in range(100) if x % 2 == 0])",
    "target": "Break down long expressions into multiple lines."
  },
  {
    "func": "def lack_of_input_validation(value):\n    return int(value)",
    "target": "Validate and sanitize user input to avoid unexpected errors."
  },
  {
    "func": "def overly_generic_variable_names():\n    x = 5\n    y = 6\n    return x + y",
    "target": "Use descriptive variable names for better understanding."
  },
  {
    "func": "class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n    def save_to_database(self):\n        print('Saving user to database')",
    "target": "Single Responsibility Principle: Separate database operations from the User class."
  },
  {
    "func": "class Report:\n    def __init__(self, data):\n        self.data = data\n    def generate_pdf(self):\n        print('Generating PDF')\n    def generate_csv(self):\n        print('Generating CSV')",
    "target": "Single Responsibility Principle: Separate report generation from format-specific logic."
  },
  {
    "func": "class PaymentProcessor:\n    def process_payment(self, payment_type):\n        if payment_type == 'credit_card':\n            print('Processing credit card payment')\n        elif payment_type == 'paypal':\n            print('Processing PayPal payment')",
    "target": "Open/Closed Principle: Avoid modifying the class for new payment types; use polymorphism."
  },
  {
    "func": "class Bird:\n    def fly(self):\n        print('Flying')\nclass Penguin(Bird):\n    def fly(self):\n        raise Exception('Penguins can’t fly')",
    "target": "Liskov Substitution Principle: Subclasses should not break base class behavior."
  },
  {
    "func": "class Printer:\n    def print_document(self, doc):\n        print('Printing', doc)\n    def scan_document(self, doc):\n        raise NotImplementedError('Scan not supported')",
    "target": "Interface Segregation Principle: Provide only the necessary interfaces to clients."
  },
  {
    "func": "class MySQLDatabase:\n    def connect(self):\n        print('Connecting to MySQL')\nclass Application:\n    def __init__(self):\n        self.db = MySQLDatabase()",
    "target": "Dependency Inversion Principle: Depend on abstractions, not concrete classes."
  },
  {
    "func": "class UserService:\n    def get_user(self, user_id):\n        print(f'Fetching user {user_id}')\n    def send_email(self, message):\n        print('Sending email:', message)",
    "target": "Single Responsibility Principle: Separate user management from communication logic."
  },
  {
    "func": "class Shape:\n    def area(self):\n        pass\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\nclass AreaCalculator:\n    def calculate_area(self, shape):\n        if isinstance(shape, Rectangle):\n            return shape.width * shape.height",
    "target": "Open/Closed Principle: Use polymorphism to calculate area for different shapes without modifying code."
  },
  {
    "func": "class Animal:\n    def make_sound(self):\n        print('Animal sound')\nclass Dog(Animal):\n    def make_sound(self):\n        return 5",
    "target": "Liskov Substitution Principle: Substitutable objects should maintain method behavior and types."
  },
  {
    "func": "class Document:\n    def open(self):\n        print('Open document')\n    def save(self):\n        raise NotImplementedError()",
    "target": "Interface Segregation Principle: Provide separate interfaces for openable and saveable documents."
  },
  {
    "func": "class Logger:\n    def log(self, message):\n        print('Logging:', message)\nclass UserService:\n    def __init__(self):\n        self.logger = Logger()",
    "target": "Dependency Inversion Principle: Inject logger via constructor instead of hardcoding."
  },
  {
    "func": "class TaskManager:\n    def add_task(self, task):\n        print('Adding task')\n    def generate_report(self):\n        print('Generating report')",
    "target": "Single Responsibility Principle: Separate task management from reporting."
  },
  {
    "func": "class Calculator:\n    def calculate(self, shape):\n        if type(shape).__name__ == 'Circle':\n            return 3.14 * shape.radius**2\n        elif type(shape).__name__ == 'Square':\n            return shape.side**2",
    "target": "Open/Closed Principle: Use polymorphism instead of type checks."
  },
  {
    "func": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    def set_width(self, width):\n        self.width = width\nclass Square(Rectangle):\n    def set_width(self, width):\n        self.width = width\n        self.height = width",
    "target": "Liskov Substitution Principle: Ensure subclasses don’t alter expected behavior."
  },
  {
    "func": "class Appliance:\n    def turn_on(self):\n        pass\n    def make_coffee(self):\n        raise NotImplementedError()",
    "target": "Interface Segregation Principle: Avoid forcing unused methods on classes."
  },
  {
    "func": "class NotificationService:\n    def __init__(self):\n        self.sms = SMS()\n    def notify(self, message):\n        self.sms.send(message)",
    "target": "Dependency Inversion Principle: Depend on interfaces, not implementations."
  },
  {
    "func": "class User:\n    def __init__(self, name):\n        self.name = name\n    def log_activity(self):\n        print('Logging activity')",
    "target": "Single Responsibility Principle: Separate logging from user management."
  },
  {
    "func": "class Formatter:\n    def format_csv(self, data):\n        print('CSV formatted')\n    def format_json(self, data):\n        print('JSON formatted')",
    "target": "Open/Closed Principle: Extend without modifying existing code by using strategy pattern."
  },
  {
    "func": "class Vehicle:\n    def start_engine(self):\n        print('Engine started')\nclass ElectricCar(Vehicle):\n    def start_engine(self):\n        return 1",
    "target": "Liskov Substitution Principle: Ensure method behavior remains consistent."
  },
  {
    "func": "class Worker:\n    def work(self):\n        pass\n    def eat(self):\n        raise NotImplementedError()",
    "target": "Interface Segregation Principle: Use separate Worker and Eater interfaces."
  },
  {
    "func": "class FileManager:\n    def __init__(self):\n        self.storage = DiskStorage()\n    def save(self, data):\n        self.storage.write(data)",
    "target": "Dependency Inversion Principle: Inject storage interface rather than hardcode dependency."
  },
  {
    "func": "class Product:\n    def calculate_price(self):\n        print('Calculating price')\n    def display_ui(self):\n        print('Displaying UI')",
    "target": "Single Responsibility Principle: Separate pricing logic from UI logic."
  },
  {
    "func": "class Document:\n    def __init__(self, content):\n        self.content = content\n    def print(self, format_type):\n        if format_type == 'PDF':\n            print('Printing PDF')\n        elif format_type == 'HTML':\n            print('Printing HTML')",
    "target": "Open/Closed Principle: Use strategy pattern instead of conditionals for format printing."
  },
  {
    "func": "class AudioPlayer:\n    def play_audio(self, file):\n        print('Playing audio')\nclass VideoPlayer(AudioPlayer):\n    def play_audio(self, file):\n        raise Exception('VideoPlayer cannot play audio')",
    "target": "Liskov Substitution Principle: Avoid violating base class expectations."
  },
  {
    "func": "class Machine:\n    def print_document(self):\n        raise NotImplementedError()\n    def scan_document(self):\n        raise NotImplementedError()",
    "target": "Interface Segregation Principle: Split into Printer and Scanner interfaces."
  },
  {
    "func": "class ShoppingCart:\n    def __init__(self):\n        self.db = SQLDatabase()\n    def checkout(self):\n        self.db.save('cart data')",
    "target": "Dependency Inversion Principle: Depend on database interface, not implementation."
  },
  {
    "func": "class Order:\n    def calculate_total(self):\n        print('Calculating total')\n    def send_invoice(self):\n        print('Sending invoice')",
    "target": "Single Responsibility Principle: Separate invoicing from order logic."
  },
  {
    "func": "class DiscountCalculator:\n    def calculate_discount(self, product_type):\n        if product_type == 'A':\n            return 10\n        elif product_type == 'B':\n            return 5",
    "target": "Open/Closed Principle: Avoid adding conditions; use a strategy pattern."
  },
  {
    "func": "class Duck:\n    def quack(self):\n        print('Quack')\nclass RobotDuck(Duck):\n    def quack(self):\n        return 42",
    "target": "Liskov Substitution Principle: Maintain consistent behavior in overridden methods."
  },
  {
    "func": "def calculate_discount(price, discount_rate, discount_type='standard', customer_type='regular'):\n    if discount_type == 'standard':\n        return price * (1 - discount_rate)\n    elif discount_type == 'holiday':\n        return price * (1 - discount_rate * 1.5)\n    else:\n        return price",
    "target": "YAGNI: Unnecessary discount types not currently needed. Simplify to one discount type."
  },
  {
    "func": "class UserProfile:\n    def __init__(self, username, email, age=None, phone=None, address=None, preferences=None):\n        self.username = username\n        self.email = email\n        self.age = age\n        self.phone = phone\n        self.address = address\n        self.preferences = preferences",
    "target": "YAGNI: Avoid adding unused parameters like `phone`, `address`, and `preferences`."
  },
  {
    "func": "def calculate_bonus(salary, years_of_service, company_size='small', industry='tech'):\n    if company_size == 'small' and industry == 'tech':\n        return salary * 0.05\n    elif company_size == 'large' and industry == 'finance':\n        return salary * 0.1\n    else:\n        return salary * 0.03",
    "target": "YAGNI: Industry and company size differentiation not required; simplify bonus calculation."
  },
  {
    "func": "class DataExporter:\n    def export_as_csv(self, data):\n        print('Exporting as CSV')\n    def export_as_xml(self, data):\n        print('Exporting as XML')\n    def export_as_json(self, data):\n        print('Exporting as JSON')",
    "target": "YAGNI: Exporting as XML and JSON not required yet; keep only CSV."
  },
  {
    "func": "def generate_report(report_type='pdf'):\n    if report_type == 'pdf':\n        print('Generating PDF report')\n    elif report_type == 'html':\n        print('Generating HTML report')\n    else:\n        print('Generating TXT report')",
    "target": "YAGNI: Only PDF report generation needed; remove other formats."
  },
  {
    "func": "class MultiAuthSystem:\n    def login_with_password(self, username, password):\n        print('Password login')\n    def login_with_fingerprint(self, fingerprint):\n        print('Fingerprint login')\n    def login_with_face_id(self, face_image):\n        print('Face ID login')",
    "target": "YAGNI: Only password login needed; remove fingerprint and face ID."
  },
  {
    "func": "def get_user_details(user_id, include_profile_picture=False, include_social_links=False, include_preferences=False):\n    user = {'id': user_id, 'name': 'John'}\n    if include_profile_picture:\n        user['profile_picture'] = 'default.jpg'\n    if include_social_links:\n        user['social_links'] = []\n    if include_preferences:\n        user['preferences'] = {}",
    "target": "YAGNI: Include only essential user details; remove unnecessary options."
  },
  {
    "func": "class Vehicle:\n    def drive(self):\n        print('Driving')\n    def fly(self):\n        print('Flying')",
    "target": "YAGNI: Vehicle doesn't need a `fly` method; remove it."
  },
  {
    "func": "def process_payment(amount, currency='USD', payment_gateway='stripe', region='US'):\n    print(f'Processing payment of {amount} {currency} via {payment_gateway}')",
    "target": "YAGNI: Payment gateway and region parameters unnecessary; simplify interface."
  },
  {
    "func": "class Product:\n    def __init__(self, name, price, color='black', size='medium', warranty=None):\n        self.name = name\n        self.price = price\n        self.color = color\n        self.size = size\n        self.warranty = warranty",
    "target": "YAGNI: Only name and price are necessary for now; remove optional parameters."
  },
  {
    "func": "def calculate_shipping(weight, distance, shipping_method='standard', delivery_time='normal'):\n    if shipping_method == 'standard':\n        cost = weight * distance * 0.5\n    elif shipping_method == 'express':\n        cost = weight * distance * 1.0\n    else:\n        cost = weight * distance * 0.3",
    "target": "YAGNI: Only standard shipping method is needed; simplify logic."
  },
  {
    "func": "class UserManager:\n    def __init__(self, username, email):\n        self.username = username\n        self.email = email\n    def deactivate_user(self):\n        print('Deactivating user')\n    def promote_to_admin(self):\n        print('Promoting user to admin')",
    "target": "YAGNI: `promote_to_admin` method not needed; remove it."
  },
  {
    "func": "def log_message(message, log_level='info', log_to_file=False, log_to_db=False):\n    print(f'{log_level.upper()}: {message}')",
    "target": "YAGNI: Only console logging needed; remove options for file and database."
  },
  {
    "func": "class Shape:\n    def __init__(self, sides):\n        self.sides = sides\n    def calculate_volume(self):\n        print('Volume calculation not needed')",
    "target": "YAGNI: Shape doesn't need a `calculate_volume` method; remove it."
  },
  {
    "func": "def render_dashboard(user, dark_mode=False, show_analytics=False, show_ads=False):\n    print(f'Rendering dashboard for {user}')",
    "target": "YAGNI: Additional options like dark mode and ads not needed."
  },
  {
    "func": "class DocumentHandler:\n    def open(self, file):\n        print('Opening file')\n    def compress(self, file):\n        print('Compressing file')\n    def encrypt(self, file):\n        print('Encrypting file')",
    "target": "YAGNI: Compression and encryption features not required yet."
  },
  {
    "func": "def calculate_invoice(total, discount=0, tax_rate=0.05, loyalty_discount=0.02, seasonal_discount=0):\n    return total - discount + total * tax_rate",
    "target": "YAGNI: Loyalty and seasonal discounts are unnecessary complexity."
  },
  {
    "func": "class Employee:\n    def __init__(self, name, department, salary, bonus=None, stock_options=None):\n        self.name = name\n        self.department = department\n        self.salary = salary\n        self.bonus = bonus\n        self.stock_options = stock_options",
    "target": "YAGNI: Bonus and stock options not needed for all employees."
  },
  {
    "func": "def generate_graph(data, graph_type='bar', show_grid=True, color='blue', animation_speed='normal'):\n    print('Generating graph')",
    "target": "YAGNI: Only bar graph type is required; remove unnecessary parameters."
  },
  {
    "func": "class NotificationService:\n    def send_email(self, message):\n        print('Sending email')\n    def send_sms(self, message):\n        print('Sending SMS')",
    "target": "YAGNI: SMS notification is unnecessary; remove it."
  },
  {
    "func": "def validate_user_input(input_data, allow_special_chars=False, max_length=255, strip_whitespace=True):\n    print('Validating input')",
    "target": "YAGNI: Only whitespace stripping is needed; remove other options."
  },
  {
    "func": "class ChatBot:\n    def __init__(self):\n        self.language = 'English'\n        self.theme = 'light'\n        self.voice_assistant_enabled = False",
    "target": "YAGNI: Theme and voice assistant options are not currently needed."
  },
  {
    "func": "def filter_transactions(transactions, min_amount=0, max_amount=None, currency='USD', include_fees=False):\n    filtered = [t for t in transactions if t['amount'] >= min_amount]",
    "target": "YAGNI: Only filtering by `min_amount` is required; remove other parameters."
  },
  {
    "func": "class TaskManager:\n    def __init__(self):\n        self.tasks = []\n    def add_task(self, task):\n        self.tasks.append(task)\n    def archive_task(self, task):\n        print('Archiving task')",
    "target": "YAGNI: Archiving tasks isn't necessary yet."
  },
  {
    "func": "def send_notification(user, message, method='email', urgency='normal', delivery_time='immediate'):\n    print(f'Sending {method} notification to {user}')",
    "target": "YAGNI: Only email notifications are needed; simplify interface."
  },
  {
    "func": "class ShoppingCart:\n    def __init__(self):\n        self.items = []\n    def apply_coupon(self, coupon_code):\n        print('Applying coupon')\n    def calculate_tax(self):\n        print('Calculating tax')",
    "target": "YAGNI: Coupon and tax calculations are unnecessary for now."
  },
  {
    "func": "def log_event(event, timestamp=None, user_id=None, location=None):\n    print('Logging event')",
    "target": "YAGNI: Only event name is needed; remove optional parameters."
  },
  {
    "func": "class VideoPlayer:\n    def __init__(self):\n        self.resolution = '1080p'\n        self.supports_4k = False\n        self.streaming_mode = 'standard'",
    "target": "YAGNI: 4K and streaming mode settings are premature optimizations."
  },
  {
    "func": "def book_flight(origin, destination, airline=None, seat_preference='any', include_meal=False):\n    print(f'Booking flight from {origin} to {destination}')",
    "target": "YAGNI: Only origin and destination are required; remove optional parameters."
  },
  {
    "func": "def calculate_area_circle(radius):\n    return 3.14159 * radius * radius\n\ndef calculate_area_square(side):\n    return side * side",
    "target": "DRY: Combine similar area calculations into a single function with shape parameter."
  },
  {
    "func": "def display_user(user):\n    print(f'User: {user.name}, Email: {user.email}')\n\ndef display_admin(admin):\n    print(f'Admin: {admin.name}, Email: {admin.email}')",
    "target": "DRY: Duplicate code for user and admin display; use a generic display function."
  },
  {
    "func": "def process_data_a(data):\n    return sum(data)\n\ndef process_data_b(data):\n    return sum(data)",
    "target": "DRY: Duplicate processing logic; merge into one function."
  },
  {
    "func": "def calculate_tax_usa(price):\n    return price * 0.07\n\ndef calculate_tax_canada(price):\n    return price * 0.05",
    "target": "DRY: Use a parameter for tax rates instead of separate functions."
  },
  {
    "func": "def connect_to_server(ip, port):\n    print(f'Connecting to {ip}:{port}')\n\ndef connect_to_database(host, port):\n    print(f'Connecting to {host}:{port}')",
    "target": "DRY: Both functions share similar logic; unify into a single connection function."
  },
  {
    "func": "def print_error(message):\n    print(f'Error: {message}')\n\ndef print_warning(message):\n    print(f'Warning: {message}')",
    "target": "DRY: Merge into a single `print_message` function with a severity parameter."
  },
  {
    "func": "def login(username, password):\n    if username == 'admin' and password == 'pass':\n        print('Access granted')\n    else:\n        print('Access denied')",
    "target": "KISS: Simplify complex conditional logic with a more readable structure."
  },
  {
    "func": "def calculate_discount(price, discount_type):\n    if discount_type == 'student':\n        return price * 0.8\n    elif discount_type == 'senior':\n        return price * 0.85\n    else:\n        return price",
    "target": "KISS: Use a dictionary-based lookup instead of multiple `if-elif` statements."
  },
  {
    "func": "def get_status_description(status_code):\n    if status_code == 1:\n        return 'Active'\n    elif status_code == 2:\n        return 'Inactive'\n    elif status_code == 3:\n        return 'Pending'\n    else:\n        return 'Unknown'",
    "target": "KISS: Replace `if-elif` chain with a dictionary for clarity."
  },
  {
    "func": "def calculate_salary(hours_worked, hourly_rate):\n    return hours_worked * hourly_rate\n\ndef calculate_overtime(hours_overtime, hourly_rate):\n    return hours_overtime * hourly_rate * 1.5",
    "target": "DRY: Combine regular and overtime calculations into a single function."
  },
  {
    "func": "def send_email(subject, body):\n    print(f'Sending email: {subject}')\n\ndef send_sms(message):\n    print(f'Sending SMS: {message}')",
    "target": "DRY: Create a generic `send_notification` function."
  },
  {
    "func": "def authenticate(username, password):\n    if username == 'admin' and password == 'admin123':\n        print('Authenticated')\n    else:\n        print('Failed')",
    "target": "KISS: Simplify authentication logic using a dictionary-based credential check."
  },
  {
    "func": "def convert_to_uppercase(text):\n    return text.upper()\n\ndef convert_to_lowercase(text):\n    return text.lower()",
    "target": "DRY: Merge similar string conversion functions into one with a mode parameter."
  },
  {
    "func": "def print_report(report_type):\n    if report_type == 'summary':\n        print('Summary Report')\n    elif report_type == 'detailed':\n        print('Detailed Report')",
    "target": "KISS: Use a dictionary lookup to print reports."
  },
  {
    "func": "def fetch_user(user_id):\n    if user_id:\n        print('Fetching user')\n    else:\n        print('Invalid ID')",
    "target": "KISS: Simplify control flow; `if user_id` is sufficient without explicit checks."
  },
  {
    "func": "def add_numbers(a, b):\n    result = a + b\n    return result",
    "target": "KISS: Inline variable assignment is unnecessary; return directly."
  },
  {
    "func": "def calculate_interest(principal, rate, time):\n    interest = principal * rate * time\n    return interest",
    "target": "KISS: Directly return expression; intermediate variable is unnecessary."
  },
  {
    "func": "def log_info(message):\n    print(f'INFO: {message}')\n\ndef log_debug(message):\n    print(f'DEBUG: {message}')\n\ndef log_error(message):\n    print(f'ERROR: {message}')",
    "target": "DRY: Combine logging functions into a single function with a level parameter."
  },
  {
    "func": "def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result",
    "target": "KISS: Use `math.factorial()` instead of manual loop."
  },
  {
    "func": "def calculate_total(items):\n    total = 0\n    for item in items:\n        total += item\n    return total",
    "target": "KISS: Use Python's built-in `sum()` for clarity."
  },
  {
    "func": "def check_even(number):\n    if number % 2 == 0:\n        return True\n    else:\n        return False",
    "target": "KISS: Return `number % 2 == 0` directly."
  },
  {
    "func": "def is_positive(num):\n    if num > 0:\n        return True\n    else:\n        return False",
    "target": "KISS: Return `num > 0` directly."
  },
  {
    "func": "def calculate_tax(price):\n    tax = price * 0.1\n    return tax",
    "target": "KISS: Inline the return statement for simplicity."
  },
  {
    "func": "def generate_greeting(name):\n    greeting = f'Hello, {name}!'\n    return greeting",
    "target": "KISS: Return the formatted string directly."
  },
  {
    "func": "def count_words(text):\n    word_count = len(text.split())\n    return word_count",
    "target": "KISS: Return `len(text.split())` directly."
  },
  {
    "func": "def check_validity(value):\n    if value:\n        return True\n    else:\n        return False",
    "target": "KISS: Simplify to `return bool(value)`."
  },
  {
    "func": "def get_discount_price(price, discount_percentage):\n    discount = price * discount_percentage / 100\n    final_price = price - discount\n    return final_price",
    "target": "KISS: Return expression directly without intermediate variables."
  },
  {
    "func": "def greet_user(name):\n    if name:\n        print(f'Hello, {name}')\n    else:\n        print('Hello, Guest')",
    "target": "KISS: Simplify greeting logic."
  },
  {
    "func": "def process_items(items):\n    for item in items:\n        if len(item) > 5:\n            print(item)",
    "target": "KISS: Simplify logic by using list comprehensions."
  },
  {
    "func": "def calc(x,y): return x+y",
    "target": "Use descriptive function names to improve code readability."
  },
  {
    "func": "def getuserdetails(user): return user['name']",
    "target": "Use snake_case for function names in Python as per PEP 8."
  },
  {
    "func": "def fetch_data():\n    try:\n        result = some_function()\n    except:\n        pass",
    "target": "Avoid generic exception handling; catch specific exceptions."
  },
  {
    "func": "def processData(data): return data.upper()",
    "target": "Use consistent naming conventions (e.g., snake_case for functions)."
  },
  {
    "func": "def add(x,y,z):\n    return x+y+z",
    "target": "Limit the number of parameters to improve function maintainability."
  },
  {
    "func": "def check_status(status):\n    if status == 1:\n        print('Active')\n    elif status == 2:\n        print('Inactive')",
    "target": "Use dictionaries for condition-based logic to simplify code."
  },
  {
    "func": "def findLargest(lst):\n    largest = lst[0]\n    for i in lst:\n        if i > largest:\n            largest = i\n    return largest",
    "target": "Use built-in functions like `max()` instead of manual loops."
  },
  {
    "func": "def calculate(x,y):\n    if y != 0:\n        return x/y",
    "target": "Always handle division by zero with appropriate exceptions."
  },
  {
    "func": "def get_username(user):\n    print('Username:', user['name'])",
    "target": "Add type annotations for better code maintainability."
  },
  {
    "func": "def read_file(file):\n    f = open(file, 'r')\n    data = f.read()\n    f.close()\n    return data",
    "target": "Use context managers (`with open`) to ensure files are properly closed."
  },
  {
    "func": "def isPalindrome(s):\n    return s == s[::-1]",
    "target": "Use snake_case for function names."
  },
  {
    "func": "def calcTax(price,rate):\n    return price*rate",
    "target": "Add spaces around operators to improve readability."
  },
  {
    "func": "def fetch_items(items):\n    for i in range(len(items)):\n        print(items[i])",
    "target": "Use `for item in items` instead of indexing for better readability."
  },
  {
    "func": "def checkAge(age):\n    if age>=18:\n        print('Adult')",
    "target": "Use consistent spacing and indentation as per PEP 8."
  },
  {
    "func": "def process_list(lst):\n    result=[]\n    for x in lst:\n        result.append(x*2)\n    return result",
    "target": "Use list comprehensions for cleaner and efficient code."
  },
  {
    "func": "def user_login(username,password):\n    if username=='admin' and password=='1234':\n        print('Welcome admin')",
    "target": "Avoid hardcoding credentials; use secure configuration files."
  },
  {
    "func": "def calc_average(numbers):\n    total=0\n    for n in numbers:\n        total+=n\n    return total/len(numbers)",
    "target": "Use built-in functions like `sum()` to simplify code."
  },
  {
    "func": "def sort_list(lst):\n    return sorted(lst,key=lambda x:x[1])",
    "target": "Add spaces after commas for better readability."
  },
  {
    "func": "def process_input(data):\n    if type(data)==list:\n        return [x*2 for x in data]",
    "target": "Use `isinstance` instead of comparing types directly."
  },
  {
    "func": "def find_max(a,b,c):\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c",
    "target": "Simplify with `max(a, b, c)`."
  },
  {
    "func": "def user_info():\n    name='John'\n    age=30\n    print('Name:',name)\n    print('Age:',age)",
    "target": "Avoid hardcoded values; use parameters for flexibility."
  },
  {
    "func": "def connect_db():\n    conn = sqlite3.connect('mydb.db')",
    "target": "Close database connections properly after use."
  },
  {
    "func": "def calc_sum(a,b):\n    return a+b",
    "target": "Add type annotations to improve clarity."
  },
  {
    "func": "def compute_factorial(n):\n    if n==1:\n        return 1\n    else:\n        return n*compute_factorial(n-1)",
    "target": "Add base case check and docstrings to explain recursive logic."
  },
  {
    "func": "def calculate_discount(price, discount):\n    return price-(price*(discount/100))",
    "target": "Add parentheses for better readability when using mathematical expressions."
  },
  {
    "func": "def send_email(subject, body, recipient, smtp_server, port, username, password):\n    pass",
    "target": "Reduce parameter count; use a configuration object instead."
  },
  {
    "func": "def print_report(data):\n    print('Report Data:',data)",
    "target": "Include function docstrings for clarity."
  },
  {
    "func": "def factorial(x):\n    if x==1:\n        return 1\n    else:\n        return x*factorial(x-1)",
    "target": "Add input validation to handle negative values."
  },
  {
    "func": "def convert_temperature(temp, unit):\n    if unit=='C':\n        return temp*1.8+32\n    elif unit=='F':\n        return (temp-32)/1.8",
    "target": "Add comments and validate input units."
  },
  {
    "func": "def find_prime_numbers(n):\n    primes=[]\n    for num in range(2,n+1):\n        for i in range(2,num):\n            if num%i==0:\n                break\n        else:\n            primes.append(num)\n    return primes",
    "target": "Optimize loops and improve readability with better naming and logic."
  },
  {
    "func": "def mergeDicts(d1,d2):\n    d3=d1.copy()\n    d3.update(d2)\n    return d3",
    "target": "Use snake_case for function names and add spaces around `=` for readability."
  },
  {
    "func": "def parse_json(json_str):\n    return eval(json_str)",
    "target": "Avoid using `eval()`; use `json.loads()` for safer JSON parsing."
  },
  {
    "func": "def fetch_info(user):\n    print(f'User info: {user}')",
    "target": "Add docstrings to describe the function's purpose."
  },
  {
    "func": "def calculate_discount(price, discount):\n    if discount <= 0:\n        return price\n    else:\n        return price - (price * discount / 100)",
    "target": "Use inline expressions to simplify return logic."
  },
  {
    "func": "def process_data(items):\n    result=[]\n    for i in items:\n        result.append(i*2)\n    return result",
    "target": "Use list comprehensions for cleaner and efficient code."
  },
  {
    "func": "def get_user(name):\n    if name == 'admin':\n        print('Admin access')",
    "target": "Always validate user input for security reasons."
  },
  {
    "func": "def join_strings(parts):\n    result=''\n    for p in parts:\n        result+=p",
    "target": "Use `''.join(parts)` instead of manual concatenation."
  },
  {
    "func": "def get_info():\n    user='john'\n    age=30\n    return user,age",
    "target": "Avoid hardcoded values; pass parameters or use configurations."
  },
  {
    "func": "def print_square(n):\n    return n**2",
    "target": "Add type annotations to function signatures."
  },
  {
    "func": "def divide_numbers(a,b):\n    return a/b",
    "target": "Add exception handling to avoid division by zero errors."
  },
  {
    "func": "def calc_average(nums):\n    sum=0\n    for n in nums:\n        sum+=n\n    return sum/len(nums)",
    "target": "Use `sum(nums)/len(nums)` for more concise code."
  },
  {
    "func": "def display_users(users):\n    for u in users:\n        print(u)",
    "target": "Add type hints and docstrings for clarity."
  },
  {
    "func": "def check_prime(n):\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True",
    "target": "Optimize performance by checking divisibility only up to `sqrt(n)`."
  },
  {
    "func": "def check_password(password):\n    if password == '1234':\n        print('Weak password')",
    "target": "Avoid hardcoding sensitive information like passwords."
  },
  {
    "func": "def read_file(filename):\n    f = open(filename)\n    data = f.read()\n    return data",
    "target": "Use `with open` to ensure files are properly closed."
  },
  {
    "func": "def process_list(lst):\n    new_list=[]\n    for x in lst:\n        if x%2==0:\n            new_list.append(x)",
    "target": "Simplify with list comprehensions."
  },
  {
    "func": "def find_key(d, key):\n    if key in d.keys():\n        return d[key]",
    "target": "Use `if key in d` instead of `.keys()` for cleaner code."
  },
  {
    "func": "def increment(x):\n    x+=1\n    return x",
    "target": "Add type hints to improve code clarity."
  },
  {
    "func": "def nested_list_iteration():\n    for i in range(len(data)):\n        for j in range(len(data[i])):\n            for k in range(len(data[i][j])):\n                for m in range(len(data[i][j][k])):\n                    for n in range(len(data[i][j][k][m])):\n                        process(data[i][j][k][m][n])",
    "target": "Reduce deep nesting in list iteration (5 levels detected). Consider using generators or comprehensions."
  },
  {
    "func": "def connect_to_db():\n    conn = sqlite3.connect('test.db')",
    "target": "Close database connections properly to avoid leaks."
  },
  {
    "func": "def print_names(names):\n    for name in names:\n        print(name)",
    "target": "Add comments to explain code logic."
  },
  {
    "func": "def sort_users(users):\n    return sorted(users, key=lambda x: x['age'])",
    "target": "Add type annotations for input and output types."
  },
  {
    "func": "def fetch_api_data(url):\n    response = requests.get(url)\n    return response.text",
    "target": "Handle exceptions for network errors."
  },
  {
    "func": "def calc_area(l,w):\n    return l*w",
    "target": "Use descriptive variable names for clarity."
  },
  {
    "func": "def find_duplicates(lst):\n    seen = set()\n    duplicates = []\n    for x in lst:\n        if x in seen:\n            duplicates.append(x)\n        else:\n            seen.add(x)\n    return duplicates",
    "target": "Optimize using collections.Counter."
  },
  {
    "func": "def greet(name):\n    print('Hello '+name)",
    "target": "Use f-strings for better string formatting."
  },
  {
    "func": "def count_vowels(text):\n    count = 0\n    for ch in text:\n        if ch in 'aeiouAEIOU':\n            count += 1\n    return count",
    "target": "Use case-insensitive string methods for clarity."
  },
  {
    "func": "def factorial(n):\n    if n==1:\n        return 1\n    return n*factorial(n-1)",
    "target": "Add base case for input validation."
  },
  {
    "func": "def lookup_user(user_id):\n    if user_id == 123:\n        return 'John'",
    "target": "Avoid hardcoding user data; use a database."
  },
  {
    "func": "def generate_report():\n    report='Sales report'\n    print(report)",
    "target": "Include logging instead of print statements for better maintainability."
  },
  {
    "func": "def user_roles():\n    roles = ['admin','user','guest']\n    for role in roles:\n        print(role)",
    "target": "Use enums for role definitions to improve clarity."
  },
  {
    "func": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "target": "Use slicing for efficient string reversal."
  },
  {
    "func": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]",
    "target": "Use slicing to check if a string is a palindrome."
  },
  {
    "func": "def get_file_extension(filename: str) -> str:\n    return filename.split('.')[-1]",
    "target": "Use `os.path.splitext()` for better accuracy."
  },
  {
    "func": "def sum_list(numbers: list[int]) -> int:\n    return sum(numbers)",
    "target": "Use built-in `sum()` instead of loops for summing lists."
  },
  {
    "func": "def is_even(num: int) -> bool:\n    return num % 2 == 0",
    "target": "Use modulo operator for simple even-number checks."
  },
  {
    "func": "def remove_duplicates(lst: list) -> list:\n    return list(set(lst))",
    "target": "Use `set()` to efficiently remove duplicates."
  },
  {
    "func": "def most_common_word(words: list[str]) -> str:\n    return max(set(words), key=words.count)",
    "target": "Use `collections.Counter` for more efficiency."
  },
  {
    "func": "def safe_dict_lookup(dictionary: dict, key, default=None):\n    return dictionary.get(key, default)",
    "target": "Use `.get()` to avoid `KeyError` exceptions."
  },
  {
    "func": "def validate_email(email: str) -> bool:\n    return '@' in email and '.' in email",
    "target": "Use `re.match()` for a more accurate email validation."
  },
  {
    "func": "def round_number(num: float, decimals: int = 2) -> float:\n    return round(num, decimals)",
    "target": "Use `round()` for cleaner number rounding."
  },
  {
    "func": "def filter_even_numbers(lst: list[int]) -> list[int]:\n    return [x for x in lst if x % 2 == 0]",
    "target": "Use list comprehensions for filtering."
  },
  {
    "func": "def capitalize_words(sentence: str) -> str:\n    return sentence.title()",
    "target": "Use `.title()` for proper capitalization."
  },
  {
    "func": "def count_occurrences(lst: list, value) -> int:\n    return lst.count(value)",
    "target": "Use `.count()` for simple occurrence counting."
  },
  {
    "func": "def swap_variables(a, b):\n    return b, a",
    "target": "Use tuple unpacking for swapping instead of temporary variables."
  },
  {
    "func": "def get_file_size(filepath: str) -> int:\n    return os.path.getsize(filepath)",
    "target": "Use `os.path.getsize()` for accurate file size retrieval."
  },
  {
    "func": "def merge_two_dicts(d1: dict, d2: dict) -> dict:\n    return {**d1, **d2}",
    "target": "Use dictionary unpacking for merging dictionaries."
  },
  {
    "func": "def factorial(n: int) -> int:\n    return math.factorial(n)",
    "target": "Use `math.factorial()` instead of recursive functions for efficiency."
  },
  {
    "func": "def get_current_datetime() -> str:\n    return datetime.datetime.now().isoformat()",
    "target": "Use `.isoformat()` for standardized date representation."
  },
  {
    "func": "def generate_random_number(start: int, end: int) -> int:\n    return random.randint(start, end)",
    "target": "Use `random.randint()` for generating a random number in a range."
  },
  {
    "func": "def get_unique_values(lst: list) -> list:\n    return list(set(lst))",
    "target": "Use `set()` to get unique values in a list efficiently."
  },
  {
    "func": "def flatten_list(nested_list: list[list]) -> list:\n    return [item for sublist in nested_list for item in sublist]",
    "target": "Use list comprehensions to flatten nested lists."
  },
  {
    "func": "def get_ascii_value(character: str) -> int:\n    return ord(character)",
    "target": "Use `ord()` to get ASCII values."
  },
  {
    "func": "def create_slug(text: str) -> str:\n    return text.lower().replace(' ', '-')",
    "target": "Use `.lower().replace(' ', '-')` for simple slug generation."
  },
  {
    "func": "def chunk_list(lst: list, size: int) -> list[list]:\n    return [lst[i:i+size] for i in range(0, len(lst), size)]",
    "target": "Use list slicing to split lists into chunks."
  },
  {
    "func": "def is_anagram(str1: str, str2: str) -> bool:\n    return sorted(str1) == sorted(str2)",
    "target": "Use `sorted()` to check if two words are anagrams."
  },
  {
    "func": "def get_environment_variable(key: str) -> str:\n    return os.getenv(key, 'Not Found')",
    "target": "Use `os.getenv()` to safely retrieve environment variables."
  },
  {
    "func": "def is_substring(sub: str, main: str) -> bool:\n    return sub in main",
    "target": "Use `in` for substring checks instead of `.find()`."
  },
  {
    "func": "def read_json_file(filepath: str) -> dict:\n    with open(filepath, 'r') as f:\n        return json.load(f)",
    "target": "Use `json.load()` to parse JSON files safely."
  },
  {
    "func": "def is_multiple_of_five(n: int) -> bool:\n    return n % 5 == 0",
    "target": "Use modulo operator for simple divisibility checks."
  },
  {
    "func": "def insecure_os_command():\n    user_input = 'ls -la'\n    os.popen(user_input)",
    "target": "Using `os.popen()` to execute shell commands can lead to command injection vulnerabilities."
  },
  {
    "func": "def unsafe_jwt_decoding(token):\n    return jwt.decode(token, verify=False)",
    "target": "Disabling verification when decoding JWTs allows attackers to forge tokens."
  },
  {
    "func": "def missing_escaping_in_sql(user_input):\n    query = f\"SELECT * FROM users WHERE username = '{user_input}'\"",
    "target": "Lack of proper escaping in SQL queries allows SQL injection."
  },
  {
    "func": "def dangerous_pickle_loading():\n    with open('data.pkl', 'rb') as f:\n        obj = pickle.load(f)",
    "target": "Pickle files can execute arbitrary code when loaded."
  },
  {
    "func": "def unverified_ssl_request(url):\n    requests.get(url, verify=False)",
    "target": "Disabling SSL verification allows MITM attacks."
  },
  {
    "func": "def sensitive_data_in_logs(password):\n    print(f'User password: {password}')",
    "target": "Logging sensitive information exposes credentials in logs."
  },
  {
    "func": "def missing_rate_limiting():\n    def login(username, password):\n        if authenticate(username, password):\n            return 'Welcome!'",
    "target": "Not enforcing rate limiting makes login endpoints vulnerable to brute force attacks."
  },
  {
    "func": "def weak_password_hash(password):\n    return hashlib.md5(password.encode()).hexdigest()",
    "target": "MD5 is cryptographically weak and should not be used for password hashing."
  },
  {
    "func": "def insufficient_audit_logging():\n    def delete_account(user):\n        db.delete(user)",
    "target": "Not logging security-sensitive operations allows unauthorized access without detection."
  },
  {
    "func": "def open_redirect_attack(target_url):\n    return redirect(target_url)",
    "target": "Redirecting to untrusted URLs allows open redirect attacks."
  },
  {
    "func": "def weak_random_numbers():\n    return random.randint(100000, 999999)",
    "target": "Using `random.randint()` for security-sensitive values is insecure; use `secrets` instead."
  },
  {
    "func": "def no_cors_restriction():\n    @app.after_request\n    def add_cors_headers(response):\n        response.headers['Access-Control-Allow-Origin'] = '*'",
    "target": "Allowing `*` in CORS settings exposes APIs to Cross-Site Request Forgery (CSRF)."
  },
  {
    "func": "def insecure_smtp_configuration():\n    smtp = smtplib.SMTP('mail.example.com', 25)",
    "target": "Using SMTP without TLS encryption can expose sensitive email content."
  },
  {
    "func": "def missing_helmet_headers():\n    response.headers['X-Frame-Options'] = ''",
    "target": "Lack of security headers allows clickjacking attacks."
  },
  {
    "func": "def missing_content_security_policy():\n    response.headers['Content-Security-Policy'] = ''",
    "target": "Not enforcing a Content Security Policy (CSP) increases XSS risk."
  },
  {
    "func": "def missing_logging_in_auth():\n    def login(username, password):\n        if authenticate(username, password):\n            return 'Success!'",
    "target": "Failing to log authentication attempts allows brute-force login attempts to go undetected."
  },
  {
    "func": "def weak_file_upload_validation(file):\n    if file.filename.endswith('.jpg'):\n        file.save('/uploads/' + file.filename)",
    "target": "Checking file extensions alone is insufficient; use MIME type validation."
  },
  {
    "func": "def unsafe_webhook_parsing(request_data):\n    data = json.loads(request_data)",
    "target": "Parsing user-controlled JSON without validation can lead to deserialization attacks."
  },
  {
    "func": "def allowing_user_controlled_redirects(url):\n    return redirect(url)",
    "target": "Redirecting users without validation allows phishing attacks."
  },
  {
    "func": "def missing_brute_force_protection():\n    def login(username, password):\n        if username == 'admin' and password == 'password':\n            return 'Success'",
    "target": "Not enforcing rate limiting allows brute force login attacks."
  },
  {
    "func": "def insecure_xslt_processing(xml_input):\n    transformer = etree.XSLT(etree.XML(xml_input))",
    "target": "Processing untrusted XML data with XSLT can allow XML External Entity (XXE) attacks."
  },
  {
    "func": "def hardcoded_api_keys():\n    API_KEY = 'sk_test_12345'",
    "target": "Hardcoding API keys in source code exposes them to leaks."
  },
  {
    "func": "def unsafe_yaml_loading(yaml_data):\n    data = yaml.load(yaml_data)",
    "target": "Using `yaml.load()` without `safe_load()` allows arbitrary code execution."
  },
  {
    "func": "def missing_account_lockout():\n    def login(username, password):\n        if authenticate(username, password):\n            return 'Welcome!'",
    "target": "Not locking accounts after failed login attempts increases brute force risks."
  },
  {
    "func": "def insecure_cookie_handling():\n    response.set_cookie('session', session_id)",
    "target": "Ensure cookies are set with `HttpOnly`, `Secure`, and `SameSite` attributes."
  },
  {
    "func": "def excessive_permissions_on_file():\n    os.chmod('/important/file.txt', 0o777)",
    "target": "Avoid overly permissive file permissions."
  },
  {
    "func": "def missing_parameter_sanitization(input_param):\n    return input_param",
    "target": "Failing to sanitize input parameters increases the risk of injection attacks."
  },
  {
    "func": "def storing_password_in_plaintext(password):\n    db.save({'password': password})",
    "target": "Passwords should never be stored in plaintext; use hashing instead."
  },
  {
    "func": "def excessive_stack_trace_leak():\n    try:\n        risky_operation()\n    except Exception as e:\n        return str(e)",
    "target": "Exposing detailed stack traces in responses provides attackers with useful information."
  },
  {
    "func": "def missing_content_security_policy():\n    response.headers['Content-Security-Policy'] = ''",
    "target": "Not setting a Content Security Policy (CSP) leaves the application vulnerable to XSS attacks."
  },
  {
    "func": "def exposing_private_cloud_storage():\n    storage.set_public('bucket-name', True)",
    "target": "Exposing cloud storage publicly can lead to unauthorized data access."
  },
  {
    "func": "def unrestricted_websocket_connections():\n    ws = WebSocket()\n    ws.connect('wss://example.com')",
    "target": "Failing to authenticate WebSocket connections exposes APIs to hijacking."
  },
  {
    "func": "def missing_oauth_scope_restrictions():\n    oauth.request_token(scope='*')",
    "target": "Overly broad OAuth scopes allow unauthorized API access."
  },
  {
    "func": "def using_weak_password_hashing():\n    return hashlib.md5(password.encode()).hexdigest()",
    "target": "Using MD5 for password hashing makes it easy to crack. Use bcrypt or Argon2 instead."
  },
  {
    "func": "def insecure_jwt_storage():\n    localStorage.setItem('jwt', token)",
    "target": "Storing JWT tokens in local storage makes them vulnerable to XSS attacks."
  },
  {
    "func": "def missing_websocket_message_validation():\n    ws.onmessage = lambda event: process_message(event.data)",
    "target": "Failing to validate WebSocket messages allows attackers to send malicious payloads."
  },
  {
    "func": "def exposing_internal_services_over_http():\n    requests.get('http://10.0.0.1:8000')",
    "target": "Using internal services over HTTP instead of HTTPS exposes them to interception."
  },
  {
    "func": "def allowing_unvalidated_redirects():\n    return redirect(request.args.get('url'))",
    "target": "Unvalidated redirects allow attackers to redirect users to phishing sites."
  },
  {
    "func": "def leaking_internal_stack_traces():\n    print(exception)",
    "target": "Exposing stack traces in production leaks sensitive debugging information."
  },
  {
    "func": "def missing_rate_limits_on_admin_api():\n    @app.route('/admin/reset_password')\n    def reset_password():\n        return 'Password reset successful'",
    "target": "Not enforcing rate limits on admin endpoints increases brute-force attack risks."
  },
  {
    "func": "def weak_sso_implementation():\n    if user_email.endswith('@trusted.com'):\n        authenticate(user_email)",
    "target": "Using email domain-based authentication is insecure and easy to bypass."
  },
  {
    "func": "def exposing_graphql_introspection():\n    @app.route('/graphql')\n    def graphql():\n        return schema.introspect()",
    "target": "Allowing GraphQL introspection in production exposes API structure to attackers."
  },
  {
    "func": "def missing_cache_control_headers():\n    response.headers['Cache-Control'] = ''",
    "target": "Not setting cache control headers allows sensitive data to be stored in browser caches."
  },
  {
    "func": "def publically_exposed_admin_dashboard():\n    @app.route('/admin')\n    def admin_panel():\n        return render_template('admin.html')",
    "target": "Not restricting access to the admin panel allows unauthorized users to access it."
  },
  {
    "func": "def insufficient_logging_and_monitoring():\n    def authenticate(user):\n        return 'Login successful'",
    "target": "Failing to log authentication attempts makes detecting brute force attacks difficult."
  },
  {
    "func": "def allowing_user_controlled_regex():\n    re.match(user_input, text)",
    "target": "Allowing user-controlled regex patterns can lead to denial-of-service attacks."
  },
  {
    "func": "def overprivileged_cloud_storage_access():\n    policy = {\"Effect\": \"Allow\", \"Action\": \"s3:*\", \"Resource\": \"*\"}",
    "target": "Granting overly broad S3 permissions increases the risk of data leaks."
  },
  {
    "func": "def missing_csrf_protection_on_sensitive_actions():\n    @app.route('/transfer_money', methods=['POST'])\n    def transfer():\n        return 'Transfer Successful'",
    "target": "APIs without CSRF protection can be exploited for unauthorized transactions."
  },
  {
    "func": "def storing_sensitive_data_in_logs():\n    log.info(f'User {username} logged in with password: {password}')",
    "target": "Logging sensitive information exposes credentials and user data."
  },
  {
    "func": "def using_weak_encryption():\n    cipher = AES.new(key, AES.MODE_ECB)\n    return cipher.encrypt(data)",
    "target": "Using ECB mode for encryption is insecure. Use AES-GCM for better security."
  },
  {
    "func": "def allowing_user_controlled_file_paths():\n    with open(request.args.get('file')) as f:\n        return f.read()",
    "target": "Allowing user-controlled file paths can lead to path traversal attacks."
  },
  {
    "func": "def missing_session_expiration():\n    session.permanent = False",
    "target": "Not setting session expiration increases the risk of session hijacking."
  },
  {
    "func": "def exposing_internal_docker_ports():\n    docker run -p 2375:2375 mycontainer",
    "target": "Exposing Docker API ports publicly allows remote container management."
  },
  {
    "func": "def missing_access_control_on_cloud_storage():\n    bucket.set_public(True)",
    "target": "Making cloud storage public allows attackers to access sensitive files."
  },
  {
    "func": "def insecure_federated_authentication():\n    if 'sso_token' in request.cookies:\n        authenticate(request.cookies['sso_token'])",
    "target": "Failing to validate SSO tokens properly leads to authentication bypass."
  },
  {
    "func": "def allowing_unverified_email_change():\n    user.email = request.args.get('email')",
    "target": "Allowing email changes without verification enables account hijacking."
  },
  {
    "func": "def exposing_internal_admin_api():\n    @app.route('/admin/api')\n    def admin_api():\n        return jsonify({'status': 'ok'})",
    "target": "Not restricting access to internal admin APIs allows unauthorized use."
  },
  {
    "func": "def weak_oauth_implementation():\n    @app.route('/oauth')\n    def oauth():\n        return token",
    "target": "Using OAuth without scopes or proper validation increases security risks."
  },
  {
    "func": "def unnecessary_nested_condition(x):\n    if x > 0:\n        if x < 100:\n            return True",
    "target": "Flatten nested conditions where possible to improve readability."
  },
  {
    "func": "def redundant_else_in_return():\n    if x > 0:\n        return 'Positive'\n    else:\n        return 'Negative'",
    "target": "Remove redundant `else` after `return`, as execution stops at `return`."
  },
  {
    "func": "def excessive_blank_lines():\n    \n    \n    def foo():\n        return 42\n    \n    \n    \n",
    "target": "Avoid excessive blank lines that disrupt code flow."
  },
  {
    "func": "def unclear_parameter_names(a, b, c):\n    return a + b - c",
    "target": "Use meaningful parameter names to improve function readability."
  },
  {
    "func": "def large_function():\n    def foo():\n        step1()\n        step2()\n        step3()\n        step4()\n        step5()\n        step6()\n    return foo()",
    "target": "Break large functions into smaller, well-named helper functions."
  },
  {
    "func": "def excessive_comments():\n    # Adding two numbers\n    # Storing in result\n    # Returning the result\n    def add(x, y):\n        return x + y",
    "target": "Use self-explanatory code instead of excessive comments."
  },
  {
    "func": "def deep_function_call():\n    def step1():\n        return step2()\n    def step2():\n        return step3()\n    def step3():\n        return 42",
    "target": "Avoid deep function calls that obscure logic flow."
  },
  {
    "func": "def ambiguous_return_type():\n    if x > 0:\n        return 'Valid'\n    else:\n        return 1",
    "target": "Ensure consistent return types for better function predictability."
  },
  {
    "func": "def inconsistent_indentation():\n    if x > 0:\n        return True\n     else:\n        return False",
    "target": "Ensure consistent indentation to maintain readability and avoid errors."
  },
  {
    "func": "def overly_generic_function():\n    def process(data):\n        return data",
    "target": "Avoid overly generic function names. Use descriptive function names instead."
  },
  {
    "func": "def non_expressive_boolean():\n    def is_enabled():\n        return x == 1",
    "target": "Use explicit boolean values instead of comparisons with numbers."
  },
  {
    "func": "def redundant_parentheses():\n    return (x + y) * (z)",
    "target": "Avoid unnecessary parentheses to simplify expressions."
  },
  {
    "func": "def redundant_variable():\n    result = x + y\n    return result",
    "target": "Avoid redundant variables; return expressions directly when possible."
  },
  {
    "func": "def mixing_tabs_and_spaces():\n    if x > 0:\n        print('Valid')\n\tprint('Error')",
    "target": "Avoid mixing tabs and spaces for indentation."
  },
  {
    "func": "def missing_function_docstring():\n    def add(x, y):\n        return x + y",
    "target": "Provide a function docstring to describe its purpose."
  },
  {
    "func": "def inconsistent_variable_naming():\n    userName = 'John'\n    user_email = 'john@example.com'",
    "target": "Follow consistent naming conventions (e.g., use snake_case for variables)."
  },
  {
    "func": "def poorly_named_class():\n    class X:\n        pass",
    "target": "Use meaningful class names that describe their purpose."
  },
  {
    "func": "def too_many_function_arguments(a, b, c, d, e, f):\n    return a + b + c + d + e + f",
    "target": "Limit function parameters to a manageable number; use objects or dictionaries instead."
  },
  {
    "func": "def inefficient_imports():\n    import os, sys, math, random, time, json, logging",
    "target": "Avoid excessive imports. Only import what is necessary."
  },
  {
    "func": "def unnecessary_double_assignment():\n    x = 10\n    y = x",
    "target": "Avoid unnecessary variable assignments."
  },
  {
    "func": "def inconsistent_spacing():\n    a=10\n    b = 20\n    c= 30",
    "target": "Use consistent spacing around operators and variables for readability."
  },
  {
    "func": "def unclear_loop_variable():\n    for x in range(10):\n        process(x)",
    "target": "Use meaningful loop variable names (e.g., `index`, `item`) instead of `x`."
  },
  {
    "func": "def complex_lambda():\n    process = lambda x: (x**2 + 2*x + 1)/3",
    "target": "Avoid overly complex lambda functions; use named functions instead."
  },
  {
    "func": "def inconsistent_function_call():\n    processData()\n    process_data()",
    "target": "Use a consistent function naming convention throughout your code."
  },
  {
    "func": "def unnecessary_try_except():\n    try:\n        result = x + y\n    except:\n        pass",
    "target": "Do not use `try-except` when an error is not expected."
  },
  {
    "func": "def missing_enumerate():\n    i = 0\n    for item in data:\n        print(i, item)\n        i += 1",
    "target": "Use `enumerate()` instead of manually tracking an index."
  },
  {
    "func": "def missing_context_manager():\n    file = open('data.txt', 'r')\n    content = file.read()\n    file.close()",
    "target": "Use `with open(...)` to handle files safely."
  },
  {
    "func": "def poorly_formatted_multiline_string():\n    text = 'This is a long string that should be split into multiple lines but it is not'",
    "target": "Break long strings into multiple lines using triple quotes or string concatenation."
  },
  {
    "func": "def overuse_of_one_letter_variables():\n    def f(a, b, c):\n        return a + b - c",
    "target": "Avoid using single-letter variable names except in mathematical or short contexts."
  },
  {
    "func": "class GodClass:\n    def __init__(self):\n        self.data = {}\n    def process(self):\n        self.load()\n        self.validate()\n        self.calculate()\n        self.save()\n    def load(self):\n        pass\n    def validate(self):\n        pass\n    def calculate(self):\n        pass\n    def save(self):\n        pass",
    "target": "Avoid 'God' classes that handle too many responsibilities. Follow the Single Responsibility Principle (SRP)."
  },
  {
    "func": "class ViolatesOCP:\n    def __init__(self, shape_type):\n        self.shape_type = shape_type\n    def calculate_area(self):\n        if self.shape_type == 'circle':\n            return self.radius * self.radius * 3.14\n        elif self.shape_type == 'square':\n            return self.side * self.side",
    "target": "Violates Open-Closed Principle (OCP). Instead, use polymorphism to extend behavior."
  },
  {
    "func": "class PoorEncapsulation:\n    def __init__(self):\n        self.data = []  # Directly accessible from outside",
    "target": "Use encapsulation. Make attributes private (`self._data`) and provide getters/setters."
  },
  {
    "func": "class UnusedMethod:\n    def useful_method(self):\n        return 'I am used'\n    def unused_method(self):\n        pass",
    "target": "Remove unused methods to reduce code clutter."
  },
  {
    "func": "class UnnecessaryInheritance(BaseClass):\n    def method(self):\n        return 'Functionality same as BaseClass'",
    "target": "Avoid unnecessary inheritance. Use composition over inheritance when possible."
  },
  {
    "func": "class InefficientClass:\n    def __init__(self):\n        self.items = []\n    def add_item(self, item):\n        self.items.append(item)\n    def find_item(self, item):\n        for i in self.items:\n            if i == item:\n                return True",
    "target": "Use efficient data structures. Consider `set` for faster lookups."
  },
  {
    "func": "class TooManyConstructors:\n    def __init__(self, name):\n        self.name = name\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age",
    "target": "Avoid multiple `__init__` methods. Use default values or class methods."
  },
  {
    "func": "class GlobalDependency:\n    shared_resource = []\n    def add_item(self, item):\n        self.shared_resource.append(item)",
    "target": "Avoid modifying global variables inside a class. Use instance variables instead."
  },
  {
    "func": "class UnnecessaryStaticMethod:\n    @staticmethod\n    def add(a, b):\n        return a + b",
    "target": "Use static methods only when they do not depend on class state."
  },
  {
    "func": "class CircularDependency:\n    from module_a import A\n    from module_b import B",
    "target": "Avoid circular dependencies. Use dependency injection or restructuring."
  },
  {
    "func": "class ExcessiveConstructorLogic:\n    def __init__(self, config):\n        self.data = load_data(config)\n        self.cache = Cache()\n        self.session = Session()",
    "target": "Keep constructors simple. Move complex logic to a separate method."
  },
  {
    "func": "class MissingInterface:\n    class Dog:\n        def make_sound(self):\n            return 'Bark'\n    class Cat:\n        def make_sound(self):\n            return 'Meow'",
    "target": "Use interfaces or abstract base classes for common behavior."
  },
  {
    "func": "class TightlyCoupled:\n    def __init__(self):\n        self.db = Database()\n    def fetch(self):\n        return self.db.get_data()",
    "target": "Avoid tight coupling. Inject dependencies via constructors."
  },
  {
    "func": "class PoorlyNamedClass:\n    class XYZ:\n        pass",
    "target": "Use meaningful class names to improve readability."
  },
  {
    "func": "class TooManyParameters:\n    def process(self, a, b, c, d, e, f):\n        return a + b + c + d + e + f",
    "target": "Reduce the number of parameters in methods. Use data structures instead."
  },
  {
    "func": "class LongClass:\n    def method1(self): pass\n    def method2(self): pass\n    def method3(self): pass\n    def method4(self): pass\n    def method5(self): pass\n    def method6(self): pass\n    def method7(self): pass\n    def method8(self): pass\n    def method9(self): pass",
    "target": "Break down large classes into smaller, focused classes."
  },
  {
    "func": "class OverloadedMethod:\n    def process(self, data):\n        if isinstance(data, list):\n            return 'Processing list'\n        elif isinstance(data, dict):\n            return 'Processing dict'",
    "target": "Use method overloading via single responsibility rather than type checking."
  },
  {
    "func": "class NonStandardNaming:\n    def DoSomething(self):\n        pass",
    "target": "Follow standard naming conventions (e.g., snake_case for methods in Python)."
  },
  {
    "func": "class InefficientSorting:\n    def sort_list(self, data):\n        return sorted(data)",
    "target": "Use in-place sorting (`data.sort()`) instead of returning a new list."
  },
  {
    "func": "class UselessWrapper:\n    def process(self, value):\n        return value",
    "target": "Avoid wrapping functions that do not add meaningful logic."
  },
  {
    "func": "class PoorVisibility:\n    class _InternalClass:\n        pass",
    "target": "Use proper visibility (`_` for internal, `__` for private) where needed."
  },
  {
    "func": "class ImproperAbstractClass:\n    def work(self):\n        raise NotImplementedError",
    "target": "Use `abc` module to define abstract base classes properly."
  },
  {
    "func": "class InconsistentReturn:\n    def process(self, x):\n        if x > 0:\n            return 'Valid'\n        return",
    "target": "Ensure methods return consistent data types."
  },
  {
    "func": "class OvercomplicatedInitialization:\n    def __init__(self, db_host, db_user, db_password, db_port):\n        self.db_host = db_host\n        self.db_user = db_user\n        self.db_password = db_password\n        self.db_port = db_port",
    "target": "Use configuration objects or environment variables for complex initialization."
  },
  {
    "func": "class UnusedAttribute:\n    def __init__(self):\n        self.temp = 42",
    "target": "Remove unused attributes to reduce memory usage and improve clarity."
  },
  {
    "func": "class NonIntuitiveInheritance:\n    class Rectangle(Shape):\n        pass",
    "target": "Ensure subclass behavior aligns with the parent class contract."
  },
  {
    "func": "class WeakEncapsulation:\n    def __init__(self):\n        self._data = []",
    "target": "Use private variables (`__data`) when internal state should not be modified directly."
  },
  {
    "func": "class TooManyDependencies:\n    def __init__(self, db, cache, logger, session, service, config):\n        pass",
    "target": "Avoid excessive dependencies in a single class. Apply Dependency Injection (DI)."
  },
  {
    "func": "class Singleton:\n    def __new__(cls):\n        if not hasattr(cls, 'instance'):\n            cls.instance = super(Singleton, cls).__new__(cls)\n        return cls.instance",
    "target": "Avoid singleton pattern unless necessary. It introduces global state and complicates testing."
  },
  {
    "func": "def excessive_logging():\n    for i in range(10000):\n        print('Logging event:', i)",
    "target": "Excessive logging can degrade performance. Use log levels like DEBUG or INFO."
  },
  {
    "func": "def missing_benchmarking():\n    data = list(range(1000000))\n    squared = [x**2 for x in data]",
    "target": "Use benchmarking tools (e.g., `timeit`, `cProfile`) for performance-critical code."
  },
  {
    "func": "def weak_api_auth():\n    if api_key == 'my_secret_key':\n        return True",
    "target": "Avoid hardcoding API keys. Use secure authentication mechanisms like OAuth."
  },
  {
    "func": "class DataLeak:\n    def __init__(self):\n        self.sensitive_data = 'password123'",
    "target": "Do not store sensitive data in memory for extended periods. Use secure storage."
  },
  {
    "func": "def slow_db_query():\n    query = 'SELECT * FROM users WHERE age > 18'\n    db.execute(query)",
    "target": "Optimize database queries by selecting only necessary fields (`SELECT name, age FROM users`)."
  },
  {
    "func": "class PoorAbstraction:\n    def __init__(self):\n        self.users = []\n    def add_user(self, user):\n        self.users.append(user)",
    "target": "Use data access layers instead of directly modifying collections inside classes."
  },
  {
    "func": "def non_standard_json():\n    json_data = \"{'name': 'John', 'age': 30}\"",
    "target": "Use proper JSON formatting (`json.dumps(data)`) to avoid parsing issues."
  },
  {
    "func": "def nested_function_definitions():\n    def outer():\n        def inner1():\n            def inner2():\n                def inner3():\n                    def inner4():\n                        print('Too deep')\n                    inner4()\n                inner3()\n            inner2()\n        inner1()\n    outer()",
    "target": "Avoid deeply nested functions (5 levels detected). Use separate module-level functions."
  },
  {
    "func": "def outdated_crypto():\n    import hashlib\n    hash = hashlib.md5(password.encode()).hexdigest()",
    "target": "Use secure hashing algorithms like bcrypt or Argon2 instead of MD5."
  },
  {
    "func": "def improper_api_error_handling():\n    try:\n        api_call()\n    except:\n        return 'Error'",
    "target": "Use structured error responses (e.g., `{ 'error': 'Invalid request', 'code': 400 }`)."
  },
  {
    "func": "def unoptimized_sorting():\n    numbers = [5, 2, 9, 1]\n    sorted_numbers = sorted(numbers, key=lambda x: x*x)",
    "target": "For large datasets, use efficient sorting algorithms based on context."
  },
  {
    "func": "def poor_caching():\n    def fetch_data():\n        return expensive_query()",
    "target": "Use caching mechanisms (e.g., Redis, in-memory cache) for frequently accessed data."
  },
  {
    "func": "def static_query_building():\n    query = 'SELECT * FROM users WHERE id = ' + user_id",
    "target": "Use prepared statements to prevent SQL injection attacks."
  },
  {
    "func": "def inefficient_memory_usage():\n    big_list = [0] * 10000000",
    "target": "Use generators (`yield`) instead of large lists for memory efficiency."
  },
  {
    "func": "class MisusedInheritance(Vehicle):\n    def honk(self):\n        return 'Beep'",
    "target": "Only use inheritance when there is a true 'is-a' relationship. Otherwise, prefer composition."
  },
  {
    "func": "def unhandled_async_exceptions():\n    async def fetch_data():\n        result = await api_call()",
    "target": "Always handle exceptions in async functions (`try-except`)."
  },
  {
    "func": "def missing_default_case():\n    def process_input(option):\n        if option == 'A':\n            return 'Option A'\n        elif option == 'B':\n            return 'Option B'",
    "target": "Always include a default case in conditionals to handle unexpected inputs."
  },
  {
    "func": "def incorrect_timezone_handling():\n    now = datetime.datetime.now()",
    "target": "Use timezone-aware datetime (`datetime.datetime.utcnow()` or `pytz`)."
  },
  {
    "func": "class HardcodedFilePath:\n    FILE_PATH = '/usr/data/file.txt'",
    "target": "Use environment variables or config files for file paths."
  },
  {
    "func": "def missing_unit_tests():\n    def add(a, b):\n        return a + b",
    "target": "Write unit tests for functions to ensure reliability."
  },
  {
    "func": "def unused_import():\n    import math",
    "target": "Remove unused imports to keep code clean."
  },
  {
    "func": "def excessive_data_loading():\n    users = db.get_all_users()",
    "target": "Only load necessary data (`db.get_users(limit=100)`)."
  },
  {
    "func": "def missing_api_rate_limiting():\n    def api_endpoint():\n        return 'Data'",
    "target": "Implement rate limiting (`API Gateway, Redis`) to prevent abuse."
  },
  {
    "func": "def excessive_dependency_usage():\n    import requests\n    import httpx\n    import urllib3",
    "target": "Avoid redundant dependencies. Choose one library per functionality."
  },
  {
    "func": "def unclosed_database_connection():\n    conn = sqlite3.connect('data.db')\n    cursor = conn.cursor()\n    cursor.execute('SELECT * FROM users')",
    "target": "Always close database connections (`with sqlite3.connect() as conn`)."
  },
  {
    "func": "class UnscalableClass:\n    def process_data(self, data):\n        return [x*2 for x in data]",
    "target": "Consider parallel processing (`multiprocessing`, `asyncio`) for large datasets."
  },
  {
    "func": "def unrestricted_file_upload():\n    def upload_file(file):\n        file.save('/uploads/' + file.filename)",
    "target": "Sanitize file uploads (`validate file type, size limits`)."
  },
  {
    "func": "def sql_injection(user_input):\n    query = 'SELECT * FROM users WHERE name = ' + user_input\n    return query",
    "target": "Avoid string concatenation in SQL queries. Use parameterized queries to prevent SQL injection."
  },
  {
    "func": "def risky_eval(data):\n    return eval(data)",
    "target": "Avoid using eval as it can execute arbitrary code. Use ast.literal_eval for safer parsing."
  },
  {
    "func": "def unused_variable():\n    x = 10\n    return 5",
    "target": "No specific issue detected."
  },
  {
    "func": "def long_function():\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n",
    "target": "Function length exceeds recommended limits. Split into smaller functions."
  },
  {
    "func": "def too_many_params(a, b, c, d, e, f, g):\n    return a + b + c + d + e + f + g",
    "target": "Avoid using too many parameters in a function. Consider using a data structure like a dictionary."
  },
  {
    "func": "def nested_loops():\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                for m in range(10):\n                    for n in range(10):\n                        print(i, j, k, m, n)",
    "target": "Avoid deep nesting in loops (5 levels detected). Consider breaking it into functions or using iterators."
  },
  {
    "func": "def hard_coded_secret():\n    secret = 'password_2123'\n    return secret",
    "target": "Avoid hardcoding secrets in code. Use environment variables or secret management tools."
  },
  {
    "func": "def sql_injection(user_input):\n    query = 'SELECT * FROM users WHERE name = ' + user_input\n    return query",
    "target": "Avoid string concatenation in SQL queries. Use parameterized queries to prevent SQL injection."
  },
  {
    "func": "def insecure_file_handling():\n    with open('data.txt', 'w') as file:\n        file.write(data)\n    return True",
    "target": "Validate file paths to prevent directory traversal vulnerabilities."
  },
  {
    "func": "def weak_cryptography(password):\n    return hashlib.md5(password.encode()).hexdigest()",
    "target": "Avoid using MD5 for hashing. Use a secure hashing algorithm like bcrypt or SHA-256."
  },
  {
    "func": "def empty_exception_handling():\n    try:\n        risky_code()\n    except:\n        pass",
    "target": "Avoid empty exception handling blocks. Provide specific error-handling logic."
  },
  {
    "func": "def magic_numbers():\n    if x == 42:\n        return True",
    "target": "Avoid using magic numbers. Define constants with meaningful names."
  },
  {
    "func": "def chained_calls():\n    return obj.method1().method2().method3().method4()",
    "target": "Avoid long chains of method calls. Break into intermediate steps."
  },
  {
    "func": "def deprecated_library_usage():\n    import cgi\n    return cgi.escape('<html>')",
    "target": "Avoid using deprecated libraries. Replace with modern alternatives."
  },
  {
    "func": "def excessive_globals():\n    global x\n    x = 42\n    return x",
    "target": "Avoid excessive use of global variables. Use function parameters or class attributes."
  },
  {
    "func": "def resource_leak():\n    file = open('data.txt', 'r')\n    data = file.read()\n    return data",
    "target": "Ensure proper resource management by using context managers."
  },
  {
    "func": "def circular_imports():\n    import module_a\n    return module_a.value",
    "target": "Avoid circular imports by refactoring dependencies."
  },
  {
    "func": "def missing_exception_message():\n    raise Exception()",
    "target": "Provide meaningful messages in exception-raising to improve debugging."
  },
  {
    "func": "def unreachable_code():\n    return\n    print('This will never run')",
    "target": "Remove unreachable code to keep the codebase clean."
  },
  {
    "func": "def variable_shadowing():\n    x = 10\n    def inner():\n        x = 5\n        return x\n    return inner()",
    "target": "Avoid variable shadowing. Use distinct variable names."
  },
  {
    "func": "def naming_conventions():\n    VarName = 10\n    return VarName",
    "target": "Follow consistent naming conventions like snake_case for better readability."
  },
  {
    "func": "def inconsistent_return():\n    if condition:\n        return True\n    else:\n        return 1",
    "target": "Ensure consistent return types for better code understanding."
  },
  {
    "func": "def unused_imports():\n    import math\n    return 42",
    "target": "Remove unused imports to reduce clutter and improve performance."
  },
  {
    "func": "def excessive_comments():\n    # This function adds two numbers\n    def add(a, b):\n        return a + b",
    "target": "Avoid excessive comments. Write self-explanatory code instead."
  },
  {
    "func": "def inconsistent_whitespace():\n    x=10\n    return x",
    "target": "Use consistent whitespace for better code readability."
  },
  {
    "func": "def inconsistent_indentation():\n    if condition:\n    return True",
    "target": "Use consistent indentation to improve code structure and readability."
  },
  {
    "func": "def inconsistent_quotes():\n    return 'Hello'",
    "target": "Use consistent quotes for strings in the codebase."
  },
  {
    "func": "def inconsistent_newlines():\n    return 42\n",
    "target": "Use consistent newline characters at the end of files."
  },
  {
    "func": "def inconsistent_line_length():\n    return 'This is a very long line that exceeds the recommended line length'",
    "target": "Ensure consistent line lengths for better code readability."
  },
  {
    "func": "def inconsistent_function_calls():\n    return math.sqrt (x)",
    "target": "Use consistent spacing around function calls for better code readability."
  },
  {
    "func": "def inconsistent_function_def():\n    def func (x, y):\n        return x + y",
    "target": "Use consistent spacing around function definitions for better code readability."
  },
  {
    "func": "def inconsistent_list_comprehension():\n    return [ x for x in range(10) ]",
    "target": "Use consistent spacing in list comprehensions for better code readability."
  },
  {
    "func": "def sql_injection_vulnerability(user_input):\n    query = f\"SELECT * FROM users WHERE name = '{user_input}'\"\n    return query",
    "target": "Avoid SQL injection by using prepared statements and parameterized queries."
  },
  {
    "func": "def risky_exec(data):\n    exec(data)",
    "target": "Avoid using exec as it can execute arbitrary code. Refactor to use safer alternatives."
  },
  {
    "func": "def lack_of_comments(x):\n    return x * x",
    "target": "Add comments to clarify the purpose and functionality of the code."
  },
  {
    "func": "def excessive_recursion(n):\n    if n == 0:\n        return 1\n    else:\n        return n * excessive_recursion(n-1)",
    "target": "Avoid excessive recursion; it may lead to stack overflow. Use iterative solutions where possible."
  },
  {
    "func": "def insecure_random():\n    return random.random()",
    "target": "Avoid using insecure random number generators for cryptographic purposes. Use secrets or os.urandom."
  },
  {
    "func": "def improper_sanitization(user_input):\n    os.system('rm -rf ' + user_input)",
    "target": "Validate and sanitize inputs to avoid command injection vulnerabilities."
  },
  {
    "func": "def overly_complex_conditions(a, b):\n    if a > 10 and b < 5 and a + b > 15 and a - b < 0:\n        return True",
    "target": "Simplify complex conditions to improve readability and maintainability."
  },
  {
    "func": "def non_descriptive_variables(x, y):\n    return x + y",
    "target": "Use descriptive variable names to improve code readability."
  },
  {
    "func": "def insecure_protocol(url):\n    if url.startswith('http:'):\n        return 'Insecure URL detected'",
    "target": "Avoid insecure protocols. Use HTTPS instead of HTTP."
  },
  {
    "func": "def redundant_code():\n    x = 5\n    y = 5\n    return x + y",
    "target": "Remove redundant code to improve efficiency and reduce clutter."
  },
  {
    "func": "def missing_return():\n    if condition:\n        return True",
    "target": "Ensure all branches of a function have return statements."
  },
  {
    "func": "def outdated_function_usage():\n    return 'Hello, %s' % 'World'",
    "target": "Avoid outdated string formatting. Use f-strings or format() instead."
  },
  {
    "func": "def no_docstring():\n    return 42",
    "target": "Add a docstring to explain the function's purpose and usage."
  },
  {
    "func": "def improper_file_permissions():\n    os.chmod('file.txt', 0o777)",
    "target": "Avoid setting overly permissive file permissions. Use the least privilege principle."
  },
  {
    "func": "def large_hardcoded_data():\n    data = [1, 2, 3, 4, 5, ...]  # Thousands of entries\n    return data",
    "target": "Avoid hardcoding large datasets. Use external files or databases."
  },
  {
    "func": "def excessive_logging():\n    for i in range(1000000):\n        print(i)",
    "target": "Avoid excessive logging as it can reduce performance and clutter logs."
  },
  {
    "func": "def blocking_code():\n    time.sleep(10)\n    return 'Done'",
    "target": "Avoid blocking code in asynchronous contexts. Use non-blocking alternatives."
  },
  {
    "func": "def unsafe_path_construction(base, filename):\n    return base + '/' + filename",
    "target": "Validate paths to prevent directory traversal vulnerabilities."
  },
  {
    "func": "def unchecked_cast(x):\n    return int(x)",
    "target": "Validate data before casting to prevent unexpected errors."
  },
  {
    "func": "def unhandled_exceptions():\n    return 10 / 0",
    "target": "Handle exceptions properly to prevent runtime crashes."
  },
  {
    "func": "def hardcoded_credentials():\n    return 'admin:password'",
    "target": "Avoid hardcoding credentials in code. Use secure storage solutions."
  },
  {
    "func": "def excessive_memory_usage():\n    data = [i for i in range(1000000)]\n    return sum(data)",
    "target": "Avoid excessive memory usage. Optimize data structures and algorithms."
  },
  {
    "func": "def excessive_function_calls():\n    return func1(func2(func3(func4(func5(x))))",
    "target": "Avoid excessive function calls. Use intermediate variables for clarity."
  },
  {
    "func": "def excessive_string_operations():\n    return 'a' + 'b' + 'c' + 'd' + 'e' + 'f' + 'g'",
    "target": "Avoid excessive string operations. Use string formatting or join methods."
  },
  {
    "func": "def excessive_list_operations():\n    data = [1, 2, 3]\n    return data + data + data + data",
    "target": "Avoid excessive list operations. Use list comprehensions or generators."
  },
  {
    "func": "def excessive_dict_operations():\n    data = {1: 'a', 2: 'b', 3: 'c'}\n    return data.keys() + data.values()",
    "target": "Avoid excessive dictionary operations. Use dict comprehensions or methods."
  },
  {
    "func": "def excessive_math_operations():\n    return 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10",
    "target": "Avoid excessive math operations. Use built-in functions or loops."
  },
  {
    "func": "def excessive_file_operations():\n    with open('data.txt', 'r') as file:\n        data = file.read()\n    return data + data + data + data",
    "target": "Avoid excessive file operations. Read data once and reuse it."
  },
  {
    "func": "def insecure_deserialization(data):\n    return pickle.loads(data)",
    "target": "Avoid using pickle for deserialization as it can execute arbitrary code. Use safer libraries like json."
  },
  {
    "func": "def missing_input_validation(data):\n    return data[0]",
    "target": "Validate input to ensure it meets the expected format and constraints."
  },
  {
    "func": "def inefficient_loop():\n    for i in range(1000000):\n        for j in range(len(data)):\n            process(data[j])",
    "target": "Optimize nested loops to avoid performance bottlenecks."
  },
  {
    "func": "def lack_of_unit_tests():\n    def add(a, b):\n        return a + b\n    return add",
    "target": "Add unit tests to ensure code correctness and prevent regressions."
  },
  {
    "func": "def missing_logging():\n    try:\n        risky_operation()\n    except Exception:\n        pass",
    "target": "Add logging to capture exception details for debugging and monitoring."
  },
  {
    "func": "def improper_exception_handling():\n    try:\n        risky_code()\n    except KeyError:\n        return 'Error occurred'",
    "target": "Catch specific exceptions and handle them appropriately."
  },
  {
    "func": "def missing_context_manager():\n    file = open('data.txt', 'r')\n    data = file.read()\n    file.close()\n    return data",
    "target": "Use context managers to ensure resources are properly closed after use."
  },
  {
    "func": "def potential_divide_by_zero(x):\n    return 10 / x",
    "target": "Check for zero before performing division to avoid runtime errors."
  },
  {
    "func": "def insufficient_password_complexity(password):\n    if len(password) > 8:\n        return True\n    return False",
    "target": "Enforce stronger password policies, including special characters, numbers, and case sensitivity."
  },
  {
    "func": "def hardcoded_api_key():\n    api_key = '12345-abcdef-67890'\n    return api_key",
    "target": "Avoid hardcoding API keys. Use environment variables or secure vaults."
  },
  {
    "func": "def redundant_else_in_return():\n    if condition:\n        return True\n    else:\n        return False",
    "target": "Remove redundant else statements after return for cleaner code."
  },
  {
    "func": "def no_error_handling():\n    return risky_function()",
    "target": "Add error handling to manage unexpected scenarios gracefully."
  },
  {
    "func": "def ineffective_data_structure():\n    data = []\n    for i in range(1000):\n        data.append(i)",
    "target": "Use efficient data structures, such as range or generators, for large datasets."
  },
  {
    "func": "def improper_object_initialization():\n    obj = CustomObject()\n    obj.value = 10\n    return obj",
    "target": "Use proper initialization methods to avoid incomplete or inconsistent states."
  },
  {
    "func": "def unclear_function_purpose(x):\n    return x * x",
    "target": "Add descriptive function names and docstrings to clarify functionality."
  },
  {
    "func": "def insufficient_privilege_check():\n    perform_admin_action(user)",
    "target": "Ensure privilege checks are implemented before performing sensitive actions."
  },
  {
    "func": "def memory_leak_example():\n    data = []\n    while True:\n        data.append('memory leak!')",
    "target": "Avoid unbounded memory usage. Implement limits or periodic cleanup."
  },
  {
    "func": "def risky_temp_file():\n    with open('/tmp/tempfile', 'w') as file:\n        file.write('data')",
    "target": "Use secure methods for creating temporary files to prevent race conditions."
  },
  {
    "func": "def unused_parameters(a, b):\n    return b",
    "target": "Remove unused parameters to improve code clarity and reduce confusion."
  },
  {
    "func": "def inconsistent_indentation():\n    def example():\n      return True",
    "target": "Ensure consistent indentation for better readability and maintainability."
  },
  {
    "func": "def inadequate_error_messages():\n    try:\n        risky_code()\n    except ValueError:\n        raise Exception('Error')",
    "target": "Provide detailed error messages to aid in debugging."
  },
  {
    "func": "def improper_assert_usage():\n    assert x > 0\n    return x",
    "target": "Avoid using assert statements in production code. Use explicit error handling."
  },
  {
    "func": "def improper_string_concat(name):\n    return 'Hello, ' + name + '!'",
    "target": "Use f-strings or string formatting for cleaner and more efficient string concatenation."
  },
  {
    "func": "def repeated_code():\n    print('Hello')\n    print('Hello')",
    "target": "Refactor repeated code into reusable functions or constants."
  },
  {
    "func": "def inefficient_sorting(data):\n    for i in range(len(data)):\n        for j in range(i + 1, len(data)):\n            if data[i] > data[j]:\n                data[i], data[j] = data[j], data[i]",
    "target": "Use built-in sorting methods like sorted() or list.sort() for better performance."
  },
  {
    "func": "def improper_exception_raising():\n    raise 'Error'",
    "target": "Raise exceptions using Exception classes for proper error handling."
  },
  {
    "func": "def improper_logging_level():\n    logging.debug('Debug message')",
    "target": "Use appropriate logging levels to provide the right level of detail."
  },
  {
    "func": "def improper_file_handling():\n    file = open('data.txt', 'w')\n    file.write('data')\n    file.close()",
    "target": "Use context managers to ensure files are properly closed after use."
  },
  {
    "func": "def improper_exception_catching():\n    try:\n        risky_code()\n    except:\n        pass",
    "target": "Catch specific exceptions to handle errors effectively."
  },
  {
    "func": "def improper_variable_naming():\n    VarName = 10\n    return VarName",
    "target": "Use consistent naming conventions like snake_case for variables."
  },
  {
    "func": "def improper_function_naming():\n    def FuncName():\n        return True",
    "target": "Use descriptive function names to clarify their purpose and usage."
  },
  {
    "func": "def improper_class_naming():\n    class ClassName:\n        def __init__(self):\n            pass",
    "target": "Use descriptive class names to indicate their purpose and contents."
  },
  {
    "func": "def improper_constant_naming():\n    CONSTANT_NAME = 42\n    return CONSTANT_NAME",
    "target": "Use consistent naming conventions like UPPER_CASE for constants."
  },
  {
    "func": "def improper_module_naming():\n    pass",
    "target": "Use descriptive module names to indicate their contents and purpose."
  },
  {
    "func": "def improper_package_naming():\n    pass",
    "target": "Use descriptive package names to indicate their contents and purpose."
  },
  {
    "func": "def improper_parameter_naming(x):\n    return x",
    "target": "Use descriptive parameter names to clarify their purpose and usage."
  },
  {
    "func": "def insecure_redirect(url):\n    return redirect(url)",
    "target": "Validate and sanitize user-provided URLs to prevent open redirect vulnerabilities."
  },
  {
    "func": "def no_rate_limiting():\n    for _ in range(1000):\n        process_request()",
    "target": "Implement rate limiting to prevent abuse and denial-of-service attacks."
  },
  {
    "func": "def csrf_vulnerable(request):\n    if request.method == 'POST':\n        perform_sensitive_action(request.user)",
    "target": "Use CSRF tokens to protect against cross-site request forgery attacks."
  },
  {
    "func": "def weak_session_id():\n    session_id = str(random.randint(1000, 9999))\n    return session_id",
    "target": "Use secure, cryptographically random session IDs to prevent session hijacking."
  },
  {
    "func": "def direct_object_reference(user_id):\n    return f'/user/{user_id}/profile'",
    "target": "Validate access control to prevent insecure direct object references."
  },
  {
    "func": "def missing_secure_headers():\n    return render_template('index.html')",
    "target": "Add security headers like Content-Security-Policy and X-Content-Type-Options to prevent attacks."
  },
  {
    "func": "def vulnerable_jwt(jwt_token):\n    payload = jwt.decode(jwt_token, verify=False)\n    return payload",
    "target": "Always verify JWT signatures to prevent token tampering."
  },
  {
    "func": "def hardcoded_sensitive_url():\n    url = 'http://example.com/api_key=123456'\n    return url",
    "target": "Avoid hardcoding sensitive URLs. Use secure configurations or environment variables."
  },
  {
    "func": "def missing_output_encoding(data):\n    return f'<div>{data}</div>'",
    "target": "Apply output encoding to prevent cross-site scripting (XSS) attacks."
  },
  {
    "func": "def unsafe_file_upload(file):\n    file.save(f'/uploads/{file.filename}')",
    "target": "Validate file extensions and scan uploads to prevent malicious file execution."
  },
  {
    "func": "def weak_password_storage(password):\n    hashed = hashlib.sha256(password.encode()).hexdigest()\n    return hashed",
    "target": "Use a password hashing library like bcrypt with salting for secure storage."
  },
  {
    "func": "def sensitive_data_exposure():\n    return f'Error: {error_detail}'",
    "target": "Avoid exposing sensitive details in error messages. Use generic error messages."
  },
  {
    "func": "def missing_authentication():\n    return perform_admin_action()",
    "target": "Implement proper authentication to restrict unauthorized access."
  },
  {
    "func": "def missing_authorization(user):\n    return perform_sensitive_action(user)",
    "target": "Add authorization checks to ensure only permitted users can perform certain actions."
  },
  {
    "func": "def insecure_command_execution(command):\n    os.system(command)",
    "target": "Avoid using os.system for command execution. Use safer alternatives like subprocess with sanitization."
  },
  {
    "func": "def unsafe_deserialization(data):\n    obj = pickle.loads(data)\n    return obj",
    "target": "Validate and sanitize data before deserialization to prevent remote code execution."
  },
  {
    "func": "def insecure_cookie():\n    response.set_cookie('session', 'value')\n    return response",
    "target": "Set cookies with HttpOnly, Secure, and SameSite attributes to prevent attacks."
  },
  {
    "func": "def missing_https():\n    url = 'http://example.com/login'\n    return url",
    "target": "Always use HTTPS to encrypt sensitive data during transmission."
  },
  {
    "func": "def improper_access_control(request):\n    if request.user == 'admin':\n        return 'Access granted'\n    return 'Access denied'",
    "target": "Enforce role-based access control to secure sensitive resources."
  },
  {
    "func": "def missing_account_lockout():\n    for _ in range(100):\n        attempt_login()",
    "target": "Implement account lockout mechanisms to prevent brute force attacks."
  },
  {
    "func": "def no_logging():\n    pass",
    "target": "Implement logging for security-critical events to detect and respond to incidents."
  },
  {
    "func": "def missing_encryption(data):\n    with open('data.txt', 'w') as file:\n        file.write(data)",
    "target": "Encrypt sensitive data at rest to prevent unauthorized access."
  },
  {
    "func": "def sql_query(user_id):\n    query = f'SELECT * FROM users WHERE id = {user_id}'\n    return query",
    "target": "Use parameterized queries to prevent SQL injection attacks."
  },
  {
    "func": "def weak_captcha():\n    return 'What is 2+2?'",
    "target": "Use strong CAPTCHA systems to prevent automated attacks."
  },
  {
    "func": "def insufficient_api_security():\n    return api_call()",
    "target": "Implement API authentication and rate limiting to secure endpoints."
  },
  {
    "func": "def insecure_data_validation(data):\n    if data['role'] == 'admin':\n        return 'Access granted'\n    return 'Access denied'",
    "target": "Validate and sanitize user input to prevent injection attacks."
  },
  {
    "func": "def missing_csrf_protection():\n    return render_template('form.html')",
    "target": "Add CSRF tokens to protect against cross-site request forgery attacks."
  },
  {
    "func": "def duplicate_code():\n    x = 10\n    y = 20\n    z = x + y\n    a = 10\n    b = 20\n    c = a + b\n    return z, c",
    "target": "Avoid duplicate code by refactoring common logic into reusable functions."
  },
  {
    "func": "def empty_if_block():\n    if condition:\n        pass",
    "target": "Avoid empty if statements. Add logic or remove unnecessary code."
  },
  {
    "func": "def commented_out_code():\n    # print('Debugging output')\n    return 42",
    "target": "Remove commented-out code to keep the codebase clean."
  },
  {
    "func": "def constant_mutation():\n    PI = 3.14\n    PI = 3.14159\n    return PI",
    "target": "Avoid reassigning constants. Define them as immutable."
  },
  {
    "func": "def unused_function():\n    def helper():\n        pass\n    return True",
    "target": "Remove unused functions to reduce code complexity."
  },
  {
    "func": "def catch_generic_exception():\n    try:\n        risky_operation()\n    except Exception:\n        handle_error()",
    "target": "Avoid catching generic exceptions. Catch specific exceptions instead."
  },
  {
    "func": "def hardcoded_file_path():\n    file_path = '/tmp/data.txt'\n    return file_path",
    "target": "Avoid hardcoding file paths. Use configuration files or environment variables."
  },
  {
    "func": "def large_class():\n    class LargeClass:\n        def __init__(self):\n            self.attr1 = None\n            self.attr2 = None\n            self.attr3 = None\n            # 50 more attributes\n    return LargeClass()",
    "target": "Avoid large classes. Refactor into smaller, cohesive classes."
  },
  {
    "func": "def excessive_parameters(a, b, c, d, e, f, g):\n    return a + b + c + d + e + f + g",
    "target": "Avoid excessive parameters in functions. Use data structures for grouping."
  },
  {
    "func": "def long_line_of_code():\n    result = [x for x in range(1000) if x % 2 == 0 and x > 100 and x < 900]",
    "target": "Avoid long lines of code. Break them into smaller, readable statements."
  },
  {
    "func": "def non_descriptive_variable_names():\n    a = 10\n    b = 20\n    return a + b",
    "target": "Use descriptive variable names to improve code readability."
  },
  {
    "func": "def deeply_nested_conditionals():\n    if a:\n        if b:\n            if c:\n                if d:\n                    if e:\n                        return True",
    "target": "Avoid deep nesting in conditionals (5 levels detected). Use guard clauses or early returns."
  },
  {
    "func": "def return_in_finally():\n    try:\n        return 1\n    finally:\n        return 2",
    "target": "Avoid return statements in finally blocks. It can lead to unexpected behavior."
  },
  {
    "func": "def use_of_print():\n    print('Debugging message')",
    "target": "Avoid using print statements in production code. Use a proper logging framework."
  },
  {
    "func": "def improper_collection_initialization():\n    list_var = list()\n    return list_var",
    "target": "Use direct initialization (e.g., []) for better performance and readability."
  },
  {
    "func": "def hardcoded_ip_address():\n    ip = '192.168.1.1'\n    return ip",
    "target": "Avoid hardcoding IP addresses. Use configuration files or constants."
  },
  {
    "func": "def unused_catch_variable():\n    try:\n        risky_operation()\n    except Exception as e:\n        pass",
    "target": "Use or remove unused exception variables to avoid confusion."
  },
  {
    "func": "def excessive_cyclomatic_complexity(a, b, c):\n    if a:\n        if b:\n            if c:\n                return True\n    return False",
    "target": "Reduce cyclomatic complexity by refactoring into simpler functions."
  },
  {
    "func": "def missing_default_case_in_switch(value):\n    match value:\n        case 1:\n            return 'One'\n        case 2:\n            return 'Two'",
    "target": "Add a default case in switch statements to handle unexpected values."
  },
  {
    "func": "def improper_exception_message():\n    raise ValueError",
    "target": "Provide meaningful messages in exceptions for easier debugging."
  },
  {
    "func": "def duplicate_import():\n    import os\n    import os",
    "target": "Avoid duplicate imports. They add unnecessary clutter."
  },
  {
    "func": "def redundant_boolean_comparison(value):\n    return value == True",
    "target": "Avoid redundant comparisons to True or False. Use the value directly."
  },
  {
    "func": "def improper_resource_cleanup():\n    file = open('data.txt', 'r')\n    return file.read()",
    "target": "Ensure proper resource cleanup using context managers."
  },
  {
    "func": "def mutable_default_argument(data=[]):\n    data.append(1)\n    return data",
    "target": "Avoid mutable default arguments. It can lead to unexpected behavior."
  },
  {
    "func": "def unused_return_value():\n    result = calculate()\n    return 42",
    "target": "Do not ignore or overwrite return values from function calls."
  },
  {
    "func": "def missing_type_annotations(a, b):\n    return a + b",
    "target": "Add type annotations for function arguments and return values."
  },
  {
    "func": "def large_return_tuple():\n    return 1, 2, 3, 4, 5, 6, 7, 8, 9, 10",
    "target": "Avoid large return tuples. Use data structures for better clarity."
  },
  {
    "func": "def unnecessary_else_after_return(value):\n    if value:\n        return True\n    else:\n        return False",
    "target": "Avoid unnecessary else blocks after return statements."
  },
  {
    "func": "def dead_code():\n    if False:\n        return 'This will never run'\n    return 'Hello, World!'",
    "target": "Remove unreachable (dead) code to maintain codebase cleanliness."
  },
  {
    "func": "def excessive_logging():\n    for i in range(1000):\n        print(f'Processing {i}')",
    "target": "Avoid excessive logging in loops to prevent performance issues."
  },
  {
    "func": "def ambiguous_condition(a, b):\n    if a == b:\n        return 'Equal'\n    elif a == 10:\n        return 'Ten'\n    elif a == b:\n        return 'Still Equal'\n    return 'Different'",
    "target": "Avoid ambiguous conditions with overlapping logic. Ensure all conditions are unique."
  },
  {
    "func": "def implicit_type_conversion(a, b):\n    return a + b",
    "target": "Avoid implicit type conversions. Use explicit casting for clarity."
  },
  {
    "func": "def magic_strings():\n    if user_input == 'admin':\n        return 'Admin access granted'",
    "target": "Avoid using magic strings. Use constants with meaningful names."
  },
  {
    "func": "def improper_error_escalation():\n    try:\n        risky_operation()\n    except ValueError:\n        raise Exception('Error occurred')",
    "target": "Preserve the original exception when escalating to retain debugging context."
  },
  {
    "func": "def inconsistent_indentation():\n    if True:\n      print('Inconsistent')",
    "target": "Ensure consistent indentation for better readability and maintainability."
  },
  {
    "func": "def ambiguous_function_name():\n    def func1():\n        return True\n    return func1()",
    "target": "Use descriptive function names to clarify their purpose."
  },
  {
    "func": "def unnecessary_singleton():\n    class Singleton:\n        _instance = None\n\n        @staticmethod\n        def instance():\n            if Singleton._instance is None:\n                Singleton._instance = Singleton()\n            return Singleton._instance\n\n    return Singleton.instance()",
    "target": "Avoid unnecessary singleton patterns unless absolutely required."
  },
  {
    "func": "def inefficient_list_search():\n    data = [1, 2, 3, 4, 5]\n    for item in data:\n        if item == 3:\n            return True",
    "target": "Use efficient search methods like `in` for list lookups."
  },
  {
    "func": "def outdated_library_usage():\n    import urllib2\n    response = urllib2.urlopen('http://example.com')\n    return response.read()",
    "target": "Avoid outdated libraries. Use modern alternatives like `requests`."
  },
  {
    "func": "def redundant_variable_assignment():\n    a = 5\n    b = a\n    return b",
    "target": "Avoid redundant variable assignments. Use variables only when necessary."
  },
  {
    "func": "def incomplete_docstring():\n    \"\"\"This function does something\"\"\"\n    return True",
    "target": "Provide detailed docstrings explaining parameters, return values, and functionality."
  },
  {
    "func": "def redundant_code_block():\n    if condition:\n        if condition:\n            return True",
    "target": "Simplify redundant nested conditions to improve readability."
  },
  {
    "func": "def implicit_context_dependency():\n    config = get_global_config()\n    return config.value",
    "target": "Avoid implicit context dependencies. Pass configuration explicitly."
  },
  {
    "func": "def inefficient_data_structure():\n    data = [1, 2, 3, 4, 5]\n    if 3 in data:\n        return True",
    "target": "Use appropriate data structures like sets for faster lookups."
  },
  {
    "func": "def inconsistent_test_logic():\n    if condition:\n        assert True\n    else:\n        assert False",
    "target": "Avoid redundant assertions. Use meaningful test cases."
  },
  {
    "func": "def missing_context_in_logging():\n    logger.info('Operation completed')",
    "target": "Include contextual information in log messages to aid debugging."
  },
  {
    "func": "def overcomplicated_boolean_expression():\n    if (a and not b) or (not a and b):\n        return True",
    "target": "Simplify boolean expressions for clarity."
  },
  {
    "func": "def unsafe_dynamic_import(module_name):\n    return __import__(module_name)",
    "target": "Avoid dynamic imports unless absolutely necessary. Validate input if used."
  },
  {
    "func": "def insecure_api_endpoint():\n    return 'http://api.example.com/data'",
    "target": "Avoid hardcoding insecure API endpoints. Use secure (HTTPS) connections."
  },
  {
    "func": "def duplicate_loop_logic():\n    for i in range(10):\n        print(i)\n    for i in range(10):\n        print(i)",
    "target": "Consolidate duplicate loop logic to reduce redundancy."
  },
  {
    "func": "def overuse_of_static_methods():\n    @staticmethod\n    def helper():\n        return True",
    "target": "Limit the use of static methods. Use instance methods for better design."
  },
  {
    "func": "def inefficient_string_concatenation():\n    result = ''\n    for i in range(1000):\n        result += str(i)",
    "target": "Use efficient string concatenation methods like `join()`."
  },
  {
    "func": "def undocumented_side_effects(a):\n    a.append(1)\n    return a",
    "target": "Document side effects in function docstrings to inform users."
  },
  {
    "func": "def improper_exception_silencing():\n    try:\n        risky_operation()\n    except Exception:\n        pass",
    "target": "Avoid silencing exceptions. Log them for debugging purposes."
  },
  {
    "func": "def no_exit_on_error():\n    try:\n        risky_operation()\n    except Exception as e:\n        logger.error(e)",
    "target": "Handle critical errors gracefully and exit when necessary."
  },
  {
    "func": "def untested_code_path():\n    if a == 10:\n        return 'Tested'\n    else:\n        return 'Untested'",
    "target": "Ensure all code paths are covered in tests."
  },
  {
    "func": "def inefficient_memory_usage():\n    data = [x for x in range(10**6)]\n    return sum(data)",
    "target": "Use generators or efficient memory usage techniques for large data."
  },
  {
    "func": "def implicit_dependency_on_global():\n    def inner():\n        return global_variable\n    return inner()",
    "target": "Avoid implicit dependencies on global variables. Pass them explicitly."
  },
  {
    "func": "def inappropriate_abstraction():\n    class OneMethod:\n        def method(self):\n            return True\n    return OneMethod()",
    "target": "Avoid unnecessary abstractions. Keep the design simple and direct."
  },
  {
    "func": "def inconsistent_data_format():\n    return {'id': 1, 'Name': 'John'}",
    "target": "Ensure consistent data format in structures for maintainability."
  },
  {
    "func": "def complex_method():\n    data = []\n    for i in range(10):\n        for j in range(10):\n            data.append((i, j))\n    return data",
    "target": "Break complex methods into smaller, reusable functions for better readability."
  },
  {
    "func": "def unclear_variable_names():\n    x = 10\n    y = 20\n    return x + y",
    "target": "Use descriptive variable names to improve code clarity."
  },
  {
    "func": "def unstructured_code():\n    if condition:\n        print('A')\n    else:\n        print('B')\n    print('Done')",
    "target": "Structure code into functions or methods to separate responsibilities."
  },
  {
    "func": "def unused_function():\n    def helper():\n        return True\n    return 42",
    "target": "Remove unused functions to reduce code clutter."
  },
  {
    "func": "def missing_docstring():\n    def calculate_sum(a, b):\n        return a + b",
    "target": "Provide a docstring to explain the purpose and parameters of the function."
  },
  {
    "func": "def inconsistent_spacing():\n    a=10\n    b = 20\n    return a+b",
    "target": "Ensure consistent spacing around operators for better readability."
  },
  {
    "func": "def overly_nested_conditions():\n    if condition1:\n        if condition2:\n            if condition3:\n                return True",
    "target": "Flatten nested conditions to improve readability."
  },
  {
    "func": "def long_line_of_code():\n    return 'This is a very long line of code that exceeds the recommended character limit for a single line in most coding standards.'",
    "target": "Break long lines into multiple lines for better readability."
  },
  {
    "func": "def improper_function_comments():\n    # Add two numbers\n    def add(a, b):\n        return a + b",
    "target": "Write comments that describe the purpose, not the implementation."
  },
  {
    "func": "def hard_to_understand_logic():\n    result = not (a and b) or (c and d)",
    "target": "Use parentheses and simplify complex logical expressions for clarity."
  },
  {
    "func": "def redundant_else():\n    if condition:\n        return True\n    else:\n        return False",
    "target": "Remove redundant `else` after `return` for simplicity."
  },
  {
    "func": "def inconsistent_function_order():\n    def helper():\n        return True\n\n    def main():\n        return helper()\n\n    return main()",
    "target": "Order functions logically, with main functions at the top or bottom."
  },
  {
    "func": "def overly_generic_names():\n    def process_data(data):\n        return data",
    "target": "Use specific names for functions and variables to improve understanding."
  },
  {
    "func": "def redundant_comments():\n    # This adds two numbers\n    return a + b",
    "target": "Avoid redundant comments that repeat the code."
  },
  {
    "func": "def inconsistent_casing():\n    variableName = 10\n    variable_name = 20\n    return variableName + variable_name",
    "target": "Follow consistent naming conventions throughout the codebase."
  },
  {
    "func": "def missing_type_annotations(a, b):\n    return a + b",
    "target": "Use type annotations for better code understanding and error checking."
  },
  {
    "func": "def repetitive_code():\n    print('Start')\n    print('Processing')\n    print('End')",
    "target": "Replace repetitive code with loops or helper functions."
  },
  {
    "func": "def hidden_side_effects():\n    global counter\n    counter += 1\n    return counter",
    "target": "Avoid hidden side effects. Make changes explicit."
  },
  {
    "func": "def unclear_return_values():\n    if condition:\n        return 1\n    else:\n        return 0",
    "target": "Use enums or constants to represent meaningful return values."
  },
  {
    "func": "def no_error_handling():\n    result = risky_operation()\n    return result",
    "target": "Add error handling to improve code robustness."
  },
  {
    "func": "def deep_hierarchy_class():\n    class A:\n        pass\n    class B(A):\n        pass\n    class C(B):\n        pass",
    "target": "Avoid deep inheritance hierarchies. Prefer composition over inheritance."
  },
  {
    "func": "def unnecessary_single_return_point():\n    if condition:\n        result = True\n    else:\n        result = False\n    return result",
    "target": "Simplify logic to reduce unnecessary return points."
  },
  {
    "func": "def missing_constants():\n    if value == 42:\n        return 'Answer'",
    "target": "Define constants for magic numbers to improve readability."
  },
  {
    "func": "def improper_file_structure():\n    def helper1():\n        return True\n\n    def helper2():\n        return False",
    "target": "Organize functions into appropriate files for maintainability."
  },
  {
    "func": "def overly_complex_parameters():\n    def process(data, config, env, context):\n        return True",
    "target": "Simplify parameters by grouping related items into objects or dictionaries."
  },
  {
    "func": "def large_if_else_chain():\n    if condition1:\n        return 'A'\n    elif condition2:\n        return 'B'\n    elif condition3:\n        return 'C'\n    else:\n        return 'D'",
    "target": "Replace long `if-else` chains with switch-case constructs or mapping."
  },
  {
    "func": "def inconsistent_loop_styles():\n    for i in range(10):\n        print(i)\n    j = 0\n    while j < 10:\n        print(j)\n        j += 1",
    "target": "Use consistent looping styles throughout the code."
  },
  {
    "func": "def ignored_todo():\n    # TODO: Refactor this function\n    pass",
    "target": "Address or remove TODO comments to keep the code clean."
  },
  {
    "func": "def duplicate_functionality():\n    def add(a, b):\n        return a + b\n    def sum(a, b):\n        return a + b",
    "target": "Consolidate duplicate functions into a single implementation."
  },
  {
    "func": "def mixed_indentation():\n    if condition:\n      print('Bad')\n        print('Indentation')",
    "target": "Use consistent indentation (spaces or tabs) throughout the code."
  },
  {
    "func": "def inconsistent_variable_names():\n    userName = 'John'\n    user_email = 'john@example.com'\n    return userName, user_email",
    "target": "Ensure consistent naming conventions (e.g., snake_case or camelCase)."
  },
  {
    "func": "def unhandled_exceptions():\n    result = risky_function()\n    return result",
    "target": "Add try-except blocks to handle potential exceptions."
  },
  {
    "func": "def commented_out_code():\n    # print('This is commented out')\n    return True",
    "target": "Remove commented-out code to reduce clutter."
  },
  {
    "func": "def large_class():\n    class User:\n        def login(self): pass\n        def logout(self): pass\n        def update_profile(self): pass\n        def delete_account(self): pass\n        def reset_password(self): pass",
    "target": "Split large classes into smaller, focused classes adhering to the Single Responsibility Principle."
  },
  {
    "func": "def hard_to_find_bug():\n    x = 0.1 + 0.2\n    if x == 0.3:\n        print('Equal')",
    "target": "Avoid floating-point equality checks; use a tolerance or rounding."
  },
  {
    "func": "def redundant_return():\n    if condition:\n        return True\n    return False",
    "target": "Simplify return statements by directly returning the condition."
  },
  {
    "func": "def excessive_comments():\n    # This function adds two numbers\n    # The parameters are a and b\n    # The result is their sum\n    return a + b",
    "target": "Avoid excessive comments. Focus on meaningful, concise explanations."
  },
  {
    "func": "def inconsistent_error_messages():\n    if condition1:\n        raise ValueError('Error 1')\n    if condition2:\n        raise Exception('Something went wrong')",
    "target": "Use consistent error messages and types for better debugging."
  },
  {
    "func": "def unused_constants():\n    PI = 3.14159\n    return 42",
    "target": "Remove unused constants or variables to avoid confusion."
  },
  {
    "func": "def overly_generic_exceptions():\n    try:\n        risky_operation()\n    except Exception:\n        pass",
    "target": "Catch specific exceptions instead of the generic `Exception`."
  },
  {
    "func": "def missing_default_case():\n    if x == 1:\n        return 'One'\n    elif x == 2:\n        return 'Two'",
    "target": "Add a default case to handle unexpected inputs."
  },
  {
    "func": "def deep_directory_structure():\n    path = '/a/very/long/and/deep/directory/structure'\n    return path",
    "target": "Avoid overly deep directory structures for better file management."
  },
  {
    "func": "def poor_parameter_order(a, default_value=None):\n    return a + default_value",
    "target": "Place default parameters after required ones to improve usability."
  },
  {
    "func": "def missing_readability_breaks():\n    for i in range(100):\n        if i % 2 == 0:\n            continue\n    return i",
    "target": "Add whitespace or breaks to improve readability in loops or logic."
  },
  {
    "func": "def inline_code_blocks():\n    x = 10; y = 20; z = x + y\n    return z",
    "target": "Avoid writing multiple statements on a single line."
  },
  {
    "func": "def insufficient_test_coverage():\n    def calculate(a, b):\n        return a + b\n    # No test cases provided",
    "target": "Ensure all functions have adequate test cases."
  },
  {
    "func": "def inconsistent_docstrings():\n    def add(a, b):\n        \"\"\"Add two numbers.\"\"\"\n        return a + b\n    def subtract(a, b):\n        # Subtract two numbers\n        return a - b",
    "target": "Follow a consistent format for docstrings, such as PEP-257."
  },
  {
    "func": "def too_many_arguments(a, b, c, d, e, f, g):\n    return a + b + c + d + e + f + g",
    "target": "Limit the number of arguments to improve readability and usability."
  },
  {
    "func": "def ambiguous_return_values():\n    if condition:\n        return 'Yes'\n    else:\n        return True",
    "target": "Ensure consistent and meaningful return types."
  },
  {
    "func": "def missing_logging():\n    try:\n        risky_operation()\n    except Exception:\n        pass",
    "target": "Add logging to capture details of errors and critical operations."
  },
  {
    "func": "def overly_complex_condition():\n    if (a and not b) or (c and not d and e):\n        return True",
    "target": "Simplify complex conditions for better readability."
  },
  {
    "func": "def unused_function_arguments(a, b):\n    return a",
    "target": "Remove unused function arguments to avoid confusion."
  },
  {
    "func": "def hidden_dependencies():\n    return os.getenv('API_KEY')",
    "target": "Avoid hidden dependencies. Pass required values explicitly."
  },
  {
    "func": "def inconsistent_file_naming():\n    import my_script\n    from MyScript import my_function",
    "target": "Use consistent file and module naming conventions."
  },
  {
    "func": "def function_does_too_much():\n    def process_data(data):\n        clean_data = clean(data)\n        save_data(clean_data)\n        return analyze_data(clean_data)",
    "target": "Limit functions to a single responsibility."
  },
  {
    "func": "def improper_use_of_constants():\n    GRAVITY = 9.8\n    gravity = 9.8\n    return GRAVITY, gravity",
    "target": "Define constants in a single place to avoid redundancy."
  },
  {
    "func": "def poorly_formatted_comments():\n    #This comment lacks space and formatting\n    return True",
    "target": "Format comments with proper spacing for readability."
  },
  {
    "func": "def unnecessary_mutable_defaults(data=[]):\n    data.append(1)\n    return data",
    "target": "Avoid mutable default arguments as they can lead to unexpected behavior."
  },
  {
    "func": "def overly_tightly_coupled_code():\n    def service_layer():\n        return data_layer()",
    "target": "Decouple layers in the application to improve testability and maintainability."
  },
  {
    "func": "def lack_of_consistent_encoding():\n    with open('file.txt', 'r') as file:\n        return file.read()",
    "target": "Specify file encoding to avoid cross-platform issues."
  },
  {
    "func": "def inconsistent_function_naming():\n    def add(a, b):\n        return a + b\n    def subtract(a, b):\n        return a - b",
    "target": "Use consistent function naming conventions for clarity."
  },
  {
    "func": "def improper_use_of_globals():\n    global counter\n    counter += 1\n    return counter",
    "target": "Avoid global variables. Pass values explicitly to functions."
  },
  {
    "func": "def missing_type_annotations(a, b):\n    return a + b",
    "target": "Add type annotations to function arguments and return values for better code clarity."
  },
  {
    "func": "def inefficient_search(lst, x):\n    for item in lst:\n        if item == x:\n            return True\n    return False",
    "target": "Use efficient search methods like `x in lst` for better performance."
  },
  {
    "func": "def non_standard_import():\n    from my_library import *\n    return function_call()",
    "target": "Avoid wildcard imports. Import only required functions or classes."
  },
  {
    "func": "def deeply_nested_conditions():\n    if a:\n        if b:\n            if c:\n                return True",
    "target": "Simplify deeply nested conditions using logical operators or separate functions."
  },
  {
    "func": "def ignoring_return_values():\n    my_list.append(5)\n    my_list.sort()\n    my_list.reverse()",
    "target": "Avoid ignoring return values of functions like `sorted()` that return new objects."
  },
  {
    "func": "def unnecessary_computation():\n    result = sum([x**2 for x in range(100)])\n    return result",
    "target": "Avoid unnecessary list comprehensions. Use generator expressions for better performance."
  },
  {
    "func": "def using_tabs_instead_of_spaces():\n\treturn True",
    "target": "Use spaces instead of tabs for consistent code formatting."
  },
  {
    "func": "def bad_indentation():\n    if condition:\n         return True",
    "target": "Fix inconsistent indentation to maintain readability."
  },
  {
    "func": "def unnecessary_else():\n    if condition:\n        return True\n    else:\n        return False",
    "target": "Remove unnecessary `else` after `return` for cleaner code."
  },
  {
    "func": "def redundant_conditionals():\n    if x == True:\n        return True",
    "target": "Avoid redundant conditionals. Use `if x:` instead of `if x == True:`."
  },
  {
    "func": "def non_lazy_loading():\n    data = load_all_data()\n    return process(data)",
    "target": "Implement lazy loading to optimize memory usage and improve performance."
  },
  {
    "func": "def insecure_os_call(command):\n    os.system(command)",
    "target": "Avoid using `os.system`. Use `subprocess.run` with argument splitting to prevent command injection."
  },
  {
    "func": "def logging_sensitive_information():\n    logging.info(f'Password: {password}')",
    "target": "Avoid logging sensitive information like passwords or API keys."
  },
  {
    "func": "def missing_function_docstring():\n    def calculate_area(radius):\n        return 3.14 * radius * radius",
    "target": "Add a docstring to describe the function's purpose and parameters."
  },
  {
    "func": "def redundant_variable():\n    temp = calculate()\n    return temp",
    "target": "Avoid redundant variables. Directly return the function result."
  },
  {
    "func": "def mutable_class_attributes():\n    class MyClass:\n        items = []",
    "target": "Avoid mutable default attributes in classes to prevent shared state issues."
  },
  {
    "func": "def inefficient_string_concatenation():\n    result = ''\n    for s in strings:\n        result += s",
    "target": "Use `.join()` for efficient string concatenation in loops."
  },
  {
    "func": "def forgetting_to_close_file():\n    file = open('data.txt', 'r')\n    data = file.read()\n    return data",
    "target": "Use a context manager (`with open(...)`) to ensure the file is properly closed."
  },
  {
    "func": "def lack_of_assertions():\n    def add(a, b):\n        return a + b",
    "target": "Add assertions in tests to validate expected behavior."
  },
  {
    "func": "def hard_coded_path():\n    path = '/home/user/data/file.txt'\n    return path",
    "target": "Avoid hardcoding paths. Use configuration files or environment variables."
  },
  {
    "func": "def multiple_returns():\n    if x > 0:\n        return 'Positive'\n    elif x < 0:\n        return 'Negative'\n    else:\n        return 'Zero'",
    "target": "Avoid multiple return statements in a single function for maintainability."
  },
  {
    "func": "def unstructured_code_block():\n    a = 10\n    b = 20\n    result = a + b\n    print(result)\n    return result",
    "target": "Group related code into functions for better modularity."
  },
  {
    "func": "def hard_coded_timeout():\n    time.sleep(30)",
    "target": "Avoid hardcoding timeouts. Make them configurable."
  },
  {
    "func": "def missing_default_in_switch_case():\n    match value:\n        case 1:\n            return 'One'\n        case 2:\n            return 'Two'",
    "target": "Add a default case in `match` or `switch` statements to handle unexpected values."
  },
  {
    "func": "def silent_failure():\n    try:\n        risky_function()\n    except Exception:\n        pass",
    "target": "Avoid silent failures. Log errors or provide meaningful messages."
  },
  {
    "func": "def ambiguous_variable_names():\n    x = 10\n    y = 20\n    return x + y",
    "target": "Use descriptive variable names for better code readability."
  },
  {
    "func": "def missing_unit_tests():\n    def multiply(a, b):\n        return a * b\n    # No test cases provided",
    "target": "Write unit tests for all critical functions."
  },
  {
    "func": "def dependent_on_environment():\n    result = os.getenv('SETTING')\n    return result",
    "target": "Provide fallback values for environment-dependent settings."
  },
  {
    "func": "def unused_variables():\n    result = calculate()\n    temp = 42\n    return result",
    "target": "Remove unused variables to reduce clutter."
  },
  {
    "func": "def large_import_blocks():\n    import os, sys, math, random, datetime, re\n    return None",
    "target": "Organize imports into logical sections and avoid unused ones."
  },
  {
    "func": "def no_comments():\n    return 42",
    "target": "Add comments to explain the purpose and functionality of the code."
  },
  {
    "func": "def inconsistent_initialization():\n    x = 10\n    y = 20\n    x = x + y\n    return x",
    "target": "Avoid initializing variables multiple times unnecessarily."
  },
  {
    "func": "class DeeplyNestedClass:\n    class InnerClass1:\n        class InnerClass2:\n            class InnerClass3:\n                pass",
    "target": "Avoid excessive class nesting. Refactor for better clarity."
  },
  {
    "func": "def improper_whitespace():\n    return   True",
    "target": "Ensure consistent whitespace for better readability."
  },
  {
    "func": "def inconsistent_argument_order(arg1, default_arg=None, arg2):\n    return arg1 + arg2",
    "target": "Place default arguments after required arguments for better usability."
  },
  {
    "func": "CONSTANT1 = 10\nCONSTANT2 = 20",
    "target": "Use meaningful and descriptive names for constants."
  },
  {
    "func": "import os, sys, random",
    "target": "Organize imports alphabetically and logically."
  },
  {
    "func": "def deeply_nested_classes():\n    class A:\n        class B:\n            class C:\n                class D:\n                    class E:\n                        def method(self):\n                            pass",
    "target": "Avoid deeply nested classes (5 levels detected). Consider breaking them into separate classes."
  },
  {
    "func": "def overloaded_function(x):\n    pass\n\ndef overloaded_function(x, y):\n    pass",
    "target": "Avoid excessive overloading of functions. Consolidate logic where possible."
  },
  {
    "func": "def complex_expression(x, y, z):\n    return x and y or not z",
    "target": "Use parentheses in complex logical expressions for clarity."
  },
  {
    "func": "def long_method_name_for_addition():\n    return a + b",
    "target": "Use concise and descriptive method names."
  },
  {
    "func": "def long_function():\n    # This function spans over 100 lines\n    pass",
    "target": "Refactor long functions into smaller, manageable units."
  },
  {
    "func": "try:\n    try:\n        pass\n    except:\n        pass\nexcept:\n    pass",
    "target": "Avoid deeply nested try-except blocks for better readability."
  },
  {
    "func": "def hardcoded_logic():\n    if user == 'admin':\n        return True",
    "target": "Replace hardcoded domain-specific logic with configurations."
  },
  {
    "func": "def missing_dependency_injection():\n    db = Database()\n    return db.query()",
    "target": "Use dependency injection instead of creating dependencies inside the function."
  },
  {
    "func": "def mixed_data_types():\n    data = [1, 'two', 3.0]\n    return data",
    "target": "Avoid mixing types within a single data structure."
  },
  {
    "func": "def insufficient_test_coverage():\n    def sum(a, b):\n        return a + b",
    "target": "Ensure unit tests cover all critical code paths."
  },
  {
    "func": "def tightly_coupled_logic():\n    if user.is_admin():\n        return db.get_all_users()",
    "target": "Separate business logic from data access for better maintainability."
  },
  {
    "func": "class Singleton:\n    _instance = None\n\n    def __new__(cls):\n        if not cls._instance:\n            cls._instance = super().__new__(cls)\n        return cls._instance",
    "target": "Avoid overusing singletons. Use other design patterns if possible."
  },
  {
    "func": "def hardcoded_key():\n    key = '123456'\n    return key",
    "target": "Avoid hardcoding keys or sensitive data in the code."
  },
  {
    "func": "def insecure_api_key():\n    headers = {'Authorization': 'Bearer 12345'}\n    return headers",
    "target": "Avoid embedding API keys directly in the code."
  },
  {
    "func": "def improper_session_timeout():\n    session.expiry = None",
    "target": "Set appropriate session timeout values."
  },
  {
    "func": "def unvalidated_json(data):\n    return data['key']",
    "target": "Validate JSON inputs against a schema."
  },
  {
    "func": "def vague_error_message():\n    try:\n        pass\n    except:\n        return 'Something went wrong'",
    "target": "Provide detailed error messages to aid debugging."
  },
  {
    "func": "def insecure_token_expiry(token):\n    return token.is_expired()",
    "target": "Ensure proper token expiry handling to prevent security risks."
  },
  {
    "func": "def unsigned_cookies():\n    response.set_cookie('session', '12345')",
    "target": "Sign and encrypt cookies for secure transmission."
  },
  {
    "func": "def lack_of_input_validation(data):\n    return data",
    "target": "Validate input data to meet required constraints."
  },
  {
    "func": "def outdated_protocol():\n    connection = ssl.SSLContext(ssl.PROTOCOL_TLSv1)",
    "target": "Avoid using outdated security protocols. Use modern alternatives like TLS 1.2 or 1.3."
  },
  {
    "func": "def nested_error_handling():\n    try:\n        try:\n            pass\n        except ValueError:\n            pass\n    except Exception:\n        pass",
    "target": "Flatten nested error-handling blocks for better readability."
  },
  {
    "func": "def large_switch_case(value):\n    match value:\n        case 1:\n            return 'One'\n        case 2:\n            return 'Two'\n        # 50 more cases",
    "target": "Replace large switch-case constructs with a mapping or dictionary."
  },
  {
    "func": "def unencrypted_data_transmission(data):\n    return requests.post('http://example.com', data=data)",
    "target": "Encrypt data during transmission to prevent eavesdropping."
  },
  {
    "func": "def insecure_hashing(password):\n    return hashlib.md5(password.encode()).hexdigest()",
    "target": "Use secure hashing algorithms like SHA-256 for password storage."
  },
  {
    "func": "def hardcoded_paths():\n    path = '/home/user/data'\n    return path",
    "target": "Avoid hardcoding file paths. Use relative paths or configuration files."
  },
  {
    "func": "def insecure_data_storage(data):\n    with open('data.txt', 'w') as file:\n        file.write(data)",
    "target": "Encrypt sensitive data before storing it in files or databases."
  },
  {
    "func": "def insecure_redirect(url):\n    return redirect(url)",
    "target": "Validate and sanitize redirect URLs to prevent open redirects."
  },
  {
    "func": "def insecure_file_upload(file):\n    with open('uploads/' + file.filename, 'wb') as f:\n        f.write(file.read())",
    "target": "Validate file uploads to prevent malicious file execution."
  },
  {
    "func": "def insecure_session_management(session):\n    session['authenticated'] = True",
    "target": "Use secure session management techniques to prevent session hijacking."
  },
  {
    "func": "def insecure_random_number_generation():\n    return random.randint(1, 100)",
    "target": "Use secure random number generators for cryptographic operations."
  },
  {
    "func": "def insecure_cross_origin_resource_sharing():\n    response.headers['Access-Control-Allow-Origin'] = '*'\n    return response",
    "target": "Use CORS headers to restrict cross-origin resource sharing."
  },
  {
    "func": "def insecure_authentication(password):\n    return password == 'admin'",
    "target": "Use secure authentication mechanisms like bcrypt or PBKDF2."
  },
  {
    "func": "def inconsistent_docstring_format():\n    \"\"\"This function does something.\"\"\"\n    return True",
    "target": "Follow a consistent docstring format, such as PEP-257."
  },
  {
    "func": "def overly_complex_loop():\n    for i in range(10):\n        for j in range(10):\n            if i * j % 2 == 0:\n                return i, j",
    "target": "Simplify complex loops for better readability."
  },
  {
    "func": "def improper_list_extension():\n    lst = [1, 2, 3]\n    lst = lst + [4, 5, 6]\n    return lst",
    "target": "Use `extend()` instead of `+` for list concatenation to optimize performance."
  },
  {
    "func": "def implicit_return_none():\n    def helper():\n        pass",
    "target": "Explicitly return `None` for clarity in functions with no return value."
  },
  {
    "func": "def too_many_return_points(x):\n    if x > 0:\n        return 'Positive'\n    if x < 0:\n        return 'Negative'\n    return 'Zero'",
    "target": "Limit the number of return points in a function to improve maintainability."
  },
  {
    "func": "def unnecessary_boolean_cast(x):\n    return bool(x == True)",
    "target": "Avoid unnecessary boolean casts; use the condition directly."
  },
  {
    "func": "def lack_of_version_control_comments():\n    # Fixed bug in sorting logic\n    return sorted(data)",
    "target": "Avoid including version control information in comments; use commit messages instead."
  },
  {
    "func": "def unused_class():\n    class Helper:\n        pass\n    return True",
    "target": "Remove unused classes to reduce code clutter."
  },
  {
    "func": "def ambiguous_operator_usage(a, b):\n    return a | b",
    "target": "Avoid ambiguous operators; clarify intent with comments or alternative code."
  },
  {
    "func": "def redundant_set_operation():\n    data = set([1, 2, 3])\n    return data",
    "target": "Use set literals instead of redundant `set()` calls for better readability."
  },
  {
    "func": "def missing_context_while_logging():\n    logger.info('Operation completed')",
    "target": "Include contextual information like user IDs or timestamps in log messages."
  },
  {
    "func": "def repeated_code_in_branches(x):\n    if x > 0:\n        return x + 1\n    else:\n        return x + 1",
    "target": "Refactor repeated code in branches into a single statement."
  },
  {
    "func": "def improper_usage_of_map():\n    return map(lambda x: x**2, [1, 2, 3])",
    "target": "Avoid using `map()` with lambdas; use list comprehensions instead."
  },
  {
    "func": "def multiple_statements_in_line():\n    a = 10; b = 20; c = a + b",
    "target": "Avoid writing multiple statements on the same line for better readability."
  },
  {
    "func": "def unnecessary_comprehension():\n    data = [x for x in range(10)]\n    return data",
    "target": "Avoid unnecessary comprehensions; use `list(range(10))` for clarity."
  },
  {
    "func": "def improper_variable_scope():\n    for i in range(10):\n        j = i\n    return j",
    "target": "Avoid relying on variables defined in a loop outside its scope."
  },
  {
    "func": "def missing_schema_for_database_query():\n    query = f\"SELECT * FROM users WHERE id = {user_id}\"\n    return query",
    "target": "Use database schemas to validate and enforce data constraints."
  },
  {
    "func": "def inefficient_dictionary_lookup():\n    for key in my_dict:\n        if key == 'target':\n            return my_dict[key]",
    "target": "Use `my_dict.get('target')` for efficient dictionary lookups."
  },
  {
    "func": "def mutable_keys_in_dict():\n    data = {{[1, 2]: 'value'}}",
    "target": "Avoid using mutable objects like lists as dictionary keys."
  },
  {
    "func": "def hardcoded_error_messages():\n    if not data:\n        return 'Error: Data is missing'",
    "target": "Use configurable or localized error messages for better flexibility."
  },
  {
    "func": "def incorrect_ternary_operator():\n    return x if x > 0 else x if x < 0 else 0",
    "target": "Simplify chained ternary operators for better readability."
  },
  {
    "func": "def global_mutable_state():\n    global data\n    data.append(1)\n    return data",
    "target": "Avoid modifying global mutable state to prevent side effects."
  },
  {
    "func": "def unnecessary_elif_chain():\n    if x == 1:\n        return 'One'\n    elif x == 2:\n        return 'Two'\n    elif x == 3:\n        return 'Three'\n    else:\n        return 'Other'",
    "target": "Replace long elif chains with a dictionary or match statement."
  },
  {
    "func": "def inefficient_data_conversion():\n    data = list(set(my_list))",
    "target": "Avoid unnecessary conversions between data structures."
  },
  {
    "func": "def lack_of_error_context():\n    try:\n        risky_operation()\n    except Exception:\n        raise ValueError('Operation failed')",
    "target": "Preserve original exception context when re-raising errors."
  },
  {
    "func": "def missing_default_in_dict_get():\n    return my_dict.get('key')",
    "target": "Provide a default value in `dict.get()` to avoid potential errors."
  },
  {
    "func": "def improper_date_format():\n    date = '2024-01-01'\n    return date",
    "target": "Use datetime objects instead of hardcoded date strings."
  },
  {
    "func": "def nested_function_definition():\n    def outer():\n        def inner():\n            return True\n        return inner()\n    return outer()",
    "target": "Avoid defining functions within other functions unless necessary."
  },
  {
    "func": "def long_lambda_expression():\n    func = lambda x: x**2 + 2*x + 1\n    return func(5)",
    "target": "Avoid overly complex lambda expressions; use named functions instead."
  },
  {
    "func": "def poorly_named_constants():\n    VALUE = 10\n    return VALUE",
    "target": "Use descriptive names for constants to improve readability."
  },
  {
    "func": "def missing_output_encoding(data):\n    return f'<div>{data}</div>'",
    "target": "Apply output encoding to prevent cross-site scripting (XSS) attacks."
  },
  {
    "func": "def improper_password_storage(password):\n    hashed = hashlib.md5(password.encode()).hexdigest()\n    return hashed",
    "target": "Avoid using weak hash functions like MD5 for password storage. Use bcrypt or Argon2 with salting."
  },
  {
    "func": "def insecure_file_upload(file):\n    file.save(f'/uploads/{file.filename}')",
    "target": "Validate file extensions and use a secure directory for uploads."
  },
  {
    "func": "def insecure_random_generator():\n    return random.randint(1, 100)",
    "target": "Avoid insecure random generators for sensitive operations. Use `secrets` or `os.urandom`."
  },
  {
    "func": "def weak_session_management():\n    session['user'] = 'admin'",
    "target": "Ensure session data is signed and encrypted to prevent tampering."
  },
  {
    "func": "def sql_injection_vulnerability(user_input):\n    query = f'SELECT * FROM users WHERE name = \"{user_input}\"'\n    return query",
    "target": "Prevent SQL injection by using parameterized queries."
  },
  {
    "func": "def command_injection_vulnerability(cmd):\n    os.system(cmd)",
    "target": "Validate and sanitize command inputs to prevent injection attacks."
  },
  {
    "func": "def csrf_vulnerable_form():\n    return '<form action=\"/submit\" method=\"POST\">...</form>'",
    "target": "Implement CSRF tokens in forms to protect against cross-site request forgery."
  },
  {
    "func": "def insecure_deserialization(data):\n    return pickle.loads(data)",
    "target": "Avoid using `pickle` for deserialization. Use safer alternatives like `json`."
  },
  {
    "func": "def sensitive_data_logging():\n    logging.info(f'Password: {password}')",
    "target": "Do not log sensitive information like passwords or API keys."
  },
  {
    "func": "def missing_authentication():\n    return perform_admin_action()",
    "target": "Implement authentication mechanisms to restrict access to sensitive actions."
  },
  {
    "func": "def missing_authorization(user):\n    return perform_sensitive_action(user)",
    "target": "Add authorization checks to ensure users have the proper permissions."
  },
  {
    "func": "def lack_of_rate_limiting():\n    for _ in range(1000):\n        send_request()",
    "target": "Implement rate limiting to prevent abuse and denial-of-service attacks."
  },
  {
    "func": "def insufficient_privilege_check():\n    perform_admin_action(user)",
    "target": "Verify user privileges before performing sensitive actions."
  },
  {
    "func": "def hardcoded_secret_key():\n    secret_key = 'hardcoded_secret'",
    "target": "Avoid hardcoding secret keys. Use environment variables or secure vaults."
  },
  {
    "func": "def improper_input_validation(user_input):\n    return user_input.lower()",
    "target": "Validate and sanitize all inputs to prevent injection and invalid data issues."
  },
  {
    "func": "def weak_jwt_signature():\n    jwt.encode(payload, 'weaksecret', algorithm='HS256')",
    "target": "Use strong secrets and secure algorithms for signing JWTs."
  },
  {
    "func": "def exposed_stack_trace():\n    try:\n        risky_operation()\n    except Exception as e:\n        return str(e)",
    "target": "Avoid exposing stack traces in error responses to prevent information leakage."
  },
  {
    "func": "def insecure_cors_policy():\n    response.headers['Access-Control-Allow-Origin'] = '*'",
    "target": "Restrict allowed origins in CORS policies to trusted domains."
  },
  {
    "func": "def missing_hsts_header():\n    return render_template('index.html')",
    "target": "Add HSTS headers to enforce secure communication over HTTPS."
  },
  {
    "func": "def weak_password_policy(password):\n    return len(password) > 6",
    "target": "Enforce strong password policies including minimum length, special characters, and case sensitivity."
  },
  {
    "func": "def hardcoded_api_key():\n    api_key = '12345-abcdef-67890'\n    return api_key",
    "target": "Avoid hardcoding API keys. Use secure storage or environment variables."
  },
  {
    "func": "def open_redirect_vulnerability(url):\n    return redirect(url)",
    "target": "Validate and sanitize user-provided URLs to prevent open redirects."
  },
  {
    "func": "def directory_traversal_vulnerability(file_path):\n    with open(file_path, 'r') as file:\n        return file.read()",
    "target": "Validate file paths to prevent directory traversal attacks."
  },
  {
    "func": "def insufficient_logging():\n    try:\n        risky_operation()\n    except:\n        pass",
    "target": "Log critical events and exceptions for effective monitoring and debugging."
  },
  {
    "func": "def missing_ssl_verification(url):\n    response = requests.get(url, verify=False)\n    return response",
    "target": "Always verify SSL certificates to ensure secure communication."
  },
  {
    "func": "def missing_encryption(data):\n    return data",
    "target": "Encrypt sensitive data at rest to protect it from unauthorized access."
  },
  {
    "func": "def vulnerable_jwt_decoding(jwt_token):\n    payload = jwt.decode(jwt_token, options={'verify_signature': False})\n    return payload",
    "target": "Always verify JWT signatures to ensure token authenticity."
  },
  {
    "func": "def weak_captcha():\n    return 'What is 2+2?'",
    "target": "Use robust CAPTCHA mechanisms to prevent automated attacks."
  },
  {
    "func": "def missing_input_size_validation(data):\n    return data['input']",
    "target": "Validate input size to prevent resource exhaustion attacks."
  },
  {
    "func": "def improper_resource_management():\n    file = open('data.txt', 'r')\n    data = file.read()\n    return data",
    "target": "Always close resources or use context managers to avoid resource leaks."
  },
  {
    "func": "def missing_error_handling():\n    data = open('file.txt').read()\n    return data",
    "target": "Add error handling for operations prone to failure."
  },
  {
    "func": "def excessive_try_except_blocks():\n    try:\n        a = 1 / 0\n    except ZeroDivisionError:\n        return 'Error'\n    try:\n        b = [1][2]\n    except IndexError:\n        return 'Error'",
    "target": "Consolidate related try-except blocks for better readability."
  },
  {
    "func": "def unsafe_user_input(user_input):\n    return eval(user_input)",
    "target": "Avoid using `eval`. Use safer alternatives for user input evaluation."
  },
  {
    "func": "def weak_password_check(password):\n    return len(password) > 5",
    "target": "Implement strong password policies including special characters and numbers."
  },
  {
    "func": "def missing_return_value():\n    if condition:\n        return True",
    "target": "Ensure all branches return a value to maintain function consistency."
  },
  {
    "func": "def inefficient_looping(data):\n    for i in range(len(data)):\n        print(data[i])",
    "target": "Use direct iteration over data instead of indexing."
  },
  {
    "func": "def insecure_subprocess_call(command):\n    subprocess.run(command, shell=True)",
    "target": "Avoid using `shell=True` in subprocess calls to prevent command injection."
  },
  {
    "func": "def improper_error_propagation():\n    try:\n        risky_operation()\n    except ValueError:\n        return 'An error occurred'",
    "target": "Re-raise or log exceptions to avoid suppressing important error details."
  },
  {
    "func": "def missing_data_validation(data):\n    process(data['input'])",
    "target": "Validate input data to ensure it meets expected formats and constraints."
  },
  {
    "func": "def lack_of_security_headers():\n    response = make_response('OK')\n    return response",
    "target": "Add security headers like `Content-Security-Policy` and `Strict-Transport-Security`."
  },
  {
    "func": "def excessive_parameters(a, b, c, d, e, f):\n    return a + b + c + d + e + f",
    "target": "Limit the number of parameters. Use objects or dictionaries for complex data."
  },
  {
    "func": "def redundant_code_path():\n    if x > 0:\n        return 'Positive'\n    if x > 0:\n        return 'Also Positive'",
    "target": "Remove redundant code paths to avoid confusion and improve maintainability."
  },
  {
    "func": "def empty_except_block():\n    try:\n        risky_operation()\n    except:\n        pass",
    "target": "Avoid empty except blocks. Log or handle the exception appropriately."
  },
  {
    "func": "def insecure_temp_file():\n    with open('/tmp/tempfile', 'w') as file:\n        file.write(data)",
    "target": "Use secure methods like `tempfile` for handling temporary files."
  },
  {
    "func": "def unused_import():\n    import math\n    return 42",
    "target": "Remove unused imports to clean up the codebase."
  },
  {
    "func": "def nested_ternary_operator(a, b):\n    return a if b else a if not b else b",
    "target": "Avoid nested ternary operators for better code readability."
  },
  {
    "func": "def hardcoded_port():\n    return connect_to_server('localhost', 8080)",
    "target": "Avoid hardcoding ports. Use configuration files or environment variables."
  },
  {
    "func": "def insecure_redirect(url):\n    return redirect(url)",
    "target": "Validate URLs to prevent open redirect vulnerabilities."
  },
  {
    "func": "def lack_of_type_checking(x):\n    return x + 1",
    "target": "Use type annotations and type checking to avoid runtime errors."
  },
  {
    "func": "def hardcoded_config():\n    db_config = {'host': 'localhost', 'port': 3306}",
    "target": "Avoid hardcoding configurations. Use environment variables or config files."
  },
  {
    "func": "def ambiguous_variable_names():\n    x = 10\n    y = 20\n    return x + y",
    "target": "Use descriptive variable names for better readability."
  },
  {
    "func": "def resource_not_closed():\n    file = open('data.txt', 'r')\n    return file.read()",
    "target": "Ensure resources like files or sockets are properly closed after use."
  },
  {
    "func": "def mutable_default_arg(data=[]):\n    data.append(1)\n    return data",
    "target": "Avoid mutable default arguments to prevent unexpected behavior."
  },
  {
    "func": "def insecure_data_storage(password):\n    stored_password = password",
    "target": "Encrypt sensitive data before storing it to protect against unauthorized access."
  },
  {
    "func": "def lack_of_logging_context():\n    logger.info('Task completed')",
    "target": "Include context such as user ID or task details in log messages."
  },
  {
    "func": "def missing_null_check(data):\n    return data['key']",
    "target": "Check for `None` or null values before accessing data."
  },
  {
    "func": "def weak_access_control():\n    if user.is_admin:\n        return 'Access granted'\n    return 'Access denied'",
    "target": "Implement role-based access control with detailed permission checks."
  },
  {
    "func": "def sql_query_string_concatenation(user_id):\n    query = 'SELECT * FROM users WHERE id = ' + str(user_id)\n    return query",
    "target": "Avoid string concatenation for SQL queries. Use prepared statements."
  },
  {
    "func": "def unescaped_html(data):\n    return f'<div>{data}</div>'",
    "target": "Escape HTML in user inputs to prevent XSS attacks."
  },
  {
    "func": "def duplicate_logic():\n    if x > 10:\n        return 'High'\n    if x > 10:\n        return 'High'",
    "target": "Avoid duplicating logic. Consolidate repeated conditions or code blocks."
  },
  {
    "func": "def unused_private_function():\n    def _helper():\n        pass\n    return 42",
    "target": "Remove unused private functions to reduce clutter."
  },
  {
    "func": "def hardcoded_ip_address():\n    ip = '192.168.1.1'\n    return ip",
    "target": "Avoid hardcoding IP addresses. Use configuration files or environment variables."
  },
  {
    "func": "def deeply_nested_try_except():\n    try:\n        try:\n            try:\n                try:\n                    try:\n                        risky_operation()\n                    except TypeError:\n                        handle_error()\n                except ValueError:\n                    handle_error()\n            except IOError:\n                handle_error()\n        except Exception:\n            handle_error()\n    except:\n        pass",
    "target": "Avoid deep nesting in try-except blocks (5 levels detected). Use separate functions for error handling."
  },
  {
    "func": "def complex_boolean_logic(a, b, c):\n    return (a and b) or (not a and not b and c)",
    "target": "Simplify complex boolean expressions for better readability."
  },
  {
    "func": "def avoid_sys_exit():\n    import sys\n    sys.exit(0)",
    "target": "Avoid using `sys.exit()` in libraries or modules."
  },
  {
    "func": "def magic_number_usage():\n    if value == 42:\n        return 'Answer'",
    "target": "Replace magic numbers with named constants."
  },
  {
    "func": "def unused_variable():\n    x = 10\n    return 20",
    "target": "Remove unused variables to improve code clarity."
  },
  {
    "func": "def avoid_hardcoded_values():\n    timeout = 5000\n    return timeout",
    "target": "Avoid hardcoding values. Use configuration parameters instead."
  },
  {
    "func": "def missing_default_case(value):\n    match value:\n        case 1:\n            return 'One'\n        case 2:\n            return 'Two'",
    "target": "Add a default case in match or switch statements to handle unexpected values."
  },
  {
    "func": "def missing_test_for_edge_case():\n    def divide(a, b):\n        return a / b",
    "target": "Ensure edge cases (e.g., division by zero) are tested."
  },
  {
    "func": "def potential_out_of_bounds(data):\n    return data[10]",
    "target": "Check bounds before accessing array or list elements."
  },
  {
    "func": "def inefficient_string_operations():\n    result = ''\n    for s in strings:\n        result += s",
    "target": "Use efficient methods like `''.join()` for string concatenation in loops."
  },
  {
    "func": "def avoid_large_method():\n    def long_method():\n        # Over 200 lines of code\n        pass",
    "target": "Break large methods into smaller, modular functions."
  },
  {
    "func": "def unused_return_value():\n    result = process_data()\n    return 42",
    "target": "Avoid ignoring or overwriting return values from function calls."
  },
  {
    "func": "def missing_null_check():\n    def process(data):\n        return data.value",
    "target": "Add null or None checks before accessing attributes."
  },
  {
    "func": "def unused_imports():\n    import math\n    return 42",
    "target": "Remove unused imports to reduce code clutter."
  },
  {
    "func": "def unsafe_iterator_modification():\n    for item in my_list:\n        my_list.remove(item)",
    "target": "Avoid modifying a collection while iterating over it."
  },
  {
    "func": "def redundant_parentheses():\n    return (x + y)",
    "target": "Remove redundant parentheses for cleaner code."
  },
  {
    "func": "def avoid_deprecated_function():\n    return cgi.escape('<html>')",
    "target": "Avoid using deprecated functions. Use their modern replacements."
  },
  {
    "func": "def inconsistent_naming():\n    def calculateSum():\n        return 42",
    "target": "Use consistent naming conventions like snake_case for function names."
  },
  {
    "func": "def avoid_redundant_else():\n    if condition:\n        return True\n    else:\n        return False",
    "target": "Avoid redundant `else` blocks after return statements."
  },
  {
    "func": "def insecure_temp_file_handling():\n    file = open('/tmp/tempfile', 'w')",
    "target": "Use secure libraries like `tempfile` for handling temporary files."
  },
  {
    "func": "def avoid_duplicate_import():\n    import os\n    import os",
    "target": "Remove duplicate imports to improve maintainability."
  },
  {
    "func": "def use_of_excessive_comments():\n    # This line adds two numbers\n    return a + b",
    "target": "Avoid excessive comments. Ensure code is self-explanatory."
  },
  {
    "func": "def improper_exception_rethrow():\n    try:\n        risky_operation()\n    except Exception:\n        raise",
    "target": "Preserve the original exception context when rethrowing."
  },
  {
    "func": "def avoid_global_variables():\n    global counter\n    counter += 1",
    "target": "Avoid using global variables. Use function parameters or class attributes instead."
  },
  {
    "func": "def unnecessary_conversion():\n    value = int(str(42))\n    return value",
    "target": "Avoid unnecessary data type conversions for better performance."
  },
  {
    "func": "def missing_finally_block():\n    try:\n        risky_operation()\n    except Exception:\n        log_error()",
    "target": "Use a `finally` block to ensure cleanup logic is always executed."
  },
  {
    "func": "def avoid_overly_generic_exceptions():\n    try:\n        risky_operation()\n    except Exception:\n        log_error()",
    "target": "Catch specific exceptions instead of the generic `Exception`."
  },
  {
    "func": "def unused_private_variable():\n    _temp = 42\n    return True",
    "target": "Remove unused private variables to reduce code clutter."
  },
  {
    "func": "def redundant_boolean_check():\n    if x == True:\n        return True",
    "target": "Avoid redundant boolean comparisons. Use `if x:` instead."
  },
  {
    "func": "def long_chained_calls():\n    return obj.method1().method2().method3().method4()",
    "target": "Avoid long chains of method calls. Break into intermediate variables for clarity."
  },
  {
    "func": "def overly_generic_parameter(data):\n    return data.process()",
    "target": "Avoid overly generic parameters. Use specific types or interfaces."
  },
  {
    "func": "def missing_close_in_file_handling():\n    file = open('data.txt', 'r')\n    data = file.read()\n    return data",
    "target": "Ensure files are closed properly. Use context managers for safety."
  },
  {
    "func": "def inconsistent_indentation():\n    if True:\n      print('Inconsistent')",
    "target": "Use consistent indentation to improve readability."
  },
  {
    "func": "def avoid_large_return_tuples():\n    return (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)",
    "target": "Avoid large tuples. Use named tuples or classes for better readability."
  },
  {
    "func": "def overly_complex_function():\n    def process_data(a, b, c, d, e, f):\n        return a + b + c + d + e + f",
    "target": "Reduce function complexity by splitting into smaller functions."
  },
  {
    "func": "def duplicate_code_in_branches():\n    if condition:\n        x = 10\n    else:\n        x = 10\n    return x",
    "target": "Refactor duplicated code in branches into a single statement."
  },
  {
    "func": "def inefficient_data_structure_for_lookup():\n    data = [1, 2, 3, 4]\n    if 3 in data:\n        return True",
    "target": "Use sets for faster lookups instead of lists."
  },
  {
    "func": "def ambiguous_exception_message():\n    raise ValueError('Something went wrong')",
    "target": "Provide clear and meaningful exception messages."
  },
  {
    "func": "def unused_loop_variable():\n    for i in range(10):\n        pass",
    "target": "Use `_` for loop variables that are intentionally unused."
  },
  {
    "func": "def excessive_class_attributes():\n    class User:\n        attr1 = None\n        attr2 = None\n        attr3 = None\n        attr4 = None",
    "target": "Avoid excessive class attributes. Group related attributes into smaller classes."
  },
  {
    "func": "def inconsistent_spacing():\n    a=10\n    b = 20\n    return a+b",
    "target": "Use consistent spacing around operators for better readability."
  },
  {
    "func": "def inefficient_sorting_algorithm(data):\n    for i in range(len(data)):\n        for j in range(i + 1, len(data)):\n            if data[i] > data[j]:\n                data[i], data[j] = data[j], data[i]",
    "target": "Use built-in sorting methods like `sorted()` or `list.sort()` for efficiency."
  },
  {
    "func": "def nested_loops_with_high_complexity():\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                print(i, j, k)",
    "target": "Refactor deeply nested loops into separate functions or reduce nesting."
  },
  {
    "func": "def hardcoded_error_message():\n    if not data:\n        raise ValueError('Error')",
    "target": "Use configurable or parameterized error messages for flexibility."
  },
  {
    "func": "def function_too_many_lines():\n    def long_function():\n        # Over 100 lines of code\n        pass",
    "target": "Refactor long functions into smaller, more manageable functions."
  },
  {
    "func": "def mutable_class_variable():\n    class MyClass:\n        items = []",
    "target": "Avoid mutable default attributes in classes to prevent unexpected behavior."
  },
  {
    "func": "def ambiguous_condition():\n    if a == b:\n        return 'Equal'\n    elif a == 10:\n        return 'Ten'\n    elif a == b:\n        return 'Still Equal'",
    "target": "Avoid overlapping or ambiguous conditions in conditional statements."
  },
  {
    "func": "def implicit_fallback_behavior(data):\n    return data.get('key')",
    "target": "Provide explicit fallback values for dictionary lookups."
  },
  {
    "func": "def unused_function_argument(a, b):\n    return a",
    "target": "Remove unused function arguments to avoid confusion."
  },
  {
    "func": "def mixed_loop_styles():\n    for i in range(10):\n        print(i)\n    j = 0\n    while j < 10:\n        print(j)\n        j += 1",
    "target": "Use consistent looping styles for better readability."
  },
  {
    "func": "def excessive_inline_comments():\n    x = 10  # This is a number\n    y = 20  # Another number\n    return x + y",
    "target": "Avoid excessive inline comments. Ensure comments add meaningful context."
  },
  {
    "func": "def excessive_repetition_in_code():\n    print('Processing Step 1')\n    print('Processing Step 2')\n    print('Processing Step 3')",
    "target": "Refactor repeated code into reusable functions or loops."
  },
  {
    "func": "def missing_enumerate_in_loops():\n    for i in range(len(data)):\n        print(i, data[i])",
    "target": "Use `enumerate()` for better readability when looping with indices."
  },
  {
    "func": "def inefficient_use_of_comprehension():\n    data = [x for x in range(10)]\n    return data",
    "target": "Avoid unnecessary comprehensions. Use `list(range(10))` for clarity."
  },
  {
    "func": "def improper_function_placement():\n    def helper_function():\n        pass\n\n    def main_function():\n        helper_function()",
    "target": "Order functions logically with main functions at the top or bottom."
  },
  {
    "func": "def overuse_of_static_methods():\n    @staticmethod\n    def process():\n        return True",
    "target": "Limit the use of static methods. Use instance methods for better design."
  },
  {
    "func": "def inconsistent_variable_naming():\n    x = 10\n    y = 20\n    return x + y",
    "target": "Use consistent variable naming conventions for better code readability."
  },
  {
    "func": "def excessive_function_parameters():\n    def process(a, b, c, d, e, f):\n        return a + b + c + d + e + f",
    "target": "Limit the number of function parameters. Use objects or dictionaries for complex data."
  },
  {
    "func": "def unnecessary_list_comprehension():\n    data = [x for x in range(10)]\n    return data",
    "target": "Avoid unnecessary list comprehensions. Use `list(range(10))` for clarity."
  },
  {
    "func": "def inconsistent_function_naming():\n    def calculateSum():\n        return 42",
    "target": "Use consistent function naming conventions like snake_case."
  },
  {
    "func": "def excessive_function_length():\n    def long_function():\n        # Over 100 lines of code\n        pass",
    "target": "Refactor long functions into smaller, more manageable functions."
  },
  {
    "func": "def inconsistent_spacing_around_operators():\n    a=10\n    b = 20\n    return a+b",
    "target": "Use consistent spacing around operators for better code readability."
  },
  {
    "func": "def improper_use_of_try_finally():\n    try:\n        risky_operation()\n    finally:\n        cleanup()",
    "target": "Ensure exceptions are caught and logged in `try-finally` blocks."
  },
  {
    "func": "def overcomplicated_default_values(data=None):\n    if data is None:\n        data = []\n    return data",
    "target": "Use default immutable arguments directly, like `data=None`."
  },
  {
    "func": "def ambiguous_code_with_nested_loops():\n    for i in range(10):\n        for j in range(10):\n            if i * j > 10:\n                return i",
    "target": "Avoid ambiguous nested loops by refactoring into functions with descriptive names."
  },
  {
    "func": "def unrelated_function_logic():\n    def send_email():\n        return calculate_sum(1, 2)",
    "target": "Keep function logic focused on a single responsibility."
  },
  {
    "func": "def silent_ignore_of_os_errors():\n    try:\n        os.remove('file.txt')\n    except OSError:\n        pass",
    "target": "Log OS errors even if they are ignored to trace potential issues."
  },
  {
    "func": "def inefficient_use_of_memory():\n    data = [x**2 for x in range(10**6)]\n    return sum(data)",
    "target": "Use generator expressions to avoid excessive memory usage."
  },
  {
    "func": "def unnecessary_early_return():\n    if condition:\n        return True\n    return False",
    "target": "Combine early returns to simplify code."
  },
  {
    "func": "def improper_function_chaining():\n    return method1().method2().method3()",
    "target": "Break function chains into intermediate steps for clarity."
  },
  {
    "func": "def large_unstructured_code_block():\n    # 100 lines of unstructured code\n    return True",
    "target": "Break large, unstructured code blocks into smaller functions."
  },
  {
    "func": "def improper_use_of_constants_in_code():\n    GRAVITY = 9.8\n    return 9.8 * mass",
    "target": "Use constants consistently across the codebase to avoid magic numbers."
  },
  {
    "func": "def ambiguous_type_handling(data):\n    if isinstance(data, int):\n        return data * 2\n    return str(data)",
    "target": "Avoid ambiguous type handling. Enforce strict type checks."
  },
  {
    "func": "def overuse_of_helper_functions():\n    def helper1():\n        pass\n    def helper2():\n        pass",
    "target": "Avoid excessive helper functions. Group related logic into meaningful units."
  },
  {
    "func": "def misused_inheritance():\n    class A:\n        pass\n    class B(A):\n        pass",
    "target": "Avoid inheritance when composition can achieve better flexibility."
  },
  {
    "func": "def unused_parameters_in_functions(a, b):\n    return a",
    "target": "Remove unused parameters to make function definitions clearer."
  },
  {
    "func": "def repeated_hardcoded_logic():\n    if user.role == 'admin':\n        return 'Admin Access'\n    if user.role == 'admin':\n        return 'Admin Access'",
    "target": "Refactor repeated logic into reusable functions."
  },
  {
    "func": "def missing_boundary_checks(x):\n    return array[x]",
    "target": "Add boundary checks for array and list access to prevent IndexErrors."
  },
  {
    "func": "def hidden_dependency_in_code():\n    return external_service.get_data()",
    "target": "Avoid hidden dependencies. Pass dependencies explicitly."
  },
  {
    "func": "def excessive_lambda_usage():\n    result = lambda x: x + 1\n    return result(5)",
    "target": "Avoid excessive use of lambda functions. Use named functions for clarity."
  },
  {
    "func": "def non_standard_iteration():\n    for index in range(0, len(data)):\n        item = data[index]\n        process(item)",
    "target": "Use direct iteration over lists for better readability."
  },
  {
    "func": "def misconfigured_logging():\n    logging.debug('Important message')",
    "target": "Use appropriate logging levels based on the importance of the message."
  },
  {
    "func": "def unsafe_dictionary_update():\n    data.update({'key': 'value'})",
    "target": "Validate inputs before updating dictionaries to prevent overwriting critical keys."
  },
  {
    "func": "def hardcoded_debug_mode():\n    DEBUG = True\n    if DEBUG:\n        print('Debugging enabled')",
    "target": "Avoid hardcoding debug modes. Use configuration management instead."
  },
  {
    "func": "def improper_resource_synchronization():\n    shared_resource += 1",
    "target": "Use synchronization primitives like locks to prevent race conditions."
  },
  {
    "func": "def inconsistent_return_style():\n    if x:\n        return True\n    return",
    "target": "Ensure consistent return styles across all code paths."
  },
  {
    "func": "def poorly_named_temp_variable():\n    tmp = 42\n    return tmp",
    "target": "Use meaningful variable names instead of temporary placeholders."
  },
  {
    "func": "def insufficient_security_in_headers():\n    response.headers['X-Powered-By'] = 'Flask'",
    "target": "Remove sensitive information from headers to avoid exposing technology stack."
  },
  {
    "func": "def redundant_code_block():\n    if condition:\n        return True\n    else:\n        return False",
    "target": "Simplify redundant `if-else` structures for cleaner code."
  },
  {
    "func": "def misleading_variable_scope():\n    for i in range(10):\n        j = i\n    return j",
    "target": "Avoid using variables defined in a loop outside their intended scope."
  },
  {
    "func": "def insufficient_event_logging():\n    if error:\n        handle_error()",
    "target": "Log critical events like errors or unexpected behavior for monitoring."
  },
  {
    "func": "def overuse_of_exception_catching():\n    try:\n        risky_operation()\n    except Exception as e:\n        return 'Error occurred'",
    "target": "Avoid catching generic exceptions unnecessarily. Catch specific exceptions."
  },
  {
    "func": "def repeated_literal_in_code():\n    if status == 200:\n        return 'OK'\n    elif status == 404:\n        return 'Not Found'",
    "target": "Replace repeated literals with named constants for clarity and maintainability."
  },
  {
    "func": "def inefficient_exception_handling():\n    try:\n        data = risky_function()\n    except Exception:\n        return None",
    "target": "Handle specific exceptions instead of catching all exceptions."
  },
  {
    "func": "def unnecessary_complexity_in_loops():\n    for i in range(len(data)):\n        for j in range(i, len(data)):\n            process(data[i], data[j])",
    "target": "Avoid nested loops where performance can be improved with optimized algorithms."
  },
  {
    "func": "def redundant_return_statement():\n    if x > 0:\n        return True\n    else:\n        return False",
    "target": "Simplify redundant return statements by directly returning the condition."
  },
  {
    "func": "def unsafe_string_formatting(user_input):\n    return 'Hello, {}'.format(user_input)",
    "target": "Sanitize user input in string formatting to avoid injection vulnerabilities."
  },
  {
    "func": "def inconsistent_variable_casing():\n    userName = 'John'\n    user_email = 'john@example.com'",
    "target": "Follow consistent naming conventions like snake_case for variables."
  },
  {
    "func": "def repeated_code_block():\n    if condition1:\n        do_something()\n    if condition2:\n        do_something()",
    "target": "Refactor repeated code blocks into reusable functions."
  },
  {
    "func": "def missing_logging_context():\n    logger.info('Task completed')",
    "target": "Add context (e.g., task ID or user ID) to log messages for debugging."
  },
  {
    "func": "def improper_variable_initialization():\n    value = None\n    if condition:\n        value = 10\n    return value",
    "target": "Avoid partial initialization of variables. Provide default values where possible."
  },
  {
    "func": "def missing_test_case_for_edge_condition():\n    def divide(a, b):\n        return a / b",
    "target": "Ensure edge conditions (e.g., division by zero) are tested."
  },
  {
    "func": "def unused_class():\n    class Helper:\n        pass",
    "target": "Remove unused classes to reduce code clutter."
  },
  {
    "func": "def overuse_of_boolean_flags():\n    def calculate(is_active):\n        if is_active:\n            return process_active()\n        return process_inactive()",
    "target": "Avoid excessive use of boolean flags. Use meaningful parameter names or enums."
  },
  {
    "func": "def ambiguous_function_name():\n    def handle_data():\n        return True",
    "target": "Use descriptive function names to clearly define their purpose."
  },
  {
    "func": "def hardcoded_file_extension():\n    file_name = 'report.txt'\n    return file_name",
    "target": "Avoid hardcoding file extensions. Use configuration files or constants."
  },
  {
    "func": "def inefficient_string_search():\n    if string.find('keyword') != -1:\n        return True",
    "target": "Use `in` instead of `find()` for string searches for better readability."
  },
  {
    "func": "def poorly_named_function():\n    def func1():\n        return True",
    "target": "Use descriptive function names that convey the action or purpose."
  },
  {
    "func": "def missing_type_annotations():\n    def add(a, b):\n        return a + b",
    "target": "Add type annotations to function arguments and return values for clarity."
  },
  {
    "func": "def inefficient_use_of_collections():\n    data = []\n    for x in range(10):\n        data.append(x)",
    "target": "Use list comprehensions for concise and efficient code."
  },
  {
    "func": "def unsafe_file_permission():\n    os.chmod('file.txt', 0o777)",
    "target": "Avoid overly permissive file permissions. Use the principle of least privilege."
  },
  {
    "func": "def unused_loop_variable():\n    for i in range(10):\n        pass",
    "target": "Use `_` for loop variables that are intentionally unused."
  },
  {
    "func": "def unnecessary_list_conversion():\n    data = list([1, 2, 3])",
    "target": "Avoid unnecessary conversions to improve performance and readability."
  },
  {
    "func": "def insecure_data_storage():\n    stored_password = password",
    "target": "Encrypt sensitive data before storing it to protect against unauthorized access."
  },
  {
    "func": "def redundant_condition_check():\n    if x > 10 and x > 5:\n        return True",
    "target": "Simplify conditions by removing redundant checks."
  },
  {
    "func": "def misaligned_function_comments():\n    # This function adds two numbers\n    def add(a, b):\n        return a + b",
    "target": "Align comments with the function they describe for better readability."
  },
  {
    "func": "def unnecessary_mutable_argument(data=[]):\n    data.append(1)\n    return data",
    "target": "Avoid mutable default arguments to prevent unexpected behavior."
  },
  {
    "func": "def hardcoded_error_code():\n    return {'status': 500, 'message': 'Internal Error'}",
    "target": "Replace hardcoded error codes with enumerations or constants."
  },
  {
    "func": "def ambiguous_return_value():\n    if condition:\n        return 'Success'\n    return 1",
    "target": "Use consistent return types to avoid confusion."
  },
  {
    "func": "def unused_catch_variable():\n    try:\n        risky_function()\n    except Exception as e:\n        pass",
    "target": "Use or remove unused exception variables for clarity."
  },
  {
    "func": "def excessive_class_responsibility():\n    class User:\n        def login(self): pass\n        def logout(self): pass\n        def reset_password(self): pass\n        def update_profile(self): pass",
    "target": "Follow the Single Responsibility Principle. Break large classes into smaller, focused ones."
  },
  {
    "func": "def long_chain_of_ifs():\n    if condition1:\n        return 'A'\n    elif condition2:\n        return 'B'\n    elif condition3:\n        return 'C'",
    "target": "Replace long `if-elif` chains with a mapping or dictionary."
  },
  {
    "func": "def missing_parentheses():\n    print 'Hello World'",
    "target": "Add parentheses to function calls to adhere to modern Python syntax."
  },
  {
    "func": "def inefficient_loop():\n    for i in range(len(my_list)):\n        print(my_list[i])",
    "target": "Use `for item in my_list` instead of indexing for cleaner and faster iteration."
  },
  {
    "func": "def nested_try_blocks():\n    try:\n        try:\n            risky_function()\n        except ValueError:\n            handle_value_error()\n    except Exception:\n        handle_general_error()",
    "target": "Avoid nested try blocks. Combine or refactor them for clarity."
  },
  {
    "func": "def missing_finally():\n    try:\n        file = open('data.txt', 'r')\n        data = file.read()\n    except Exception:\n        print('Error reading file')",
    "target": "Use a `finally` block to ensure resources like files are always closed."
  },
  {
    "func": "def hardcoded_colors():\n    color = '#FF5733'\n    return color",
    "target": "Avoid hardcoding colors. Use a configuration file or constants."
  },
  {
    "func": "def inefficient_key_check(dictionary, key):\n    if key in dictionary.keys():\n        return dictionary[key]",
    "target": "Use `if key in dictionary:` to check for keys more efficiently."
  },
  {
    "func": "def unnecessary_lambda():\n    func = lambda x: x * 2\n    return func(5)",
    "target": "Avoid unnecessary lambdas. Use a regular function instead."
  },
  {
    "func": "def inconsistent_indentation():\n    if x > 5:\n        print('x is large')\n       print('Check this line')",
    "target": "Fix inconsistent indentation to adhere to style guidelines."
  },
  {
    "func": "def global_state_dependency():\n    global x\n    x += 1\n    return x",
    "target": "Avoid using global variables to prevent unintended side effects."
  },
  {
    "func": "def unreachable_code_with_loops():\n    while True:\n        break\n        print('Unreachable')",
    "target": "Remove unreachable code to improve maintainability."
  },
  {
    "func": "def inefficient_data_structure():\n    my_dict = {}\n    my_dict['key1'] = 'value1'\n    return my_dict",
    "target": "Use dictionary literals `{}` for better readability and performance."
  },
  {
    "func": "def redundant_comparison():\n    if x != None:\n        return True",
    "target": "Use `if x is not None` instead of `x != None` for better clarity."
  },
  {
    "func": "def inefficient_split_join():\n    words = sentence.split(' ')\n    new_sentence = ' '.join(words)\n    return new_sentence",
    "target": "Avoid unnecessary `split` and `join`. Use the string as-is if unchanged."
  },
  {
    "func": "def exception_swallowing():\n    try:\n        risky_function()\n    except:\n        pass",
    "target": "Avoid swallowing exceptions. Log or handle them appropriately."
  },
  {
    "func": "def unused_default_parameters(a, b=10):\n    return a",
    "target": "Remove unused default parameters for clarity."
  },
  {
    "func": "def infinite_recursion():\n    def recurse():\n        return recurse()\n    return recurse()",
    "target": "Avoid infinite recursion. Add a base case to terminate the recursion."
  },
  {
    "func": "def hardcoded_urls():\n    url = 'http://example.com'\n    return url",
    "target": "Avoid hardcoding URLs. Use configuration or environment variables."
  },
  {
    "func": "def over_engineered_solution():\n    def add(a, b):\n        result = a + b\n        return result\n    return add(2, 3)",
    "target": "Avoid over-engineering. Simplify functions where possible."
  },
  {
    "func": "def mutable_default_argument(data=[]):\n    data.append(5)\n    return data",
    "target": "Avoid mutable default arguments to prevent unexpected behavior."
  },
  {
    "func": "def excessive_comments():\n    # This is a comment\n    # Another comment\n    # Yet another comment\n    result = 42  # Final comment\n    return result",
    "target": "Avoid excessive comments. Use clear code and concise documentation."
  },
  {
    "func": "def missing_context_manager():\n    file = open('data.txt', 'w')\n    file.write('Hello World')\n    file.close()",
    "target": "Use a context manager (`with open(...)`) to ensure proper resource handling."
  },
  {
    "func": "def inconsistent_variable_case():\n    userName = 'Alice'\n    UserName = 'Bob'\n    return userName",
    "target": "Follow consistent naming conventions for variables."
  },
  {
    "func": "def unnecessary_check():\n    if len(my_list) > 0:\n        print(my_list[0])",
    "target": "Avoid unnecessary checks. Use `if my_list:` instead of `if len(my_list) > 0`."
  },
  {
    "func": "def insecure_random():\n    import random\n    return random.randint(1, 10)",
    "target": "Use `secrets` module for secure random number generation in sensitive contexts."
  },
  {
    "func": "def unused_function():\n    def helper():\n        return 42\n    return 0",
    "target": "Remove unused functions to reduce clutter."
  },
  {
    "func": "def long_inline_expression():\n    result = (a + b) * c / (d - e) + (f * g) / h\n    return result",
    "target": "Break down long expressions into multiple lines for better readability."
  },
  {
    "func": "def magic_string_comparison():\n    if status == 'active':\n        return True",
    "target": "Avoid magic strings. Use named constants for better clarity."
  },
  {
    "func": "def redundant_pass():\n    def function():\n        pass",
    "target": "Avoid redundant `pass` in empty functions or blocks."
  },
  {
    "func": "def duplicate_code_segments():\n    def add(a, b):\n        return a + b\n    def sum(a, b):\n        return a + b",
    "target": "Refactor duplicate code segments into a single function."
  },
  {
    "func": "def large_classes():\n    class MyClass:\n        def method1(self): pass\n        def method2(self): pass\n        # 100 more methods\n    return MyClass",
    "target": "Break down large classes into smaller, more focused classes."
  },
  {
    "func": "def insecure_password_storage(password):\n    stored_password = password\n    return stored_password",
    "target": "Avoid storing passwords in plaintext. Use a secure hashing algorithm like bcrypt."
  },
  {
    "func": "def unnecessary_complexity(x):\n    if x % 2 == 0:\n        if x > 10:\n            return 'Even and greater than 10'\n    else:\n        return 'Other'",
    "target": "Simplify nested conditions for better readability and maintainability."
  },
  {
    "func": "def unused_class_variable():\n    class MyClass:\n        unused_var = 42\n        def method(self):\n            return 0",
    "target": "Remove unused class variables to reduce confusion and improve clarity."
  },
  {
    "func": "def hardcoded_http_url():\n    url = 'http://example.com'\n    return url",
    "target": "Use HTTPS instead of HTTP for secure communication."
  },
  {
    "func": "def missing_docstring():\n    def add(a, b):\n        return a + b",
    "target": "Add a docstring to describe the function’s purpose and behavior."
  },
  {
    "func": "def inconsistent_spacing():\n    a=10\n    b = 20\n    c= 30",
    "target": "Use consistent spacing around operators for better readability."
  },
  {
    "func": "def hardcoded_path():\n    path = '/usr/local/data.txt'\n    return path",
    "target": "Avoid hardcoding file paths. Use configuration files or environment variables."
  },
  {
    "func": "def unchecked_input(data):\n    return data.strip()",
    "target": "Validate and sanitize user inputs to prevent potential injection attacks."
  },
  {
    "func": "def inefficient_string_concat():\n    result = ''\n    for word in words:\n        result += word",
    "target": "Use `str.join` for efficient string concatenation in loops."
  },
  {
    "func": "def insecure_temp_file():\n    import tempfile\n    temp = tempfile.NamedTemporaryFile(delete=False)\n    return temp.name",
    "target": "Avoid creating insecure temporary files. Use `delete=True` or secure configurations."
  },
  {
    "func": "def missing_type_hints(a, b):\n    return a + b",
    "target": "Add type hints to improve code clarity and enable static analysis."
  },
  {
    "func": "def redundant_if_else(flag):\n    if flag:\n        return True\n    else:\n        return False",
    "target": "Simplify to `return flag` for better readability."
  },
  {
    "func": "def overcomplicated_expression(a, b, c):\n    return (a + b) - c if (a + b) > c else c - (a + b)",
    "target": "Refactor overcomplicated expressions for clarity."
  },
  {
    "func": "def insecure_command_execution(cmd):\n    import os\n    os.system(cmd)",
    "target": "Avoid using `os.system` for command execution. Use `subprocess` with proper sanitization."
  },
  {
    "func": "def missing_input_validation(age):\n    if age > 18:\n        return 'Adult'",
    "target": "Validate input types and ranges to ensure robustness."
  },
  {
    "func": "def inefficient_set_check(item):\n    if item in [1, 2, 3, 4, 5]:\n        return True",
    "target": "Use a set for faster membership checks."
  },
  {
    "func": "def open_socket_without_closing():\n    import socket\n    s = socket.socket()\n    s.connect(('example.com', 80))",
    "target": "Ensure sockets are closed properly or use a context manager."
  },
  {
    "func": "def mutable_key_in_dict():\n    my_dict = {{[1, 2]: 'value'}}\n    return my_dict",
    "target": "Avoid using mutable types like lists as dictionary keys."
  },
  {
    "func": "def too_many_return_statements(x):\n    if x == 1:\n        return 'One'\n    elif x == 2:\n        return 'Two'\n    else:\n        return 'Other'",
    "target": "Limit the number of return statements to improve code readability."
  },
  {
    "func": "def unused_parameter(a, b, c):\n    return a + b",
    "target": "Remove unused parameters to simplify the function signature."
  },
  {
    "func": "def weak_password_check(password):\n    if len(password) < 8:\n        return False\n    return True",
    "target": "Enhance password validation by checking for complexity, not just length."
  },
  {
    "func": "def empty_if_block():\n    if condition:\n        pass",
    "target": "Avoid empty code blocks. Add meaningful logic or remove the condition."
  },
  {
    "func": "def ambiguous_function_name():\n    def do_stuff():\n        return 42",
    "target": "Use descriptive function names to clarify intent."
  },
  {
    "func": "def inefficient_list_copy():\n    new_list = [item for item in old_list]\n    return new_list",
    "target": "Use `new_list = old_list.copy()` for a more efficient list copy."
  },
  {
    "func": "def insecure_file_permissions():\n    with open('data.txt', 'w') as file:\n        file.write('content')",
    "target": "Set secure file permissions when creating sensitive files."
  },
  {
    "func": "def redundant_variable_assignment():\n    x = 42\n    y = x\n    return y",
    "target": "Remove redundant variable assignments to simplify the code."
  },
  {
    "func": "def long_parameter_list(a, b, c, d, e, f, g, h, i):\n    return a + b + c",
    "target": "Break long parameter lists into smaller, grouped structures like classes or dictionaries."
  },
  {
    "func": "def duplicate_logic(x):\n    if x > 0:\n        return 'Positive'\n    elif x == 0:\n        return 'Zero'\n    elif x < 0:\n        return 'Negative'",
    "target": "Combine duplicate logic for cleaner and more efficient code."
  },
  {
    "func": "def insecure_deserialization(data):\n    import pickle\n    obj = pickle.loads(data)\n    return obj",
    "target": "Avoid insecure deserialization with `pickle`. Use safe alternatives like `json`."
  },
  {
    "func": "def unnecessary_try_finally():\n    try:\n        x = 10\n    finally:\n        print('Done')",
    "target": "Remove unnecessary `try-finally` blocks when there’s no exception handling required."
  },
  {
    "func": "def insecure_shell_command(user_input):\n    os.system(f'ping {user_input}')",
    "target": "Avoid using user input in shell commands. Sanitize input and use secure subprocess alternatives."
  },
  {
    "func": "def nested_ternary(a, b):\n    return 'Equal' if a == b else 'Greater' if a > b else 'Smaller'",
    "target": "Avoid nested ternary operators. Use a simple if-else block for clarity."
  },
  {
    "func": "def inefficient_list_comprehension():\n    result = [x*2 for x in range(1000000)]",
    "target": "Avoid creating large intermediate lists. Use a generator expression instead."
  },
  {
    "func": "def hardcoded_user_role():\n    user_role = 'admin'\n    return user_role",
    "target": "Avoid hardcoding roles. Use configuration files or constants."
  },
  {
    "func": "def empty_catch_block():\n    try:\n        risky_operation()\n    except Exception:\n        pass",
    "target": "Avoid empty exception blocks. Handle exceptions appropriately or log them."
  },
  {
    "func": "def insecure_random_number():\n    import random\n    return random.randint(1, 100)",
    "target": "Use a cryptographically secure random number generator like `secrets` for sensitive data."
  },
  {
    "func": "def redundant_code():\n    if x > 0:\n        return x\n    else:\n        return x",
    "target": "Remove redundant code paths to improve clarity."
  },
  {
    "func": "def missing_context_manager():\n    file = open('data.txt', 'r')\n    data = file.read()\n    file.close()\n    return data",
    "target": "Use a context manager (`with`) to ensure files are properly closed."
  },
  {
    "func": "def inconsistent_naming():\n    def myFunction():\n        return True",
    "target": "Use consistent naming conventions (e.g., snake_case for Python)."
  },
  {
    "func": "def missing_return(x):\n    if x > 0:\n        return 'Positive'",
    "target": "Ensure all code paths in a function have a return statement."
  },
  {
    "func": "def unhandled_unicode(data):\n    print(data.encode('ascii'))",
    "target": "Handle Unicode properly to avoid encoding errors."
  },
  {
    "func": "def redundant_import():\n    import math\n    import math\n    return math.pi",
    "target": "Remove duplicate imports to reduce clutter."
  },
  {
    "func": "def inefficient_sort():\n    items.sort(key=lambda x: x.lower())",
    "target": "Use `str.casefold()` instead of `lower()` for more accurate sorting."
  },
  {
    "func": "def redundant_boolean_comparison(x):\n    return x == True",
    "target": "Avoid redundant boolean comparisons. Simplify to `return x`."
  },
  {
    "func": "def unsafe_eval():\n    return eval('1 + 2')",
    "target": "Avoid `eval`. Use safer alternatives or explicit parsing."
  },
  {
    "func": "def over_engineered_code(a, b):\n    return sum([a, b])",
    "target": "Avoid over-engineering. Use `a + b` instead of `sum()` for two values."
  },
  {
    "func": "def unused_loop_variable():\n    for _ in range(5):\n        pass",
    "target": "Consider removing unused loops or adding meaningful logic."
  },
  {
    "func": "def mutable_default_args(x, y=[]):\n    y.append(x)\n    return y",
    "target": "Avoid mutable default arguments to prevent unexpected behavior."
  },
  {
    "func": "def insecure_file_permissions():\n    os.chmod('file.txt', 0o777)",
    "target": "Avoid setting overly permissive file permissions."
  },
  {
    "func": "def long_line_of_code():\n    result = x + y + z + a + b + c + d + e + f + g + h + i + j + k + l",
    "target": "Break long lines into multiple lines for better readability."
  },
  {
    "func": "def ambiguous_variable_name():\n    x = 42\n    return x",
    "target": "Use descriptive variable names to clarify their purpose."
  },
  {
    "func": "def unused_return_value():\n    data.sort()\n    return data",
    "target": "Be aware that `list.sort()` modifies the list in place and returns None."
  },
  {
    "func": "def missing_logging():\n    try:\n        risky_operation()\n    except Exception as e:\n        pass",
    "target": "Log exceptions for better debugging and traceability."
  },
  {
    "func": "def unoptimized_search(items, target):\n    for item in items:\n        if item == target:\n            return True\n    return False",
    "target": "Use `in` for membership checks on lists for simplicity and performance."
  },
  {
    "func": "def insecure_dependency_version():\n    install_package('some_package', version='1.0')",
    "target": "Avoid using outdated or insecure dependency versions."
  },
  {
    "func": "def improper_variable_scope():\n    if True:\n        temp = 42\n    return temp",
    "target": "Avoid relying on variables defined inside conditional blocks."
  },
  {
    "func": "def missing_constant_usage():\n    return 3.14159",
    "target": "Use named constants instead of magic numbers."
  },
  {
    "func": "def unnecessary_try_block():\n    try:\n        x = 42\n    except:\n        pass",
    "target": "Remove unnecessary try blocks where no exception is expected."
  },
  {
    "func": "def insecure_hardcoded_url():\n    url = 'http://api.example.com/v1/resource'\n    return url",
    "target": "Avoid hardcoding URLs. Use configuration files or environment variables."
  },
  {
    "func": "def poor_error_handling():\n    try:\n        risky_code()\n    except FileNotFoundError:\n        return 'File not found'\n    except Exception:\n        pass",
    "target": "Handle generic exceptions properly and avoid silent failures."
  },
  {
    "func": "def hardcoded_email():\n    email = 'admin@example.com'\n    return email",
    "target": "Avoid hardcoding sensitive data like emails. Use configuration files or environment variables."
  },
  {
    "func": "def redundant_if_statement(x):\n    if x:\n        return True\n    else:\n        return False",
    "target": "Simplify redundant if statements. Use `return x` for boolean values."
  },
  {
    "func": "def insecure_cookie_handling():\n    response.set_cookie('session', session_id)",
    "target": "Ensure cookies are set with secure attributes like `HttpOnly` and `Secure`."
  },
  {
    "func": "def unused_function():\n    def helper():\n        return 42\n    return True",
    "target": "Remove unused functions to reduce code clutter."
  },
  {
    "func": "def missing_docstring():\n    def add(a, b):\n        return a + b",
    "target": "Add docstrings to improve code readability and maintainability."
  },
  {
    "func": "def inefficient_string_concatenation():\n    result = ''\n    for word in words:\n        result += word",
    "target": "Avoid string concatenation in loops. Use `join()` for better performance."
  },
  {
    "func": "def exception_swallowing():\n    try:\n        risky_operation()\n    except KeyError:\n        return None",
    "target": "Avoid exception swallowing. Log errors or re-raise exceptions for debugging."
  },
  {
    "func": "def non_thread_safe_code():\n    global counter\n    counter += 1\n    return counter",
    "target": "Avoid non-thread-safe code. Use thread-safe constructs like `threading.Lock`."
  },
  {
    "func": "def improper_exit_handling():\n    import sys\n    sys.exit(1)",
    "target": "Avoid using `sys.exit` in libraries. Raise exceptions instead for proper handling."
  },
  {
    "func": "def missing_validation(user_input):\n    return user_input",
    "target": "Validate user input to ensure it meets expected constraints."
  },
  {
    "func": "def unoptimized_database_query():\n    results = db.query('SELECT * FROM users WHERE age > 18')\n    return results",
    "target": "Optimize database queries to fetch only required columns and rows."
  },
  {
    "func": "def static_method_missing_annotation():\n    def utility_function(cls):\n        return 42",
    "target": "Mark static utility methods with `@staticmethod` for clarity."
  },
  {
    "func": "def inadequate_logging():\n    print('Operation completed')",
    "target": "Use proper logging instead of `print()` for better debugging and monitoring."
  },
  {
    "func": "def inefficient_data_structure():\n    items = []\n    for i in range(100):\n        items.append(i)\n    return items",
    "target": "Consider using list comprehensions or appropriate data structures for better performance."
  },
  {
    "func": "def resource_exhaustion():\n    for i in range(10**10):\n        print(i)",
    "target": "Avoid resource-intensive operations that can exhaust system resources."
  },
  {
    "func": "def authenticate_user(user_input):\n    query = f\"SELECT * FROM users WHERE username = '{user_input}'\"\n    print('Executing query:', query)",
    "target": "Avoid SQL injection by using parameterized queries instead of string formatting."
  },
  {
    "func": "def eval_execution(data):\n    return eval(data)",
    "target": "Avoid `eval()` as it can execute arbitrary code. Use `ast.literal_eval` when parsing strings."
  },
  {
    "func": "def insecure_file_write():\n    with open('data.txt', 'w') as f:\n        f.write('sensitive data')",
    "target": "Avoid hardcoded file paths and use secure file permissions."
  },
  {
    "func": "def weak_hashing(password):\n    import hashlib\n    return hashlib.md5(password.encode()).hexdigest()",
    "target": "Avoid MD5 for password hashing. Use `bcrypt` or `argon2` instead."
  },
  {
    "func": "def excessive_function_length():\n    def calculate():\n        x = 1\n        y = 2\n        result = x + y\n        return result\n    return calculate()",
    "target": "Break down large functions into smaller, more maintainable units."
  },
  {
    "func": "def unnecessary_global_variable():\n    global counter\n    counter = 0",
    "target": "Avoid using global variables to maintain code modularity."
  },
  {
    "func": "def hardcoded_api_key():\n    api_key = '12345-ABCDE'\n    return api_key",
    "target": "Avoid hardcoding secrets. Use environment variables instead."
  },
  {
    "func": "def deep_nested_loops():\n    for i in range(5):\n        for j in range(5):\n            for k in range(5):\n                print(i, j, k)",
    "target": "Refactor deep nested loops for better readability."
  },
  {
    "func": "def missing_docstring():\n    def add(a, b):\n        return a + b",
    "target": "Add descriptive docstrings to improve code maintainability."
  },
  {
    "func": "def unsafe_os_command(command):\n    import os\n    os.system(command)",
    "target": "Avoid using `os.system` with unsanitized input. Use `subprocess.run` with safe parameters."
  },
  {
    "func": "def magic_number_usage():\n    if x == 7:\n        print('Lucky')",
    "target": "Replace magic numbers with named constants."
  },
  {
    "func": "def missing_type_annotations():\n    def calculate(a, b):\n        return a + b",
    "target": "Add type annotations for better code clarity."
  },
  {
    "func": "def long_chained_calls():\n    return obj.method1().method2().method3()",
    "target": "Avoid long chains of method calls; assign intermediate results to variables."
  },
  {
    "func": "def resource_leak():\n    f = open('data.txt', 'r')\n    data = f.read()\n    return data",
    "target": "Use `with open()` context manager to handle file operations properly."
  },
  {
    "func": "def insecure_random_number():\n    import random\n    return random.randint(1, 100)",
    "target": "Use `secrets` module for generating secure random numbers."
  },
  {
    "func": "def inconsistent_naming():\n    def CalculateSum(a, b):\n        return a + b",
    "target": "Follow naming conventions like `snake_case` in Python."
  },
  {
    "func": "def unused_import():\n    import math\n    return 42",
    "target": "Remove unused imports to improve code clarity."
  },
  {
    "func": "def hardcoded_ip():\n    server_ip = '192.168.1.1'\n    return server_ip",
    "target": "Avoid hardcoding IP addresses; use configuration files instead."
  },
  {
    "func": "def empty_exception_handler():\n    try:\n        x = 1/0\n    except Exception:\n        pass",
    "target": "Avoid empty exception handlers; log the error instead."
  },
  {
    "func": "def inconsistent_whitespace():\n    a=1\n    b = 2",
    "target": "Use consistent whitespace for better readability."
  },
  {
    "func": "def missing_input_validation(user_input):\n    print('Input:', user_input)",
    "target": "Validate and sanitize user inputs to prevent injection attacks."
  },
  {
    "func": "def inefficient_list_search(items, target):\n    for item in items:\n        if item == target:\n            return True",
    "target": "Use `in` for list membership checks."
  },
  {
    "func": "def improper_exception_type():\n    try:\n        x = int('abc')\n    except ValueError:\n        print('Error')",
    "target": "Use specific exception types for better clarity."
  },
  {
    "func": "def nested_dict_iteration():\n    for key1, val1 in data.items():\n        for key2, val2 in val1.items():\n            for key3, val3 in val2.items():\n                for key4, val4 in val3.items():\n                    for key5, val5 in val4.items():\n                        process(val5)",
    "target": "Reduce deep nesting in dictionary iteration (5 levels detected). Consider flattening the structure."
  },
  {
    "func": "def redundant_comparison():\n    if x == True:\n        return True",
    "target": "Avoid redundant boolean comparisons. Use `if x:`."
  },
  {
    "func": "def incomplete_logging():\n    import logging\n    logging.info('Something happened')",
    "target": "Include context like timestamps or user IDs in logs."
  },
  {
    "func": "def overcomplicated_expression():\n    result = ((a + b) * c) / d",
    "target": "Simplify complex expressions for better readability."
  },
  {
    "func": "def unsafe_file_handling():\n    with open('file.txt', 'w') as f:\n        f.write(data)",
    "target": "Validate file paths to prevent directory traversal."
  },
  {
    "func": "def weak_password_policy(password):\n    if len(password) < 6:\n        return False",
    "target": "Enforce strong password policies beyond length."
  },
  {
    "func": "def missing_finally_clause():\n    f = open('file.txt', 'r')\n    data = f.read()",
    "target": "Ensure files are closed with `finally` or `with`."
  },
  {
    "func": "def hardcoded_port_number():\n    port = 8080",
    "target": "Avoid hardcoding port numbers. Use configuration files."
  },
  {
    "func": "def inconsistent_return_types(x):\n    if x > 0:\n        return 'Positive'\n    else:\n        return 0",
    "target": "Ensure functions return consistent types to avoid confusion."
  },
  {
    "func": "def overly_long_function():\n    result = 0\n    for i in range(100):\n        result += i\n    print(result)\n    for j in range(100):\n        result -= j\n    print(result)",
    "target": "Refactor long functions into smaller, reusable functions."
  },
  {
    "func": "def nested_control_structures():\n    for i in range(5):\n        if i % 2 == 0:\n            for j in range(5):\n                print(i, j)",
    "target": "Reduce nested loops to improve readability."
  },
  {
    "func": "def magic_values():\n    if score >= 42:\n        print('Pass')",
    "target": "Replace magic numbers with named constants."
  },
  {
    "func": "def insufficient_modularity():\n    x = 1\n    y = 2\n    z = x + y\n    print(z)",
    "target": "Modularize code into separate functions for maintainability."
  },
  {
    "func": "def inconsistent_variable_naming():\n    user_name = 'Alice'\n    UserAge = 30",
    "target": "Maintain consistent naming conventions throughout the codebase."
  },
  {
    "func": "def long_argument_list(a, b, c, d, e, f, g):\n    return a + b + c + d + e + f + g",
    "target": "Avoid long parameter lists; use dictionaries or classes."
  },
  {
    "func": "def redundant_computations(n):\n    result = sum(range(n))\n    result2 = sum(range(n))",
    "target": "Avoid redundant computations; store results for reuse."
  },
  {
    "func": "def unoptimized_list_operations():\n    data = []\n    for i in range(1000):\n        data.append(i)",
    "target": "Use list comprehensions for better performance."
  },
  {
    "func": "def complex_boolean_expression(x, y):\n    if (x and y) or (not x and not y):\n        return True",
    "target": "Simplify complex boolean expressions for clarity."
  },
  {
    "func": "def lack_of_code_comments():\n    def add(a, b):\n        return a + b",
    "target": "Include comments to explain complex logic when needed."
  },
  {
    "func": "def long_chain_of_function_calls():\n    result = obj.a().b().c().d()",
    "target": "Avoid chaining multiple methods together; assign intermediate results to variables."
  },
  {
    "func": "def unused_variables():\n    x = 42\n    y = x + 1\n    return x",
    "target": "Remove unused variables to improve code clarity."
  },
  {
    "func": "def inconsistent_whitespace():\n    a=5\n    b = 6\n    c  =7",
    "target": "Use consistent spacing for better readability."
  },
  {
    "func": "def unclear_function_name():\n    def x1y2z3(a, b):\n        return a + b",
    "target": "Use meaningful function names to improve code clarity."
  },
  {
    "func": "def inefficient_membership_check(items, value):\n    if items.count(value) > 0:\n        return True",
    "target": "Use `in` keyword for membership checks instead of `count()`."
  },
  {
    "func": "def unused_function():\n    def helper():\n        return 42",
    "target": "Remove unused functions to reduce code clutter."
  },
  {
    "func": "def repeated_code_blocks():\n    if condition:\n        handle_task()\n    else:\n        handle_task()",
    "target": "Refactor duplicated code into a single function."
  },
  {
    "func": "def hard_to_read_lambda():\n    result = map(lambda x: x ** 2 if x % 2 == 0 else x + 1, data)",
    "target": "Avoid complex lambda functions; use named functions instead."
  },
  {
    "func": "def excessive_inline_comments():\n    x = 5  # assign 5\n    y = 6  # assign 6",
    "target": "Avoid unnecessary inline comments for self-explanatory code."
  },
  {
    "func": "def poorly_formatted_code():\n    x=1; y=2;z=3",
    "target": "Follow standard formatting conventions like PEP 8."
  },
  {
    "func": "def inconsistent_return_behavior(x):\n    if x > 0:\n        return 'Positive'\n    else:\n        print('Negative')",
    "target": "Ensure consistent use of return statements in functions."
  },
  {
    "func": "def unnecessary_list_conversion():\n    items = list([1, 2, 3])",
    "target": "Avoid redundant type conversions for better performance."
  },
  {
    "func": "def implicit_type_conversion():\n    result = 5 + '5'",
    "target": "Avoid implicit type conversions to prevent runtime errors."
  },
  {
    "func": "def inefficient_data_structure_usage():\n    for item in data:\n        if item not in seen:\n            seen.add(item)",
    "target": "Use sets instead of lists for membership checks where possible."
  },
  {
    "func": "def non_standard_docstring_format():\n    def add(a, b):\n        \"\"\"Does addition\"\"\"\n        return a + b",
    "target": "Use standardized docstring formats like NumPy or Google style."
  },
  {
    "func": "def repeated_literals():\n    if status == 'active':\n        print('active')",
    "target": "Use named constants instead of repeated string literals."
  },
  {
    "func": "def long_single_line_expression():\n    result = sum([x ** 2 for x in range(100) if x % 2 == 0])",
    "target": "Break down long expressions into multiple lines."
  },
  {
    "func": "def lack_of_input_validation(value):\n    return int(value)",
    "target": "Validate and sanitize user input to avoid unexpected errors."
  },
  {
    "func": "def overly_generic_variable_names():\n    x = 5\n    y = 6\n    return x + y",
    "target": "Use descriptive variable names for better understanding."
  },
  {
    "func": "class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n    def save_to_database(self):\n        print('Saving user to database')",
    "target": "Single Responsibility Principle: Separate database operations from the User class."
  },
  {
    "func": "class Report:\n    def __init__(self, data):\n        self.data = data\n    def generate_pdf(self):\n        print('Generating PDF')\n    def generate_csv(self):\n        print('Generating CSV')",
    "target": "Single Responsibility Principle: Separate report generation from format-specific logic."
  },
  {
    "func": "class PaymentProcessor:\n    def process_payment(self, payment_type):\n        if payment_type == 'credit_card':\n            print('Processing credit card payment')\n        elif payment_type == 'paypal':\n            print('Processing PayPal payment')",
    "target": "Open/Closed Principle: Avoid modifying the class for new payment types; use polymorphism."
  },
  {
    "func": "class Bird:\n    def fly(self):\n        print('Flying')\nclass Penguin(Bird):\n    def fly(self):\n        raise Exception('Penguins can’t fly')",
    "target": "Liskov Substitution Principle: Subclasses should not break base class behavior."
  },
  {
    "func": "class Printer:\n    def print_document(self, doc):\n        print('Printing', doc)\n    def scan_document(self, doc):\n        raise NotImplementedError('Scan not supported')",
    "target": "Interface Segregation Principle: Provide only the necessary interfaces to clients."
  },
  {
    "func": "class MySQLDatabase:\n    def connect(self):\n        print('Connecting to MySQL')\nclass Application:\n    def __init__(self):\n        self.db = MySQLDatabase()",
    "target": "Dependency Inversion Principle: Depend on abstractions, not concrete classes."
  },
  {
    "func": "class UserService:\n    def get_user(self, user_id):\n        print(f'Fetching user {user_id}')\n    def send_email(self, message):\n        print('Sending email:', message)",
    "target": "Single Responsibility Principle: Separate user management from communication logic."
  },
  {
    "func": "class Shape:\n    def area(self):\n        pass\nclass Rectangle(Shape):\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\nclass AreaCalculator:\n    def calculate_area(self, shape):\n        if isinstance(shape, Rectangle):\n            return shape.width * shape.height",
    "target": "Open/Closed Principle: Use polymorphism to calculate area for different shapes without modifying code."
  },
  {
    "func": "class Animal:\n    def make_sound(self):\n        print('Animal sound')\nclass Dog(Animal):\n    def make_sound(self):\n        return 5",
    "target": "Liskov Substitution Principle: Substitutable objects should maintain method behavior and types."
  },
  {
    "func": "class Document:\n    def open(self):\n        print('Open document')\n    def save(self):\n        raise NotImplementedError()",
    "target": "Interface Segregation Principle: Provide separate interfaces for openable and saveable documents."
  },
  {
    "func": "class Logger:\n    def log(self, message):\n        print('Logging:', message)\nclass UserService:\n    def __init__(self):\n        self.logger = Logger()",
    "target": "Dependency Inversion Principle: Inject logger via constructor instead of hardcoding."
  },
  {
    "func": "class TaskManager:\n    def add_task(self, task):\n        print('Adding task')\n    def generate_report(self):\n        print('Generating report')",
    "target": "Single Responsibility Principle: Separate task management from reporting."
  },
  {
    "func": "class Calculator:\n    def calculate(self, shape):\n        if type(shape).__name__ == 'Circle':\n            return 3.14 * shape.radius**2\n        elif type(shape).__name__ == 'Square':\n            return shape.side**2",
    "target": "Open/Closed Principle: Use polymorphism instead of type checks."
  },
  {
    "func": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    def set_width(self, width):\n        self.width = width\nclass Square(Rectangle):\n    def set_width(self, width):\n        self.width = width\n        self.height = width",
    "target": "Liskov Substitution Principle: Ensure subclasses don’t alter expected behavior."
  },
  {
    "func": "class Appliance:\n    def turn_on(self):\n        pass\n    def make_coffee(self):\n        raise NotImplementedError()",
    "target": "Interface Segregation Principle: Avoid forcing unused methods on classes."
  },
  {
    "func": "class NotificationService:\n    def __init__(self):\n        self.sms = SMS()\n    def notify(self, message):\n        self.sms.send(message)",
    "target": "Dependency Inversion Principle: Depend on interfaces, not implementations."
  },
  {
    "func": "class User:\n    def __init__(self, name):\n        self.name = name\n    def log_activity(self):\n        print('Logging activity')",
    "target": "Single Responsibility Principle: Separate logging from user management."
  },
  {
    "func": "class Formatter:\n    def format_csv(self, data):\n        print('CSV formatted')\n    def format_json(self, data):\n        print('JSON formatted')",
    "target": "Open/Closed Principle: Extend without modifying existing code by using strategy pattern."
  },
  {
    "func": "class Vehicle:\n    def start_engine(self):\n        print('Engine started')\nclass ElectricCar(Vehicle):\n    def start_engine(self):\n        return 1",
    "target": "Liskov Substitution Principle: Ensure method behavior remains consistent."
  },
  {
    "func": "class Worker:\n    def work(self):\n        pass\n    def eat(self):\n        raise NotImplementedError()",
    "target": "Interface Segregation Principle: Use separate Worker and Eater interfaces."
  },
  {
    "func": "class FileManager:\n    def __init__(self):\n        self.storage = DiskStorage()\n    def save(self, data):\n        self.storage.write(data)",
    "target": "Dependency Inversion Principle: Inject storage interface rather than hardcode dependency."
  },
  {
    "func": "class Product:\n    def calculate_price(self):\n        print('Calculating price')\n    def display_ui(self):\n        print('Displaying UI')",
    "target": "Single Responsibility Principle: Separate pricing logic from UI logic."
  },
  {
    "func": "class Document:\n    def __init__(self, content):\n        self.content = content\n    def print(self, format_type):\n        if format_type == 'PDF':\n            print('Printing PDF')\n        elif format_type == 'HTML':\n            print('Printing HTML')",
    "target": "Open/Closed Principle: Use strategy pattern instead of conditionals for format printing."
  },
  {
    "func": "class AudioPlayer:\n    def play_audio(self, file):\n        print('Playing audio')\nclass VideoPlayer(AudioPlayer):\n    def play_audio(self, file):\n        raise Exception('VideoPlayer cannot play audio')",
    "target": "Liskov Substitution Principle: Avoid violating base class expectations."
  },
  {
    "func": "class Machine:\n    def print_document(self):\n        raise NotImplementedError()\n    def scan_document(self):\n        raise NotImplementedError()",
    "target": "Interface Segregation Principle: Split into Printer and Scanner interfaces."
  },
  {
    "func": "class ShoppingCart:\n    def __init__(self):\n        self.db = SQLDatabase()\n    def checkout(self):\n        self.db.save('cart data')",
    "target": "Dependency Inversion Principle: Depend on database interface, not implementation."
  },
  {
    "func": "class Order:\n    def calculate_total(self):\n        print('Calculating total')\n    def send_invoice(self):\n        print('Sending invoice')",
    "target": "Single Responsibility Principle: Separate invoicing from order logic."
  },
  {
    "func": "class DiscountCalculator:\n    def calculate_discount(self, product_type):\n        if product_type == 'A':\n            return 10\n        elif product_type == 'B':\n            return 5",
    "target": "Open/Closed Principle: Avoid adding conditions; use a strategy pattern."
  },
  {
    "func": "class Duck:\n    def quack(self):\n        print('Quack')\nclass RobotDuck(Duck):\n    def quack(self):\n        return 42",
    "target": "Liskov Substitution Principle: Maintain consistent behavior in overridden methods."
  },
  {
    "func": "def calculate_discount(price, discount_rate, discount_type='standard', customer_type='regular'):\n    if discount_type == 'standard':\n        return price * (1 - discount_rate)\n    elif discount_type == 'holiday':\n        return price * (1 - discount_rate * 1.5)\n    else:\n        return price",
    "target": "YAGNI: Unnecessary discount types not currently needed. Simplify to one discount type."
  },
  {
    "func": "class UserProfile:\n    def __init__(self, username, email, age=None, phone=None, address=None, preferences=None):\n        self.username = username\n        self.email = email\n        self.age = age\n        self.phone = phone\n        self.address = address\n        self.preferences = preferences",
    "target": "YAGNI: Avoid adding unused parameters like `phone`, `address`, and `preferences`."
  },
  {
    "func": "def calculate_bonus(salary, years_of_service, company_size='small', industry='tech'):\n    if company_size == 'small' and industry == 'tech':\n        return salary * 0.05\n    elif company_size == 'large' and industry == 'finance':\n        return salary * 0.1\n    else:\n        return salary * 0.03",
    "target": "YAGNI: Industry and company size differentiation not required; simplify bonus calculation."
  },
  {
    "func": "class DataExporter:\n    def export_as_csv(self, data):\n        print('Exporting as CSV')\n    def export_as_xml(self, data):\n        print('Exporting as XML')\n    def export_as_json(self, data):\n        print('Exporting as JSON')",
    "target": "YAGNI: Exporting as XML and JSON not required yet; keep only CSV."
  },
  {
    "func": "def generate_report(report_type='pdf'):\n    if report_type == 'pdf':\n        print('Generating PDF report')\n    elif report_type == 'html':\n        print('Generating HTML report')\n    else:\n        print('Generating TXT report')",
    "target": "YAGNI: Only PDF report generation needed; remove other formats."
  },
  {
    "func": "class MultiAuthSystem:\n    def login_with_password(self, username, password):\n        print('Password login')\n    def login_with_fingerprint(self, fingerprint):\n        print('Fingerprint login')\n    def login_with_face_id(self, face_image):\n        print('Face ID login')",
    "target": "YAGNI: Only password login needed; remove fingerprint and face ID."
  },
  {
    "func": "def get_user_details(user_id, include_profile_picture=False, include_social_links=False, include_preferences=False):\n    user = {'id': user_id, 'name': 'John'}\n    if include_profile_picture:\n        user['profile_picture'] = 'default.jpg'\n    if include_social_links:\n        user['social_links'] = []\n    if include_preferences:\n        user['preferences'] = {}",
    "target": "YAGNI: Include only essential user details; remove unnecessary options."
  },
  {
    "func": "class Vehicle:\n    def drive(self):\n        print('Driving')\n    def fly(self):\n        print('Flying')",
    "target": "YAGNI: Vehicle doesn't need a `fly` method; remove it."
  },
  {
    "func": "def process_payment(amount, currency='USD', payment_gateway='stripe', region='US'):\n    print(f'Processing payment of {amount} {currency} via {payment_gateway}')",
    "target": "YAGNI: Payment gateway and region parameters unnecessary; simplify interface."
  },
  {
    "func": "class Product:\n    def __init__(self, name, price, color='black', size='medium', warranty=None):\n        self.name = name\n        self.price = price\n        self.color = color\n        self.size = size\n        self.warranty = warranty",
    "target": "YAGNI: Only name and price are necessary for now; remove optional parameters."
  },
  {
    "func": "def calculate_shipping(weight, distance, shipping_method='standard', delivery_time='normal'):\n    if shipping_method == 'standard':\n        cost = weight * distance * 0.5\n    elif shipping_method == 'express':\n        cost = weight * distance * 1.0\n    else:\n        cost = weight * distance * 0.3",
    "target": "YAGNI: Only standard shipping method is needed; simplify logic."
  },
  {
    "func": "class UserManager:\n    def __init__(self, username, email):\n        self.username = username\n        self.email = email\n    def deactivate_user(self):\n        print('Deactivating user')\n    def promote_to_admin(self):\n        print('Promoting user to admin')",
    "target": "YAGNI: `promote_to_admin` method not needed; remove it."
  },
  {
    "func": "def log_message(message, log_level='info', log_to_file=False, log_to_db=False):\n    print(f'{log_level.upper()}: {message}')",
    "target": "YAGNI: Only console logging needed; remove options for file and database."
  },
  {
    "func": "class Shape:\n    def __init__(self, sides):\n        self.sides = sides\n    def calculate_volume(self):\n        print('Volume calculation not needed')",
    "target": "YAGNI: Shape doesn't need a `calculate_volume` method; remove it."
  },
  {
    "func": "def render_dashboard(user, dark_mode=False, show_analytics=False, show_ads=False):\n    print(f'Rendering dashboard for {user}')",
    "target": "YAGNI: Additional options like dark mode and ads not needed."
  },
  {
    "func": "class DocumentHandler:\n    def open(self, file):\n        print('Opening file')\n    def compress(self, file):\n        print('Compressing file')\n    def encrypt(self, file):\n        print('Encrypting file')",
    "target": "YAGNI: Compression and encryption features not required yet."
  },
  {
    "func": "def calculate_invoice(total, discount=0, tax_rate=0.05, loyalty_discount=0.02, seasonal_discount=0):\n    return total - discount + total * tax_rate",
    "target": "YAGNI: Loyalty and seasonal discounts are unnecessary complexity."
  },
  {
    "func": "class Employee:\n    def __init__(self, name, department, salary, bonus=None, stock_options=None):\n        self.name = name\n        self.department = department\n        self.salary = salary\n        self.bonus = bonus\n        self.stock_options = stock_options",
    "target": "YAGNI: Bonus and stock options not needed for all employees."
  },
  {
    "func": "def generate_graph(data, graph_type='bar', show_grid=True, color='blue', animation_speed='normal'):\n    print('Generating graph')",
    "target": "YAGNI: Only bar graph type is required; remove unnecessary parameters."
  },
  {
    "func": "class NotificationService:\n    def send_email(self, message):\n        print('Sending email')\n    def send_sms(self, message):\n        print('Sending SMS')",
    "target": "YAGNI: SMS notification is unnecessary; remove it."
  },
  {
    "func": "def validate_user_input(input_data, allow_special_chars=False, max_length=255, strip_whitespace=True):\n    print('Validating input')",
    "target": "YAGNI: Only whitespace stripping is needed; remove other options."
  },
  {
    "func": "class ChatBot:\n    def __init__(self):\n        self.language = 'English'\n        self.theme = 'light'\n        self.voice_assistant_enabled = False",
    "target": "YAGNI: Theme and voice assistant options are not currently needed."
  },
  {
    "func": "def filter_transactions(transactions, min_amount=0, max_amount=None, currency='USD', include_fees=False):\n    filtered = [t for t in transactions if t['amount'] >= min_amount]",
    "target": "YAGNI: Only filtering by `min_amount` is required; remove other parameters."
  },
  {
    "func": "class TaskManager:\n    def __init__(self):\n        self.tasks = []\n    def add_task(self, task):\n        self.tasks.append(task)\n    def archive_task(self, task):\n        print('Archiving task')",
    "target": "YAGNI: Archiving tasks isn't necessary yet."
  },
  {
    "func": "def send_notification(user, message, method='email', urgency='normal', delivery_time='immediate'):\n    print(f'Sending {method} notification to {user}')",
    "target": "YAGNI: Only email notifications are needed; simplify interface."
  },
  {
    "func": "class ShoppingCart:\n    def __init__(self):\n        self.items = []\n    def apply_coupon(self, coupon_code):\n        print('Applying coupon')\n    def calculate_tax(self):\n        print('Calculating tax')",
    "target": "YAGNI: Coupon and tax calculations are unnecessary for now."
  },
  {
    "func": "def log_event(event, timestamp=None, user_id=None, location=None):\n    print('Logging event')",
    "target": "YAGNI: Only event name is needed; remove optional parameters."
  },
  {
    "func": "class VideoPlayer:\n    def __init__(self):\n        self.resolution = '1080p'\n        self.supports_4k = False\n        self.streaming_mode = 'standard'",
    "target": "YAGNI: 4K and streaming mode settings are premature optimizations."
  },
  {
    "func": "def book_flight(origin, destination, airline=None, seat_preference='any', include_meal=False):\n    print(f'Booking flight from {origin} to {destination}')",
    "target": "YAGNI: Only origin and destination are required; remove optional parameters."
  },
  {
    "func": "def calculate_area_circle(radius):\n    return 3.14159 * radius * radius\n\ndef calculate_area_square(side):\n    return side * side",
    "target": "DRY: Combine similar area calculations into a single function with shape parameter."
  },
  {
    "func": "def display_user(user):\n    print(f'User: {user.name}, Email: {user.email}')\n\ndef display_admin(admin):\n    print(f'Admin: {admin.name}, Email: {admin.email}')",
    "target": "DRY: Duplicate code for user and admin display; use a generic display function."
  },
  {
    "func": "def process_data_a(data):\n    return sum(data)\n\ndef process_data_b(data):\n    return sum(data)",
    "target": "DRY: Duplicate processing logic; merge into one function."
  },
  {
    "func": "def calculate_tax_usa(price):\n    return price * 0.07\n\ndef calculate_tax_canada(price):\n    return price * 0.05",
    "target": "DRY: Use a parameter for tax rates instead of separate functions."
  },
  {
    "func": "def connect_to_server(ip, port):\n    print(f'Connecting to {ip}:{port}')\n\ndef connect_to_database(host, port):\n    print(f'Connecting to {host}:{port}')",
    "target": "DRY: Both functions share similar logic; unify into a single connection function."
  },
  {
    "func": "def print_error(message):\n    print(f'Error: {message}')\n\ndef print_warning(message):\n    print(f'Warning: {message}')",
    "target": "DRY: Merge into a single `print_message` function with a severity parameter."
  },
  {
    "func": "def login(username, password):\n    if username == 'admin' and password == 'pass':\n        print('Access granted')\n    else:\n        print('Access denied')",
    "target": "KISS: Simplify complex conditional logic with a more readable structure."
  },
  {
    "func": "def calculate_discount(price, discount_type):\n    if discount_type == 'student':\n        return price * 0.8\n    elif discount_type == 'senior':\n        return price * 0.85\n    else:\n        return price",
    "target": "KISS: Use a dictionary-based lookup instead of multiple `if-elif` statements."
  },
  {
    "func": "def get_status_description(status_code):\n    if status_code == 1:\n        return 'Active'\n    elif status_code == 2:\n        return 'Inactive'\n    elif status_code == 3:\n        return 'Pending'\n    else:\n        return 'Unknown'",
    "target": "KISS: Replace `if-elif` chain with a dictionary for clarity."
  },
  {
    "func": "def calculate_salary(hours_worked, hourly_rate):\n    return hours_worked * hourly_rate\n\ndef calculate_overtime(hours_overtime, hourly_rate):\n    return hours_overtime * hourly_rate * 1.5",
    "target": "DRY: Combine regular and overtime calculations into a single function."
  },
  {
    "func": "def send_email(subject, body):\n    print(f'Sending email: {subject}')\n\ndef send_sms(message):\n    print(f'Sending SMS: {message}')",
    "target": "DRY: Create a generic `send_notification` function."
  },
  {
    "func": "def authenticate(username, password):\n    if username == 'admin' and password == 'admin123':\n        print('Authenticated')\n    else:\n        print('Failed')",
    "target": "KISS: Simplify authentication logic using a dictionary-based credential check."
  },
  {
    "func": "def convert_to_uppercase(text):\n    return text.upper()\n\ndef convert_to_lowercase(text):\n    return text.lower()",
    "target": "DRY: Merge similar string conversion functions into one with a mode parameter."
  },
  {
    "func": "def print_report(report_type):\n    if report_type == 'summary':\n        print('Summary Report')\n    elif report_type == 'detailed':\n        print('Detailed Report')",
    "target": "KISS: Use a dictionary lookup to print reports."
  },
  {
    "func": "def fetch_user(user_id):\n    if user_id:\n        print('Fetching user')\n    else:\n        print('Invalid ID')",
    "target": "KISS: Simplify control flow; `if user_id` is sufficient without explicit checks."
  },
  {
    "func": "def add_numbers(a, b):\n    result = a + b\n    return result",
    "target": "KISS: Inline variable assignment is unnecessary; return directly."
  },
  {
    "func": "def calculate_interest(principal, rate, time):\n    interest = principal * rate * time\n    return interest",
    "target": "KISS: Directly return expression; intermediate variable is unnecessary."
  },
  {
    "func": "def log_info(message):\n    print(f'INFO: {message}')\n\ndef log_debug(message):\n    print(f'DEBUG: {message}')\n\ndef log_error(message):\n    print(f'ERROR: {message}')",
    "target": "DRY: Combine logging functions into a single function with a level parameter."
  },
  {
    "func": "def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result",
    "target": "KISS: Use `math.factorial()` instead of manual loop."
  },
  {
    "func": "def calculate_total(items):\n    total = 0\n    for item in items:\n        total += item\n    return total",
    "target": "KISS: Use Python's built-in `sum()` for clarity."
  },
  {
    "func": "def check_even(number):\n    if number % 2 == 0:\n        return True\n    else:\n        return False",
    "target": "KISS: Return `number % 2 == 0` directly."
  },
  {
    "func": "def is_positive(num):\n    if num > 0:\n        return True\n    else:\n        return False",
    "target": "KISS: Return `num > 0` directly."
  },
  {
    "func": "def calculate_tax(price):\n    tax = price * 0.1\n    return tax",
    "target": "KISS: Inline the return statement for simplicity."
  },
  {
    "func": "def generate_greeting(name):\n    greeting = f'Hello, {name}!'\n    return greeting",
    "target": "KISS: Return the formatted string directly."
  },
  {
    "func": "def count_words(text):\n    word_count = len(text.split())\n    return word_count",
    "target": "KISS: Return `len(text.split())` directly."
  },
  {
    "func": "def check_validity(value):\n    if value:\n        return True\n    else:\n        return False",
    "target": "KISS: Simplify to `return bool(value)`."
  },
  {
    "func": "def get_discount_price(price, discount_percentage):\n    discount = price * discount_percentage / 100\n    final_price = price - discount\n    return final_price",
    "target": "KISS: Return expression directly without intermediate variables."
  },
  {
    "func": "def greet_user(name):\n    if name:\n        print(f'Hello, {name}')\n    else:\n        print('Hello, Guest')",
    "target": "KISS: Simplify greeting logic."
  },
  {
    "func": "def process_items(items):\n    for item in items:\n        if len(item) > 5:\n            print(item)",
    "target": "KISS: Simplify logic by using list comprehensions."
  },
  {
    "func": "def calc(x,y): return x+y",
    "target": "Use descriptive function names to improve code readability."
  },
  {
    "func": "def getuserdetails(user): return user['name']",
    "target": "Use snake_case for function names in Python as per PEP 8."
  },
  {
    "func": "def fetch_data():\n    try:\n        result = some_function()\n    except:\n        pass",
    "target": "Avoid generic exception handling; catch specific exceptions."
  },
  {
    "func": "def processData(data): return data.upper()",
    "target": "Use consistent naming conventions (e.g., snake_case for functions)."
  },
  {
    "func": "def add(x,y,z):\n    return x+y+z",
    "target": "Limit the number of parameters to improve function maintainability."
  },
  {
    "func": "def check_status(status):\n    if status == 1:\n        print('Active')\n    elif status == 2:\n        print('Inactive')",
    "target": "Use dictionaries for condition-based logic to simplify code."
  },
  {
    "func": "def findLargest(lst):\n    largest = lst[0]\n    for i in lst:\n        if i > largest:\n            largest = i\n    return largest",
    "target": "Use built-in functions like `max()` instead of manual loops."
  },
  {
    "func": "def calculate(x,y):\n    if y != 0:\n        return x/y",
    "target": "Always handle division by zero with appropriate exceptions."
  },
  {
    "func": "def get_username(user):\n    print('Username:', user['name'])",
    "target": "Add type annotations for better code maintainability."
  },
  {
    "func": "def read_file(file):\n    f = open(file, 'r')\n    data = f.read()\n    f.close()\n    return data",
    "target": "Use context managers (`with open`) to ensure files are properly closed."
  },
  {
    "func": "def isPalindrome(s):\n    return s == s[::-1]",
    "target": "Use snake_case for function names."
  },
  {
    "func": "def calcTax(price,rate):\n    return price*rate",
    "target": "Add spaces around operators to improve readability."
  },
  {
    "func": "def fetch_items(items):\n    for i in range(len(items)):\n        print(items[i])",
    "target": "Use `for item in items` instead of indexing for better readability."
  },
  {
    "func": "def checkAge(age):\n    if age>=18:\n        print('Adult')",
    "target": "Use consistent spacing and indentation as per PEP 8."
  },
  {
    "func": "def process_list(lst):\n    result=[]\n    for x in lst:\n        result.append(x*2)\n    return result",
    "target": "Use list comprehensions for cleaner and efficient code."
  },
  {
    "func": "def user_login(username,password):\n    if username=='admin' and password=='1234':\n        print('Welcome admin')",
    "target": "Avoid hardcoding credentials; use secure configuration files."
  },
  {
    "func": "def calc_average(numbers):\n    total=0\n    for n in numbers:\n        total+=n\n    return total/len(numbers)",
    "target": "Use built-in functions like `sum()` to simplify code."
  },
  {
    "func": "def sort_list(lst):\n    return sorted(lst,key=lambda x:x[1])",
    "target": "Add spaces after commas for better readability."
  },
  {
    "func": "def process_input(data):\n    if type(data)==list:\n        return [x*2 for x in data]",
    "target": "Use `isinstance` instead of comparing types directly."
  },
  {
    "func": "def find_max(a,b,c):\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c",
    "target": "Simplify with `max(a, b, c)`."
  },
  {
    "func": "def user_info():\n    name='John'\n    age=30\n    print('Name:',name)\n    print('Age:',age)",
    "target": "Avoid hardcoded values; use parameters for flexibility."
  },
  {
    "func": "def connect_db():\n    conn = sqlite3.connect('mydb.db')",
    "target": "Close database connections properly after use."
  },
  {
    "func": "def calc_sum(a,b):\n    return a+b",
    "target": "Add type annotations to improve clarity."
  },
  {
    "func": "def compute_factorial(n):\n    if n==1:\n        return 1\n    else:\n        return n*compute_factorial(n-1)",
    "target": "Add base case check and docstrings to explain recursive logic."
  },
  {
    "func": "def calculate_discount(price, discount):\n    return price-(price*(discount/100))",
    "target": "Add parentheses for better readability when using mathematical expressions."
  },
  {
    "func": "def send_email(subject, body, recipient, smtp_server, port, username, password):\n    pass",
    "target": "Reduce parameter count; use a configuration object instead."
  },
  {
    "func": "def print_report(data):\n    print('Report Data:',data)",
    "target": "Include function docstrings for clarity."
  },
  {
    "func": "def factorial(x):\n    if x==1:\n        return 1\n    else:\n        return x*factorial(x-1)",
    "target": "Add input validation to handle negative values."
  },
  {
    "func": "def convert_temperature(temp, unit):\n    if unit=='C':\n        return temp*1.8+32\n    elif unit=='F':\n        return (temp-32)/1.8",
    "target": "Add comments and validate input units."
  },
  {
    "func": "def find_prime_numbers(n):\n    primes=[]\n    for num in range(2,n+1):\n        for i in range(2,num):\n            if num%i==0:\n                break\n        else:\n            primes.append(num)\n    return primes",
    "target": "Optimize loops and improve readability with better naming and logic."
  },
  {
    "func": "def mergeDicts(d1,d2):\n    d3=d1.copy()\n    d3.update(d2)\n    return d3",
    "target": "Use snake_case for function names and add spaces around `=` for readability."
  },
  {
    "func": "def parse_json(json_str):\n    return eval(json_str)",
    "target": "Avoid using `eval()`; use `json.loads()` for safer JSON parsing."
  },
  {
    "func": "def fetch_info(user):\n    print(f'User info: {user}')",
    "target": "Add docstrings to describe the function's purpose."
  },
  {
    "func": "def calculate_discount(price, discount):\n    if discount <= 0:\n        return price\n    else:\n        return price - (price * discount / 100)",
    "target": "Use inline expressions to simplify return logic."
  },
  {
    "func": "def process_data(items):\n    result=[]\n    for i in items:\n        result.append(i*2)\n    return result",
    "target": "Use list comprehensions for cleaner and efficient code."
  },
  {
    "func": "def get_user(name):\n    if name == 'admin':\n        print('Admin access')",
    "target": "Always validate user input for security reasons."
  },
  {
    "func": "def join_strings(parts):\n    result=''\n    for p in parts:\n        result+=p",
    "target": "Use `''.join(parts)` instead of manual concatenation."
  },
  {
    "func": "def get_info():\n    user='john'\n    age=30\n    return user,age",
    "target": "Avoid hardcoded values; pass parameters or use configurations."
  },
  {
    "func": "def print_square(n):\n    return n**2",
    "target": "Add type annotations to function signatures."
  },
  {
    "func": "def divide_numbers(a,b):\n    return a/b",
    "target": "Add exception handling to avoid division by zero errors."
  },
  {
    "func": "def calc_average(nums):\n    sum=0\n    for n in nums:\n        sum+=n\n    return sum/len(nums)",
    "target": "Use `sum(nums)/len(nums)` for more concise code."
  },
  {
    "func": "def display_users(users):\n    for u in users:\n        print(u)",
    "target": "Add type hints and docstrings for clarity."
  },
  {
    "func": "def check_prime(n):\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True",
    "target": "Optimize performance by checking divisibility only up to `sqrt(n)`."
  },
  {
    "func": "def check_password(password):\n    if password == '1234':\n        print('Weak password')",
    "target": "Avoid hardcoding sensitive information like passwords."
  },
  {
    "func": "def read_file(filename):\n    f = open(filename)\n    data = f.read()\n    return data",
    "target": "Use `with open` to ensure files are properly closed."
  },
  {
    "func": "def process_list(lst):\n    new_list=[]\n    for x in lst:\n        if x%2==0:\n            new_list.append(x)",
    "target": "Simplify with list comprehensions."
  },
  {
    "func": "def find_key(d, key):\n    if key in d.keys():\n        return d[key]",
    "target": "Use `if key in d` instead of `.keys()` for cleaner code."
  },
  {
    "func": "def increment(x):\n    x+=1\n    return x",
    "target": "Add type hints to improve code clarity."
  },
  {
    "func": "def nested_list_iteration():\n    for i in range(len(data)):\n        for j in range(len(data[i])):\n            for k in range(len(data[i][j])):\n                for m in range(len(data[i][j][k])):\n                    for n in range(len(data[i][j][k][m])):\n                        process(data[i][j][k][m][n])",
    "target": "Reduce deep nesting in list iteration (5 levels detected). Consider using generators or comprehensions."
  },
  {
    "func": "def connect_to_db():\n    conn = sqlite3.connect('test.db')",
    "target": "Close database connections properly to avoid leaks."
  },
  {
    "func": "def print_names(names):\n    for name in names:\n        print(name)",
    "target": "Add comments to explain code logic."
  },
  {
    "func": "def sort_users(users):\n    return sorted(users, key=lambda x: x['age'])",
    "target": "Add type annotations for input and output types."
  },
  {
    "func": "def fetch_api_data(url):\n    response = requests.get(url)\n    return response.text",
    "target": "Handle exceptions for network errors."
  },
  {
    "func": "def calc_area(l,w):\n    return l*w",
    "target": "Use descriptive variable names for clarity."
  },
  {
    "func": "def find_duplicates(lst):\n    seen = set()\n    duplicates = []\n    for x in lst:\n        if x in seen:\n            duplicates.append(x)\n        else:\n            seen.add(x)\n    return duplicates",
    "target": "Optimize using collections.Counter."
  },
  {
    "func": "def greet(name):\n    print('Hello '+name)",
    "target": "Use f-strings for better string formatting."
  },
  {
    "func": "def count_vowels(text):\n    count = 0\n    for ch in text:\n        if ch in 'aeiouAEIOU':\n            count += 1\n    return count",
    "target": "Use case-insensitive string methods for clarity."
  },
  {
    "func": "def factorial(n):\n    if n==1:\n        return 1\n    return n*factorial(n-1)",
    "target": "Add base case for input validation."
  },
  {
    "func": "def lookup_user(user_id):\n    if user_id == 123:\n        return 'John'",
    "target": "Avoid hardcoding user data; use a database."
  },
  {
    "func": "def generate_report():\n    report='Sales report'\n    print(report)",
    "target": "Include logging instead of print statements for better maintainability."
  },
  {
    "func": "def user_roles():\n    roles = ['admin','user','guest']\n    for role in roles:\n        print(role)",
    "target": "Use enums for role definitions to improve clarity."
  },
  {
    "func": "def reverse_string(s: str) -> str:\n    return s[::-1]",
    "target": "Use slicing for efficient string reversal."
  },
  {
    "func": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]",
    "target": "Use slicing to check if a string is a palindrome."
  },
  {
    "func": "def get_file_extension(filename: str) -> str:\n    return filename.split('.')[-1]",
    "target": "Use `os.path.splitext()` for better accuracy."
  },
  {
    "func": "def sum_list(numbers: list[int]) -> int:\n    return sum(numbers)",
    "target": "Use built-in `sum()` instead of loops for summing lists."
  },
  {
    "func": "def is_even(num: int) -> bool:\n    return num % 2 == 0",
    "target": "Use modulo operator for simple even-number checks."
  },
  {
    "func": "def remove_duplicates(lst: list) -> list:\n    return list(set(lst))",
    "target": "Use `set()` to efficiently remove duplicates."
  },
  {
    "func": "def most_common_word(words: list[str]) -> str:\n    return max(set(words), key=words.count)",
    "target": "Use `collections.Counter` for more efficiency."
  },
  {
    "func": "def safe_dict_lookup(dictionary: dict, key, default=None):\n    return dictionary.get(key, default)",
    "target": "Use `.get()` to avoid `KeyError` exceptions."
  },
  {
    "func": "def validate_email(email: str) -> bool:\n    return '@' in email and '.' in email",
    "target": "Use `re.match()` for a more accurate email validation."
  },
  {
    "func": "def round_number(num: float, decimals: int = 2) -> float:\n    return round(num, decimals)",
    "target": "Use `round()` for cleaner number rounding."
  },
  {
    "func": "def filter_even_numbers(lst: list[int]) -> list[int]:\n    return [x for x in lst if x % 2 == 0]",
    "target": "Use list comprehensions for filtering."
  },
  {
    "func": "def capitalize_words(sentence: str) -> str:\n    return sentence.title()",
    "target": "Use `.title()` for proper capitalization."
  },
  {
    "func": "def count_occurrences(lst: list, value) -> int:\n    return lst.count(value)",
    "target": "Use `.count()` for simple occurrence counting."
  },
  {
    "func": "def swap_variables(a, b):\n    return b, a",
    "target": "Use tuple unpacking for swapping instead of temporary variables."
  },
  {
    "func": "def get_file_size(filepath: str) -> int:\n    return os.path.getsize(filepath)",
    "target": "Use `os.path.getsize()` for accurate file size retrieval."
  },
  {
    "func": "def merge_two_dicts(d1: dict, d2: dict) -> dict:\n    return {**d1, **d2}",
    "target": "Use dictionary unpacking for merging dictionaries."
  },
  {
    "func": "def factorial(n: int) -> int:\n    return math.factorial(n)",
    "target": "Use `math.factorial()` instead of recursive functions for efficiency."
  },
  {
    "func": "def get_current_datetime() -> str:\n    return datetime.datetime.now().isoformat()",
    "target": "Use `.isoformat()` for standardized date representation."
  },
  {
    "func": "def generate_random_number(start: int, end: int) -> int:\n    return random.randint(start, end)",
    "target": "Use `random.randint()` for generating a random number in a range."
  },
  {
    "func": "def get_unique_values(lst: list) -> list:\n    return list(set(lst))",
    "target": "Use `set()` to get unique values in a list efficiently."
  },
  {
    "func": "def flatten_list(nested_list: list[list]) -> list:\n    return [item for sublist in nested_list for item in sublist]",
    "target": "Use list comprehensions to flatten nested lists."
  },
  {
    "func": "def get_ascii_value(character: str) -> int:\n    return ord(character)",
    "target": "Use `ord()` to get ASCII values."
  },
  {
    "func": "def create_slug(text: str) -> str:\n    return text.lower().replace(' ', '-')",
    "target": "Use `.lower().replace(' ', '-')` for simple slug generation."
  },
  {
    "func": "def chunk_list(lst: list, size: int) -> list[list]:\n    return [lst[i:i+size] for i in range(0, len(lst), size)]",
    "target": "Use list slicing to split lists into chunks."
  },
  {
    "func": "def is_anagram(str1: str, str2: str) -> bool:\n    return sorted(str1) == sorted(str2)",
    "target": "Use `sorted()` to check if two words are anagrams."
  },
  {
    "func": "def get_environment_variable(key: str) -> str:\n    return os.getenv(key, 'Not Found')",
    "target": "Use `os.getenv()` to safely retrieve environment variables."
  },
  {
    "func": "def is_substring(sub: str, main: str) -> bool:\n    return sub in main",
    "target": "Use `in` for substring checks instead of `.find()`."
  },
  {
    "func": "def read_json_file(filepath: str) -> dict:\n    with open(filepath, 'r') as f:\n        return json.load(f)",
    "target": "Use `json.load()` to parse JSON files safely."
  },
  {
    "func": "def is_multiple_of_five(n: int) -> bool:\n    return n % 5 == 0",
    "target": "Use modulo operator for simple divisibility checks."
  },
  {
    "func": "def insecure_os_command():\n    user_input = 'ls -la'\n    os.popen(user_input)",
    "target": "Using `os.popen()` to execute shell commands can lead to command injection vulnerabilities."
  },
  {
    "func": "def unsafe_jwt_decoding(token):\n    return jwt.decode(token, verify=False)",
    "target": "Disabling verification when decoding JWTs allows attackers to forge tokens."
  },
  {
    "func": "def missing_escaping_in_sql(user_input):\n    query = f\"SELECT * FROM users WHERE username = '{user_input}'\"",
    "target": "Lack of proper escaping in SQL queries allows SQL injection."
  },
  {
    "func": "def dangerous_pickle_loading():\n    with open('data.pkl', 'rb') as f:\n        obj = pickle.load(f)",
    "target": "Pickle files can execute arbitrary code when loaded."
  },
  {
    "func": "def unverified_ssl_request(url):\n    requests.get(url, verify=False)",
    "target": "Disabling SSL verification allows MITM attacks."
  },
  {
    "func": "def sensitive_data_in_logs(password):\n    print(f'User password: {password}')",
    "target": "Logging sensitive information exposes credentials in logs."
  },
  {
    "func": "def missing_rate_limiting():\n    def login(username, password):\n        if authenticate(username, password):\n            return 'Welcome!'",
    "target": "Not enforcing rate limiting makes login endpoints vulnerable to brute force attacks."
  },
  {
    "func": "def weak_password_hash(password):\n    return hashlib.md5(password.encode()).hexdigest()",
    "target": "MD5 is cryptographically weak and should not be used for password hashing."
  },
  {
    "func": "def insufficient_audit_logging():\n    def delete_account(user):\n        db.delete(user)",
    "target": "Not logging security-sensitive operations allows unauthorized access without detection."
  },
  {
    "func": "def open_redirect_attack(target_url):\n    return redirect(target_url)",
    "target": "Redirecting to untrusted URLs allows open redirect attacks."
  },
  {
    "func": "def weak_random_numbers():\n    return random.randint(100000, 999999)",
    "target": "Using `random.randint()` for security-sensitive values is insecure; use `secrets` instead."
  },
  {
    "func": "def no_cors_restriction():\n    @app.after_request\n    def add_cors_headers(response):\n        response.headers['Access-Control-Allow-Origin'] = '*'",
    "target": "Allowing `*` in CORS settings exposes APIs to Cross-Site Request Forgery (CSRF)."
  },
  {
    "func": "def insecure_smtp_configuration():\n    smtp = smtplib.SMTP('mail.example.com', 25)",
    "target": "Using SMTP without TLS encryption can expose sensitive email content."
  },
  {
    "func": "def missing_helmet_headers():\n    response.headers['X-Frame-Options'] = ''",
    "target": "Lack of security headers allows clickjacking attacks."
  },
  {
    "func": "def missing_content_security_policy():\n    response.headers['Content-Security-Policy'] = ''",
    "target": "Not enforcing a Content Security Policy (CSP) increases XSS risk."
  },
  {
    "func": "def missing_logging_in_auth():\n    def login(username, password):\n        if authenticate(username, password):\n            return 'Success!'",
    "target": "Failing to log authentication attempts allows brute-force login attempts to go undetected."
  },
  {
    "func": "def weak_file_upload_validation(file):\n    if file.filename.endswith('.jpg'):\n        file.save('/uploads/' + file.filename)",
    "target": "Checking file extensions alone is insufficient; use MIME type validation."
  },
  {
    "func": "def unsafe_webhook_parsing(request_data):\n    data = json.loads(request_data)",
    "target": "Parsing user-controlled JSON without validation can lead to deserialization attacks."
  },
  {
    "func": "def allowing_user_controlled_redirects(url):\n    return redirect(url)",
    "target": "Redirecting users without validation allows phishing attacks."
  },
  {
    "func": "def missing_brute_force_protection():\n    def login(username, password):\n        if username == 'admin' and password == 'password':\n            return 'Success'",
    "target": "Not enforcing rate limiting allows brute force login attacks."
  },
  {
    "func": "def insecure_xslt_processing(xml_input):\n    transformer = etree.XSLT(etree.XML(xml_input))",
    "target": "Processing untrusted XML data with XSLT can allow XML External Entity (XXE) attacks."
  },
  {
    "func": "def hardcoded_api_keys():\n    API_KEY = 'sk_test_12345'",
    "target": "Hardcoding API keys in source code exposes them to leaks."
  },
  {
    "func": "def unsafe_yaml_loading(yaml_data):\n    data = yaml.load(yaml_data)",
    "target": "Using `yaml.load()` without `safe_load()` allows arbitrary code execution."
  },
  {
    "func": "def missing_account_lockout():\n    def login(username, password):\n        if authenticate(username, password):\n            return 'Welcome!'",
    "target": "Not locking accounts after failed login attempts increases brute force risks."
  },
  {
    "func": "def insecure_cookie_handling():\n    response.set_cookie('session', session_id)",
    "target": "Ensure cookies are set with `HttpOnly`, `Secure`, and `SameSite` attributes."
  },
  {
    "func": "def excessive_permissions_on_file():\n    os.chmod('/important/file.txt', 0o777)",
    "target": "Avoid overly permissive file permissions."
  },
  {
    "func": "def missing_parameter_sanitization(input_param):\n    return input_param",
    "target": "Failing to sanitize input parameters increases the risk of injection attacks."
  },
  {
    "func": "def storing_password_in_plaintext(password):\n    db.save({'password': password})",
    "target": "Passwords should never be stored in plaintext; use hashing instead."
  },
  {
    "func": "def excessive_stack_trace_leak():\n    try:\n        risky_operation()\n    except Exception as e:\n        return str(e)",
    "target": "Exposing detailed stack traces in responses provides attackers with useful information."
  },
  {
    "func": "def missing_content_security_policy():\n    response.headers['Content-Security-Policy'] = ''",
    "target": "Not setting a Content Security Policy (CSP) leaves the application vulnerable to XSS attacks."
  },
  {
    "func": "def exposing_private_cloud_storage():\n    storage.set_public('bucket-name', True)",
    "target": "Exposing cloud storage publicly can lead to unauthorized data access."
  },
  {
    "func": "def unrestricted_websocket_connections():\n    ws = WebSocket()\n    ws.connect('wss://example.com')",
    "target": "Failing to authenticate WebSocket connections exposes APIs to hijacking."
  },
  {
    "func": "def missing_oauth_scope_restrictions():\n    oauth.request_token(scope='*')",
    "target": "Overly broad OAuth scopes allow unauthorized API access."
  },
  {
    "func": "def using_weak_password_hashing():\n    return hashlib.md5(password.encode()).hexdigest()",
    "target": "Using MD5 for password hashing makes it easy to crack. Use bcrypt or Argon2 instead."
  },
  {
    "func": "def insecure_jwt_storage():\n    localStorage.setItem('jwt', token)",
    "target": "Storing JWT tokens in local storage makes them vulnerable to XSS attacks."
  },
  {
    "func": "def missing_websocket_message_validation():\n    ws.onmessage = lambda event: process_message(event.data)",
    "target": "Failing to validate WebSocket messages allows attackers to send malicious payloads."
  },
  {
    "func": "def exposing_internal_services_over_http():\n    requests.get('http://10.0.0.1:8000')",
    "target": "Using internal services over HTTP instead of HTTPS exposes them to interception."
  },
  {
    "func": "def allowing_unvalidated_redirects():\n    return redirect(request.args.get('url'))",
    "target": "Unvalidated redirects allow attackers to redirect users to phishing sites."
  },
  {
    "func": "def leaking_internal_stack_traces():\n    print(exception)",
    "target": "Exposing stack traces in production leaks sensitive debugging information."
  },
  {
    "func": "def missing_rate_limits_on_admin_api():\n    @app.route('/admin/reset_password')\n    def reset_password():\n        return 'Password reset successful'",
    "target": "Not enforcing rate limits on admin endpoints increases brute-force attack risks."
  },
  {
    "func": "def weak_sso_implementation():\n    if user_email.endswith('@trusted.com'):\n        authenticate(user_email)",
    "target": "Using email domain-based authentication is insecure and easy to bypass."
  },
  {
    "func": "def exposing_graphql_introspection():\n    @app.route('/graphql')\n    def graphql():\n        return schema.introspect()",
    "target": "Allowing GraphQL introspection in production exposes API structure to attackers."
  },
  {
    "func": "def missing_cache_control_headers():\n    response.headers['Cache-Control'] = ''",
    "target": "Not setting cache control headers allows sensitive data to be stored in browser caches."
  },
  {
    "func": "def publically_exposed_admin_dashboard():\n    @app.route('/admin')\n    def admin_panel():\n        return render_template('admin.html')",
    "target": "Not restricting access to the admin panel allows unauthorized users to access it."
  },
  {
    "func": "def insufficient_logging_and_monitoring():\n    def authenticate(user):\n        return 'Login successful'",
    "target": "Failing to log authentication attempts makes detecting brute force attacks difficult."
  },
  {
    "func": "def allowing_user_controlled_regex():\n    re.match(user_input, text)",
    "target": "Allowing user-controlled regex patterns can lead to denial-of-service attacks."
  },
  {
    "func": "def overprivileged_cloud_storage_access():\n    policy = {\"Effect\": \"Allow\", \"Action\": \"s3:*\", \"Resource\": \"*\"}",
    "target": "Granting overly broad S3 permissions increases the risk of data leaks."
  },
  {
    "func": "def missing_csrf_protection_on_sensitive_actions():\n    @app.route('/transfer_money', methods=['POST'])\n    def transfer():\n        return 'Transfer Successful'",
    "target": "APIs without CSRF protection can be exploited for unauthorized transactions."
  },
  {
    "func": "def storing_sensitive_data_in_logs():\n    log.info(f'User {username} logged in with password: {password}')",
    "target": "Logging sensitive information exposes credentials and user data."
  },
  {
    "func": "def using_weak_encryption():\n    cipher = AES.new(key, AES.MODE_ECB)\n    return cipher.encrypt(data)",
    "target": "Using ECB mode for encryption is insecure. Use AES-GCM for better security."
  },
  {
    "func": "def allowing_user_controlled_file_paths():\n    with open(request.args.get('file')) as f:\n        return f.read()",
    "target": "Allowing user-controlled file paths can lead to path traversal attacks."
  },
  {
    "func": "def missing_session_expiration():\n    session.permanent = False",
    "target": "Not setting session expiration increases the risk of session hijacking."
  },
  {
    "func": "def exposing_internal_docker_ports():\n    docker run -p 2375:2375 mycontainer",
    "target": "Exposing Docker API ports publicly allows remote container management."
  },
  {
    "func": "def missing_access_control_on_cloud_storage():\n    bucket.set_public(True)",
    "target": "Making cloud storage public allows attackers to access sensitive files."
  },
  {
    "func": "def insecure_federated_authentication():\n    if 'sso_token' in request.cookies:\n        authenticate(request.cookies['sso_token'])",
    "target": "Failing to validate SSO tokens properly leads to authentication bypass."
  },
  {
    "func": "def allowing_unverified_email_change():\n    user.email = request.args.get('email')",
    "target": "Allowing email changes without verification enables account hijacking."
  },
  {
    "func": "def exposing_internal_admin_api():\n    @app.route('/admin/api')\n    def admin_api():\n        return jsonify({'status': 'ok'})",
    "target": "Not restricting access to internal admin APIs allows unauthorized use."
  },
  {
    "func": "def weak_oauth_implementation():\n    @app.route('/oauth')\n    def oauth():\n        return token",
    "target": "Using OAuth without scopes or proper validation increases security risks."
  },
  {
    "func": "def unnecessary_nested_condition(x):\n    if x > 0:\n        if x < 100:\n            return True",
    "target": "Flatten nested conditions where possible to improve readability."
  },
  {
    "func": "def redundant_else_in_return():\n    if x > 0:\n        return 'Positive'\n    else:\n        return 'Negative'",
    "target": "Remove redundant `else` after `return`, as execution stops at `return`."
  },
  {
    "func": "def excessive_blank_lines():\n    \n    \n    def foo():\n        return 42\n    \n    \n    \n",
    "target": "Avoid excessive blank lines that disrupt code flow."
  },
  {
    "func": "def unclear_parameter_names(a, b, c):\n    return a + b - c",
    "target": "Use meaningful parameter names to improve function readability."
  },
  {
    "func": "def large_function():\n    def foo():\n        step1()\n        step2()\n        step3()\n        step4()\n        step5()\n        step6()\n    return foo()",
    "target": "Break large functions into smaller, well-named helper functions."
  },
  {
    "func": "def excessive_comments():\n    # Adding two numbers\n    # Storing in result\n    # Returning the result\n    def add(x, y):\n        return x + y",
    "target": "Use self-explanatory code instead of excessive comments."
  },
  {
    "func": "def deep_function_call():\n    def step1():\n        return step2()\n    def step2():\n        return step3()\n    def step3():\n        return 42",
    "target": "Avoid deep function calls that obscure logic flow."
  },
  {
    "func": "def ambiguous_return_type():\n    if x > 0:\n        return 'Valid'\n    else:\n        return 1",
    "target": "Ensure consistent return types for better function predictability."
  },
  {
    "func": "def inconsistent_indentation():\n    if x > 0:\n        return True\n     else:\n        return False",
    "target": "Ensure consistent indentation to maintain readability and avoid errors."
  },
  {
    "func": "def overly_generic_function():\n    def process(data):\n        return data",
    "target": "Avoid overly generic function names. Use descriptive function names instead."
  },
  {
    "func": "def non_expressive_boolean():\n    def is_enabled():\n        return x == 1",
    "target": "Use explicit boolean values instead of comparisons with numbers."
  },
  {
    "func": "def redundant_parentheses():\n    return (x + y) * (z)",
    "target": "Avoid unnecessary parentheses to simplify expressions."
  },
  {
    "func": "def redundant_variable():\n    result = x + y\n    return result",
    "target": "Avoid redundant variables; return expressions directly when possible."
  },
  {
    "func": "def mixing_tabs_and_spaces():\n    if x > 0:\n        print('Valid')\n\tprint('Error')",
    "target": "Avoid mixing tabs and spaces for indentation."
  },
  {
    "func": "def missing_function_docstring():\n    def add(x, y):\n        return x + y",
    "target": "Provide a function docstring to describe its purpose."
  },
  {
    "func": "def inconsistent_variable_naming():\n    userName = 'John'\n    user_email = 'john@example.com'",
    "target": "Follow consistent naming conventions (e.g., use snake_case for variables)."
  },
  {
    "func": "def poorly_named_class():\n    class X:\n        pass",
    "target": "Use meaningful class names that describe their purpose."
  },
  {
    "func": "def too_many_function_arguments(a, b, c, d, e, f):\n    return a + b + c + d + e + f",
    "target": "Limit function parameters to a manageable number; use objects or dictionaries instead."
  },
  {
    "func": "def inefficient_imports():\n    import os, sys, math, random, time, json, logging",
    "target": "Avoid excessive imports. Only import what is necessary."
  },
  {
    "func": "def unnecessary_double_assignment():\n    x = 10\n    y = x",
    "target": "Avoid unnecessary variable assignments."
  },
  {
    "func": "def inconsistent_spacing():\n    a=10\n    b = 20\n    c= 30",
    "target": "Use consistent spacing around operators and variables for readability."
  },
  {
    "func": "def unclear_loop_variable():\n    for x in range(10):\n        process(x)",
    "target": "Use meaningful loop variable names (e.g., `index`, `item`) instead of `x`."
  }

]
